
marvin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0800a000  0800a000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e8  0800a10c  0800a10c  0000210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000594  20000000  080128f4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000cb0  20000594  08012e88  00010594  2**2
                  ALLOC
  4 ._usrstack    00000100  20001244  08013b38  00010594  2**0
                  ALLOC
  5 .comment      00000070  00000000  00000000  00010594  2**0
                  CONTENTS, READONLY
  6 .ARM.attributes 0000002f  00000000  00000000  00010604  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001320  00000000  00000000  00010638  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000f945  00000000  00000000  00011958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003231  00000000  00000000  0002129d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000f424  00000000  00000000  000244ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00003d3c  00000000  00000000  000338f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00056f0e  00000000  00000000  00037630  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006b3d  00000000  00000000  0008e53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010f0  00000000  00000000  00095080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00013d2c  00000000  00000000  00096170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800a10c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 800a10c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a10e:	f000 b804 	b.w	800a11a <LoopCopyDataInit>

0800a112 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a112:	4b0c      	ldr	r3, [pc, #48]	; (800a144 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
 800a114:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a116:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a118:	3104      	adds	r1, #4

0800a11a <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 800a11a:	480b      	ldr	r0, [pc, #44]	; (800a148 <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
 800a11e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a120:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a122:	f4ff aff6 	bcc.w	800a112 <CopyDataInit>
	ldr	r2, =_sbss
 800a126:	4a0a      	ldr	r2, [pc, #40]	; (800a150 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
 800a128:	f000 b803 	b.w	800a132 <LoopFillZerobss>

0800a12c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 800a12c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a12e:	f842 3b04 	str.w	r3, [r2], #4

0800a132 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <LoopFillZerobss+0x22>)
	cmp	r2, r3
 800a134:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a136:	f4ff aff9 	bcc.w	800a12c <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 800a13a:	f002 fc65 	bl	800ca08 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 800a13e:	f001 fb41 	bl	800b7c4 <main>
	bx	lr    
 800a142:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800a144:	080128f4 	.word	0x080128f4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 800a148:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a14c:	20000594 	.word	0x20000594
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800a150:	20000594 	.word	0x20000594
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
 800a154:	20001244 	.word	0x20001244

0800a158 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a158:	f7ff bffe 	b.w	800a158 <ADC1_2_IRQHandler>

0800a15c <setup>:
#include "application.h"

void setup()
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0

/*
	// Serial Test
	Serial.begin(9600);
*/
}
 800a160:	46bd      	mov	sp, r7
 800a162:	bc80      	pop	{r7}
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop

0800a168 <loop>:

void loop()
{
 800a168:	b480      	push	{r7}
 800a16a:	af00      	add	r7, sp, #0
	// Serial print test
	Serial.print("Hello ");
	Serial.println("Spark");
	delay(500);
*/
}
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bc80      	pop	{r7}
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop

0800a174 <SysCtlDelay>:
 * @brief  The functions delay for a number of MCU clk period
 * @param  The number of MCU clk period to delay for
 * @retval None
 */
inline void SysCtlDelay(unsigned long ulDelay)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
	/* Decrement nCount value */
	while (ulDelay != 0)
 800a17c:	e003      	b.n	800a186 <SysCtlDelay+0x12>
	{
		ulDelay--;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a184:	607b      	str	r3, [r7, #4]
 * @retval None
 */
inline void SysCtlDelay(unsigned long ulDelay)
{
	/* Decrement nCount value */
	while (ulDelay != 0)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1f8      	bne.n	800a17e <SysCtlDelay+0xa>
	{
		ulDelay--;
	}
}
 800a18c:	f107 070c 	add.w	r7, r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	bc80      	pop	{r7}
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop

0800a198 <SpiOpen>:

/****************************************************************************
 CC3000 SPI Protocol API
 ****************************************************************************/
void SpiOpen(gcSpiHandleRx pfRxHandler)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
	sSpiInformation.ulSpiState = eSPI_STATE_POWERUP;
 800a1a0:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	609a      	str	r2, [r3, #8]

	sSpiInformation.SPIRxHandler = pfRxHandler;
 800a1ae:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	601a      	str	r2, [r3, #0]
	sSpiInformation.pRxPacket = wlan_rx_buffer;
 800a1ba:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1c2:	f640 12d8 	movw	r2, #2520	; 0x9d8
 800a1c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a1ca:	611a      	str	r2, [r3, #16]
	sSpiInformation.usRxPacketLength = 0;
 800a1cc:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a1d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1d4:	f04f 0200 	mov.w	r2, #0
 800a1d8:	80da      	strh	r2, [r3, #6]
	sSpiInformation.pTxPacket = NULL;
 800a1da:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1e2:	f04f 0200 	mov.w	r2, #0
 800a1e6:	60da      	str	r2, [r3, #12]
	sSpiInformation.usTxPacketLength = 0;
 800a1e8:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1f0:	f04f 0200 	mov.w	r2, #0
 800a1f4:	809a      	strh	r2, [r3, #4]

	/* Enable Interrupt */
	tSLInformation.WlanInterruptEnable();
 800a1f6:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800a1fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1fe:	6a1b      	ldr	r3, [r3, #32]
 800a200:	4798      	blx	r3
}
 800a202:	f107 0708 	add.w	r7, r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop

0800a20c <SpiResumeSpi>:
	/* Disable Interrupt */
	tSLInformation.WlanInterruptDisable();
}

void SpiResumeSpi(void)
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 800a210:	b662      	cpsie	i
	//
	//Enable IRQ Interrupts
	//
	__enable_irq();
}
 800a212:	46bd      	mov	sp, r7
 800a214:	bc80      	pop	{r7}
 800a216:	4770      	bx	lr

0800a218 <SpiPauseSpi>:

void SpiPauseSpi(void)
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800a21c:	b672      	cpsid	i
	//
	//Disable IRQ Interrupts
	//
	__disable_irq();
}
 800a21e:	46bd      	mov	sp, r7
 800a220:	bc80      	pop	{r7}
 800a222:	4770      	bx	lr

0800a224 <SpiTriggerRxProcessing>:
 to process the received data
 * @param  None
 * @retval None
 */
void SpiTriggerRxProcessing(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
	SpiPauseSpi();
 800a228:	f7ff fff6 	bl	800a218 <SpiPauseSpi>

	//
	// Trigger Rx processing
	//
	DEASSERT_CS();
 800a22c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a230:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a238:	f005 fd86 	bl	800fd48 <GPIO_SetBits>
	sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
 800a23c:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a244:	f04f 0202 	mov.w	r2, #2
 800a248:	609a      	str	r2, [r3, #8]
	sSpiInformation.SPIRxHandler(sSpiInformation.pRxPacket + SPI_HEADER_SIZE);
 800a24a:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	f103 0305 	add.w	r3, r3, #5
 800a262:	4618      	mov	r0, r3
 800a264:	4790      	blx	r2
}
 800a266:	bd80      	pop	{r7, pc}

0800a268 <SpiReadData>:
 * @param  The pointer to data buffer
 * @param  This size of data
 * @retval None
 */
void SpiReadData(unsigned char *data, unsigned short size)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	807b      	strh	r3, [r7, #2]
	SpiReadWriteStringInt(TRUE, data, size);
 800a274:	887b      	ldrh	r3, [r7, #2]
 800a276:	f04f 0001 	mov.w	r0, #1
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	461a      	mov	r2, r3
 800a27e:	f000 f817 	bl	800a2b0 <SpiReadWriteStringInt>
}
 800a282:	f107 0708 	add.w	r7, r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop

0800a28c <SpiWriteAsync>:
 * @brief  This sends data over the SPI transport layer with
 * @param  None
 * @retval None
 */
void SpiWriteAsync(const unsigned char *data, unsigned short size)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	807b      	strh	r3, [r7, #2]
	//
	// The DMA TX/RX channel must be disabled.
	//
	SpiReadWriteString(FALSE, data, size);
 800a298:	887b      	ldrh	r3, [r7, #2]
 800a29a:	f04f 0000 	mov.w	r0, #0
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f000 f883 	bl	800a3ac <SpiReadWriteString>
}
 800a2a6:	f107 0708 	add.w	r7, r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop

0800a2b0 <SpiReadWriteStringInt>:
 * @param  ptrData Pointer to data to be written
 * @param  ulDataSize The size of the data to be written or read
 * @retval None
 */
void SpiReadWriteStringInt(uint32_t ulTrueFalse, const uint8_t *ptrData, uint32_t ulDataSize)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
	/* Delay for at lest 50 us at the start of every transfer */
	SysCtlDelay(FIFTY_US_DELAY);
 800a2bc:	f240 0368 	movw	r3, #104	; 0x68
 800a2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	f64d 6383 	movw	r3, #56963	; 0xde83
 800a2ca:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800a2ce:	fba3 1302 	umull	r1, r3, r3, r2
 800a2d2:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800a2d6:	f04f 0232 	mov.w	r2, #50	; 0x32
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff ff46 	bl	800a174 <SysCtlDelay>

	/* Disable DMA Channels */
	CC3000_SPI_DMA_Channels(DISABLE);
 800a2e8:	f04f 0000 	mov.w	r0, #0
 800a2ec:	f001 f848 	bl	800b380 <CC3000_SPI_DMA_Channels>

	if (ulTrueFalse == TRUE)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d113      	bne.n	800a31e <SpiReadWriteStringInt+0x6e>
	{
		CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) ptrData, ulDataSize);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	f04f 0001 	mov.w	r0, #1
 800a2fe:	68b9      	ldr	r1, [r7, #8]
 800a300:	461a      	mov	r2, r3
 800a302:	f000 ff7b 	bl	800b1fc <CC3000_DMA_Config>
		CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) tSpiReadHeader, ulDataSize);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f04f 0000 	mov.w	r0, #0
 800a30e:	f240 0100 	movw	r1, #0
 800a312:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a316:	461a      	mov	r2, r3
 800a318:	f000 ff70 	bl	800b1fc <CC3000_DMA_Config>
 800a31c:	e014      	b.n	800a348 <SpiReadWriteStringInt+0x98>
	}
	else
	{
		CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) sSpiInformation.pRxPacket, ulDataSize);
 800a31e:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a322:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a326:	691a      	ldr	r2, [r3, #16]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f04f 0001 	mov.w	r0, #1
 800a330:	4611      	mov	r1, r2
 800a332:	461a      	mov	r2, r3
 800a334:	f000 ff62 	bl	800b1fc <CC3000_DMA_Config>
		CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) ptrData, ulDataSize);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	f04f 0000 	mov.w	r0, #0
 800a340:	68b9      	ldr	r1, [r7, #8]
 800a342:	461a      	mov	r2, r3
 800a344:	f000 ff5a 	bl	800b1fc <CC3000_DMA_Config>
	}

	/* Enable DMA SPI Interrupt */
	DMA_ITConfig(CC3000_SPI_TX_DMA_CHANNEL, DMA_IT_TC, ENABLE);
 800a348:	f04f 0058 	mov.w	r0, #88	; 0x58
 800a34c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800a350:	f04f 0102 	mov.w	r1, #2
 800a354:	f04f 0201 	mov.w	r2, #1
 800a358:	f005 f996 	bl	800f688 <DMA_ITConfig>

	/* Enable DMA Channels */
	CC3000_SPI_DMA_Channels(ENABLE);
 800a35c:	f04f 0001 	mov.w	r0, #1
 800a360:	f001 f80e 	bl	800b380 <CC3000_SPI_DMA_Channels>

	/* Wait until DMA Transfer Completes */
	while(DMA_GetCurrDataCounter(CC3000_SPI_TX_DMA_CHANNEL))
 800a364:	bf00      	nop
 800a366:	f04f 0058 	mov.w	r0, #88	; 0x58
 800a36a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800a36e:	f005 f9a9 	bl	800f6c4 <DMA_GetCurrDataCounter>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1f6      	bne.n	800a366 <SpiReadWriteStringInt+0xb6>
	{
	}

	while(DMA_GetCurrDataCounter(CC3000_SPI_RX_DMA_CHANNEL))
 800a378:	bf00      	nop
 800a37a:	f04f 0044 	mov.w	r0, #68	; 0x44
 800a37e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800a382:	f005 f99f 	bl	800f6c4 <DMA_GetCurrDataCounter>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1f6      	bne.n	800a37a <SpiReadWriteStringInt+0xca>
	{
	}

	/* Loop until SPI busy */
	while (SPI_I2S_GetFlagStatus(CC3000_SPI, SPI_I2S_FLAG_BSY ) != RESET)
 800a38c:	bf00      	nop
 800a38e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800a392:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a396:	f04f 0180 	mov.w	r1, #128	; 0x80
 800a39a:	f005 fe5f 	bl	801005c <SPI_I2S_GetFlagStatus>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1f4      	bne.n	800a38e <SpiReadWriteStringInt+0xde>
	{
	}
}
 800a3a4:	f107 0710 	add.w	r7, r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <SpiReadWriteString>:
 * @param  ptrData Pointer to data to be written
 * @param  ulDataSize The size of the data to be written or read
 * @retval None
 */
void SpiReadWriteString(uint32_t ulTrueFalse, const uint8_t *ptrData, uint32_t ulDataSize)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
	SysCtlDelay(FIFTY_US_DELAY);
 800a3b8:	f240 0368 	movw	r3, #104	; 0x68
 800a3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	f64d 6383 	movw	r3, #56963	; 0xde83
 800a3c6:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800a3ca:	fba3 1302 	umull	r1, r3, r3, r2
 800a3ce:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800a3d2:	f04f 0232 	mov.w	r2, #50	; 0x32
 800a3d6:	fb02 f303 	mul.w	r3, r2, r3
 800a3da:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff fec8 	bl	800a174 <SysCtlDelay>

	/* Disable DMA RX Channels */
	CC3000_SPI_DMA_Channels(DISABLE);
 800a3e4:	f04f 0000 	mov.w	r0, #0
 800a3e8:	f000 ffca 	bl	800b380 <CC3000_SPI_DMA_Channels>

	/* Specify the DMA Read/Write buffer and size */
	if (ulTrueFalse == TRUE)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d113      	bne.n	800a41a <SpiReadWriteString+0x6e>
	{
		CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) ptrData, ulDataSize);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	f04f 0001 	mov.w	r0, #1
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	f000 fefd 	bl	800b1fc <CC3000_DMA_Config>
		CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) tSpiReadHeader, ulDataSize);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	b29b      	uxth	r3, r3
 800a406:	f04f 0000 	mov.w	r0, #0
 800a40a:	f240 0100 	movw	r1, #0
 800a40e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800a412:	461a      	mov	r2, r3
 800a414:	f000 fef2 	bl	800b1fc <CC3000_DMA_Config>
 800a418:	e014      	b.n	800a444 <SpiReadWriteString+0x98>
	}
	else
	{
		CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) sSpiInformation.pRxPacket, ulDataSize);
 800a41a:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a422:	691a      	ldr	r2, [r3, #16]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	b29b      	uxth	r3, r3
 800a428:	f04f 0001 	mov.w	r0, #1
 800a42c:	4611      	mov	r1, r2
 800a42e:	461a      	mov	r2, r3
 800a430:	f000 fee4 	bl	800b1fc <CC3000_DMA_Config>
		CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) ptrData, ulDataSize);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	b29b      	uxth	r3, r3
 800a438:	f04f 0000 	mov.w	r0, #0
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	461a      	mov	r2, r3
 800a440:	f000 fedc 	bl	800b1fc <CC3000_DMA_Config>
	}

	/* Enable DMA Channels */
	CC3000_SPI_DMA_Channels(ENABLE);
 800a444:	f04f 0001 	mov.w	r0, #1
 800a448:	f000 ff9a 	bl	800b380 <CC3000_SPI_DMA_Channels>

	/* Wait until DMA Transfer Completes */
	while(DMA_GetCurrDataCounter(CC3000_SPI_TX_DMA_CHANNEL))
 800a44c:	bf00      	nop
 800a44e:	f04f 0058 	mov.w	r0, #88	; 0x58
 800a452:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800a456:	f005 f935 	bl	800f6c4 <DMA_GetCurrDataCounter>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1f6      	bne.n	800a44e <SpiReadWriteString+0xa2>
	{
	}

	while(DMA_GetCurrDataCounter(CC3000_SPI_RX_DMA_CHANNEL))
 800a460:	bf00      	nop
 800a462:	f04f 0044 	mov.w	r0, #68	; 0x44
 800a466:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800a46a:	f005 f92b 	bl	800f6c4 <DMA_GetCurrDataCounter>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1f6      	bne.n	800a462 <SpiReadWriteString+0xb6>
	{
	}

	/* Loop until SPI busy */
	while (SPI_I2S_GetFlagStatus(CC3000_SPI, SPI_I2S_FLAG_BSY ) != RESET)
 800a474:	bf00      	nop
 800a476:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800a47a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a47e:	f04f 0180 	mov.w	r1, #128	; 0x80
 800a482:	f005 fdeb 	bl	801005c <SPI_I2S_GetFlagStatus>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1f4      	bne.n	800a476 <SpiReadWriteString+0xca>
	{
	}
}
 800a48c:	f107 0710 	add.w	r7, r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <SpiFirstWrite>:
 * @brief  Sends header information to CC3000
 * @param  None
 * @retval None
 */
long SpiFirstWrite(unsigned char *ucBuf, unsigned short usLength)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	807b      	strh	r3, [r7, #2]
	//
	// workaround for first transaction
	//
	ASSERT_CS();
 800a4a0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a4a4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a4a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a4ac:	f005 fc5a 	bl	800fd64 <GPIO_ResetBits>

	//SPI writes first 4 bytes of data
	SpiReadWriteString(FALSE, ucBuf, 4);
 800a4b0:	f04f 0000 	mov.w	r0, #0
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	f04f 0204 	mov.w	r2, #4
 800a4ba:	f7ff ff77 	bl	800a3ac <SpiReadWriteString>
	//SPI writes next 4 bytes of data
	SpiReadWriteString(FALSE, ucBuf + 4, usLength - 4);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f103 0204 	add.w	r2, r3, #4
 800a4c4:	887b      	ldrh	r3, [r7, #2]
 800a4c6:	f1a3 0304 	sub.w	r3, r3, #4
 800a4ca:	f04f 0000 	mov.w	r0, #0
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	f7ff ff6b 	bl	800a3ac <SpiReadWriteString>

	// From this point on - operate in a regular way
	sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
 800a4d6:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a4de:	f04f 0202 	mov.w	r2, #2
 800a4e2:	609a      	str	r2, [r3, #8]

	DEASSERT_CS();
 800a4e4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a4e8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a4ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a4f0:	f005 fc2a 	bl	800fd48 <GPIO_SetBits>
	return (0);
 800a4f4:	f04f 0300 	mov.w	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f107 0708 	add.w	r7, r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop

0800a504 <SpiWrite>:
 * @param  pUserBuffer: pointer to data
 * @param usLength: length of data that will be sent to CC3000
 * @retval None
 */
long SpiWrite(unsigned char *pUserBuffer, unsigned short usLength)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	807b      	strh	r3, [r7, #2]
	unsigned char ucPad = 0;
 800a510:	f04f 0300 	mov.w	r3, #0
 800a514:	73fb      	strb	r3, [r7, #15]
	//
	// Figure out the total length of the packet in order to figure out if there is padding or not
	//
	if (!(usLength & 0x0001))
 800a516:	887b      	ldrh	r3, [r7, #2]
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <SpiWrite+0x24>
	{
		ucPad++;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	f103 0301 	add.w	r3, r3, #1
 800a526:	73fb      	strb	r3, [r7, #15]
	}

	pUserBuffer[0] = WRITE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f04f 0201 	mov.w	r2, #1
 800a52e:	701a      	strb	r2, [r3, #0]
	pUserBuffer[1] = HI(usLength + ucPad);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f103 0301 	add.w	r3, r3, #1
 800a536:	8879      	ldrh	r1, [r7, #2]
 800a538:	7bfa      	ldrb	r2, [r7, #15]
 800a53a:	188a      	adds	r2, r1, r2
 800a53c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800a540:	ea4f 2222 	mov.w	r2, r2, asr #8
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	701a      	strb	r2, [r3, #0]
	pUserBuffer[2] = LO(usLength + ucPad);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f103 0302 	add.w	r3, r3, #2
 800a54e:	887a      	ldrh	r2, [r7, #2]
 800a550:	b2d1      	uxtb	r1, r2
 800a552:	7bfa      	ldrb	r2, [r7, #15]
 800a554:	188a      	adds	r2, r1, r2
 800a556:	b2d2      	uxtb	r2, r2
 800a558:	701a      	strb	r2, [r3, #0]
	pUserBuffer[3] = 0;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f103 0303 	add.w	r3, r3, #3
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]
	pUserBuffer[4] = 0;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f103 0304 	add.w	r3, r3, #4
 800a56c:	f04f 0200 	mov.w	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]

	usLength += (SPI_HEADER_SIZE + ucPad);
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	b29a      	uxth	r2, r3
 800a576:	887b      	ldrh	r3, [r7, #2]
 800a578:	18d3      	adds	r3, r2, r3
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	f103 0305 	add.w	r3, r3, #5
 800a580:	807b      	strh	r3, [r7, #2]

	if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
 800a582:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a586:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d107      	bne.n	800a5a0 <SpiWrite+0x9c>
	{
		while (sSpiInformation.ulSpiState != eSPI_STATE_INITIALIZED)
 800a590:	bf00      	nop
 800a592:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d1f8      	bne.n	800a592 <SpiWrite+0x8e>
		{
		}
	}
	if (sSpiInformation.ulSpiState == eSPI_STATE_INITIALIZED)
 800a5a0:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d10d      	bne.n	800a5ca <SpiWrite+0xc6>
	{

		//
		// This is time for first TX/RX transactions over SPI: the IRQ is down - so need to send read buffer size command
		//
		SpiFirstWrite(pUserBuffer, usLength);
 800a5ae:	887b      	ldrh	r3, [r7, #2]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f7ff ff6e 	bl	800a494 <SpiFirstWrite>

		//
		// Due to the fact that we are currently implementing a blocking situation
		// here we will wait till end of transaction
		//
		while (eSPI_STATE_IDLE != sSpiInformation.ulSpiState)
 800a5b8:	bf00      	nop
 800a5ba:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d1f8      	bne.n	800a5ba <SpiWrite+0xb6>
 800a5c8:	e04a      	b.n	800a660 <SpiWrite+0x15c>

		//
		// We need to prevent here race that can occur in case 2 back to back packets are sent to the
		// device, so the state will move to IDLE and once again to not IDLE due to IRQ
		//
		while (sSpiInformation.ulSpiState != eSPI_STATE_IDLE)
 800a5ca:	bf00      	nop
 800a5cc:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d1f8      	bne.n	800a5cc <SpiWrite+0xc8>
		{
		}

		/* Loop until SPI busy */
		while (SPI_I2S_GetFlagStatus(CC3000_SPI, SPI_I2S_FLAG_BSY ) != RESET)
 800a5da:	bf00      	nop
 800a5dc:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800a5e0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a5e4:	f04f 0180 	mov.w	r1, #128	; 0x80
 800a5e8:	f005 fd38 	bl	801005c <SPI_I2S_GetFlagStatus>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1f4      	bne.n	800a5dc <SpiWrite+0xd8>
		{
		}

		//SysCtlDelay(9000000);

		while (!tSLInformation.ReadWlanInterruptPin())
 800a5f2:	bf00      	nop
 800a5f4:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800a5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	4798      	blx	r3
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0f6      	beq.n	800a5f4 <SpiWrite+0xf0>
		{
		}

		sSpiInformation.ulSpiState = eSPI_STATE_WRITE_IRQ;
 800a606:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a60e:	f04f 0203 	mov.w	r2, #3
 800a612:	609a      	str	r2, [r3, #8]
		sSpiInformation.pTxPacket = pUserBuffer;
 800a614:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a618:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	60da      	str	r2, [r3, #12]
		sSpiInformation.usTxPacketLength = usLength;
 800a620:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a628:	887a      	ldrh	r2, [r7, #2]
 800a62a:	809a      	strh	r2, [r3, #4]

		//
		// Assert the CS line and wait till IRQ line is active and then initialize write operation
		//
		ASSERT_CS();
 800a62c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a630:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a638:	f005 fb94 	bl	800fd64 <GPIO_ResetBits>

		//SysCtlDelay(90000);

		while (!tSLInformation.ReadWlanInterruptPin())
 800a63c:	bf00      	nop
 800a63e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800a642:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a646:	69db      	ldr	r3, [r3, #28]
 800a648:	4798      	blx	r3
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0f6      	beq.n	800a63e <SpiWrite+0x13a>

		//
		// Due to the fact that we are currently implementing a blocking situation
		// here we will wait till end of transaction
		//
		while (eSPI_STATE_IDLE != sSpiInformation.ulSpiState)
 800a650:	bf00      	nop
 800a652:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a656:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d1f8      	bne.n	800a652 <SpiWrite+0x14e>
		{
		}
	}
	return (0);
 800a660:	f04f 0300 	mov.w	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	f107 0710 	add.w	r7, r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop

0800a670 <SpiReadDataCont>:

 * @param  None
 * @retval None
 */
long SpiReadDataCont(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
	unsigned char *evnt_buff, type;

	//
	//determine what type of packet we have
	//
	evnt_buff = sSpiInformation.pRxPacket;
 800a676:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	60bb      	str	r3, [r7, #8]
	data_to_recv = 0;
 800a682:	f04f 0300 	mov.w	r3, #0
 800a686:	60fb      	str	r3, [r7, #12]
	STREAM_TO_UINT8((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_PACKET_TYPE_OFFSET, type);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f103 0305 	add.w	r3, r3, #5
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	71fb      	strb	r3, [r7, #7]

	switch (type)
 800a692:	79fb      	ldrb	r3, [r7, #7]
 800a694:	2b02      	cmp	r3, #2
 800a696:	d002      	beq.n	800a69e <SpiReadDataCont+0x2e>
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d03f      	beq.n	800a71c <SpiReadDataCont+0xac>
 800a69c:	e064      	b.n	800a768 <SpiReadDataCont+0xf8>
	{
		case HCI_TYPE_DATA:
		{
			STREAM_TO_UINT16((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_DATA_LENGTH_OFFSET, data_to_recv);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f103 0305 	add.w	r3, r3, #5
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f04f 0103 	mov.w	r1, #3
 800a6aa:	f005 fe97 	bl	80103dc <STREAM_TO_UINT16_f>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	60fb      	str	r3, [r7, #12]

			if (data_to_recv >= SPI_WINDOW_SIZE)
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	dd12      	ble.n	800a6e2 <SpiReadDataCont+0x72>
			{
				data_to_recv = eSPI_STATE_READ_FIRST_PORTION;
 800a6bc:	f04f 0307 	mov.w	r3, #7
 800a6c0:	60fb      	str	r3, [r7, #12]
				SpiReadData(evnt_buff + 10, SPI_WINDOW_SIZE);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f103 030a 	add.w	r3, r3, #10
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6ce:	f7ff fdcb 	bl	800a268 <SpiReadData>
				sSpiInformation.ulSpiState = eSPI_STATE_READ_FIRST_PORTION;
 800a6d2:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a6da:	f04f 0207 	mov.w	r2, #7
 800a6de:	609a      	str	r2, [r3, #8]
					SpiReadData(evnt_buff + 10, data_to_recv);
				}

				sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
			}
			break;
 800a6e0:	e042      	b.n	800a768 <SpiReadDataCont+0xf8>
			else
			{
				//
				// We need to read the rest of data..
				//
				if (!((HEADERS_SIZE_EVNT + data_to_recv) & 1))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d103      	bne.n	800a6f4 <SpiReadDataCont+0x84>
				{
					data_to_recv++;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f103 0301 	add.w	r3, r3, #1
 800a6f2:	60fb      	str	r3, [r7, #12]
				}

				if (data_to_recv)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d008      	beq.n	800a70c <SpiReadDataCont+0x9c>
				{
					SpiReadData(evnt_buff + 10, data_to_recv);
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	f103 020a 	add.w	r2, r3, #10
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	b29b      	uxth	r3, r3
 800a704:	4610      	mov	r0, r2
 800a706:	4619      	mov	r1, r3
 800a708:	f7ff fdae 	bl	800a268 <SpiReadData>
				}

				sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
 800a70c:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a710:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a714:	f04f 0208 	mov.w	r2, #8
 800a718:	609a      	str	r2, [r3, #8]
			}
			break;
 800a71a:	e025      	b.n	800a768 <SpiReadDataCont+0xf8>
		case HCI_TYPE_EVNT:
		{
			//
			// Calculate the rest length of the data
			//
			STREAM_TO_UINT8((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_EVENT_LENGTH_OFFSET, data_to_recv);
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f103 0308 	add.w	r3, r3, #8
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	60fb      	str	r3, [r7, #12]
			data_to_recv -= 1;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a72c:	60fb      	str	r3, [r7, #12]

			//
			// Add padding byte if needed
			//
			if ((HEADERS_SIZE_EVNT + data_to_recv) & 1)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <SpiReadDataCont+0xd0>
			{

				data_to_recv++;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f103 0301 	add.w	r3, r3, #1
 800a73e:	60fb      	str	r3, [r7, #12]
			}

			if (data_to_recv)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d008      	beq.n	800a758 <SpiReadDataCont+0xe8>
			{
				SpiReadData(evnt_buff + 10, data_to_recv);
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	f103 020a 	add.w	r2, r3, #10
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4610      	mov	r0, r2
 800a752:	4619      	mov	r1, r3
 800a754:	f7ff fd88 	bl	800a268 <SpiReadData>
			}

			sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
 800a758:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a760:	f04f 0208 	mov.w	r2, #8
 800a764:	609a      	str	r2, [r3, #8]
			break;
 800a766:	bf00      	nop
		}
	}

	return (data_to_recv);
 800a768:	68fb      	ldr	r3, [r7, #12]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	f107 0710 	add.w	r7, r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <SpiReadHeader>:

 * @param  None
 * @retval None
 */
void SpiReadHeader(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
	SpiReadWriteStringInt(TRUE, sSpiInformation.pRxPacket, 10);
 800a778:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f04f 0001 	mov.w	r0, #1
 800a786:	4619      	mov	r1, r3
 800a788:	f04f 020a 	mov.w	r2, #10
 800a78c:	f7ff fd90 	bl	800a2b0 <SpiReadWriteStringInt>
}
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop

0800a794 <SpiContReadOperation>:
 * @brief  Determine if all data was read if so end the data exchange
 * @param  None
 * @retval None
 */
void SpiContReadOperation(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
	//
	// The header was read - continue with  the payload read
	//
	if (!SpiReadDataCont())
 800a798:	f7ff ff6a 	bl	800a670 <SpiReadDataCont>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <SpiContReadOperation+0x12>
	{
		//
		// All the data was read - finalize handling by switching to teh task
		//	and calling from task Event Handler
		//
		SpiTriggerRxProcessing();
 800a7a2:	f7ff fd3f 	bl	800a224 <SpiTriggerRxProcessing>
	}
}
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <SPI_DMA_IntHandler>:
 transfer.
 * @param  None
 * @retval None
 */
void SPI_DMA_IntHandler(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
	unsigned long ucTxFinished, ucRxFinished;
	unsigned short data_to_recv;
	unsigned char *evnt_buff;

	evnt_buff = sSpiInformation.pRxPacket;
 800a7ae:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	60bb      	str	r3, [r7, #8]
	data_to_recv = 0;
 800a7ba:	f04f 0300 	mov.w	r3, #0
 800a7be:	81fb      	strh	r3, [r7, #14]

	ucTxFinished = DMA_GetFlagStatus(CC3000_SPI_TX_DMA_TCFLAG );
 800a7c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a7c4:	f004 ff8c 	bl	800f6e0 <DMA_GetFlagStatus>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	607b      	str	r3, [r7, #4]
	ucRxFinished = DMA_GetFlagStatus(CC3000_SPI_RX_DMA_TCFLAG );
 800a7cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a7d0:	f004 ff86 	bl	800f6e0 <DMA_GetFlagStatus>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	603b      	str	r3, [r7, #0]

	if (sSpiInformation.ulSpiState == eSPI_STATE_READ_IRQ)
 800a7d8:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	2b06      	cmp	r3, #6
 800a7e4:	d10e      	bne.n	800a804 <SPI_DMA_IntHandler+0x5c>
	{
		//
		// If one of DMA's still did not finished its operation - we need to stay
		// and wait till it will finish
		//
		if (ucTxFinished && ucRxFinished)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 80a4 	beq.w	800a936 <SPI_DMA_IntHandler+0x18e>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 80a0 	beq.w	800a936 <SPI_DMA_IntHandler+0x18e>
		{
			/* Clear SPI_DMA Interrupt Pending Flags */
			DMA_ClearFlag(CC3000_SPI_TX_DMA_TCFLAG | CC3000_SPI_RX_DMA_TCFLAG);
 800a7f6:	f44f 3008 	mov.w	r0, #139264	; 0x22000
 800a7fa:	f004 ffa1 	bl	800f740 <DMA_ClearFlag>

			SpiContReadOperation();
 800a7fe:	f7ff ffc9 	bl	800a794 <SpiContReadOperation>
 800a802:	e098      	b.n	800a936 <SPI_DMA_IntHandler+0x18e>
		}
	}
	else if (sSpiInformation.ulSpiState == eSPI_STATE_READ_FIRST_PORTION)
 800a804:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	2b07      	cmp	r3, #7
 800a810:	d132      	bne.n	800a878 <SPI_DMA_IntHandler+0xd0>
	{
		if (ucRxFinished)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 808e 	beq.w	800a936 <SPI_DMA_IntHandler+0x18e>
		{
			/* Clear SPI_DMA Interrupt Pending Flags */
			DMA_ClearFlag(CC3000_SPI_TX_DMA_TCFLAG | CC3000_SPI_RX_DMA_TCFLAG);
 800a81a:	f44f 3008 	mov.w	r0, #139264	; 0x22000
 800a81e:	f004 ff8f 	bl	800f740 <DMA_ClearFlag>

			STREAM_TO_UINT16((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_DATA_LENGTH_OFFSET, data_to_recv);
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f103 0305 	add.w	r3, r3, #5
 800a828:	4618      	mov	r0, r3
 800a82a:	f04f 0103 	mov.w	r1, #3
 800a82e:	f005 fdd5 	bl	80103dc <STREAM_TO_UINT16_f>
 800a832:	4603      	mov	r3, r0
 800a834:	81fb      	strh	r3, [r7, #14]
			// Read the last portion of data
			//
			//
			// We need to read the rest of data..
			//
			data_to_recv -= SPI_WINDOW_SIZE;
 800a836:	89fb      	ldrh	r3, [r7, #14]
 800a838:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a83c:	81fb      	strh	r3, [r7, #14]

			if (!((HEADERS_SIZE_EVNT + data_to_recv) & 1))
 800a83e:	89fb      	ldrh	r3, [r7, #14]
 800a840:	f003 0301 	and.w	r3, r3, #1
 800a844:	2b00      	cmp	r3, #0
 800a846:	d103      	bne.n	800a850 <SPI_DMA_IntHandler+0xa8>
			{
				data_to_recv++;
 800a848:	89fb      	ldrh	r3, [r7, #14]
 800a84a:	f103 0301 	add.w	r3, r3, #1
 800a84e:	81fb      	strh	r3, [r7, #14]
			}

			SpiReadData(sSpiInformation.pRxPacket + 10 + SPI_WINDOW_SIZE, data_to_recv);
 800a850:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	f203 420a 	addw	r2, r3, #1034	; 0x40a
 800a85e:	89fb      	ldrh	r3, [r7, #14]
 800a860:	4610      	mov	r0, r2
 800a862:	4619      	mov	r1, r3
 800a864:	f7ff fd00 	bl	800a268 <SpiReadData>

			sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
 800a868:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a870:	f04f 0208 	mov.w	r2, #8
 800a874:	609a      	str	r2, [r3, #8]
 800a876:	e05e      	b.n	800a936 <SPI_DMA_IntHandler+0x18e>
		}
	}
	else if (sSpiInformation.ulSpiState == eSPI_STATE_READ_EOT)
 800a878:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	2b08      	cmp	r3, #8
 800a884:	d109      	bne.n	800a89a <SPI_DMA_IntHandler+0xf2>
	{
		//
		// All the data was read - finalize handling by switching to the task
		// and calling from task Event Handler
		//
		if (ucRxFinished)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d054      	beq.n	800a936 <SPI_DMA_IntHandler+0x18e>
		{
			/* Clear SPI_DMA Interrupt Pending Flags */
			DMA_ClearFlag(CC3000_SPI_TX_DMA_TCFLAG | CC3000_SPI_RX_DMA_TCFLAG);
 800a88c:	f44f 3008 	mov.w	r0, #139264	; 0x22000
 800a890:	f004 ff56 	bl	800f740 <DMA_ClearFlag>

			SpiTriggerRxProcessing();
 800a894:	f7ff fcc6 	bl	800a224 <SpiTriggerRxProcessing>
 800a898:	e04d      	b.n	800a936 <SPI_DMA_IntHandler+0x18e>
		}
	}
	else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_EOT)
 800a89a:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	2b05      	cmp	r3, #5
 800a8a6:	d122      	bne.n	800a8ee <SPI_DMA_IntHandler+0x146>
	{
		if (ucTxFinished)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d043      	beq.n	800a936 <SPI_DMA_IntHandler+0x18e>
		{
			/* Loop until SPI busy */
			while (SPI_I2S_GetFlagStatus(CC3000_SPI, SPI_I2S_FLAG_BSY ) != RESET)
 800a8ae:	bf00      	nop
 800a8b0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800a8b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800a8b8:	f04f 0180 	mov.w	r1, #128	; 0x80
 800a8bc:	f005 fbce 	bl	801005c <SPI_I2S_GetFlagStatus>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1f4      	bne.n	800a8b0 <SPI_DMA_IntHandler+0x108>
			{
			}

			/* Clear SPI_DMA Interrupt Pending Flags */
			DMA_ClearFlag(CC3000_SPI_TX_DMA_TCFLAG | CC3000_SPI_RX_DMA_TCFLAG);
 800a8c6:	f44f 3008 	mov.w	r0, #139264	; 0x22000
 800a8ca:	f004 ff39 	bl	800f740 <DMA_ClearFlag>

			DEASSERT_CS();
 800a8ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a8d2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a8d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8da:	f005 fa35 	bl	800fd48 <GPIO_SetBits>

			sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
 800a8de:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a8e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8e6:	f04f 0202 	mov.w	r2, #2
 800a8ea:	609a      	str	r2, [r3, #8]
 800a8ec:	e023      	b.n	800a936 <SPI_DMA_IntHandler+0x18e>
		}
	}
	else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_FIRST_PORTION)
 800a8ee:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d11c      	bne.n	800a936 <SPI_DMA_IntHandler+0x18e>
	{
		if (ucTxFinished)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d019      	beq.n	800a936 <SPI_DMA_IntHandler+0x18e>
		{
			sSpiInformation.ulSpiState = eSPI_STATE_WRITE_EOT;
 800a902:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a90a:	f04f 0205 	mov.w	r2, #5
 800a90e:	609a      	str	r2, [r3, #8]
			SpiWriteAsync(sSpiInformation.pTxPacket + SPI_WINDOW_SIZE, sSpiInformation.usTxPacketLength - SPI_WINDOW_SIZE);
 800a910:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800a91e:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a926:	889b      	ldrh	r3, [r3, #4]
 800a928:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	4610      	mov	r0, r2
 800a930:	4619      	mov	r1, r3
 800a932:	f7ff fcab 	bl	800a28c <SpiWriteAsync>
		}
	}
}
 800a936:	f107 0710 	add.w	r7, r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop

0800a940 <SPI_EXTI_IntHandler>:
 IRQ line low.
 * @param  None
 * @retval None
 */
void SPI_EXTI_IntHandler(void)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
	//Flag is cleared in first ISR handler
	if (!tSLInformation.ReadWlanInterruptPin())
 800a944:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800a948:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	4798      	blx	r3
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d15f      	bne.n	800aa16 <SPI_EXTI_IntHandler+0xd6>
	{
		if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
 800a956:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d107      	bne.n	800a974 <SPI_EXTI_IntHandler+0x34>
		{
			/* This means IRQ line was low call a callback of HCI Layer to inform on event */
			sSpiInformation.ulSpiState = eSPI_STATE_INITIALIZED;
 800a964:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a968:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a96c:	f04f 0201 	mov.w	r2, #1
 800a970:	609a      	str	r2, [r3, #8]
 800a972:	e050      	b.n	800aa16 <SPI_EXTI_IntHandler+0xd6>
		}
		else if (sSpiInformation.ulSpiState == eSPI_STATE_IDLE)
 800a974:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a978:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d111      	bne.n	800a9a6 <SPI_EXTI_IntHandler+0x66>
		{
			sSpiInformation.ulSpiState = eSPI_STATE_READ_IRQ;
 800a982:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a986:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a98a:	f04f 0206 	mov.w	r2, #6
 800a98e:	609a      	str	r2, [r3, #8]

			/* IRQ line goes down - we are starting reception */

			ASSERT_CS();
 800a990:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a994:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800a998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a99c:	f005 f9e2 	bl	800fd64 <GPIO_ResetBits>

			//
			// Wait for TX/RX Complete which will come as DMA interrupt
			//
			SpiReadHeader();
 800a9a0:	f7ff fee8 	bl	800a774 <SpiReadHeader>
 800a9a4:	e037      	b.n	800aa16 <SPI_EXTI_IntHandler+0xd6>
		}
		else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
 800a9a6:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	d130      	bne.n	800aa16 <SPI_EXTI_IntHandler+0xd6>
		{
			if (sSpiInformation.usTxPacketLength <= SPI_WINDOW_SIZE)
 800a9b4:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9bc:	889b      	ldrh	r3, [r3, #4]
 800a9be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9c2:	d817      	bhi.n	800a9f4 <SPI_EXTI_IntHandler+0xb4>
			{
				//
				// Send the data over SPI and wait for complete interrupt
				//
				sSpiInformation.ulSpiState = eSPI_STATE_WRITE_EOT;
 800a9c4:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a9c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9cc:	f04f 0205 	mov.w	r2, #5
 800a9d0:	609a      	str	r2, [r3, #8]

				SpiReadWriteStringInt(FALSE, sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
 800a9d2:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9da:	68da      	ldr	r2, [r3, #12]
 800a9dc:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9e4:	889b      	ldrh	r3, [r3, #4]
 800a9e6:	f04f 0000 	mov.w	r0, #0
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	f7ff fc5f 	bl	800a2b0 <SpiReadWriteStringInt>
 800a9f2:	e010      	b.n	800aa16 <SPI_EXTI_IntHandler+0xd6>
			else
			{
				//
				// Send the data over SPI and wait for complete interrupt to transfer the rest
				//
				sSpiInformation.ulSpiState = eSPI_STATE_WRITE_FIRST_PORTION;
 800a9f4:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800a9f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a9fc:	f04f 0204 	mov.w	r2, #4
 800aa00:	609a      	str	r2, [r3, #8]

				//
				// Start the DMA and change state
				//
				SpiWriteAsync(sSpiInformation.pTxPacket, SPI_WINDOW_SIZE);
 800aa02:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800aa06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aa12:	f7ff fc3b 	bl	800a28c <SpiWriteAsync>
			}
		}
	}
}
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 800aa1c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800aa20:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa2a:	ea4f 2313 	mov.w	r3, r3, lsr #8
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop

0800aa38 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	6039      	str	r1, [r7, #0]
 800aa42:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800aa44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	da10      	bge.n	800aa6e <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800aa4c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800aa50:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800aa54:	79fa      	ldrb	r2, [r7, #7]
 800aa56:	f002 020f 	and.w	r2, r2, #15
 800aa5a:	f1a2 0104 	sub.w	r1, r2, #4
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	b2d2      	uxtb	r2, r2
 800aa62:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800aa66:	b2d2      	uxtb	r2, r2
 800aa68:	185b      	adds	r3, r3, r1
 800aa6a:	761a      	strb	r2, [r3, #24]
 800aa6c:	e00d      	b.n	800aa8a <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800aa6e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800aa72:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800aa76:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	b2d2      	uxtb	r2, r2
 800aa7e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800aa82:	b2d2      	uxtb	r2, r2
 800aa84:	185b      	adds	r3, r3, r1
 800aa86:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aa8a:	f107 070c 	add.w	r7, r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bc80      	pop	{r7}
 800aa92:	4770      	bx	lr

0800aa94 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b089      	sub	sp, #36	; 0x24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f003 0307 	and.w	r3, r3, #7
 800aaa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	f1c3 0307 	rsb	r3, r3, #7
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	bf28      	it	cs
 800aab2:	2304      	movcs	r3, #4
 800aab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	f103 0304 	add.w	r3, r3, #4
 800aabc:	2b06      	cmp	r3, #6
 800aabe:	d903      	bls.n	800aac8 <NVIC_EncodePriority+0x34>
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	f1a3 0303 	sub.w	r3, r3, #3
 800aac6:	e001      	b.n	800aacc <NVIC_EncodePriority+0x38>
 800aac8:	f04f 0300 	mov.w	r3, #0
 800aacc:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	f04f 0201 	mov.w	r2, #1
 800aad4:	fa02 f303 	lsl.w	r3, r2, r3
 800aad8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aadc:	461a      	mov	r2, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	401a      	ands	r2, r3
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	fa02 f203 	lsl.w	r2, r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f04f 0101 	mov.w	r1, #1
 800aaee:	fa01 f303 	lsl.w	r3, r1, r3
 800aaf2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 800aafc:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bc80      	pop	{r7}
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop

0800ab0c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d902      	bls.n	800ab24 <SysTick_Config+0x18>
 800ab1e:	f04f 0301 	mov.w	r3, #1
 800ab22:	e01f      	b.n	800ab64 <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800ab24:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ab28:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ab32:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800ab36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab3c:	f04f 010f 	mov.w	r1, #15
 800ab40:	f7ff ff7a 	bl	800aa38 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800ab44:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ab48:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ab4c:	f04f 0200 	mov.w	r2, #0
 800ab50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ab52:	f24e 0310 	movw	r3, #57360	; 0xe010
 800ab56:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ab5a:	f04f 0207 	mov.w	r2, #7
 800ab5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800ab60:	f04f 0300 	mov.w	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	f107 0708 	add.w	r7, r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop

0800ab70 <Set_System>:
 * @brief  Configures Main system clocks & power.
 * @param  None
 * @retval None
 */
void Set_System(void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
	 To reconfigure the default setting of SystemInit() function, refer to
	 system_stm32f10x.c file
	 */

	/* Enable PWR and BKP clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 800ab76:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 800ab7a:	f04f 0101 	mov.w	r1, #1
 800ab7e:	f005 f9bb 	bl	800fef8 <RCC_APB1PeriphClockCmd>

	/* Enable write access to Backup domain */
	PWR_BackupAccessCmd(ENABLE);
 800ab82:	f04f 0001 	mov.w	r0, #1
 800ab86:	f005 f953 	bl	800fe30 <PWR_BackupAccessCmd>

	/* NVIC configuration */
	NVIC_Configuration();
 800ab8a:	f000 f859 	bl	800ac40 <NVIC_Configuration>

    /* Enable AFIO clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 800ab8e:	f04f 0001 	mov.w	r0, #1
 800ab92:	f04f 0101 	mov.w	r1, #1
 800ab96:	f005 f985 	bl	800fea4 <RCC_APB2PeriphClockCmd>
    GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
#endif

	/* Configure DIOs */
	int Dx;
	for(Dx = 0; Dx < Dn; ++Dx)
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	607b      	str	r3, [r7, #4]
 800aba0:	e008      	b.n	800abb4 <Set_System+0x44>
	{
		DIO_Init(Dx);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 f858 	bl	800ac5c <DIO_Init>
    GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
#endif

	/* Configure DIOs */
	int Dx;
	for(Dx = 0; Dx < Dn; ++Dx)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f103 0301 	add.w	r3, r3, #1
 800abb2:	607b      	str	r3, [r7, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b07      	cmp	r3, #7
 800abb8:	ddf3      	ble.n	800aba2 <Set_System+0x32>
		DIO_Init(Dx);
	}

	/* Configure the LEDs and set the default states */
	int LEDx;
	for(LEDx = 0; LEDx < LEDn; ++LEDx)
 800abba:	f04f 0300 	mov.w	r3, #0
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	e00d      	b.n	800abde <Set_System+0x6e>
	{
	    LED_Init(LEDx);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 f8ba 	bl	800ad40 <LED_Init>
	    LED_Off(LEDx);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 f8ff 	bl	800add4 <LED_Off>
		DIO_Init(Dx);
	}

	/* Configure the LEDs and set the default states */
	int LEDx;
	for(LEDx = 0; LEDx < LEDn; ++LEDx)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	f103 0301 	add.w	r3, r3, #1
 800abdc:	603b      	str	r3, [r7, #0]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	ddee      	ble.n	800abc2 <Set_System+0x52>
	    LED_Init(LEDx);
	    LED_Off(LEDx);
	}

    /* Configure the Button */
    BUTTON_Init(BUTTON1, BUTTON_MODE_EXTI);
 800abe4:	f04f 0000 	mov.w	r0, #0
 800abe8:	f04f 0101 	mov.w	r1, #1
 800abec:	f000 f92e 	bl	800ae4c <BUTTON_Init>

	/* Setup SysTick Timer for 1 msec interrupts */
	if (SysTick_Config(SystemCoreClock / 1000))
 800abf0:	f240 0368 	movw	r3, #104	; 0x68
 800abf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800abfe:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800ac02:	fba3 1302 	umull	r1, r3, r3, r2
 800ac06:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff ff7e 	bl	800ab0c <SysTick_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d000      	beq.n	800ac18 <Set_System+0xa8>
	{
		/* Capture error */
		while (1)
		{
		}
 800ac16:	e7fe      	b.n	800ac16 <Set_System+0xa6>
	}
	/* Configure the SysTick Handler Priority: Preemption priority and subpriority */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0x03, 0x00));
 800ac18:	f7ff fefe 	bl	800aa18 <NVIC_GetPriorityGrouping>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f04f 0103 	mov.w	r1, #3
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	f7ff ff34 	bl	800aa94 <NVIC_EncodePriority>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac32:	4619      	mov	r1, r3
 800ac34:	f7ff ff00 	bl	800aa38 <NVIC_SetPriority>
}
 800ac38:	f107 0708 	add.w	r7, r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <NVIC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NVIC_Configuration(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
#ifdef DFU_BUILD_ENABLE
	/* Set the Vector Table(VT) base location at 0xA000 */
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0xA000);
 800ac44:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800ac48:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800ac4c:	f004 fb9a 	bl	800f384 <NVIC_SetVectorTable>
	/* 4 bits for pre-emption priority(0-15 PreemptionPriority) and 0 bits for subpriority(0 SubPriority) */
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);

	/* Configure the Priority Group to 2 bits */
	/* 2 bits for pre-emption priority(0-3 PreemptionPriority) and 2 bits for subpriority(0-3 SubPriority) */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 800ac50:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800ac54:	f004 fb0e 	bl	800f274 <NVIC_PriorityGroupConfig>
}
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop

0800ac5c <DIO_Init>:
  * @brief  Configures Dx GPIO.
  * @param  Dx: Specifies the Dx to be configured.
  * @retval None
  */
void DIO_Init(DIO_TypeDef Dx)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	4603      	mov	r3, r0
 800ac64:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable the GPIO_Dx Clock */
    RCC_APB2PeriphClockCmd(DIO_CLK[Dx], ENABLE);
 800ac66:	79fa      	ldrb	r2, [r7, #7]
 800ac68:	f242 739c 	movw	r3, #10140	; 0x279c
 800ac6c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ac70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f04f 0101 	mov.w	r1, #1
 800ac7a:	f005 f913 	bl	800fea4 <RCC_APB2PeriphClockCmd>

    /* Configure the GPIO_Dx pin */
    GPIO_InitStructure.GPIO_Pin = DIO_PIN[Dx];
 800ac7e:	79fa      	ldrb	r2, [r7, #7]
 800ac80:	f242 738c 	movw	r3, #10124	; 0x278c
 800ac84:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ac88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ac8c:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800ac8e:	f04f 0310 	mov.w	r3, #16
 800ac92:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800ac94:	f04f 0303 	mov.w	r3, #3
 800ac98:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(DIO_PORT[Dx], &GPIO_InitStructure);
 800ac9a:	79fa      	ldrb	r2, [r7, #7]
 800ac9c:	f240 0308 	movw	r3, #8
 800aca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aca4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aca8:	f107 030c 	add.w	r3, r7, #12
 800acac:	4610      	mov	r0, r2
 800acae:	4619      	mov	r1, r3
 800acb0:	f004 ff54 	bl	800fb5c <GPIO_Init>

    /* Set to Off State */
    DIO_SetState(Dx, LOW);
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f04f 0100 	mov.w	r1, #0
 800acbc:	f000 f804 	bl	800acc8 <DIO_SetState>
}
 800acc0:	f107 0710 	add.w	r7, r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <DIO_SetState>:
  * @param  Dx: Specifies the Dx.
  * @param  State: Set On or Off.
  * @retval None
  */
DIO_Error_TypeDef DIO_SetState(DIO_TypeDef Dx, DIO_State_TypeDef State)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	71fa      	strb	r2, [r7, #7]
 800acd4:	71bb      	strb	r3, [r7, #6]
	if(Dx < 0 || Dx > Dn)
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	2b08      	cmp	r3, #8
 800acda:	d902      	bls.n	800ace2 <DIO_SetState+0x1a>
		return FAIL;
 800acdc:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800ace0:	e026      	b.n	800ad30 <DIO_SetState+0x68>
	else if(State == HIGH)
 800ace2:	79bb      	ldrb	r3, [r7, #6]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d10f      	bne.n	800ad08 <DIO_SetState+0x40>
		DIO_PORT[Dx]->BSRR = DIO_PIN[Dx];
 800ace8:	79fa      	ldrb	r2, [r7, #7]
 800acea:	f240 0308 	movw	r3, #8
 800acee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acf6:	79f9      	ldrb	r1, [r7, #7]
 800acf8:	f242 738c 	movw	r3, #10124	; 0x278c
 800acfc:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ad00:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800ad04:	6113      	str	r3, [r2, #16]
 800ad06:	e011      	b.n	800ad2c <DIO_SetState+0x64>
	else if(State == LOW)
 800ad08:	79bb      	ldrb	r3, [r7, #6]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10e      	bne.n	800ad2c <DIO_SetState+0x64>
		DIO_PORT[Dx]->BRR = DIO_PIN[Dx];
 800ad0e:	79fa      	ldrb	r2, [r7, #7]
 800ad10:	f240 0308 	movw	r3, #8
 800ad14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad1c:	79f9      	ldrb	r1, [r7, #7]
 800ad1e:	f242 738c 	movw	r3, #10124	; 0x278c
 800ad22:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ad26:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800ad2a:	6153      	str	r3, [r2, #20]

	return OK;
 800ad2c:	f04f 0300 	mov.w	r3, #0
 800ad30:	b25b      	sxtb	r3, r3
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	f107 070c 	add.w	r7, r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bc80      	pop	{r7}
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop

0800ad40 <LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_Init(Led_TypeDef Led)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable the GPIO_LED Clock */
    RCC_APB2PeriphClockCmd(LED_CLK[Led], ENABLE);
 800ad4a:	79fa      	ldrb	r2, [r7, #7]
 800ad4c:	f242 73c0 	movw	r3, #10176	; 0x27c0
 800ad50:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ad54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f04f 0101 	mov.w	r1, #1
 800ad5e:	f005 f8a1 	bl	800fea4 <RCC_APB2PeriphClockCmd>

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
 800ad62:	79fa      	ldrb	r2, [r7, #7]
 800ad64:	f242 73bc 	movw	r3, #10172	; 0x27bc
 800ad68:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ad6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ad70:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800ad72:	f04f 0310 	mov.w	r3, #16
 800ad76:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800ad78:	f04f 0303 	mov.w	r3, #3
 800ad7c:	73bb      	strb	r3, [r7, #14]

    GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 800ad7e:	79fa      	ldrb	r2, [r7, #7]
 800ad80:	f240 0328 	movw	r3, #40	; 0x28
 800ad84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad8c:	f107 030c 	add.w	r3, r7, #12
 800ad90:	4610      	mov	r0, r2
 800ad92:	4619      	mov	r1, r3
 800ad94:	f004 fee2 	bl	800fb5c <GPIO_Init>
}
 800ad98:	f107 0710 	add.w	r7, r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_On(Led_TypeDef Led)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	71fb      	strb	r3, [r7, #7]
    LED_PORT[Led]->BSRR = LED_PIN[Led];
 800adaa:	79fa      	ldrb	r2, [r7, #7]
 800adac:	f240 0328 	movw	r3, #40	; 0x28
 800adb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800adb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adb8:	79f9      	ldrb	r1, [r7, #7]
 800adba:	f242 73bc 	movw	r3, #10172	; 0x27bc
 800adbe:	f6c0 0301 	movt	r3, #2049	; 0x801
 800adc2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800adc6:	6113      	str	r3, [r2, #16]
}
 800adc8:	f107 070c 	add.w	r7, r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	bc80      	pop	{r7}
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop

0800add4 <LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_Off(Led_TypeDef Led)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	4603      	mov	r3, r0
 800addc:	71fb      	strb	r3, [r7, #7]
    LED_PORT[Led]->BRR = LED_PIN[Led];
 800adde:	79fa      	ldrb	r2, [r7, #7]
 800ade0:	f240 0328 	movw	r3, #40	; 0x28
 800ade4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ade8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adec:	79f9      	ldrb	r1, [r7, #7]
 800adee:	f242 73bc 	movw	r3, #10172	; 0x27bc
 800adf2:	f6c0 0301 	movt	r3, #2049	; 0x801
 800adf6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800adfa:	6153      	str	r3, [r2, #20]
}
 800adfc:	f107 070c 	add.w	r7, r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bc80      	pop	{r7}
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop

0800ae08 <LED_Toggle>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_Toggle(Led_TypeDef Led)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	71fb      	strb	r3, [r7, #7]
    LED_PORT[Led]->ODR ^= LED_PIN[Led];
 800ae12:	79fa      	ldrb	r2, [r7, #7]
 800ae14:	f240 0328 	movw	r3, #40	; 0x28
 800ae18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae20:	79f9      	ldrb	r1, [r7, #7]
 800ae22:	f240 0328 	movw	r3, #40	; 0x28
 800ae26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae2e:	68d9      	ldr	r1, [r3, #12]
 800ae30:	79f8      	ldrb	r0, [r7, #7]
 800ae32:	f242 73bc 	movw	r3, #10172	; 0x27bc
 800ae36:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ae3a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800ae3e:	404b      	eors	r3, r1
 800ae40:	60d3      	str	r3, [r2, #12]
}
 800ae42:	f107 070c 	add.w	r7, r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bc80      	pop	{r7}
 800ae4a:	4770      	bx	lr

0800ae4c <BUTTON_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability
  * @retval None
  */
void BUTTON_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	71fa      	strb	r2, [r7, #7]
 800ae58:	71bb      	strb	r3, [r7, #6]
    GPIO_InitTypeDef GPIO_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

    /* Enable the BUTTON Clock */
    RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 800ae5a:	79fa      	ldrb	r2, [r7, #7]
 800ae5c:	f242 73cc 	movw	r3, #10188	; 0x27cc
 800ae60:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ae64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae68:	f043 0301 	orr.w	r3, r3, #1
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f04f 0101 	mov.w	r1, #1
 800ae72:	f005 f817 	bl	800fea4 <RCC_APB2PeriphClockCmd>

    /* Configure Button pin as input floating */
    GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 800ae76:	79fa      	ldrb	r2, [r7, #7]
 800ae78:	f240 0338 	movw	r3, #56	; 0x38
 800ae7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae80:	5c9b      	ldrb	r3, [r3, r2]
 800ae82:	76fb      	strb	r3, [r7, #27]
    GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800ae84:	79fa      	ldrb	r2, [r7, #7]
 800ae86:	f242 73c8 	movw	r3, #10184	; 0x27c8
 800ae8a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ae8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ae92:	833b      	strh	r3, [r7, #24]
    GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800ae94:	79fa      	ldrb	r2, [r7, #7]
 800ae96:	f240 0330 	movw	r3, #48	; 0x30
 800ae9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aea2:	f107 0318 	add.w	r3, r7, #24
 800aea6:	4610      	mov	r0, r2
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f004 fe57 	bl	800fb5c <GPIO_Init>

    if (Button_Mode == BUTTON_MODE_EXTI)
 800aeae:	79bb      	ldrb	r3, [r7, #6]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	f040 8082 	bne.w	800afba <BUTTON_Init+0x16e>
    {
        /* Enable TIM clock */
    	DEBOUNCE_TIMER_CLK_CMD(DEBOUNCE_TIMER_CLK, ENABLE);
 800aeb6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aeba:	f04f 0101 	mov.w	r1, #1
 800aebe:	f004 fff1 	bl	800fea4 <RCC_APB2PeriphClockCmd>

        /* TIM Update Frequency = 72000000/7200/100 = 100Hz = 10ms */
        /* TIM_Prescaler: 7199 */
        /* TIM_Autoreload: 99 -> 100Hz = 10ms */
        uint16_t TIM_Prescaler = (SystemCoreClock / 10000) - 1;
 800aec2:	f240 0368 	movw	r3, #104	; 0x68
 800aec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	f241 7359 	movw	r3, #5977	; 0x1759
 800aed0:	f2cd 13b7 	movt	r3, #53687	; 0xd1b7
 800aed4:	fba3 1302 	umull	r1, r3, r3, r2
 800aed8:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800aedc:	b29b      	uxth	r3, r3
 800aede:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aee2:	83fb      	strh	r3, [r7, #30]
        uint16_t TIM_Autoreload = (10000 / DEBOUNCE_FREQ) - 1;
 800aee4:	f04f 0363 	mov.w	r3, #99	; 0x63
 800aee8:	83bb      	strh	r3, [r7, #28]

        /* Time Base Configuration */
    	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800aeea:	f107 0308 	add.w	r3, r7, #8
 800aeee:	4618      	mov	r0, r3
 800aef0:	f005 f962 	bl	80101b8 <TIM_TimeBaseStructInit>
    	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
 800aef4:	8bfb      	ldrh	r3, [r7, #30]
 800aef6:	813b      	strh	r3, [r7, #8]
    	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
 800aef8:	8bbb      	ldrh	r3, [r7, #28]
 800aefa:	81bb      	strh	r3, [r7, #12]
    	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 800aefc:	f04f 0300 	mov.w	r3, #0
 800af00:	81fb      	strh	r3, [r7, #14]
    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800af02:	f04f 0300 	mov.w	r3, #0
 800af06:	817b      	strh	r3, [r7, #10]
    	TIM_TimeBaseInit(DEBOUNCE_TIMER, &TIM_TimeBaseStructure);
 800af08:	f107 0308 	add.w	r3, r7, #8
 800af0c:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800af10:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800af14:	4619      	mov	r1, r3
 800af16:	f005 f8c1 	bl	801009c <TIM_TimeBaseInit>
        /* TIM Configuration */
        //TIM_PrescalerConfig(DEBOUNCE_TIMER, TIM_Prescaler, TIM_PSCReloadMode_Update);
        //TIM_SetAutoreload(DEBOUNCE_TIMER, TIM_Autoreload);

        /* One Pulse Mode selection */
        TIM_SelectOnePulseMode(DEBOUNCE_TIMER, TIM_OPMode_Single);
 800af1a:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800af1e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800af22:	f04f 0108 	mov.w	r1, #8
 800af26:	f005 f9a9 	bl	801027c <TIM_SelectOnePulseMode>

        TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);
 800af2a:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800af2e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800af32:	f04f 0101 	mov.w	r1, #1
 800af36:	f005 f9ed 	bl	8010314 <TIM_ClearITPendingBit>

        /* TIM IT Enable */
        TIM_ITConfig(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG, ENABLE);
 800af3a:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800af3e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800af42:	f04f 0101 	mov.w	r1, #1
 800af46:	f04f 0201 	mov.w	r2, #1
 800af4a:	f005 f973 	bl	8010234 <TIM_ITConfig>

        /* Enable the TIM Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = DEBOUNCE_TIMER_IRQn;
 800af4e:	f04f 0319 	mov.w	r3, #25
 800af52:	753b      	strb	r3, [r7, #20]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 800af54:	f04f 0302 	mov.w	r3, #2
 800af58:	757b      	strb	r3, [r7, #21]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 800af5a:	f04f 0300 	mov.w	r3, #0
 800af5e:	75bb      	strb	r3, [r7, #22]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800af60:	f04f 0301 	mov.w	r3, #1
 800af64:	75fb      	strb	r3, [r7, #23]

        NVIC_Init(&NVIC_InitStructure);
 800af66:	f107 0314 	add.w	r3, r7, #20
 800af6a:	4618      	mov	r0, r3
 800af6c:	f004 f996 	bl	800f29c <NVIC_Init>

        /* Enable the Button EXTI Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800af70:	79fa      	ldrb	r2, [r7, #7]
 800af72:	f242 73e0 	movw	r3, #10208	; 0x27e0
 800af76:	f6c0 0301 	movt	r3, #2049	; 0x801
 800af7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	753b      	strb	r3, [r7, #20]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 800af82:	f04f 0302 	mov.w	r3, #2
 800af86:	757b      	strb	r3, [r7, #21]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 800af88:	f04f 0301 	mov.w	r3, #1
 800af8c:	75bb      	strb	r3, [r7, #22]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800af8e:	f04f 0301 	mov.w	r3, #1
 800af92:	75fb      	strb	r3, [r7, #23]

        NVIC_Init(&NVIC_InitStructure);
 800af94:	f107 0314 	add.w	r3, r7, #20
 800af98:	4618      	mov	r0, r3
 800af9a:	f004 f97f 	bl	800f29c <NVIC_Init>

        BUTTON_DEBOUNCED[Button] = 0x00;
 800af9e:	79fa      	ldrb	r2, [r7, #7]
 800afa0:	f240 5394 	movw	r3, #1428	; 0x594
 800afa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afa8:	f04f 0100 	mov.w	r1, #0
 800afac:	5499      	strb	r1, [r3, r2]

        BUTTON_EXTI_Config(Button, ENABLE);
 800afae:	79fb      	ldrb	r3, [r7, #7]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f04f 0101 	mov.w	r1, #1
 800afb6:	f000 f805 	bl	800afc4 <BUTTON_EXTI_Config>
    }
}
 800afba:	f107 0720 	add.w	r7, r7, #32
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop

0800afc4 <BUTTON_EXTI_Config>:

void BUTTON_EXTI_Config(Button_TypeDef Button, FunctionalState NewState)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	71fa      	strb	r2, [r7, #7]
 800afd0:	71bb      	strb	r3, [r7, #6]
    EXTI_InitTypeDef EXTI_InitStructure;

	/* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800afd2:	79fa      	ldrb	r2, [r7, #7]
 800afd4:	f242 73d8 	movw	r3, #10200	; 0x27d8
 800afd8:	f6c0 0301 	movt	r3, #2049	; 0x801
 800afdc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	79f9      	ldrb	r1, [r7, #7]
 800afe4:	f242 73dc 	movw	r3, #10204	; 0x27dc
 800afe8:	f6c0 0301 	movt	r3, #2049	; 0x801
 800afec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	4619      	mov	r1, r3
 800aff6:	f004 fec3 	bl	800fd80 <GPIO_EXTILineConfig>

	/* Clear the EXTI line pending flag */
	EXTI_ClearFlag(BUTTON_EXTI_LINE[Button]);
 800affa:	79fa      	ldrb	r2, [r7, #7]
 800affc:	f242 73d4 	movw	r3, #10196	; 0x27d4
 800b000:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b004:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b008:	4618      	mov	r0, r3
 800b00a:	f004 fc51 	bl	800f8b0 <EXTI_ClearFlag>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800b00e:	79fa      	ldrb	r2, [r7, #7]
 800b010:	f242 73d4 	movw	r3, #10196	; 0x27d4
 800b014:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b018:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b01c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800b01e:	f04f 0300 	mov.w	r3, #0
 800b022:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = BUTTON_EXTI_TRIGGER[Button];
 800b024:	79fa      	ldrb	r2, [r7, #7]
 800b026:	f240 033c 	movw	r3, #60	; 0x3c
 800b02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b02e:	5c9b      	ldrb	r3, [r3, r2]
 800b030:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = NewState;
 800b032:	79bb      	ldrb	r3, [r7, #6]
 800b034:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
 800b036:	f107 0308 	add.w	r3, r7, #8
 800b03a:	4618      	mov	r0, r3
 800b03c:	f004 fb9c 	bl	800f778 <EXTI_Init>
}
 800b040:	f107 0710 	add.w	r7, r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <BUTTON_GetState>:
  *     @arg BUTTON1: Button1
  *     @arg BUTTON2: Button2
  * @retval Actual Button Pressed state.
  */
uint8_t BUTTON_GetState(Button_TypeDef Button)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	4603      	mov	r3, r0
 800b050:	71fb      	strb	r3, [r7, #7]
    return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800b052:	79fa      	ldrb	r2, [r7, #7]
 800b054:	f240 0330 	movw	r3, #48	; 0x30
 800b058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b05c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b060:	79f9      	ldrb	r1, [r7, #7]
 800b062:	f242 73c8 	movw	r3, #10184	; 0x27c8
 800b066:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b06a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b06e:	4610      	mov	r0, r2
 800b070:	4619      	mov	r1, r3
 800b072:	f004 fe4b 	bl	800fd0c <GPIO_ReadInputDataBit>
 800b076:	4603      	mov	r3, r0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	f107 0708 	add.w	r7, r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop

0800b084 <BUTTON_GetDebouncedState>:
  *     @arg BUTTON1: Button1
  *     @arg BUTTON2: Button2
  * @retval Button Debounced state.
  */
uint8_t BUTTON_GetDebouncedState(Button_TypeDef Button)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	71fb      	strb	r3, [r7, #7]
	if(BUTTON_DEBOUNCED[BUTTON1] != 0x00)
 800b08e:	f240 5394 	movw	r3, #1428	; 0x594
 800b092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <BUTTON_GetDebouncedState+0x2e>
	{
		BUTTON_DEBOUNCED[BUTTON1] = 0x00;
 800b09e:	f240 5394 	movw	r3, #1428	; 0x594
 800b0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0a6:	f04f 0200 	mov.w	r2, #0
 800b0aa:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800b0ac:	f04f 0301 	mov.w	r3, #1
 800b0b0:	e001      	b.n	800b0b6 <BUTTON_GetDebouncedState+0x32>
	}
	return 0x00;
 800b0b2:	f04f 0300 	mov.w	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f107 070c 	add.w	r7, r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bc80      	pop	{r7}
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop

0800b0c4 <CC3000_WIFI_Init>:
 * @brief  Initialize the CC3000 - CS and ENABLE lines.
 * @param  None
 * @retval None
 */
void CC3000_WIFI_Init(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* CC3000_WIFI_CS_GPIO and CC3000_WIFI_EN_GPIO Peripheral clock enable */
	RCC_APB2PeriphClockCmd(CC3000_WIFI_CS_GPIO_CLK | CC3000_WIFI_EN_GPIO_CLK, ENABLE);
 800b0ca:	f04f 0008 	mov.w	r0, #8
 800b0ce:	f04f 0101 	mov.w	r1, #1
 800b0d2:	f004 fee7 	bl	800fea4 <RCC_APB2PeriphClockCmd>

	/* Configure CC3000_WIFI pins: CS */
	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_CS_PIN;
 800b0d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0da:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800b0dc:	f04f 0303 	mov.w	r3, #3
 800b0e0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800b0e2:	f04f 0310 	mov.w	r3, #16
 800b0e6:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(CC3000_WIFI_CS_GPIO_PORT, &GPIO_InitStructure);
 800b0e8:	f107 0304 	add.w	r3, r7, #4
 800b0ec:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b0f0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f004 fd31 	bl	800fb5c <GPIO_Init>

	/* Deselect CC3000 */
	CC3000_CS_HIGH();
 800b0fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b0fe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b106:	f004 fe1f 	bl	800fd48 <GPIO_SetBits>

	/* Configure CC3000_WIFI pins: Enable */
	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_EN_PIN;
 800b10a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b10e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(CC3000_WIFI_EN_GPIO_PORT, &GPIO_InitStructure);
 800b110:	f107 0304 	add.w	r3, r7, #4
 800b114:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b118:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b11c:	4619      	mov	r1, r3
 800b11e:	f004 fd1d 	bl	800fb5c <GPIO_Init>

	/* Disable CC3000 */
	CC3000_Write_Enable_Pin(WLAN_DISABLE);
 800b122:	f04f 0000 	mov.w	r0, #0
 800b126:	f000 f9b9 	bl	800b49c <CC3000_Write_Enable_Pin>
}
 800b12a:	f107 0708 	add.w	r7, r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop

0800b134 <CC3000_SPI_Init>:
 * @brief  Initialize and configure the SPI peripheral used by CC3000.
 * @param  None
 * @retval None
 */
void CC3000_SPI_Init(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef SPI_InitStructure;

	/* CC3000_SPI_SCK_GPIO, CC3000_SPI_MOSI_GPIO and CC3000_SPI_MISO_GPIO Peripheral clock enable */
	RCC_APB2PeriphClockCmd(CC3000_SPI_SCK_GPIO_CLK | CC3000_SPI_MOSI_GPIO_CLK | CC3000_SPI_MISO_GPIO_CLK, ENABLE);
 800b13a:	f04f 0008 	mov.w	r0, #8
 800b13e:	f04f 0101 	mov.w	r1, #1
 800b142:	f004 feaf 	bl	800fea4 <RCC_APB2PeriphClockCmd>

	/* CC3000_SPI Peripheral clock enable */
	CC3000_SPI_CLK_CMD(CC3000_SPI_CLK, ENABLE);
 800b146:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b14a:	f04f 0101 	mov.w	r1, #1
 800b14e:	f004 fed3 	bl	800fef8 <RCC_APB1PeriphClockCmd>

	/* Configure CC3000_SPI pins: SCK */
	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_SCK_PIN;
 800b152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b156:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800b158:	f04f 0301 	mov.w	r3, #1
 800b15c:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800b15e:	f04f 0318 	mov.w	r3, #24
 800b162:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(CC3000_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800b164:	f107 0314 	add.w	r3, r7, #20
 800b168:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b16c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b170:	4619      	mov	r1, r3
 800b172:	f004 fcf3 	bl	800fb5c <GPIO_Init>

	/* Configure CC3000_SPI pins: MOSI */
	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_MOSI_PIN;
 800b176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b17a:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(CC3000_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800b17c:	f107 0314 	add.w	r3, r7, #20
 800b180:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b184:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b188:	4619      	mov	r1, r3
 800b18a:	f004 fce7 	bl	800fb5c <GPIO_Init>

	/* Configure CC3000_SPI pins: MISO */
	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_MISO_PIN;
 800b18e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b192:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800b194:	f04f 0304 	mov.w	r3, #4
 800b198:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(CC3000_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800b19a:	f107 0314 	add.w	r3, r7, #20
 800b19e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b1a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	f004 fcd8 	bl	800fb5c <GPIO_Init>

	/* CC3000_SPI Config */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	803b      	strh	r3, [r7, #0]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800b1b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b1b6:	807b      	strh	r3, [r7, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800b1be:	f04f 0300 	mov.w	r3, #0
 800b1c2:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 800b1c4:	f04f 0301 	mov.w	r3, #1
 800b1c8:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800b1ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1ce:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_BaudRatePrescaler = CC3000_SPI_BAUDRATE_PRESCALER;
 800b1d0:	f04f 0320 	mov.w	r3, #32
 800b1d4:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800b1d6:	f04f 0300 	mov.w	r3, #0
 800b1da:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800b1dc:	f04f 0307 	mov.w	r3, #7
 800b1e0:	823b      	strh	r3, [r7, #16]
	SPI_Init(CC3000_SPI, &SPI_InitStructure);
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800b1e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	f004 fead 	bl	800ff4c <SPI_Init>
}
 800b1f2:	f107 0718 	add.w	r7, r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop

0800b1fc <CC3000_DMA_Config>:
 * @brief  Configure the DMA Peripheral used to handle CC3000 communication via SPI.
 * @param  None
 * @retval None
 */
void CC3000_DMA_Config(CC3000_DMADirection_TypeDef Direction, uint8_t* buffer, uint16_t NumData)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08e      	sub	sp, #56	; 0x38
 800b200:	af00      	add	r7, sp, #0
 800b202:	6039      	str	r1, [r7, #0]
 800b204:	4613      	mov	r3, r2
 800b206:	4602      	mov	r2, r0
 800b208:	71fa      	strb	r2, [r7, #7]
 800b20a:	80bb      	strh	r3, [r7, #4]
	DMA_InitTypeDef DMA_InitStructure;

	RCC_AHBPeriphClockCmd(CC3000_SPI_DMA_CLK, ENABLE);
 800b20c:	f04f 0001 	mov.w	r0, #1
 800b210:	f04f 0101 	mov.w	r1, #1
 800b214:	f004 fe1c 	bl	800fe50 <RCC_AHBPeriphClockCmd>

	DMA_InitStructure.DMA_PeripheralBaseAddr = CC3000_SPI_DR_BASE;
 800b218:	f643 030c 	movw	r3, #14348	; 0x380c
 800b21c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b220:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) buffer;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800b226:	f04f 0300 	mov.w	r3, #0
 800b22a:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800b22c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800b230:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800b232:	f04f 0300 	mov.w	r3, #0
 800b236:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800b238:	f04f 0300 	mov.w	r3, #0
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800b23e:	f04f 0300 	mov.w	r3, #0
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800b244:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b248:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 800b24a:	f04f 0300 	mov.w	r3, #0
 800b24e:	637b      	str	r3, [r7, #52]	; 0x34

	/* DMA used for Reception */
	if (Direction == CC3000_DMA_RX)
 800b250:	79fb      	ldrb	r3, [r7, #7]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d114      	bne.n	800b280 <CC3000_DMA_Config+0x84>
	{
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800b256:	f04f 0300 	mov.w	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_BufferSize = NumData;
 800b25c:	88bb      	ldrh	r3, [r7, #4]
 800b25e:	61bb      	str	r3, [r7, #24]
		DMA_DeInit(CC3000_SPI_RX_DMA_CHANNEL );
 800b260:	f04f 0044 	mov.w	r0, #68	; 0x44
 800b264:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b268:	f004 f8a2 	bl	800f3b0 <DMA_DeInit>
		DMA_Init(CC3000_SPI_RX_DMA_CHANNEL, &DMA_InitStructure);
 800b26c:	f107 030c 	add.w	r3, r7, #12
 800b270:	f04f 0044 	mov.w	r0, #68	; 0x44
 800b274:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b278:	4619      	mov	r1, r3
 800b27a:	f004 f9a9 	bl	800f5d0 <DMA_Init>
 800b27e:	e016      	b.n	800b2ae <CC3000_DMA_Config+0xb2>
	}
	/* DMA used for Transmission */
	else if (Direction == CC3000_DMA_TX)
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d113      	bne.n	800b2ae <CC3000_DMA_Config+0xb2>
	{
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 800b286:	f04f 0310 	mov.w	r3, #16
 800b28a:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_BufferSize = NumData;
 800b28c:	88bb      	ldrh	r3, [r7, #4]
 800b28e:	61bb      	str	r3, [r7, #24]
		DMA_DeInit(CC3000_SPI_TX_DMA_CHANNEL );
 800b290:	f04f 0058 	mov.w	r0, #88	; 0x58
 800b294:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b298:	f004 f88a 	bl	800f3b0 <DMA_DeInit>
		DMA_Init(CC3000_SPI_TX_DMA_CHANNEL, &DMA_InitStructure);
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	f04f 0058 	mov.w	r0, #88	; 0x58
 800b2a4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	f004 f991 	bl	800f5d0 <DMA_Init>
	}
}
 800b2ae:	f107 0738 	add.w	r7, r7, #56	; 0x38
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop

0800b2b8 <CC3000_SPI_DMA_Init>:

void CC3000_SPI_DMA_Init(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Configure and enable SPI DMA TX Channel interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = CC3000_SPI_TX_DMA_IRQn;
 800b2be:	f04f 030f 	mov.w	r3, #15
 800b2c2:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 800b2c4:	f04f 0300 	mov.w	r3, #0
 800b2c8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 800b2ca:	f04f 0300 	mov.w	r3, #0
 800b2ce:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800b2d0:	f04f 0301 	mov.w	r3, #1
 800b2d4:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800b2d6:	f107 0304 	add.w	r3, r7, #4
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f003 ffde 	bl	800f29c <NVIC_Init>

	CC3000_SPI_Init();
 800b2e0:	f7ff ff28 	bl	800b134 <CC3000_SPI_Init>

	/* Configure DMA Peripheral but don't send data*/
	CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) wlan_rx_buffer, 0);
 800b2e4:	f04f 0001 	mov.w	r0, #1
 800b2e8:	f640 11d8 	movw	r1, #2520	; 0x9d8
 800b2ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b2f0:	f04f 0200 	mov.w	r2, #0
 800b2f4:	f7ff ff82 	bl	800b1fc <CC3000_DMA_Config>
	CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) wlan_tx_buffer, 0);
 800b2f8:	f04f 0000 	mov.w	r0, #0
 800b2fc:	f240 51d8 	movw	r1, #1496	; 0x5d8
 800b300:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800b304:	f04f 0200 	mov.w	r2, #0
 800b308:	f7ff ff78 	bl	800b1fc <CC3000_DMA_Config>

	/* Enable SPI DMA TX Channel Transfer Complete Interrupt */
	DMA_ITConfig(CC3000_SPI_TX_DMA_CHANNEL, DMA_IT_TC, ENABLE);
 800b30c:	f04f 0058 	mov.w	r0, #88	; 0x58
 800b310:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b314:	f04f 0102 	mov.w	r1, #2
 800b318:	f04f 0201 	mov.w	r2, #1
 800b31c:	f004 f9b4 	bl	800f688 <DMA_ITConfig>

	/* Enable SPI DMA request */
	SPI_I2S_DMACmd(CC3000_SPI, SPI_I2S_DMAReq_Rx, ENABLE);
 800b320:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800b324:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b328:	f04f 0101 	mov.w	r1, #1
 800b32c:	f04f 0201 	mov.w	r2, #1
 800b330:	f004 fe70 	bl	8010014 <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd(CC3000_SPI, SPI_I2S_DMAReq_Tx, ENABLE);
 800b334:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800b338:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b33c:	f04f 0102 	mov.w	r1, #2
 800b340:	f04f 0201 	mov.w	r2, #1
 800b344:	f004 fe66 	bl	8010014 <SPI_I2S_DMACmd>

	/* Enable CC3000_SPI */
	SPI_Cmd(CC3000_SPI, ENABLE);
 800b348:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800b34c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b350:	f04f 0101 	mov.w	r1, #1
 800b354:	f004 fe3e 	bl	800ffd4 <SPI_Cmd>

	/* Enable DMA RX Channel */
	DMA_Cmd(CC3000_SPI_RX_DMA_CHANNEL, ENABLE);
 800b358:	f04f 0044 	mov.w	r0, #68	; 0x44
 800b35c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b360:	f04f 0101 	mov.w	r1, #1
 800b364:	f004 f974 	bl	800f650 <DMA_Cmd>
	/* Enable DMA TX Channel */
	DMA_Cmd(CC3000_SPI_TX_DMA_CHANNEL, ENABLE);
 800b368:	f04f 0058 	mov.w	r0, #88	; 0x58
 800b36c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b370:	f04f 0101 	mov.w	r1, #1
 800b374:	f004 f96c 	bl	800f650 <DMA_Cmd>
}
 800b378:	f107 0708 	add.w	r7, r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <CC3000_SPI_DMA_Channels>:

void CC3000_SPI_DMA_Channels(FunctionalState NewState)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	71fb      	strb	r3, [r7, #7]
	/* Enable/Disable DMA RX Channel */
	DMA_Cmd(CC3000_SPI_RX_DMA_CHANNEL, NewState);
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	f04f 0044 	mov.w	r0, #68	; 0x44
 800b390:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b394:	4619      	mov	r1, r3
 800b396:	f004 f95b 	bl	800f650 <DMA_Cmd>
	/* Enable/Disable DMA TX Channel */
	DMA_Cmd(CC3000_SPI_TX_DMA_CHANNEL, NewState);
 800b39a:	79fb      	ldrb	r3, [r7, #7]
 800b39c:	f04f 0058 	mov.w	r0, #88	; 0x58
 800b3a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	f004 f953 	bl	800f650 <DMA_Cmd>
}
 800b3aa:	f107 0708 	add.w	r7, r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop

0800b3b4 <CC3000_Read_Interrupt_Pin>:

/* CC3000 Hardware related callbacks passed to wlan_init */
long CC3000_Read_Interrupt_Pin(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
	return GPIO_ReadInputDataBit(CC3000_WIFI_INT_GPIO_PORT, CC3000_WIFI_INT_PIN );
 800b3b8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b3bc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b3c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b3c4:	f004 fca2 	bl	800fd0c <GPIO_ReadInputDataBit>
 800b3c8:	4603      	mov	r3, r0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop

0800b3d0 <CC3000_Interrupt_Enable>:

void CC3000_Interrupt_Enable(void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* CC3000_WIFI_INT_GPIO and AFIO Peripheral clock enable */
	RCC_APB2PeriphClockCmd(CC3000_WIFI_INT_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);
 800b3d6:	f04f 0009 	mov.w	r0, #9
 800b3da:	f04f 0101 	mov.w	r1, #1
 800b3de:	f004 fd61 	bl	800fea4 <RCC_APB2PeriphClockCmd>

	/* Configure CC3000_WIFI pins: Interrupt */
	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_INT_PIN;
 800b3e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3e6:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800b3e8:	f04f 0348 	mov.w	r3, #72	; 0x48
 800b3ec:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(CC3000_WIFI_INT_GPIO_PORT, &GPIO_InitStructure);
 800b3ee:	f107 030c 	add.w	r3, r7, #12
 800b3f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b3f6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	f004 fbae 	bl	800fb5c <GPIO_Init>

	/* Select the CC3000_WIFI_INT GPIO pin used as EXTI Line */
	GPIO_EXTILineConfig(CC3000_WIFI_INT_EXTI_PORT_SOURCE, CC3000_WIFI_INT_EXTI_PIN_SOURCE );
 800b400:	f04f 0001 	mov.w	r0, #1
 800b404:	f04f 010b 	mov.w	r1, #11
 800b408:	f004 fcba 	bl	800fd80 <GPIO_EXTILineConfig>

	/* Clear the EXTI line pending flag */
	EXTI_ClearFlag(CC3000_WIFI_INT_EXTI_LINE );
 800b40c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b410:	f004 fa4e 	bl	800f8b0 <EXTI_ClearFlag>

	/* Configure and Enable CC3000_WIFI_INT EXTI line */
	EXTI_InitStructure.EXTI_Line = CC3000_WIFI_INT_EXTI_LINE;
 800b414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b418:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800b41a:	f04f 0300 	mov.w	r3, #0
 800b41e:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800b420:	f04f 030c 	mov.w	r3, #12
 800b424:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800b426:	f04f 0301 	mov.w	r3, #1
 800b42a:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStructure);
 800b42c:	f107 0304 	add.w	r3, r7, #4
 800b430:	4618      	mov	r0, r3
 800b432:	f004 f9a1 	bl	800f778 <EXTI_Init>

	/* Enable and set CC3000_WIFI_INT EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = CC3000_WIFI_INT_EXTI_IRQn;
 800b436:	f04f 0328 	mov.w	r3, #40	; 0x28
 800b43a:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 800b43c:	f04f 0300 	mov.w	r3, #0
 800b440:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 800b442:	f04f 0301 	mov.w	r3, #1
 800b446:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800b448:	f04f 0301 	mov.w	r3, #1
 800b44c:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 800b44e:	463b      	mov	r3, r7
 800b450:	4618      	mov	r0, r3
 800b452:	f003 ff23 	bl	800f29c <NVIC_Init>
}
 800b456:	f107 0710 	add.w	r7, r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop

0800b460 <CC3000_Interrupt_Disable>:

void CC3000_Interrupt_Disable(void)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Disable CC3000_WIFI_INT EXTI Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = CC3000_WIFI_INT_EXTI_IRQn;
 800b466:	f04f 0328 	mov.w	r3, #40	; 0x28
 800b46a:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 800b46c:	f04f 0300 	mov.w	r3, #0
 800b470:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800b472:	f107 0304 	add.w	r3, r7, #4
 800b476:	4618      	mov	r0, r3
 800b478:	f003 ff10 	bl	800f29c <NVIC_Init>

	/* Disable CC3000_WIFI_INT EXTI line */
	EXTI_InitStructure.EXTI_Line = CC3000_WIFI_INT_EXTI_LINE;
 800b47c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b480:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 800b482:	f04f 0300 	mov.w	r3, #0
 800b486:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 800b488:	f107 0308 	add.w	r3, r7, #8
 800b48c:	4618      	mov	r0, r3
 800b48e:	f004 f973 	bl	800f778 <EXTI_Init>
}
 800b492:	f107 0710 	add.w	r7, r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop

0800b49c <CC3000_Write_Enable_Pin>:

void CC3000_Write_Enable_Pin(unsigned char val)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	71fb      	strb	r3, [r7, #7]
	/* Set WLAN Enable/Disable */
	if (val != WLAN_DISABLE)
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d008      	beq.n	800b4be <CC3000_Write_Enable_Pin+0x22>
	{
		GPIO_SetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 800b4ac:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4b0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b4b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4b8:	f004 fc46 	bl	800fd48 <GPIO_SetBits>
 800b4bc:	e007      	b.n	800b4ce <CC3000_Write_Enable_Pin+0x32>
	}
	else
	{
		GPIO_ResetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 800b4be:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4c2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b4c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4ca:	f004 fc4b 	bl	800fd64 <GPIO_ResetBits>
	}
}
 800b4ce:	f107 0708 	add.w	r7, r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop

0800b4d8 <USB_Cable_Config>:
* Description    : Software Connection/Disconnection of USB Cable
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (FunctionalState NewState)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	71fb      	strb	r3, [r7, #7]
	if (NewState != DISABLE)
 800b4e2:	79fb      	ldrb	r3, [r7, #7]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d008      	beq.n	800b4fa <USB_Cable_Config+0x22>
	{
		GPIO_ResetBits(USB_DISCONNECT_GPIO_PORT, USB_DISCONNECT_PIN);
 800b4e8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4ec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b4f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b4f4:	f004 fc36 	bl	800fd64 <GPIO_ResetBits>
 800b4f8:	e007      	b.n	800b50a <USB_Cable_Config+0x32>
	}
	else
	{
		GPIO_SetBits(USB_DISCONNECT_GPIO_PORT, USB_DISCONNECT_PIN);
 800b4fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b4fe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b506:	f004 fc1f 	bl	800fd48 <GPIO_SetBits>
	}
}
 800b50a:	f107 0708 	add.w	r7, r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop

0800b514 <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : None.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0

  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1)
 800b51a:	f240 53a8 	movw	r3, #1448	; 0x5a8
 800b51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b01      	cmp	r3, #1
 800b526:	f000 80b6 	beq.w	800b696 <Handle_USBAsynchXfer+0x182>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 800b52a:	f240 539c 	movw	r3, #1436	; 0x59c
 800b52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b538:	d106      	bne.n	800b548 <Handle_USBAsynchXfer+0x34>
    {
      USART_Rx_ptr_out = 0;
 800b53a:	f240 539c 	movw	r3, #1436	; 0x59c
 800b53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b542:	f04f 0200 	mov.w	r2, #0
 800b546:	601a      	str	r2, [r3, #0]
    }

    if(USART_Rx_ptr_out == USART_Rx_ptr_in)
 800b548:	f240 539c 	movw	r3, #1436	; 0x59c
 800b54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	f240 5398 	movw	r3, #1432	; 0x598
 800b556:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d107      	bne.n	800b570 <Handle_USBAsynchXfer+0x5c>
    {
      USB_Tx_State = 0;
 800b560:	f240 53a8 	movw	r3, #1448	; 0x5a8
 800b564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b568:	f04f 0200 	mov.w	r2, #0
 800b56c:	701a      	strb	r2, [r3, #0]
      return;
 800b56e:	e092      	b.n	800b696 <Handle_USBAsynchXfer+0x182>
    }

    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 800b570:	f240 539c 	movw	r3, #1436	; 0x59c
 800b574:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	f240 5398 	movw	r3, #1432	; 0x598
 800b57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	d90c      	bls.n	800b5a2 <Handle_USBAsynchXfer+0x8e>
    {
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800b588:	f240 539c 	movw	r3, #1436	; 0x59c
 800b58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 800b596:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800b59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	e00f      	b.n	800b5c2 <Handle_USBAsynchXfer+0xae>
    }
    else
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800b5a2:	f240 5398 	movw	r3, #1432	; 0x598
 800b5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	f240 539c 	movw	r3, #1436	; 0x59c
 800b5b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	1ad2      	subs	r2, r2, r3
 800b5b8:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800b5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5c0:	601a      	str	r2, [r3, #0]
    }

    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800b5c2:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800b5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b40      	cmp	r3, #64	; 0x40
 800b5ce:	d921      	bls.n	800b614 <Handle_USBAsynchXfer+0x100>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 800b5d0:	f240 539c 	movw	r3, #1436	; 0x59c
 800b5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800b5dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b5e0:	80bb      	strh	r3, [r7, #4]

      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800b5e2:	f240 539c 	movw	r3, #1436	; 0x59c
 800b5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b5f0:	f240 539c 	movw	r3, #1436	; 0x59c
 800b5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b5f8:	601a      	str	r2, [r3, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;
 800b5fa:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800b5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800b608:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800b60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	e022      	b.n	800b65a <Handle_USBAsynchXfer+0x146>
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 800b614:	f240 539c 	movw	r3, #1436	; 0x59c
 800b618:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = USART_Rx_length;
 800b620:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800b624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	80bb      	strh	r3, [r7, #4]

      USART_Rx_ptr_out += USART_Rx_length;
 800b62c:	f240 539c 	movw	r3, #1436	; 0x59c
 800b630:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800b63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	18d2      	adds	r2, r2, r3
 800b642:	f240 539c 	movw	r3, #1436	; 0x59c
 800b646:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b64a:	601a      	str	r2, [r3, #0]
      USART_Rx_length = 0;
 800b64c:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800b650:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b654:	f04f 0200 	mov.w	r2, #0
 800b658:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800b65a:	f240 53a8 	movw	r3, #1448	; 0x5a8
 800b65e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b662:	f04f 0201 	mov.w	r2, #1
 800b666:	701a      	strb	r2, [r3, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800b668:	88fa      	ldrh	r2, [r7, #6]
 800b66a:	f640 6318 	movw	r3, #3608	; 0xe18
 800b66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b672:	18d2      	adds	r2, r2, r3
 800b674:	88bb      	ldrh	r3, [r7, #4]
 800b676:	4610      	mov	r0, r2
 800b678:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800b67c:	461a      	mov	r2, r3
 800b67e:	f003 fa9b 	bl	800ebb8 <UserToPMABufferCopy>
    SetEPTxCount(ENDP1, USB_Tx_length);
 800b682:	88bb      	ldrh	r3, [r7, #4]
 800b684:	f04f 0001 	mov.w	r0, #1
 800b688:	4619      	mov	r1, r3
 800b68a:	f003 fd29 	bl	800f0e0 <SetEPTxCount>
    SetEPTxValid(ENDP1);
 800b68e:	f04f 0001 	mov.w	r0, #1
 800b692:	f003 fbb9 	bl	800ee08 <SetEPTxValid>
  }

}
 800b696:	f107 0708 	add.w	r7, r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop

0800b6a0 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800b6a6:	f24f 73e8 	movw	r3, #63464	; 0xf7e8
 800b6aa:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	60fb      	str	r3, [r7, #12]
  Device_Serial1 = *(uint32_t*)ID2;
 800b6b2:	f24f 73ec 	movw	r3, #63468	; 0xf7ec
 800b6b6:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	60bb      	str	r3, [r7, #8]
  Device_Serial2 = *(uint32_t*)ID3;
 800b6be:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
 800b6c2:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	607b      	str	r3, [r7, #4]

  Device_Serial0 += Device_Serial2;
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	18d3      	adds	r3, r2, r3
 800b6d0:	60fb      	str	r3, [r7, #12]

  if (Device_Serial0 != 0)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00b      	beq.n	800b6f0 <Get_SerialNum+0x50>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	4907      	ldr	r1, [pc, #28]	; (800b6f8 <Get_SerialNum+0x58>)
 800b6dc:	f04f 0208 	mov.w	r2, #8
 800b6e0:	f000 f80e 	bl	800b700 <IntToUnicode>
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 800b6e4:	68b8      	ldr	r0, [r7, #8]
 800b6e6:	4905      	ldr	r1, [pc, #20]	; (800b6fc <Get_SerialNum+0x5c>)
 800b6e8:	f04f 0204 	mov.w	r2, #4
 800b6ec:	f000 f808 	bl	800b700 <IntToUnicode>
  }
}
 800b6f0:	f107 0710 	add.w	r7, r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	2000007e 	.word	0x2000007e
 800b6fc:	2000008e 	.word	0x2000008e

0800b700 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800b700:	b480      	push	{r7}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	4613      	mov	r3, r2
 800b70c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b70e:	f04f 0300 	mov.w	r3, #0
 800b712:	75fb      	strb	r3, [r7, #23]

  for( idx = 0 ; idx < len ; idx ++)
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	75fb      	strb	r3, [r7, #23]
 800b71a:	e031      	b.n	800b780 <IntToUnicode+0x80>
  {
    if( ((value >> 28)) < 0xA )
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800b722:	2b09      	cmp	r3, #9
 800b724:	d80d      	bhi.n	800b742 <IntToUnicode+0x42>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	18d3      	adds	r3, r2, r3
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	ea4f 7212 	mov.w	r2, r2, lsr #28
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800b73c:	b2d2      	uxtb	r2, r2
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	e00c      	b.n	800b75c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	18d3      	adds	r3, r2, r3
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	ea4f 7212 	mov.w	r2, r2, lsr #28
 800b752:	b2d2      	uxtb	r2, r2
 800b754:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800b758:	b2d2      	uxtb	r2, r2
 800b75a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800b762:	60fb      	str	r3, [r7, #12]

    pbuf[ 2* idx + 1] = 0;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b76a:	f103 0301 	add.w	r3, r3, #1
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	18d3      	adds	r3, r2, r3
 800b772:	f04f 0200 	mov.w	r2, #0
 800b776:	701a      	strb	r2, [r3, #0]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;

  for( idx = 0 ; idx < len ; idx ++)
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	f103 0301 	add.w	r3, r3, #1
 800b77e:	75fb      	strb	r3, [r7, #23]
 800b780:	7dfa      	ldrb	r2, [r7, #23]
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	429a      	cmp	r2, r3
 800b786:	d3c9      	bcc.n	800b71c <IntToUnicode+0x1c>

    value = value << 4;

    pbuf[ 2* idx + 1] = 0;
  }
}
 800b788:	f107 071c 	add.w	r7, r7, #28
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bc80      	pop	{r7}
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop

0800b794 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 800b798:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 800b79c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800b7a0:	f2ce 0200 	movt	r2, #57344	; 0xe000
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b7a4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b7a8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 800b7b2:	f04f 0304 	mov.w	r3, #4
 800b7b6:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
 800b7ba:	430b      	orrs	r3, r1
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 800b7bc:	60d3      	str	r3, [r2, #12]
 800b7be:	f3bf 8f4f 	dsb	sy
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
 800b7c2:	e7fe      	b.n	800b7c2 <NVIC_SystemReset+0x2e>

0800b7c4 <main>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
int main(void)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af04      	add	r7, sp, #16
	Set_System();
 800b7ca:	f7ff f9d1 	bl	800ab70 <Set_System>

#ifdef SPARK_WIRING_ENABLE
	if(NULL != setup)
 800b7ce:	f24a 135d 	movw	r3, #41309	; 0xa15d
 800b7d2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <main+0x1a>
	{
		setup();
 800b7da:	f7fe fcbf 	bl	800a15c <setup>
#endif

#ifdef SPARK_WLAN_ENABLE

	/* Initialize CC3000's CS, EN and INT pins to their default states */
	CC3000_WIFI_Init();
 800b7de:	f7ff fc71 	bl	800b0c4 <CC3000_WIFI_Init>
#endif

	//
	// Configure & initialize CC3000 SPI_DMA Interface
	//
	CC3000_SPI_DMA_Init();
 800b7e2:	f7ff fd69 	bl	800b2b8 <CC3000_SPI_DMA_Init>

	//
	// WLAN On API Implementation
	//
	wlan_init(WLAN_Async_Callback, WLAN_Firmware_Patch, WLAN_Driver_Patch, WLAN_BootLoader_Patch,
 800b7e6:	f24b 33b5 	movw	r3, #46005	; 0xb3b5
 800b7ea:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	f24b 33d1 	movw	r3, #46033	; 0xb3d1
 800b7f4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	f24b 4361 	movw	r3, #46177	; 0xb461
 800b7fe:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b802:	9302      	str	r3, [sp, #8]
 800b804:	f24b 439d 	movw	r3, #46237	; 0xb49d
 800b808:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	f64b 6005 	movw	r0, #48645	; 0xbe05
 800b812:	f6c0 0000 	movt	r0, #2048	; 0x800
 800b816:	f64b 61f1 	movw	r1, #48881	; 0xbef1
 800b81a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800b81e:	f64b 7211 	movw	r2, #48913	; 0xbf11
 800b822:	f6c0 0200 	movt	r2, #2048	; 0x800
 800b826:	f64b 7331 	movw	r3, #48945	; 0xbf31
 800b82a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b82e:	f006 f987 	bl	8011b40 <wlan_init>
				CC3000_Read_Interrupt_Pin, CC3000_Interrupt_Enable, CC3000_Interrupt_Disable, CC3000_Write_Enable_Pin);

	//
	// Trigger a WLAN device
	//
	wlan_start(0);
 800b832:	f04f 0000 	mov.w	r0, #0
 800b836:	f006 f9df 	bl	8011bf8 <wlan_start>

	//
	// Mask out all non-required events from CC3000
	//
	wlan_set_event_mask(HCI_EVNT_WLAN_KEEPALIVE | HCI_EVNT_WLAN_UNSOL_INIT | HCI_EVNT_WLAN_ASYNC_PING_REPORT);
 800b83a:	f248 2044 	movw	r0, #33348	; 0x8244
 800b83e:	f006 fbab 	bl	8011f98 <wlan_set_event_mask>

#ifdef DFU_BUILD_ENABLE
	Load_SystemFlags();
 800b842:	f000 f9d7 	bl	800bbf4 <Load_SystemFlags>
#endif

#ifdef DFU_BUILD_ENABLE
    if(NetApp_Timeout_SysFlag != 0xAAAA)
 800b846:	f240 0346 	movw	r3, #70	; 0x46
 800b84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b84e:	881a      	ldrh	r2, [r3, #0]
 800b850:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800b854:	429a      	cmp	r2, r3
 800b856:	d001      	beq.n	800b85c <main+0x98>
#else
    if(BKP_ReadBackupRegister(BKP_DR1) != 0xAAAA)
#endif
    {
    	Set_NetApp_Timeout();
 800b858:	f000 fa38 	bl	800bccc <Set_NetApp_Timeout>
    }

	if(!WLAN_MANUAL_CONNECT)
 800b85c:	f240 0344 	movw	r3, #68	; 0x44
 800b860:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10f      	bne.n	800b88a <main+0xc6>
	{
#ifdef DFU_BUILD_ENABLE
		if(Smart_Config_SysFlag != 0xBBBB)
 800b86a:	f240 0348 	movw	r3, #72	; 0x48
 800b86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b872:	881a      	ldrh	r2, [r3, #0]
 800b874:	f64b 33bb 	movw	r3, #48059	; 0xbbbb
 800b878:	429a      	cmp	r2, r3
 800b87a:	d006      	beq.n	800b88a <main+0xc6>
#else
		if(BKP_ReadBackupRegister(BKP_DR2) != 0xBBBB)
#endif
		{
			WLAN_SMART_CONFIG_START = 1;
 800b87c:	f640 731a 	movw	r3, #3866	; 0xf1a
 800b880:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b884:	f04f 0201 	mov.w	r2, #1
 800b888:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	nvmem_read_sp_version(patchVer);
 800b88a:	f640 701c 	movw	r0, #3868	; 0xf1c
 800b88e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800b892:	f005 fde9 	bl	8011468 <nvmem_read_sp_version>
 800b896:	e000      	b.n	800b89a <main+0xd6>
			}
#ifdef SPARK_WLAN_ENABLE
		}
#endif
#endif
	}
 800b898:	bf00      	nop

	/* Main loop */
	while (1)
	{
#ifdef SPARK_WLAN_ENABLE
		if(WLAN_SMART_CONFIG_START)
 800b89a:	f640 731a 	movw	r3, #3866	; 0xf1a
 800b89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <main+0xea>
		{
			//
			// Start CC3000 first time configuration
			//
			Start_Smart_Config();
 800b8a8:	f000 fa3e 	bl	800bd28 <Start_Smart_Config>
 800b8ac:	e030      	b.n	800b910 <main+0x14c>
		}
		else if (WLAN_MANUAL_CONNECT && !WLAN_DHCP)
 800b8ae:	f240 0344 	movw	r3, #68	; 0x44
 800b8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d029      	beq.n	800b910 <main+0x14c>
 800b8bc:	f640 7338 	movw	r3, #3896	; 0xf38
 800b8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d122      	bne.n	800b910 <main+0x14c>
		{
		    wlan_ioctl_set_connection_policy(DISABLE, DISABLE, DISABLE);
 800b8ca:	f04f 0000 	mov.w	r0, #0
 800b8ce:	f04f 0100 	mov.w	r1, #0
 800b8d2:	f04f 0200 	mov.w	r2, #0
 800b8d6:	f006 faff 	bl	8011ed8 <wlan_ioctl_set_connection_policy>
		    wlan_connect(WLAN_SEC_WPA2, "VED", 3, NULL, "BD180408", 8);
 800b8da:	f242 73e8 	movw	r3, #10216	; 0x27e8
 800b8de:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	f04f 0308 	mov.w	r3, #8
 800b8e8:	9301      	str	r3, [sp, #4]
 800b8ea:	f04f 0003 	mov.w	r0, #3
 800b8ee:	f242 71e4 	movw	r1, #10212	; 0x27e4
 800b8f2:	f6c0 0101 	movt	r1, #2049	; 0x801
 800b8f6:	f04f 0203 	mov.w	r2, #3
 800b8fa:	f04f 0300 	mov.w	r3, #0
 800b8fe:	f006 fa21 	bl	8011d44 <wlan_connect>
		    WLAN_MANUAL_CONNECT = 0;
 800b902:	f240 0344 	movw	r3, #68	; 0x44
 800b906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	701a      	strb	r2, [r3, #0]
		}

		if(WLAN_DHCP && !SPARK_SOCKET_CONNECTED)
 800b910:	f640 7338 	movw	r3, #3896	; 0xf38
 800b914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d01b      	beq.n	800b956 <main+0x192>
 800b91e:	f640 731e 	movw	r3, #3870	; 0xf1e
 800b922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d113      	bne.n	800b956 <main+0x192>
//			netapp_ipconfig(&ipconfig);
//
//			if(ipconfig.aucIP[0] == 0x00)
//				continue;

			if(Spark_Connect() < 0)
 800b92e:	f000 fb0f 	bl	800bf50 <Spark_Connect>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	da07      	bge.n	800b948 <main+0x184>
				SPARK_SOCKET_CONNECTED = 0;
 800b938:	f640 731e 	movw	r3, #3870	; 0xf1e
 800b93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b940:	f04f 0200 	mov.w	r2, #0
 800b944:	701a      	strb	r2, [r3, #0]
 800b946:	e006      	b.n	800b956 <main+0x192>
			else
				SPARK_SOCKET_CONNECTED = 1;
 800b948:	f640 731e 	movw	r3, #3870	; 0xf1e
 800b94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b950:	f04f 0201 	mov.w	r2, #1
 800b954:	701a      	strb	r2, [r3, #0]
		}
#endif

#ifdef SPARK_WIRING_ENABLE
#ifdef SPARK_WLAN_ENABLE
		if(SPARK_SOCKET_CONNECTED && SPARK_DEVICE_ACKED)
 800b956:	f640 731e 	movw	r3, #3870	; 0xf1e
 800b95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d098      	beq.n	800b898 <main+0xd4>
 800b966:	f640 7330 	movw	r3, #3888	; 0xf30
 800b96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b00      	cmp	r3, #0
 800b974:	d090      	beq.n	800b898 <main+0xd4>
		{
#endif
			if(NULL != loop)
 800b976:	f24a 1369 	movw	r3, #41321	; 0xa169
 800b97a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <main+0x1c2>
			{
				loop();
 800b982:	f7fe fbf1 	bl	800a168 <loop>
			}

			if(NULL != pUserFunction)
 800b986:	f640 7350 	movw	r3, #3920	; 0xf50
 800b98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d081      	beq.n	800b898 <main+0xd4>
			{
				pUserFunction();
 800b994:	f640 7350 	movw	r3, #3920	; 0xf50
 800b998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4798      	blx	r3
			}
#ifdef SPARK_WLAN_ENABLE
		}
#endif
#endif
	}
 800b9a0:	e77a      	b.n	800b898 <main+0xd4>
 800b9a2:	bf00      	nop

0800b9a4 <Delay>:
* Input          : nTime: specifies the delay time length, in milliseconds.
* Output         : None
* Return         : None
*******************************************************************************/
void Delay(uint32_t nTime)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
    TimingDelay = nTime;
 800b9ac:	f640 7328 	movw	r3, #3880	; 0xf28
 800b9b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	601a      	str	r2, [r3, #0]

    // /* Enable the SysTick Counter */
    // SysTick->CTRL |= SysTick_CTRL_ENABLE;

    while(TimingDelay != 0);
 800b9b8:	bf00      	nop
 800b9ba:	f640 7328 	movw	r3, #3880	; 0xf28
 800b9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1f8      	bne.n	800b9ba <Delay+0x16>
    // /* Disable the SysTick Counter */
    // SysTick->CTRL &= ~SysTick_CTRL_ENABLE;

    // /* Clear the SysTick Counter */
    // SysTick->VAL = (uint32_t)0x00;
}
 800b9c8:	f107 070c 	add.w	r7, r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bc80      	pop	{r7}
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop

0800b9d4 <Timing_Decrement>:
* Input          : None
* Output         : Timing
* Return         : None
*******************************************************************************/
void Timing_Decrement(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	af00      	add	r7, sp, #0
	TimingMillis++;
 800b9d8:	f640 7344 	movw	r3, #3908	; 0xf44
 800b9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f103 0201 	add.w	r2, r3, #1
 800b9e6:	f640 7344 	movw	r3, #3908	; 0xf44
 800b9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9ee:	601a      	str	r2, [r3, #0]

    if (TimingDelay != 0x00)
 800b9f0:	f640 7328 	movw	r3, #3880	; 0xf28
 800b9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00b      	beq.n	800ba16 <Timing_Decrement+0x42>
    {
        TimingDelay--;
 800b9fe:	f640 7328 	movw	r3, #3880	; 0xf28
 800ba02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800ba0c:	f640 7328 	movw	r3, #3880	; 0xf28
 800ba10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba14:	601a      	str	r2, [r3, #0]
    }

    if (TimingLED1 != 0x00)
 800ba16:	f640 7320 	movw	r3, #3872	; 0xf20
 800ba1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00c      	beq.n	800ba3e <Timing_Decrement+0x6a>
    {
        TimingLED1--;
 800ba24:	f640 7320 	movw	r3, #3872	; 0xf20
 800ba28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800ba32:	f640 7320 	movw	r3, #3872	; 0xf20
 800ba36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e026      	b.n	800ba8c <Timing_Decrement+0xb8>
    }
    else if(!SPARK_DEVICE_ACKED)
 800ba3e:	f640 7330 	movw	r3, #3888	; 0xf30
 800ba42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10b      	bne.n	800ba66 <Timing_Decrement+0x92>
    {
    	LED_Toggle(LED1);
 800ba4e:	f04f 0000 	mov.w	r0, #0
 800ba52:	f7ff f9d9 	bl	800ae08 <LED_Toggle>
    	TimingLED1 = 100;	//100ms
 800ba56:	f640 7320 	movw	r3, #3872	; 0xf20
 800ba5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba5e:	f04f 0264 	mov.w	r2, #100	; 0x64
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	e012      	b.n	800ba8c <Timing_Decrement+0xb8>
    }
    else
    {
    	static __IO uint8_t SparkDeviceAckedLedOn = 0;
    	if(!SparkDeviceAckedLedOn)
 800ba66:	f240 53ac 	movw	r3, #1452	; 0x5ac
 800ba6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10a      	bne.n	800ba8c <Timing_Decrement+0xb8>
    	{
    		LED_On(LED1);//SPARK_DEVICE_ACKED
 800ba76:	f04f 0000 	mov.w	r0, #0
 800ba7a:	f7ff f991 	bl	800ada0 <LED_On>
    		SparkDeviceAckedLedOn = 1;
 800ba7e:	f240 53ac 	movw	r3, #1452	; 0x5ac
 800ba82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba86:	f04f 0201 	mov.w	r2, #1
 800ba8a:	701a      	strb	r2, [r3, #0]
    	}
    }

    if (TimingLED2 != 0x00)
 800ba8c:	f640 733c 	movw	r3, #3900	; 0xf3c
 800ba90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00b      	beq.n	800bab2 <Timing_Decrement+0xde>
    {
        TimingLED2--;
 800ba9a:	f640 733c 	movw	r3, #3900	; 0xf3c
 800ba9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800baa8:	f640 733c 	movw	r3, #3900	; 0xf3c
 800baac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bab0:	601a      	str	r2, [r3, #0]
    }

    if (TimingBUTTON1 != 0x00)
 800bab2:	f640 732c 	movw	r3, #3884	; 0xf2c
 800bab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00b      	beq.n	800bad8 <Timing_Decrement+0x104>
    {
    	TimingBUTTON1--;
 800bac0:	f640 732c 	movw	r3, #3884	; 0xf2c
 800bac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800bace:	f640 732c 	movw	r3, #3884	; 0xf2c
 800bad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bad6:	601a      	str	r2, [r3, #0]
    }

    if(BUTTON_GetDebouncedState(BUTTON1) != 0x00)
 800bad8:	f04f 0000 	mov.w	r0, #0
 800badc:	f7ff fad2 	bl	800b084 <BUTTON_GetDebouncedState>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00a      	beq.n	800bafc <Timing_Decrement+0x128>
    {
    	//Enter First Time Config On Next System Reset
    	//Since socket connect() is currently blocking
#ifdef DFU_BUILD_ENABLE
		Smart_Config_SysFlag = 0xFFFF;
 800bae6:	f240 0348 	movw	r3, #72	; 0x48
 800baea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800baee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baf2:	801a      	strh	r2, [r3, #0]
		Save_SystemFlags();
 800baf4:	f000 f8a4 	bl	800bc40 <Save_SystemFlags>
#else
		BKP_WriteBackupRegister(BKP_DR2, 0xFFFF);
#endif
    	NVIC_SystemReset();
 800baf8:	f7ff fe4c 	bl	800b794 <NVIC_SystemReset>
    }

#ifdef SPARK_WLAN_ENABLE
	if (SPARK_SOCKET_CONNECTED)
 800bafc:	f640 731e 	movw	r3, #3870	; 0xf1e
 800bb00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d071      	beq.n	800bbf0 <Timing_Decrement+0x21c>
	{
		SPARK_SOCKET_ALIVE = 1;
 800bb0c:	f640 7331 	movw	r3, #3889	; 0xf31
 800bb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb14:	f04f 0201 	mov.w	r2, #1
 800bb18:	701a      	strb	r2, [r3, #0]

		if (TimingSparkProcessAPI >= TIMING_SPARK_PROCESS_API)
 800bb1a:	f640 7340 	movw	r3, #3904	; 0xf40
 800bb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2bc7      	cmp	r3, #199	; 0xc7
 800bb26:	d913      	bls.n	800bb50 <Timing_Decrement+0x17c>
		{
			TimingSparkProcessAPI = 0;
 800bb28:	f640 7340 	movw	r3, #3904	; 0xf40
 800bb2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb30:	f04f 0200 	mov.w	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]

			if(Spark_Process_API_Response() < 0)
 800bb36:	f000 fd07 	bl	800c548 <Spark_Process_API_Response>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	da13      	bge.n	800bb68 <Timing_Decrement+0x194>
				SPARK_SOCKET_ALIVE = 0;
 800bb40:	f640 7331 	movw	r3, #3889	; 0xf31
 800bb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb48:	f04f 0200 	mov.w	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	e00b      	b.n	800bb68 <Timing_Decrement+0x194>
		}
		else
		{
			TimingSparkProcessAPI++;
 800bb50:	f640 7340 	movw	r3, #3904	; 0xf40
 800bb54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f103 0201 	add.w	r2, r3, #1
 800bb5e:	f640 7340 	movw	r3, #3904	; 0xf40
 800bb62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb66:	601a      	str	r2, [r3, #0]
		}

		if (SPARK_DEVICE_ACKED)
 800bb68:	f640 7330 	movw	r3, #3888	; 0xf30
 800bb6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d023      	beq.n	800bbc0 <Timing_Decrement+0x1ec>
		{
			if (TimingSparkAliveTimeout >= TIMING_SPARK_ALIVE_TIMEOUT)
 800bb78:	f640 7334 	movw	r3, #3892	; 0xf34
 800bb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	f643 2397 	movw	r3, #14999	; 0x3a97
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d90e      	bls.n	800bba8 <Timing_Decrement+0x1d4>
			{
				TimingSparkAliveTimeout = 0;
 800bb8a:	f640 7334 	movw	r3, #3892	; 0xf34
 800bb8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb92:	f04f 0200 	mov.w	r2, #0
 800bb96:	601a      	str	r2, [r3, #0]

				SPARK_SOCKET_ALIVE = 0;
 800bb98:	f640 7331 	movw	r3, #3889	; 0xf31
 800bb9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bba0:	f04f 0200 	mov.w	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
 800bba6:	e00b      	b.n	800bbc0 <Timing_Decrement+0x1ec>
			}
			else
			{
				TimingSparkAliveTimeout++;
 800bba8:	f640 7334 	movw	r3, #3892	; 0xf34
 800bbac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f103 0201 	add.w	r2, r3, #1
 800bbb6:	f640 7334 	movw	r3, #3892	; 0xf34
 800bbba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bbbe:	601a      	str	r2, [r3, #0]
			}
		}

		if(SPARK_SOCKET_ALIVE != 1)
 800bbc0:	f640 7331 	movw	r3, #3889	; 0xf31
 800bbc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d00f      	beq.n	800bbf0 <Timing_Decrement+0x21c>
		{
			Spark_Disconnect();
 800bbd0:	f000 fa3a 	bl	800c048 <Spark_Disconnect>

			SPARK_SOCKET_CONNECTED = 0;
 800bbd4:	f640 731e 	movw	r3, #3870	; 0xf1e
 800bbd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bbdc:	f04f 0200 	mov.w	r2, #0
 800bbe0:	701a      	strb	r2, [r3, #0]
			SPARK_DEVICE_ACKED = 0;
 800bbe2:	f640 7330 	movw	r3, #3888	; 0xf30
 800bbe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bbea:	f04f 0200 	mov.w	r2, #0
 800bbee:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop

0800bbf4 <Load_SystemFlags>:

void Load_SystemFlags(void)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
#ifdef DFU_BUILD_ENABLE
	uint32_t Address = SYSTEM_FLAGS_ADDRESS;
 800bbfa:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800bbfe:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bc02:	607b      	str	r3, [r7, #4]

	NetApp_Timeout_SysFlag = (*(__IO uint16_t*) Address);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	881b      	ldrh	r3, [r3, #0]
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	f240 0346 	movw	r3, #70	; 0x46
 800bc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bc12:	801a      	strh	r2, [r3, #0]
	Address += 2;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f103 0302 	add.w	r3, r3, #2
 800bc1a:	607b      	str	r3, [r7, #4]

	Smart_Config_SysFlag = (*(__IO uint16_t*) Address);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	f240 0348 	movw	r3, #72	; 0x48
 800bc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bc2a:	801a      	strh	r2, [r3, #0]
	Address += 2;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f103 0302 	add.w	r3, r3, #2
 800bc32:	607b      	str	r3, [r7, #4]
#endif
}
 800bc34:	f107 070c 	add.w	r7, r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bc80      	pop	{r7}
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop

0800bc40 <Save_SystemFlags>:

void Save_SystemFlags(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
#ifdef DFU_BUILD_ENABLE
	uint32_t Address = SYSTEM_FLAGS_ADDRESS;
 800bc46:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800bc4a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800bc4e:	607b      	str	r3, [r7, #4]
	FLASH_Status FLASHStatus = FLASH_COMPLETE;
 800bc50:	f04f 0304 	mov.w	r3, #4
 800bc54:	70fb      	strb	r3, [r7, #3]

	/* Unlock the Flash Program Erase Controller */
	FLASH_Unlock();
 800bc56:	f003 fe67 	bl	800f928 <FLASH_Unlock>

	/* Clear All pending flags */
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 800bc5a:	f04f 0034 	mov.w	r0, #52	; 0x34
 800bc5e:	f003 ff0f 	bl	800fa80 <FLASH_ClearFlag>

	/* Erase the Internal Flash pages */
	FLASHStatus = FLASH_ErasePage(SYSTEM_FLAGS_ADDRESS);
 800bc62:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800bc66:	f6c0 0000 	movt	r0, #2048	; 0x800
 800bc6a:	f003 fe87 	bl	800f97c <FLASH_ErasePage>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	70fb      	strb	r3, [r7, #3]
	while(FLASHStatus != FLASH_COMPLETE);
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	2b04      	cmp	r3, #4
 800bc76:	d1fc      	bne.n	800bc72 <Save_SystemFlags+0x32>

	/* Program NetApp_Timeout_SysFlag */
	FLASHStatus = FLASH_ProgramHalfWord(Address, NetApp_Timeout_SysFlag);
 800bc78:	f240 0346 	movw	r3, #70	; 0x46
 800bc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4619      	mov	r1, r3
 800bc86:	f003 fec1 	bl	800fa0c <FLASH_ProgramHalfWord>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	70fb      	strb	r3, [r7, #3]
	while(FLASHStatus != FLASH_COMPLETE);
 800bc8e:	78fb      	ldrb	r3, [r7, #3]
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	d1fc      	bne.n	800bc8e <Save_SystemFlags+0x4e>
	Address += 2;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f103 0302 	add.w	r3, r3, #2
 800bc9a:	607b      	str	r3, [r7, #4]

	/* Program Smart_Config_SysFlag */
	FLASHStatus = FLASH_ProgramHalfWord(Address, Smart_Config_SysFlag);
 800bc9c:	f240 0348 	movw	r3, #72	; 0x48
 800bca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f003 feaf 	bl	800fa0c <FLASH_ProgramHalfWord>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	70fb      	strb	r3, [r7, #3]
	while(FLASHStatus != FLASH_COMPLETE);
 800bcb2:	78fb      	ldrb	r3, [r7, #3]
 800bcb4:	2b04      	cmp	r3, #4
 800bcb6:	d1fc      	bne.n	800bcb2 <Save_SystemFlags+0x72>
	Address += 2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f103 0302 	add.w	r3, r3, #2
 800bcbe:	607b      	str	r3, [r7, #4]

	/* Locks the FLASH Program Erase Controller */
	FLASH_Lock();
 800bcc0:	f003 fe4a 	bl	800f958 <FLASH_Lock>
#endif
}
 800bcc4:	f107 0708 	add.w	r7, r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <Set_NetApp_Timeout>:

void Set_NetApp_Timeout(void)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
	unsigned long aucDHCP = 14400;
 800bcd2:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 800bcd6:	60fb      	str	r3, [r7, #12]
	unsigned long aucARP = 3600;
 800bcd8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bcdc:	60bb      	str	r3, [r7, #8]
	unsigned long aucKeepalive = 10;
 800bcde:	f04f 030a 	mov.w	r3, #10
 800bce2:	607b      	str	r3, [r7, #4]
	unsigned long aucInactivity = 60;
 800bce4:	f04f 033c 	mov.w	r3, #60	; 0x3c
 800bce8:	603b      	str	r3, [r7, #0]

#ifdef DFU_BUILD_ENABLE
	NetApp_Timeout_SysFlag = 0xFFFF;
 800bcea:	f240 0346 	movw	r3, #70	; 0x46
 800bcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bcf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcf6:	801a      	strh	r2, [r3, #0]
	Save_SystemFlags();
 800bcf8:	f7ff ffa2 	bl	800bc40 <Save_SystemFlags>
#else
	BKP_WriteBackupRegister(BKP_DR1, 0xFFFF);
#endif

	netapp_timeout_values(&aucDHCP, &aucARP, &aucKeepalive, &aucInactivity);
 800bcfc:	f107 000c 	add.w	r0, r7, #12
 800bd00:	f107 0108 	add.w	r1, r7, #8
 800bd04:	f107 0204 	add.w	r2, r7, #4
 800bd08:	463b      	mov	r3, r7
 800bd0a:	f005 fb37 	bl	801137c <netapp_timeout_values>

#ifdef DFU_BUILD_ENABLE
	NetApp_Timeout_SysFlag = 0xAAAA;
 800bd0e:	f240 0346 	movw	r3, #70	; 0x46
 800bd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd16:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bd1a:	801a      	strh	r2, [r3, #0]
	Save_SystemFlags();
 800bd1c:	f7ff ff90 	bl	800bc40 <Save_SystemFlags>
#else
	BKP_WriteBackupRegister(BKP_DR1, 0xAAAA);
#endif
}
 800bd20:	f107 0710 	add.w	r7, r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <Start_Smart_Config>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Start_Smart_Config(void)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	af00      	add	r7, sp, #0
	WLAN_SMART_CONFIG_DONE = 0;
 800bd2c:	f640 7324 	movw	r3, #3876	; 0xf24
 800bd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd34:	f04f 0200 	mov.w	r2, #0
 800bd38:	701a      	strb	r2, [r3, #0]
	WLAN_CONNECTED = 0;
 800bd3a:	f640 7319 	movw	r3, #3865	; 0xf19
 800bd3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd42:	f04f 0200 	mov.w	r2, #0
 800bd46:	701a      	strb	r2, [r3, #0]
	WLAN_DHCP = 0;
 800bd48:	f640 7338 	movw	r3, #3896	; 0xf38
 800bd4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd50:	f04f 0200 	mov.w	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
	WLAN_CAN_SHUTDOWN = 0;
 800bd56:	f640 7318 	movw	r3, #3864	; 0xf18
 800bd5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd5e:	f04f 0200 	mov.w	r2, #0
 800bd62:	701a      	strb	r2, [r3, #0]

#ifdef DFU_BUILD_ENABLE
	Smart_Config_SysFlag = 0xFFFF;
 800bd64:	f240 0348 	movw	r3, #72	; 0x48
 800bd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd70:	801a      	strh	r2, [r3, #0]
	Save_SystemFlags();
 800bd72:	f7ff ff65 	bl	800bc40 <Save_SystemFlags>
#endif

	//
	// Reset all the previous configuration
	//
	wlan_ioctl_set_connection_policy(DISABLE, DISABLE, DISABLE);
 800bd76:	f04f 0000 	mov.w	r0, #0
 800bd7a:	f04f 0100 	mov.w	r1, #0
 800bd7e:	f04f 0200 	mov.w	r2, #0
 800bd82:	f006 f8a9 	bl	8011ed8 <wlan_ioctl_set_connection_policy>
	wlan_ioctl_del_profile(255);
 800bd86:	f04f 00ff 	mov.w	r0, #255	; 0xff
 800bd8a:	f006 f8db 	bl	8011f44 <wlan_ioctl_del_profile>

	//Wait until CC3000 is disconnected
	while (WLAN_CONNECTED == 1)
 800bd8e:	e005      	b.n	800bd9c <Start_Smart_Config+0x74>
	{
		//Delay 100ms
		Delay(100);
 800bd90:	f04f 0064 	mov.w	r0, #100	; 0x64
 800bd94:	f7ff fe06 	bl	800b9a4 <Delay>
		hci_unsolicited_event_handler();
 800bd98:	f005 f89e 	bl	8010ed8 <hci_unsolicited_event_handler>
	//
	wlan_ioctl_set_connection_policy(DISABLE, DISABLE, DISABLE);
	wlan_ioctl_del_profile(255);

	//Wait until CC3000 is disconnected
	while (WLAN_CONNECTED == 1)
 800bd9c:	f640 7319 	movw	r3, #3865	; 0xf19
 800bda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d0f2      	beq.n	800bd90 <Start_Smart_Config+0x68>
	}

	//
	// Start the SmartConfig start process
	//
	wlan_smart_config_start(1);
 800bdaa:	f04f 0001 	mov.w	r0, #1
 800bdae:	f006 f949 	bl	8012044 <wlan_smart_config_start>

	//
	// Wait for First Time config finished
	//
	while (WLAN_SMART_CONFIG_DONE == 0)
 800bdb2:	e007      	b.n	800bdc4 <Start_Smart_Config+0x9c>
	{
		/* Toggle the LED2 every 100ms */
		LED_Toggle(LED2);
 800bdb4:	f04f 0001 	mov.w	r0, #1
 800bdb8:	f7ff f826 	bl	800ae08 <LED_Toggle>
		Delay(100);
 800bdbc:	f04f 0064 	mov.w	r0, #100	; 0x64
 800bdc0:	f7ff fdf0 	bl	800b9a4 <Delay>
	wlan_smart_config_start(1);

	//
	// Wait for First Time config finished
	//
	while (WLAN_SMART_CONFIG_DONE == 0)
 800bdc4:	f640 7324 	movw	r3, #3876	; 0xf24
 800bdc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0f0      	beq.n	800bdb4 <Start_Smart_Config+0x8c>
		/* Toggle the LED2 every 100ms */
		LED_Toggle(LED2);
		Delay(100);
	}

	LED_Off(LED2);
 800bdd2:	f04f 0001 	mov.w	r0, #1
 800bdd6:	f7fe fffd 	bl	800add4 <LED_Off>

	//
	// Configure to connect automatically to the AP retrieved in the
	// First Time config process
	//
	wlan_ioctl_set_connection_policy(DISABLE, DISABLE, ENABLE);
 800bdda:	f04f 0000 	mov.w	r0, #0
 800bdde:	f04f 0100 	mov.w	r1, #0
 800bde2:	f04f 0201 	mov.w	r2, #1
 800bde6:	f006 f877 	bl	8011ed8 <wlan_ioctl_set_connection_policy>

#ifdef DFU_BUILD_ENABLE
	Smart_Config_SysFlag = 0xBBBB;
 800bdea:	f240 0348 	movw	r3, #72	; 0x48
 800bdee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bdf2:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 800bdf6:	801a      	strh	r2, [r3, #0]
	Save_SystemFlags();
 800bdf8:	f7ff ff22 	bl	800bc40 <Save_SystemFlags>
#else
	BKP_WriteBackupRegister(BKP_DR2, 0xBBBB);
#endif

	NVIC_SystemReset();
 800bdfc:	f7ff fcca 	bl	800b794 <NVIC_SystemReset>
	//
	// Mask out all non-required events
	//
	wlan_set_event_mask(HCI_EVNT_WLAN_KEEPALIVE | HCI_EVNT_WLAN_UNSOL_INIT | HCI_EVNT_WLAN_ASYNC_PING_REPORT);
*/
}
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop

0800be04 <WLAN_Async_Callback>:

/* WLAN Application related callbacks passed to wlan_init */
void WLAN_Async_Callback(long lEventType, char *data, unsigned char length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	4613      	mov	r3, r2
 800be10:	71fb      	strb	r3, [r7, #7]
	switch (lEventType)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f248 0202 	movw	r2, #32770	; 0x8002
 800be18:	4293      	cmp	r3, r2
 800be1a:	d029      	beq.n	800be70 <WLAN_Async_Callback+0x6c>
 800be1c:	f248 0202 	movw	r2, #32770	; 0x8002
 800be20:	4293      	cmp	r3, r2
 800be22:	dc06      	bgt.n	800be32 <WLAN_Async_Callback+0x2e>
 800be24:	2b99      	cmp	r3, #153	; 0x99
 800be26:	d057      	beq.n	800bed8 <WLAN_Async_Callback+0xd4>
 800be28:	f248 0201 	movw	r2, #32769	; 0x8001
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d017      	beq.n	800be60 <WLAN_Async_Callback+0x5c>
 800be30:	e05a      	b.n	800bee8 <WLAN_Async_Callback+0xe4>
 800be32:	f248 0210 	movw	r2, #32784	; 0x8010
 800be36:	4293      	cmp	r3, r2
 800be38:	d042      	beq.n	800bec0 <WLAN_Async_Callback+0xbc>
 800be3a:	f248 0280 	movw	r2, #32896	; 0x8080
 800be3e:	4293      	cmp	r3, r2
 800be40:	d152      	bne.n	800bee8 <WLAN_Async_Callback+0xe4>
	{
		case HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE:
			WLAN_SMART_CONFIG_DONE = 1;
 800be42:	f640 7324 	movw	r3, #3876	; 0xf24
 800be46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be4a:	f04f 0201 	mov.w	r2, #1
 800be4e:	701a      	strb	r2, [r3, #0]
			WLAN_MANUAL_CONNECT = 0;
 800be50:	f240 0344 	movw	r3, #68	; 0x44
 800be54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be58:	f04f 0200 	mov.w	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
			break;
 800be5e:	e043      	b.n	800bee8 <WLAN_Async_Callback+0xe4>

		case HCI_EVNT_WLAN_UNSOL_CONNECT:
			WLAN_CONNECTED = 1;
 800be60:	f640 7319 	movw	r3, #3865	; 0xf19
 800be64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be68:	f04f 0201 	mov.w	r2, #1
 800be6c:	701a      	strb	r2, [r3, #0]
			break;
 800be6e:	e03b      	b.n	800bee8 <WLAN_Async_Callback+0xe4>

		case HCI_EVNT_WLAN_UNSOL_DISCONNECT:
			WLAN_CONNECTED = 0;
 800be70:	f640 7319 	movw	r3, #3865	; 0xf19
 800be74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be78:	f04f 0200 	mov.w	r2, #0
 800be7c:	701a      	strb	r2, [r3, #0]
			WLAN_DHCP = 0;
 800be7e:	f640 7338 	movw	r3, #3896	; 0xf38
 800be82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be86:	f04f 0200 	mov.w	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
			SPARK_SOCKET_CONNECTED = 0;
 800be8c:	f640 731e 	movw	r3, #3870	; 0xf1e
 800be90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be94:	f04f 0200 	mov.w	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
			SPARK_SOCKET_ALIVE = 0;
 800be9a:	f640 7331 	movw	r3, #3889	; 0xf31
 800be9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bea2:	f04f 0200 	mov.w	r2, #0
 800bea6:	701a      	strb	r2, [r3, #0]
			SPARK_DEVICE_ACKED = 0;
 800bea8:	f640 7330 	movw	r3, #3888	; 0xf30
 800beac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800beb0:	f04f 0200 	mov.w	r2, #0
 800beb4:	701a      	strb	r2, [r3, #0]
			LED_Off(LED2);
 800beb6:	f04f 0001 	mov.w	r0, #1
 800beba:	f7fe ff8b 	bl	800add4 <LED_Off>
			break;
 800bebe:	e013      	b.n	800bee8 <WLAN_Async_Callback+0xe4>

		case HCI_EVNT_WLAN_UNSOL_DHCP:
			WLAN_DHCP = 1;
 800bec0:	f640 7338 	movw	r3, #3896	; 0xf38
 800bec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bec8:	f04f 0201 	mov.w	r2, #1
 800becc:	701a      	strb	r2, [r3, #0]
			LED_On(LED2);
 800bece:	f04f 0001 	mov.w	r0, #1
 800bed2:	f7fe ff65 	bl	800ada0 <LED_On>
			break;
 800bed6:	e007      	b.n	800bee8 <WLAN_Async_Callback+0xe4>

		case HCI_EVENT_CC3000_CAN_SHUT_DOWN:
			WLAN_CAN_SHUTDOWN = 1;
 800bed8:	f640 7318 	movw	r3, #3864	; 0xf18
 800bedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bee0:	f04f 0201 	mov.w	r2, #1
 800bee4:	701a      	strb	r2, [r3, #0]
			break;
 800bee6:	bf00      	nop
	}
}
 800bee8:	f107 0710 	add.w	r7, r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <WLAN_Firmware_Patch>:

char *WLAN_Firmware_Patch(unsigned long *length)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
	*length = 0;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f04f 0200 	mov.w	r2, #0
 800befe:	601a      	str	r2, [r3, #0]
	return NULL;
 800bf00:	f04f 0300 	mov.w	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	f107 070c 	add.w	r7, r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bc80      	pop	{r7}
 800bf0e:	4770      	bx	lr

0800bf10 <WLAN_Driver_Patch>:

char *WLAN_Driver_Patch(unsigned long *length)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
	*length = 0;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f04f 0200 	mov.w	r2, #0
 800bf1e:	601a      	str	r2, [r3, #0]
	return NULL;
 800bf20:	f04f 0300 	mov.w	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	f107 070c 	add.w	r7, r7, #12
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bc80      	pop	{r7}
 800bf2e:	4770      	bx	lr

0800bf30 <WLAN_BootLoader_Patch>:

char *WLAN_BootLoader_Patch(unsigned long *length)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	*length = 0;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f04f 0200 	mov.w	r2, #0
 800bf3e:	601a      	str	r2, [r3, #0]
	return NULL;
 800bf40:	f04f 0300 	mov.w	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	f107 070c 	add.w	r7, r7, #12
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bc80      	pop	{r7}
 800bf4e:	4770      	bx	lr

0800bf50 <Spark_Connect>:
static int str_len(char str[]);
static void sub_str(char dest[], char src[], int offset, int len);
*/

int Spark_Connect(void)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
	int retVal = 0;
 800bf56:	f04f 0300 	mov.w	r3, #0
 800bf5a:	607b      	str	r3, [r7, #4]

    sparkSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 800bf5c:	f04f 0002 	mov.w	r0, #2
 800bf60:	f04f 0101 	mov.w	r1, #1
 800bf64:	f04f 0206 	mov.w	r2, #6
 800bf68:	f005 faea 	bl	8011540 <socket>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	f640 734c 	movw	r3, #3916	; 0xf4c
 800bf72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf76:	601a      	str	r2, [r3, #0]

    if (sparkSocket < 0)
 800bf78:	f640 734c 	movw	r3, #3916	; 0xf4c
 800bf7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	da02      	bge.n	800bf8c <Spark_Connect+0x3c>
    {
        //wlan_stop();
        return -1;
 800bf86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf8a:	e057      	b.n	800c03c <Spark_Connect+0xec>
    }

	// the family is always AF_INET
    tSocketAddr.sa_family = AF_INET;
 800bf8c:	f241 0354 	movw	r3, #4180	; 0x1054
 800bf90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf94:	f04f 0202 	mov.w	r2, #2
 800bf98:	801a      	strh	r2, [r3, #0]

	// the destination port
    tSocketAddr.sa_data[0] = (SPARK_SERVER_PORT & 0xFF00) >> 8;
 800bf9a:	f241 0354 	movw	r3, #4180	; 0x1054
 800bf9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfa2:	f04f 0223 	mov.w	r2, #35	; 0x23
 800bfa6:	709a      	strb	r2, [r3, #2]
    tSocketAddr.sa_data[1] = (SPARK_SERVER_PORT & 0x00FF);
 800bfa8:	f241 0354 	movw	r3, #4180	; 0x1054
 800bfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfb0:	f04f 021d 	mov.w	r2, #29
 800bfb4:	70da      	strb	r2, [r3, #3]

	// the destination IP address
	tSocketAddr.sa_data[2] = 54;	// First Octet of destination IP
 800bfb6:	f241 0354 	movw	r3, #4180	; 0x1054
 800bfba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfbe:	f04f 0236 	mov.w	r2, #54	; 0x36
 800bfc2:	711a      	strb	r2, [r3, #4]
	tSocketAddr.sa_data[3] = 235;	// Second Octet of destination IP
 800bfc4:	f241 0354 	movw	r3, #4180	; 0x1054
 800bfc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfcc:	f04f 02eb 	mov.w	r2, #235	; 0xeb
 800bfd0:	715a      	strb	r2, [r3, #5]
	tSocketAddr.sa_data[4] = 79; 	// Third Octet of destination IP
 800bfd2:	f241 0354 	movw	r3, #4180	; 0x1054
 800bfd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfda:	f04f 024f 	mov.w	r2, #79	; 0x4f
 800bfde:	719a      	strb	r2, [r3, #6]
	tSocketAddr.sa_data[5] = 249;	// Fourth Octet of destination IP
 800bfe0:	f241 0354 	movw	r3, #4180	; 0x1054
 800bfe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bfe8:	f04f 02f9 	mov.w	r2, #249	; 0xf9
 800bfec:	71da      	strb	r2, [r3, #7]

	retVal = connect(sparkSocket, &tSocketAddr, sizeof(tSocketAddr));
 800bfee:	f640 734c 	movw	r3, #3916	; 0xf4c
 800bff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f241 0154 	movw	r1, #4180	; 0x1054
 800bffe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c002:	f04f 0210 	mov.w	r2, #16
 800c006:	f005 fb15 	bl	8011634 <connect>
 800c00a:	6078      	str	r0, [r7, #4]

	if (retVal < 0)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	da02      	bge.n	800c018 <Spark_Connect+0xc8>
	{
		// Unable to connect
		return -1;
 800c012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c016:	e011      	b.n	800c03c <Spark_Connect+0xec>
	}
	else
	{
		retVal = Spark_Send_Device_Message(sparkSocket, (char *)Device_Secret, NULL, NULL);
 800c018:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4618      	mov	r0, r3
 800c024:	f242 71f4 	movw	r1, #10228	; 0x27f4
 800c028:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c02c:	f04f 0200 	mov.w	r2, #0
 800c030:	f04f 0300 	mov.w	r3, #0
 800c034:	f000 fad8 	bl	800c5e8 <Spark_Send_Device_Message>
 800c038:	6078      	str	r0, [r7, #4]
	}

    return retVal;
 800c03a:	687b      	ldr	r3, [r7, #4]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	f107 0708 	add.w	r7, r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop

0800c048 <Spark_Disconnect>:

int Spark_Disconnect(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
    int retVal = 0;
 800c04e:	f04f 0300 	mov.w	r3, #0
 800c052:	607b      	str	r3, [r7, #4]

    retVal = closesocket(sparkSocket);
 800c054:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4618      	mov	r0, r3
 800c060:	f005 fab2 	bl	80115c8 <closesocket>
 800c064:	6078      	str	r0, [r7, #4]

    if(retVal == 0)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d106      	bne.n	800c07a <Spark_Disconnect+0x32>
    	sparkSocket = 0xFFFFFFFF;
 800c06c:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c078:	601a      	str	r2, [r3, #0]

    return retVal;
 800c07a:	687b      	ldr	r3, [r7, #4]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	f107 0708 	add.w	r7, r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop

0800c088 <receive_line>:
// called repeatedly from an interrupt handler, so DO NOT BLOCK
// returns: -1 on error, signifying socket disconnected
//          0 if we have not yet received a full line
//          the number of bytes received when we have received a full line
int receive_line()
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b08a      	sub	sp, #40	; 0x28
 800c08c:	af02      	add	r7, sp, #8
	if (0 == total_bytes_received)
 800c08e:	f240 53b0 	movw	r3, #1456	; 0x5b0
 800c092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d109      	bne.n	800c0b0 <receive_line+0x28>
	{
		memset(recvBuff, 0, SPARK_BUF_LEN);
 800c09c:	f640 7054 	movw	r0, #3924	; 0xf54
 800c0a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c0a4:	f04f 0100 	mov.w	r1, #0
 800c0a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0ac:	f006 f8ac 	bl	8012208 <memset>
	}

    // reset the fd_set structure
    FD_ZERO(&readSet);
 800c0b0:	f640 7348 	movw	r3, #3912	; 0xf48
 800c0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0b8:	617b      	str	r3, [r7, #20]
 800c0ba:	f04f 0300 	mov.w	r3, #0
 800c0be:	61fb      	str	r3, [r7, #28]
 800c0c0:	e009      	b.n	800c0d6 <receive_line+0x4e>
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	69fa      	ldr	r2, [r7, #28]
 800c0c6:	f04f 0100 	mov.w	r1, #0
 800c0ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	f103 0301 	add.w	r3, r3, #1
 800c0d4:	61fb      	str	r3, [r7, #28]
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d0f2      	beq.n	800c0c2 <receive_line+0x3a>
    FD_SET(sparkSocket, &readSet);
 800c0dc:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	ea4f 1253 	mov.w	r2, r3, lsr #5
 800c0ea:	f640 7348 	movw	r3, #3912	; 0xf48
 800c0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0f6:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 031f 	and.w	r3, r3, #31
 800c104:	f04f 0001 	mov.w	r0, #1
 800c108:	fa00 f303 	lsl.w	r3, r0, r3
 800c10c:	4319      	orrs	r1, r3
 800c10e:	f640 7348 	movw	r3, #3912	; 0xf48
 800c112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    int buffer_bytes_available = SPARK_BUF_LEN - 1 - total_bytes_received;
 800c11a:	f240 53b0 	movw	r3, #1456	; 0x5b0
 800c11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c128:	613b      	str	r3, [r7, #16]
    char *newline = NULL;
 800c12a:	f04f 0300 	mov.w	r3, #0
 800c12e:	61bb      	str	r3, [r7, #24]

    // tell select to timeout after 500 microseconds
    timeout.tv_sec = 0;
 800c130:	f241 0364 	movw	r3, #4196	; 0x1064
 800c134:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c138:	f04f 0200 	mov.w	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
    timeout.tv_usec = 500;
 800c13e:	f241 0364 	movw	r3, #4196	; 0x1064
 800c142:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c146:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c14a:	605a      	str	r2, [r3, #4]

	int num_fds_ready = select(sparkSocket+1, &readSet, NULL, NULL, &timeout);
 800c14c:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c150:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f103 0201 	add.w	r2, r3, #1
 800c15a:	f241 0364 	movw	r3, #4196	; 0x1064
 800c15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	4610      	mov	r0, r2
 800c166:	f640 7148 	movw	r1, #3912	; 0xf48
 800c16a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c16e:	f04f 0200 	mov.w	r2, #0
 800c172:	f04f 0300 	mov.w	r3, #0
 800c176:	f005 fab3 	bl	80116e0 <select>
 800c17a:	60f8      	str	r0, [r7, #12]

	if (0 < num_fds_ready)
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	dd4c      	ble.n	800c21c <receive_line+0x194>
	{
		if (FD_ISSET(sparkSocket, &readSet))
 800c182:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	ea4f 1253 	mov.w	r2, r3, lsr #5
 800c190:	f640 7348 	movw	r3, #3912	; 0xf48
 800c194:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c198:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c19c:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 031f 	and.w	r3, r3, #31
 800c1aa:	fa42 f303 	asr.w	r3, r2, r3
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d032      	beq.n	800c21c <receive_line+0x194>
		{
			char *buffer_ptr = recvBuff + total_bytes_received;
 800c1b6:	f240 53b0 	movw	r3, #1456	; 0x5b0
 800c1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	f640 7354 	movw	r3, #3924	; 0xf54
 800c1c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1ca:	18d3      	adds	r3, r2, r3
 800c1cc:	60bb      	str	r3, [r7, #8]

			int bytes_received_once = recv(sparkSocket, buffer_ptr, buffer_bytes_available, 0);
 800c1ce:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	68b9      	ldr	r1, [r7, #8]
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	f04f 0300 	mov.w	r3, #0
 800c1e2:	f005 fb8d 	bl	8011900 <recv>
 800c1e6:	6078      	str	r0, [r7, #4]

			if (0 > bytes_received_once)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da01      	bge.n	800c1f2 <receive_line+0x16a>
				return bytes_received_once;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	e02b      	b.n	800c24a <receive_line+0x1c2>

			total_bytes_received += bytes_received_once;
 800c1f2:	f240 53b0 	movw	r3, #1456	; 0x5b0
 800c1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	18d2      	adds	r2, r2, r3
 800c200:	f240 53b0 	movw	r3, #1456	; 0x5b0
 800c204:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c208:	601a      	str	r2, [r3, #0]
			newline = strchr(recvBuff, '\n');
 800c20a:	f640 7054 	movw	r0, #3924	; 0xf54
 800c20e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c212:	f04f 010a 	mov.w	r1, #10
 800c216:	f006 f88d 	bl	8012334 <strchr>
 800c21a:	61b8      	str	r0, [r7, #24]
		}
	}

    if (NULL == newline && 0 < buffer_bytes_available)
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d105      	bne.n	800c22e <receive_line+0x1a6>
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	dd02      	ble.n	800c22e <receive_line+0x1a6>
    {
    	return 0;
 800c228:	f04f 0300 	mov.w	r3, #0
 800c22c:	e00d      	b.n	800c24a <receive_line+0x1c2>
    }
    else
    {
    	int retVal = total_bytes_received;
 800c22e:	f240 53b0 	movw	r3, #1456	; 0x5b0
 800c232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	603b      	str	r3, [r7, #0]
    	total_bytes_received = 0;
 800c23a:	f240 53b0 	movw	r3, #1456	; 0x5b0
 800c23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c242:	f04f 0200 	mov.w	r2, #0
 800c246:	601a      	str	r2, [r3, #0]
    	return retVal;
 800c248:	683b      	ldr	r3, [r7, #0]
    }
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	f107 0720 	add.w	r7, r7, #32
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <process_command>:

// process the contents of recvBuff
// returns number of bytes transmitted or -1 on error
int process_command()
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
	int bytes_sent = 0;
 800c25a:	f04f 0300 	mov.w	r3, #0
 800c25e:	60fb      	str	r3, [r7, #12]

	// who
	if (0 == strncmp(recvBuff, API_Who, strlen(API_Who)))
 800c260:	f640 7054 	movw	r0, #3924	; 0xf54
 800c264:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c268:	f642 011c 	movw	r1, #10268	; 0x281c
 800c26c:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c270:	f04f 0203 	mov.w	r2, #3
 800c274:	f006 f9fa 	bl	801266c <strncmp>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d111      	bne.n	800c2a2 <process_command+0x4e>
	{
		bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Name, NULL, NULL);
 800c27e:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f242 71fc 	movw	r1, #10236	; 0x27fc
 800c28e:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c292:	f04f 0200 	mov.w	r2, #0
 800c296:	f04f 0300 	mov.w	r3, #0
 800c29a:	f000 f9a5 	bl	800c5e8 <Spark_Send_Device_Message>
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	e149      	b.n	800c536 <process_command+0x2e2>
	}

	// API alive signal received and acknowledged by core, reset alive timeout
	else if (0 == strncmp(recvBuff, API_Alive, strlen(API_Alive)))
 800c2a2:	f640 7054 	movw	r0, #3924	; 0xf54
 800c2a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c2aa:	f642 0114 	movw	r1, #10260	; 0x2814
 800c2ae:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c2b2:	f04f 0205 	mov.w	r2, #5
 800c2b6:	f006 f9d9 	bl	801266c <strncmp>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d127      	bne.n	800c310 <process_command+0xbc>
	{
		if(!SPARK_DEVICE_ACKED)
 800c2c0:	f640 7330 	movw	r3, #3888	; 0xf30
 800c2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d106      	bne.n	800c2de <process_command+0x8a>
		{
			SPARK_DEVICE_ACKED = 1;//First alive received by Core means Server received Device ID
 800c2d0:	f640 7330 	movw	r3, #3888	; 0xf30
 800c2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2d8:	f04f 0201 	mov.w	r2, #1
 800c2dc:	701a      	strb	r2, [r3, #0]
		}
		TimingSparkAliveTimeout = 0;
 800c2de:	f640 7334 	movw	r3, #3892	; 0xf34
 800c2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2e6:	f04f 0200 	mov.w	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]
		bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)API_Alive, NULL, NULL);
 800c2ec:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f642 0114 	movw	r1, #10260	; 0x2814
 800c2fc:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c300:	f04f 0200 	mov.w	r2, #0
 800c304:	f04f 0300 	mov.w	r3, #0
 800c308:	f000 f96e 	bl	800c5e8 <Spark_Send_Device_Message>
 800c30c:	60f8      	str	r0, [r7, #12]
 800c30e:	e112      	b.n	800c536 <process_command+0x2e2>
	}

	// command to set a pin high
	else if (0 == strncmp(recvBuff, High_Dx, 6))
 800c310:	f640 7054 	movw	r0, #3924	; 0xf54
 800c314:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c318:	f240 014c 	movw	r1, #76	; 0x4c
 800c31c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c320:	f04f 0206 	mov.w	r2, #6
 800c324:	f006 f9a2 	bl	801266c <strncmp>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d142      	bne.n	800c3b4 <process_command+0x160>
	{
		High_Dx[6] = recvBuff[6];
 800c32e:	f640 7354 	movw	r3, #3924	; 0xf54
 800c332:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c336:	799a      	ldrb	r2, [r3, #6]
 800c338:	f240 034c 	movw	r3, #76	; 0x4c
 800c33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c340:	719a      	strb	r2, [r3, #6]

		if (OK == DIO_SetState(atoc(High_Dx[6]), HIGH))
 800c342:	f240 034c 	movw	r3, #76	; 0x4c
 800c346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c34a:	799b      	ldrb	r3, [r3, #6]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 fa55 	bl	800c7fc <atoc>
 800c352:	4603      	mov	r3, r0
 800c354:	4618      	mov	r0, r3
 800c356:	f04f 0101 	mov.w	r1, #1
 800c35a:	f7fe fcb5 	bl	800acc8 <DIO_SetState>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d113      	bne.n	800c38c <process_command+0x138>
			bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Ok, (char *)High_Dx, NULL);
 800c364:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c368:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4618      	mov	r0, r3
 800c370:	f642 0104 	movw	r1, #10244	; 0x2804
 800c374:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c378:	f240 024c 	movw	r2, #76	; 0x4c
 800c37c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c380:	f04f 0300 	mov.w	r3, #0
 800c384:	f000 f930 	bl	800c5e8 <Spark_Send_Device_Message>
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	e0d4      	b.n	800c536 <process_command+0x2e2>
		else
			bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Fail, (char *)High_Dx, NULL);
 800c38c:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c390:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f642 0108 	movw	r1, #10248	; 0x2808
 800c39c:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c3a0:	f240 024c 	movw	r2, #76	; 0x4c
 800c3a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c3a8:	f04f 0300 	mov.w	r3, #0
 800c3ac:	f000 f91c 	bl	800c5e8 <Spark_Send_Device_Message>
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	e0c0      	b.n	800c536 <process_command+0x2e2>
	}

	// command to set a pin low
	else if (0 == strncmp(recvBuff, Low_Dx, 5))
 800c3b4:	f640 7054 	movw	r0, #3924	; 0xf54
 800c3b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c3bc:	f240 0154 	movw	r1, #84	; 0x54
 800c3c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c3c4:	f04f 0205 	mov.w	r2, #5
 800c3c8:	f006 f950 	bl	801266c <strncmp>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d142      	bne.n	800c458 <process_command+0x204>
	{
		Low_Dx[5] = recvBuff[5];
 800c3d2:	f640 7354 	movw	r3, #3924	; 0xf54
 800c3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c3da:	795a      	ldrb	r2, [r3, #5]
 800c3dc:	f240 0354 	movw	r3, #84	; 0x54
 800c3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c3e4:	715a      	strb	r2, [r3, #5]

		if (OK == DIO_SetState(atoc(Low_Dx[5]), LOW))
 800c3e6:	f240 0354 	movw	r3, #84	; 0x54
 800c3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c3ee:	795b      	ldrb	r3, [r3, #5]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 fa03 	bl	800c7fc <atoc>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f04f 0100 	mov.w	r1, #0
 800c3fe:	f7fe fc63 	bl	800acc8 <DIO_SetState>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d113      	bne.n	800c430 <process_command+0x1dc>
			bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Ok, (char *)Low_Dx, NULL);
 800c408:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4618      	mov	r0, r3
 800c414:	f642 0104 	movw	r1, #10244	; 0x2804
 800c418:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c41c:	f240 0254 	movw	r2, #84	; 0x54
 800c420:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c424:	f04f 0300 	mov.w	r3, #0
 800c428:	f000 f8de 	bl	800c5e8 <Spark_Send_Device_Message>
 800c42c:	60f8      	str	r0, [r7, #12]
 800c42e:	e082      	b.n	800c536 <process_command+0x2e2>
		else
			bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Fail, (char *)Low_Dx, NULL);
 800c430:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f642 0108 	movw	r1, #10248	; 0x2808
 800c440:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c444:	f240 0254 	movw	r2, #84	; 0x54
 800c448:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c44c:	f04f 0300 	mov.w	r3, #0
 800c450:	f000 f8ca 	bl	800c5e8 <Spark_Send_Device_Message>
 800c454:	60f8      	str	r0, [r7, #12]
 800c456:	e06e      	b.n	800c536 <process_command+0x2e2>
	}

	// command to call the user-defined function
	else if (0 == strncmp(recvBuff, API_UserFunc, strlen(API_UserFunc)))
 800c458:	f640 7054 	movw	r0, #3924	; 0xf54
 800c45c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c460:	f642 0120 	movw	r1, #10272	; 0x2820
 800c464:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c468:	f04f 0209 	mov.w	r2, #9
 800c46c:	f006 f8fe 	bl	801266c <strncmp>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d13b      	bne.n	800c4ee <process_command+0x29a>
	{
		char *user_arg = &recvBuff[strlen(API_UserFunc)];
 800c476:	4b33      	ldr	r3, [pc, #204]	; (800c544 <process_command+0x2f0>)
 800c478:	607b      	str	r3, [r7, #4]
		char *newline = strchr(user_arg, '\n');
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f04f 010a 	mov.w	r1, #10
 800c480:	f005 ff58 	bl	8012334 <strchr>
 800c484:	60b8      	str	r0, [r7, #8]
		if (NULL != newline)
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00d      	beq.n	800c4a8 <process_command+0x254>
		{
			if ('\r' == *(newline - 1))
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b0d      	cmp	r3, #13
 800c496:	d103      	bne.n	800c4a0 <process_command+0x24c>
				newline--;
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c49e:	60bb      	str	r3, [r7, #8]
			*newline = '\0';
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	f04f 0200 	mov.w	r2, #0
 800c4a6:	701a      	strb	r2, [r3, #0]
		}

	    memset(userBuff, 0, SPARK_BUF_LEN);
 800c4a8:	f241 006c 	movw	r0, #4204	; 0x106c
 800c4ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c4b0:	f04f 0100 	mov.w	r1, #0
 800c4b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4b8:	f005 fea6 	bl	8012208 <memset>
	    if(NULL != user_arg)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00b      	beq.n	800c4da <process_command+0x286>
	    {
	    	memcpy(userBuff, user_arg, strlen(user_arg));
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f006 f8a2 	bl	801260c <strlen>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f241 006c 	movw	r0, #4204	; 0x106c
 800c4ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c4d2:	6879      	ldr	r1, [r7, #4]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	f005 fde9 	bl	80120ac <memcpy>
	    }
		pUserFunction = user_function;
 800c4da:	f640 7350 	movw	r3, #3920	; 0xf50
 800c4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c4e2:	f24c 526d 	movw	r2, #50541	; 0xc56d
 800c4e6:	f6c0 0200 	movt	r2, #2048	; 0x800
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	e023      	b.n	800c536 <process_command+0x2e2>
	}

	// Do nothing for new line returned
	else if(strcmp(recvBuff, Device_CRLF) == 0)
 800c4ee:	f640 7054 	movw	r0, #3924	; 0xf54
 800c4f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c4f6:	f642 0110 	movw	r1, #10256	; 0x2810
 800c4fa:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c4fe:	f005 ff97 	bl	8012430 <strcmp>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <process_command+0x2bc>
	{
		bytes_sent = 0;
 800c508:	f04f 0300 	mov.w	r3, #0
 800c50c:	60fb      	str	r3, [r7, #12]
 800c50e:	e012      	b.n	800c536 <process_command+0x2e2>
	}

	else
	{
		bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Fail, (char *)recvBuff, NULL);
 800c510:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c514:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f642 0108 	movw	r1, #10248	; 0x2808
 800c520:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c524:	f640 7254 	movw	r2, #3924	; 0xf54
 800c528:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c52c:	f04f 0300 	mov.w	r3, #0
 800c530:	f000 f85a 	bl	800c5e8 <Spark_Send_Device_Message>
 800c534:	60f8      	str	r0, [r7, #12]
	}

	return bytes_sent;
 800c536:	68fb      	ldr	r3, [r7, #12]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	f107 0710 	add.w	r7, r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20000f5d 	.word	0x20000f5d

0800c548 <Spark_Process_API_Response>:

int Spark_Process_API_Response(void)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
	int retVal = receive_line();
 800c54e:	f7ff fd9b 	bl	800c088 <receive_line>
 800c552:	6078      	str	r0, [r7, #4]

	if (0 < retVal)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	dd02      	ble.n	800c560 <Spark_Process_API_Response+0x18>
		retVal = process_command();
 800c55a:	f7ff fe7b 	bl	800c254 <process_command>
 800c55e:	6078      	str	r0, [r7, #4]

	return retVal;
 800c560:	687b      	ldr	r3, [r7, #4]
}
 800c562:	4618      	mov	r0, r3
 800c564:	f107 0708 	add.w	r7, r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <user_function>:
	lenStr[len] = '\0';
	Spark_Send_Device_Message(sparkSocket, (char *)API_Callback, (char *)callback_name, (char *)lenStr);
}

static void user_function(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
	if (NULL != userFunction)
 800c572:	f240 0300 	movw	r3, #0
 800c576:	f2c0 0300 	movt	r3, #0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d02f      	beq.n	800c5de <user_function+0x72>
	{
		pUserFunction = NULL;
 800c57e:	f640 7350 	movw	r3, #3920	; 0xf50
 800c582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c586:	f04f 0200 	mov.w	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
		char retStr[11];
		int userResult = userFunction(userBuff);
 800c58c:	f241 006c 	movw	r0, #4204	; 0x106c
 800c590:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c594:	f3af 8000 	nop.w
 800c598:	4603      	mov	r3, r0
 800c59a:	617b      	str	r3, [r7, #20]
		int retLen = itoa(userResult, retStr);
 800c59c:	f107 0304 	add.w	r3, r7, #4
 800c5a0:	6978      	ldr	r0, [r7, #20]
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	f000 f8c2 	bl	800c72c <itoa>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	613b      	str	r3, [r7, #16]
		retStr[retLen] = '\0';
 800c5ac:	f107 0204 	add.w	r2, r7, #4
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	18d3      	adds	r3, r2, r3
 800c5b4:	f04f 0200 	mov.w	r2, #0
 800c5b8:	701a      	strb	r2, [r3, #0]
		Spark_Send_Device_Message(sparkSocket, (char *)Device_Ok, (char *)API_UserFunc, (char *)retStr);
 800c5ba:	f640 734c 	movw	r3, #3916	; 0xf4c
 800c5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	f107 0304 	add.w	r3, r7, #4
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f642 0104 	movw	r1, #10244	; 0x2804
 800c5ce:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c5d2:	f642 0220 	movw	r2, #10272	; 0x2820
 800c5d6:	f6c0 0201 	movt	r2, #2049	; 0x801
 800c5da:	f000 f805 	bl	800c5e8 <Spark_Send_Device_Message>
	}
}
 800c5de:	f107 0718 	add.w	r7, r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop

0800c5e8 <Spark_Send_Device_Message>:

// returns number of bytes transmitted or -1 on error
static int Spark_Send_Device_Message(long socket, char * cmd, char * cmdparam, char * cmdvalue)
{
 800c5e8:	b590      	push	{r4, r7, lr}
 800c5ea:	b0c7      	sub	sp, #284	; 0x11c
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	f107 040c 	add.w	r4, r7, #12
 800c5f2:	6020      	str	r0, [r4, #0]
 800c5f4:	f107 0008 	add.w	r0, r7, #8
 800c5f8:	6001      	str	r1, [r0, #0]
 800c5fa:	f107 0104 	add.w	r1, r7, #4
 800c5fe:	600a      	str	r2, [r1, #0]
 800c600:	463a      	mov	r2, r7
 800c602:	6013      	str	r3, [r2, #0]
    char cmdBuf[SPARK_BUF_LEN];
    int sendLen = 0;
 800c604:	f04f 0300 	mov.w	r3, #0
 800c608:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    int retVal = 0;
 800c60c:	f04f 0300 	mov.w	r3, #0
 800c610:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    memset(cmdBuf, 0, SPARK_BUF_LEN);
 800c614:	f107 0310 	add.w	r3, r7, #16
 800c618:	4618      	mov	r0, r3
 800c61a:	f04f 0100 	mov.w	r1, #0
 800c61e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c622:	f005 fdf1 	bl	8012208 <memset>

    if(cmd != NULL)
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d016      	beq.n	800c65e <Spark_Send_Device_Message+0x76>
    {
        sendLen = strlen(cmd);
 800c630:	f107 0308 	add.w	r3, r7, #8
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	f005 ffe9 	bl	801260c <strlen>
 800c63a:	4603      	mov	r3, r0
 800c63c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy(cmdBuf, cmd, strlen(cmd));
 800c640:	f107 0308 	add.w	r3, r7, #8
 800c644:	6818      	ldr	r0, [r3, #0]
 800c646:	f005 ffe1 	bl	801260c <strlen>
 800c64a:	4603      	mov	r3, r0
 800c64c:	f107 0110 	add.w	r1, r7, #16
 800c650:	f107 0208 	add.w	r2, r7, #8
 800c654:	4608      	mov	r0, r1
 800c656:	6811      	ldr	r1, [r2, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	f005 fd27 	bl	80120ac <memcpy>
    }

    if(cmdparam != NULL)
 800c65e:	f107 0304 	add.w	r3, r7, #4
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01c      	beq.n	800c6a2 <Spark_Send_Device_Message+0xba>
    {
        memcpy(&cmdBuf[sendLen], cmdparam, strlen(cmdparam));
 800c668:	f107 0210 	add.w	r2, r7, #16
 800c66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c670:	18d4      	adds	r4, r2, r3
 800c672:	f107 0304 	add.w	r3, r7, #4
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	f005 ffc8 	bl	801260c <strlen>
 800c67c:	4603      	mov	r3, r0
 800c67e:	f107 0204 	add.w	r2, r7, #4
 800c682:	4620      	mov	r0, r4
 800c684:	6811      	ldr	r1, [r2, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	f005 fd10 	bl	80120ac <memcpy>
        sendLen += strlen(cmdparam);
 800c68c:	f107 0304 	add.w	r3, r7, #4
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	f005 ffbb 	bl	801260c <strlen>
 800c696:	4602      	mov	r2, r0
 800c698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c69c:	18d3      	adds	r3, r2, r3
 800c69e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    }

    if(cmdvalue != NULL)
 800c6a2:	463b      	mov	r3, r7
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d019      	beq.n	800c6de <Spark_Send_Device_Message+0xf6>
    {
        memcpy(&cmdBuf[sendLen], cmdvalue, strlen(cmdvalue));
 800c6aa:	f107 0210 	add.w	r2, r7, #16
 800c6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6b2:	18d4      	adds	r4, r2, r3
 800c6b4:	463b      	mov	r3, r7
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	f005 ffa8 	bl	801260c <strlen>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	463a      	mov	r2, r7
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	6811      	ldr	r1, [r2, #0]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	f005 fcf1 	bl	80120ac <memcpy>
        sendLen += strlen(cmdvalue);
 800c6ca:	463b      	mov	r3, r7
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	f005 ff9d 	bl	801260c <strlen>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6d8:	18d3      	adds	r3, r2, r3
 800c6da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    }

    memcpy(&cmdBuf[sendLen], Device_CRLF, strlen(Device_CRLF));
 800c6de:	f107 0210 	add.w	r2, r7, #16
 800c6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6e6:	18d2      	adds	r2, r2, r3
 800c6e8:	f642 0310 	movw	r3, #10256	; 0x2810
 800c6ec:	f6c0 0301 	movt	r3, #2049	; 0x801
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	7013      	strb	r3, [r2, #0]
    sendLen += strlen(Device_CRLF);
 800c6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6f8:	f103 0301 	add.w	r3, r3, #1
 800c6fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    retVal = send(socket, cmdBuf, sendLen, 0);
 800c700:	f107 020c 	add.w	r2, r7, #12
 800c704:	f107 0310 	add.w	r3, r7, #16
 800c708:	6810      	ldr	r0, [r2, #0]
 800c70a:	4619      	mov	r1, r3
 800c70c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c710:	f04f 0300 	mov.w	r3, #0
 800c714:	f005 f9ca 	bl	8011aac <send>
 800c718:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    return retVal;
 800c71c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800c720:	4618      	mov	r0, r3
 800c722:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800c726:	46bd      	mov	sp, r7
 800c728:	bd90      	pop	{r4, r7, pc}
 800c72a:	bf00      	nop

0800c72c <itoa>:

// brief  Convert integer to ASCII in decimal base
static unsigned char itoa(int cNum, char *cString)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b087      	sub	sp, #28
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
    char* ptr;
    int uTemp = cNum;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	613b      	str	r3, [r7, #16]
    unsigned char length;

    // value 0 is a special case
    if (cNum == 0)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d108      	bne.n	800c752 <itoa+0x26>
    {
        length = 1;
 800c740:	f04f 0301 	mov.w	r3, #1
 800c744:	73fb      	strb	r3, [r7, #15]
        *cString = '0';
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	f04f 0230 	mov.w	r2, #48	; 0x30
 800c74c:	701a      	strb	r2, [r3, #0]

        return length;
 800c74e:	7bfb      	ldrb	r3, [r7, #15]
 800c750:	e04d      	b.n	800c7ee <itoa+0xc2>
    }

    // Find out the length of the number, in decimal base
    length = 0;
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]
    while (uTemp > 0)
 800c758:	e010      	b.n	800c77c <itoa+0x50>
    {
        uTemp /= 10;
 800c75a:	693a      	ldr	r2, [r7, #16]
 800c75c:	f246 6367 	movw	r3, #26215	; 0x6667
 800c760:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800c764:	fb83 1302 	smull	r1, r3, r3, r2
 800c768:	ea4f 01a3 	mov.w	r1, r3, asr #2
 800c76c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c770:	1acb      	subs	r3, r1, r3
 800c772:	613b      	str	r3, [r7, #16]
        length++;
 800c774:	7bfb      	ldrb	r3, [r7, #15]
 800c776:	f103 0301 	add.w	r3, r3, #1
 800c77a:	73fb      	strb	r3, [r7, #15]
        return length;
    }

    // Find out the length of the number, in decimal base
    length = 0;
    while (uTemp > 0)
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	dceb      	bgt.n	800c75a <itoa+0x2e>
        uTemp /= 10;
        length++;
    }

    // Do the actual formatting, right to left
    uTemp = cNum;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	613b      	str	r3, [r7, #16]
    ptr = cString + length;
 800c786:	7bfb      	ldrb	r3, [r7, #15]
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	18d3      	adds	r3, r2, r3
 800c78c:	617b      	str	r3, [r7, #20]
    while (uTemp > 0)
 800c78e:	e02a      	b.n	800c7e6 <itoa+0xba>
    {
        --ptr;
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c796:	617b      	str	r3, [r7, #20]
        *ptr = digits[uTemp % 10];
 800c798:	6939      	ldr	r1, [r7, #16]
 800c79a:	f246 6367 	movw	r3, #26215	; 0x6667
 800c79e:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800c7a2:	fb83 2301 	smull	r2, r3, r3, r1
 800c7a6:	ea4f 02a3 	mov.w	r2, r3, asr #2
 800c7aa:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c7ae:	1ad2      	subs	r2, r2, r3
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c7b6:	189b      	adds	r3, r3, r2
 800c7b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c7bc:	1aca      	subs	r2, r1, r3
 800c7be:	f240 035c 	movw	r3, #92	; 0x5c
 800c7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7c6:	5c9a      	ldrb	r2, [r3, r2]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	701a      	strb	r2, [r3, #0]
        uTemp /= 10;
 800c7cc:	693a      	ldr	r2, [r7, #16]
 800c7ce:	f246 6367 	movw	r3, #26215	; 0x6667
 800c7d2:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800c7d6:	fb83 1302 	smull	r1, r3, r3, r2
 800c7da:	ea4f 01a3 	mov.w	r1, r3, asr #2
 800c7de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c7e2:	1acb      	subs	r3, r1, r3
 800c7e4:	613b      	str	r3, [r7, #16]
    }

    // Do the actual formatting, right to left
    uTemp = cNum;
    ptr = cString + length;
    while (uTemp > 0)
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	dcd1      	bgt.n	800c790 <itoa+0x64>
        --ptr;
        *ptr = digits[uTemp % 10];
        uTemp /= 10;
    }

    return length;
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f107 071c 	add.w	r7, r7, #28
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bc80      	pop	{r7}
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop

0800c7fc <atoc>:

//Convert nibble to hexdecimal from ASCII
static uint8_t atoc(char data)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b085      	sub	sp, #20
 800c800:	af00      	add	r7, sp, #0
 800c802:	4603      	mov	r3, r0
 800c804:	71fb      	strb	r3, [r7, #7]
	unsigned char ucRes;

	if ((data >= 0x30) && (data <= 0x39))
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	2b2f      	cmp	r3, #47	; 0x2f
 800c80a:	d907      	bls.n	800c81c <atoc+0x20>
 800c80c:	79fb      	ldrb	r3, [r7, #7]
 800c80e:	2b39      	cmp	r3, #57	; 0x39
 800c810:	d804      	bhi.n	800c81c <atoc+0x20>
	{
		ucRes = data - 0x30;
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 800c818:	73fb      	strb	r3, [r7, #15]
 800c81a:	e028      	b.n	800c86e <atoc+0x72>
	}
	else
	{
		if (data == 'a')
 800c81c:	79fb      	ldrb	r3, [r7, #7]
 800c81e:	2b61      	cmp	r3, #97	; 0x61
 800c820:	d103      	bne.n	800c82a <atoc+0x2e>
		{
			ucRes = 0x0a;;
 800c822:	f04f 030a 	mov.w	r3, #10
 800c826:	73fb      	strb	r3, [r7, #15]
 800c828:	e021      	b.n	800c86e <atoc+0x72>
		}
		else if (data == 'b')
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	2b62      	cmp	r3, #98	; 0x62
 800c82e:	d103      	bne.n	800c838 <atoc+0x3c>
		{
			ucRes = 0x0b;
 800c830:	f04f 030b 	mov.w	r3, #11
 800c834:	73fb      	strb	r3, [r7, #15]
 800c836:	e01a      	b.n	800c86e <atoc+0x72>
		}
		else if (data == 'c')
 800c838:	79fb      	ldrb	r3, [r7, #7]
 800c83a:	2b63      	cmp	r3, #99	; 0x63
 800c83c:	d103      	bne.n	800c846 <atoc+0x4a>
		{
			ucRes = 0x0c;
 800c83e:	f04f 030c 	mov.w	r3, #12
 800c842:	73fb      	strb	r3, [r7, #15]
 800c844:	e013      	b.n	800c86e <atoc+0x72>
		}
		else if (data == 'd')
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	2b64      	cmp	r3, #100	; 0x64
 800c84a:	d103      	bne.n	800c854 <atoc+0x58>
		{
			ucRes = 0x0d;
 800c84c:	f04f 030d 	mov.w	r3, #13
 800c850:	73fb      	strb	r3, [r7, #15]
 800c852:	e00c      	b.n	800c86e <atoc+0x72>
		}
		else if (data == 'e')
 800c854:	79fb      	ldrb	r3, [r7, #7]
 800c856:	2b65      	cmp	r3, #101	; 0x65
 800c858:	d103      	bne.n	800c862 <atoc+0x66>
		{
			ucRes = 0x0e;
 800c85a:	f04f 030e 	mov.w	r3, #14
 800c85e:	73fb      	strb	r3, [r7, #15]
 800c860:	e005      	b.n	800c86e <atoc+0x72>
		}
		else if (data == 'f')
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	2b66      	cmp	r3, #102	; 0x66
 800c866:	d102      	bne.n	800c86e <atoc+0x72>
		{
			ucRes = 0x0f;
 800c868:	f04f 030f 	mov.w	r3, #15
 800c86c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return ucRes;
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c870:	4618      	mov	r0, r3
 800c872:	f107 0714 	add.w	r7, r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	bc80      	pop	{r7}
 800c87a:	4770      	bx	lr

0800c87c <NMI_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NMI_Handler(void)
{
 800c87c:	b480      	push	{r7}
 800c87e:	af00      	add	r7, sp, #0
}
 800c880:	46bd      	mov	sp, r7
 800c882:	bc80      	pop	{r7}
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop

0800c888 <HardFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(void)
{
 800c888:	b480      	push	{r7}
 800c88a:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
	{
	}
 800c88c:	e7fe      	b.n	800c88c <HardFault_Handler+0x4>
 800c88e:	bf00      	nop

0800c890 <MemManage_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void MemManage_Handler(void)
{
 800c890:	b480      	push	{r7}
 800c892:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
	{
	}
 800c894:	e7fe      	b.n	800c894 <MemManage_Handler+0x4>
 800c896:	bf00      	nop

0800c898 <BusFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void BusFault_Handler(void)
{
 800c898:	b480      	push	{r7}
 800c89a:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
	{
	}
 800c89c:	e7fe      	b.n	800c89c <BusFault_Handler+0x4>
 800c89e:	bf00      	nop

0800c8a0 <UsageFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void UsageFault_Handler(void)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
	{
	}
 800c8a4:	e7fe      	b.n	800c8a4 <UsageFault_Handler+0x4>
 800c8a6:	bf00      	nop

0800c8a8 <SVC_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SVC_Handler(void)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	af00      	add	r7, sp, #0
}
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bc80      	pop	{r7}
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop

0800c8b4 <DebugMon_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DebugMon_Handler(void)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
}
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bc80      	pop	{r7}
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop

0800c8c0 <PendSV_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PendSV_Handler(void)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	af00      	add	r7, sp, #0
}
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bc80      	pop	{r7}
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop

0800c8cc <SysTick_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SysTick_Handler(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	af00      	add	r7, sp, #0
	Timing_Decrement();
 800c8d0:	f7ff f880 	bl	800b9d4 <Timing_Decrement>
}
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop

0800c8d8 <DMA1_Channel3_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	af00      	add	r7, sp, #0
	SPI_DMA_IntHandler();
 800c8dc:	f7fd ff64 	bl	800a7a8 <SPI_DMA_IntHandler>
}
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop

0800c8e4 <DMA1_Channel5_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
	SPI_DMA_IntHandler();
 800c8e8:	f7fd ff5e 	bl	800a7a8 <SPI_DMA_IntHandler>
}
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop

0800c8f0 <EXTI0_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI0_IRQHandler(void)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(CC3000_WIFI_INT_EXTI_LINE ) != RESET)
 800c8f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c8f8:	f002 ffea 	bl	800f8d0 <EXTI_GetITStatus>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d005      	beq.n	800c90e <EXTI0_IRQHandler+0x1e>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(CC3000_WIFI_INT_EXTI_LINE );
 800c902:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c906:	f002 ffd3 	bl	800f8b0 <EXTI_ClearFlag>

		SPI_EXTI_IntHandler();
 800c90a:	f7fe f819 	bl	800a940 <SPI_EXTI_IntHandler>
	}

	if (EXTI_GetITStatus(BUTTON1_EXTI_LINE ) != RESET)
 800c90e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c912:	f002 ffdd 	bl	800f8d0 <EXTI_GetITStatus>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d011      	beq.n	800c940 <EXTI0_IRQHandler+0x50>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(BUTTON1_EXTI_LINE );
 800c91c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c920:	f002 ffc6 	bl	800f8b0 <EXTI_ClearFlag>

		/* Disable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, DISABLE);
 800c924:	f04f 0000 	mov.w	r0, #0
 800c928:	f04f 0100 	mov.w	r1, #0
 800c92c:	f7fe fb4a 	bl	800afc4 <BUTTON_EXTI_Config>

	    /* DEBOUNCE_TIMER Enable Counter */
	    TIM_Cmd(DEBOUNCE_TIMER, ENABLE);
 800c930:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800c934:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800c938:	f04f 0101 	mov.w	r1, #1
 800c93c:	f003 fc5a 	bl	80101f4 <TIM_Cmd>
	}
}
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop

0800c944 <EXTI15_10_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(CC3000_WIFI_INT_EXTI_LINE ) != RESET)
 800c948:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c94c:	f002 ffc0 	bl	800f8d0 <EXTI_GetITStatus>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d005      	beq.n	800c962 <EXTI15_10_IRQHandler+0x1e>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(CC3000_WIFI_INT_EXTI_LINE );
 800c956:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c95a:	f002 ffa9 	bl	800f8b0 <EXTI_ClearFlag>

		SPI_EXTI_IntHandler();
 800c95e:	f7fd ffef 	bl	800a940 <SPI_EXTI_IntHandler>
	}

	if (EXTI_GetITStatus(BUTTON1_EXTI_LINE ) != RESET)
 800c962:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c966:	f002 ffb3 	bl	800f8d0 <EXTI_GetITStatus>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d011      	beq.n	800c994 <EXTI15_10_IRQHandler+0x50>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(BUTTON1_EXTI_LINE );
 800c970:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c974:	f002 ff9c 	bl	800f8b0 <EXTI_ClearFlag>

		/* Disable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, DISABLE);
 800c978:	f04f 0000 	mov.w	r0, #0
 800c97c:	f04f 0100 	mov.w	r1, #0
 800c980:	f7fe fb20 	bl	800afc4 <BUTTON_EXTI_Config>

	    /* DEBOUNCE_TIMER Enable Counter */
	    TIM_Cmd(DEBOUNCE_TIMER, ENABLE);
 800c984:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800c988:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800c98c:	f04f 0101 	mov.w	r1, #1
 800c990:	f003 fc30 	bl	80101f4 <TIM_Cmd>
	}
}
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop

0800c998 <TIM1_UP_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG) != RESET)
 800c99c:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800c9a0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800c9a4:	f04f 0101 	mov.w	r1, #1
 800c9a8:	f003 fc84 	bl	80102b4 <TIM_GetITStatus>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d023      	beq.n	800c9fa <TIM1_UP_IRQHandler+0x62>
	{
		TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);
 800c9b2:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800c9b6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800c9ba:	f04f 0101 	mov.w	r1, #1
 800c9be:	f003 fca9 	bl	8010314 <TIM_ClearITPendingBit>

		if (BUTTON_GetState(BUTTON1) == BUTTON1_PRESSED)
 800c9c2:	f04f 0000 	mov.w	r0, #0
 800c9c6:	f7fe fb3f 	bl	800b048 <BUTTON_GetState>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d107      	bne.n	800c9e0 <TIM1_UP_IRQHandler+0x48>
			BUTTON_DEBOUNCED[BUTTON1] = 0x01;
 800c9d0:	f240 5394 	movw	r3, #1428	; 0x594
 800c9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c9d8:	f04f 0201 	mov.w	r2, #1
 800c9dc:	701a      	strb	r2, [r3, #0]
 800c9de:	e006      	b.n	800c9ee <TIM1_UP_IRQHandler+0x56>
		else
			BUTTON_DEBOUNCED[BUTTON1] = 0x00;
 800c9e0:	f240 5394 	movw	r3, #1428	; 0x594
 800c9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c9e8:	f04f 0200 	mov.w	r2, #0
 800c9ec:	701a      	strb	r2, [r3, #0]

		/* Enable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, ENABLE);
 800c9ee:	f04f 0000 	mov.w	r0, #0
 800c9f2:	f04f 0101 	mov.w	r1, #1
 800c9f6:	f7fe fae5 	bl	800afc4 <BUTTON_EXTI_Config>
	}
}
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <USB_LP_CAN1_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
	USB_Istr();
 800ca00:	f000 fa02 	bl	800ce08 <USB_Istr>
}
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop

0800ca08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ca0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ca14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ca1c:	6812      	ldr	r2, [r2, #0]
 800ca1e:	f042 0201 	orr.w	r2, r2, #1
 800ca22:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800ca24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ca2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ca34:	6859      	ldr	r1, [r3, #4]
 800ca36:	f04f 0300 	mov.w	r3, #0
 800ca3a:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 800ca3e:	400b      	ands	r3, r1
 800ca40:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ca42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ca4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ca52:	6812      	ldr	r2, [r2, #0]
 800ca54:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800ca58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ca5c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ca5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ca66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ca6e:	6812      	ldr	r2, [r2, #0]
 800ca70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca74:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800ca76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ca7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca82:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ca86:	6852      	ldr	r2, [r2, #4]
 800ca88:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800ca8c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800ca8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ca96:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800ca9a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800ca9c:	f000 f808 	bl	800cab0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800caa0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800caa4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800caa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800caac:	609a      	str	r2, [r3, #8]
#endif 
}
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800cab4:	f000 f802 	bl	800cabc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop

0800cabc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800cac2:	f04f 0300 	mov.w	r3, #0
 800cac6:	607b      	str	r3, [r7, #4]
 800cac8:	f04f 0300 	mov.w	r3, #0
 800cacc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800cace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cad2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cad6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cada:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cade:	6812      	ldr	r2, [r2, #0]
 800cae0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cae4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800cae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caf4:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f103 0301 	add.w	r3, r3, #1
 800cafc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d103      	bne.n	800cb0c <SetSysClockTo72+0x50>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800cb0a:	d1ec      	bne.n	800cae6 <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800cb0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800cb1e:	f04f 0301 	mov.w	r3, #1
 800cb22:	603b      	str	r3, [r7, #0]
 800cb24:	e002      	b.n	800cb2c <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800cb26:	f04f 0300 	mov.w	r3, #0
 800cb2a:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	f040 8094 	bne.w	800cc5c <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800cb34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cb40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cb44:	6812      	ldr	r2, [r2, #0]
 800cb46:	f042 0210 	orr.w	r2, r2, #16
 800cb4a:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800cb4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cb58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cb5c:	6812      	ldr	r2, [r2, #0]
 800cb5e:	f022 0203 	bic.w	r2, r2, #3
 800cb62:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800cb64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cb70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cb74:	6812      	ldr	r2, [r2, #0]
 800cb76:	f042 0202 	orr.w	r2, r2, #2
 800cb7a:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800cb7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cb88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cb8c:	6852      	ldr	r2, [r2, #4]
 800cb8e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800cb90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cb9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cba0:	6852      	ldr	r2, [r2, #4]
 800cba2:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800cba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cba8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cbac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cbb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cbb4:	6852      	ldr	r2, [r2, #4]
 800cbb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbba:	605a      	str	r2, [r3, #4]

    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800cbbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cbc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cbc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cbcc:	6852      	ldr	r2, [r2, #4]
 800cbce:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800cbd2:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800cbd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cbdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cbe0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cbe4:	6852      	ldr	r2, [r2, #4]
 800cbe6:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800cbea:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800cbec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cbf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cbf8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cbfc:	6812      	ldr	r2, [r2, #0]
 800cbfe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cc02:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800cc04:	bf00      	nop
 800cc06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d0f6      	beq.n	800cc06 <SetSysClockTo72+0x14a>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800cc18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cc20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cc28:	6852      	ldr	r2, [r2, #4]
 800cc2a:	f022 0203 	bic.w	r2, r2, #3
 800cc2e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800cc30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cc38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cc40:	6852      	ldr	r2, [r2, #4]
 800cc42:	f042 0202 	orr.w	r2, r2, #2
 800cc46:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800cc48:	bf00      	nop
 800cc4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	f003 030c 	and.w	r3, r3, #12
 800cc58:	2b08      	cmp	r3, #8
 800cc5a:	d1f6      	bne.n	800cc4a <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800cc5c:	f107 070c 	add.w	r7, r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bc80      	pop	{r7}
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop

0800cc68 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800cc6e:	f240 53a8 	movw	r3, #1448	; 0x5a8
 800cc72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d171      	bne.n	800cd60 <EP1_IN_Callback+0xf8>
  {
    if (USART_Rx_length == 0) 
 800cc7c:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800cc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d107      	bne.n	800cc9a <EP1_IN_Callback+0x32>
    {
      USB_Tx_State = 0;
 800cc8a:	f240 53a8 	movw	r3, #1448	; 0x5a8
 800cc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc92:	f04f 0200 	mov.w	r2, #0
 800cc96:	701a      	strb	r2, [r3, #0]
 800cc98:	e062      	b.n	800cd60 <EP1_IN_Callback+0xf8>
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800cc9a:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800cc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2b40      	cmp	r3, #64	; 0x40
 800cca6:	d921      	bls.n	800ccec <EP1_IN_Callback+0x84>
        USB_Tx_ptr = USART_Rx_ptr_out;
 800cca8:	f240 539c 	movw	r3, #1436	; 0x59c
 800ccac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	80fb      	strh	r3, [r7, #6]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800ccb4:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ccb8:	80bb      	strh	r3, [r7, #4]
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800ccba:	f240 539c 	movw	r3, #1436	; 0x59c
 800ccbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800ccc8:	f240 539c 	movw	r3, #1436	; 0x59c
 800cccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccd0:	601a      	str	r2, [r3, #0]
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800ccd2:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800ccd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800cce0:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800cce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	e022      	b.n	800cd32 <EP1_IN_Callback+0xca>
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800ccec:	f240 539c 	movw	r3, #1436	; 0x59c
 800ccf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	80fb      	strh	r3, [r7, #6]
        USB_Tx_length = USART_Rx_length;
 800ccf8:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800ccfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	80bb      	strh	r3, [r7, #4]
        
        USART_Rx_ptr_out += USART_Rx_length;
 800cd04:	f240 539c 	movw	r3, #1436	; 0x59c
 800cd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800cd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	18d2      	adds	r2, r2, r3
 800cd1a:	f240 539c 	movw	r3, #1436	; 0x59c
 800cd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd22:	601a      	str	r2, [r3, #0]
        USART_Rx_length = 0;
 800cd24:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800cd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd2c:	f04f 0200 	mov.w	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800cd32:	88fa      	ldrh	r2, [r7, #6]
 800cd34:	f640 6318 	movw	r3, #3608	; 0xe18
 800cd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd3c:	18d2      	adds	r2, r2, r3
 800cd3e:	88bb      	ldrh	r3, [r7, #4]
 800cd40:	4610      	mov	r0, r2
 800cd42:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800cd46:	461a      	mov	r2, r3
 800cd48:	f001 ff36 	bl	800ebb8 <UserToPMABufferCopy>
      SetEPTxCount(ENDP1, USB_Tx_length);
 800cd4c:	88bb      	ldrh	r3, [r7, #4]
 800cd4e:	f04f 0001 	mov.w	r0, #1
 800cd52:	4619      	mov	r1, r3
 800cd54:	f002 f9c4 	bl	800f0e0 <SetEPTxCount>
      SetEPTxValid(ENDP1); 
 800cd58:	f04f 0001 	mov.w	r0, #1
 800cd5c:	f002 f854 	bl	800ee08 <SetEPTxValid>
    }
  }
}
 800cd60:	f107 0708 	add.w	r7, r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	af00      	add	r7, sp, #0
  USB_Rx_State = 1;
 800cd6c:	f240 53a9 	movw	r3, #1449	; 0x5a9
 800cd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd74:	f04f 0201 	mov.w	r2, #1
 800cd78:	701a      	strb	r2, [r3, #0]

  USB_Rx_ptr = 0;
 800cd7a:	f240 53a6 	movw	r3, #1446	; 0x5a6
 800cd7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd82:	f04f 0200 	mov.w	r2, #0
 800cd86:	801a      	strh	r2, [r3, #0]

  /* Get the number of received data on the selected Endpoint */
  USB_Rx_length = GetEPRxCount(ENDP3);
 800cd88:	f04f 0003 	mov.w	r0, #3
 800cd8c:	f002 fa14 	bl	800f1b8 <GetEPRxCount>
 800cd90:	4603      	mov	r3, r0
 800cd92:	461a      	mov	r2, r3
 800cd94:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800cd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd9c:	801a      	strh	r2, [r3, #0]

  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(USB_Rx_Buffer, ENDP3_RXADDR, USB_Rx_length);
 800cd9e:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800cda2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	f640 50d8 	movw	r0, #3544	; 0xdd8
 800cdac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cdb0:	f44f 7188 	mov.w	r1, #272	; 0x110
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	f001 ff43 	bl	800ec40 <PMAToUserBufferCopy>

  /* USB data should be immediately processed, this allow next USB traffic being
  NAKed till the end of the processing */
}
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	af00      	add	r7, sp, #0
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 800cdc0:	f240 53bc 	movw	r3, #1468	; 0x5bc
 800cdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b05      	cmp	r3, #5
 800cdcc:	d11b      	bne.n	800ce06 <SOF_Callback+0x4a>
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 800cdce:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800cdd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b05      	cmp	r3, #5
 800cdda:	bf14      	ite	ne
 800cddc:	2200      	movne	r2, #0
 800cdde:	2201      	moveq	r2, #1
 800cde0:	b2d2      	uxtb	r2, r2
 800cde2:	f103 0101 	add.w	r1, r3, #1
 800cde6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800cdea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdee:	6019      	str	r1, [r3, #0]
 800cdf0:	2a00      	cmp	r2, #0
 800cdf2:	d008      	beq.n	800ce06 <SOF_Callback+0x4a>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 800cdf4:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800cdf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdfc:	f04f 0200 	mov.w	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 800ce02:	f7fe fb87 	bl	800b514 <Handle_USBAsynchXfer>
    }
  }  
}
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USB_Istr>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	af00      	add	r7, sp, #0

  wIstr = _GetISTR();
 800ce0c:	f645 4344 	movw	r3, #23620	; 0x5c44
 800ce10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	b29a      	uxth	r2, r3
 800ce18:	f241 136c 	movw	r3, #4460	; 0x116c
 800ce1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce20:	801a      	strh	r2, [r3, #0]

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800ce22:	f241 136c 	movw	r3, #4460	; 0x116c
 800ce26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce2a:	881b      	ldrh	r3, [r3, #0]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800ce32:	f241 13a4 	movw	r3, #4516	; 0x11a4
 800ce36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce3a:	881b      	ldrh	r3, [r3, #0]
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d016      	beq.n	800ce70 <USB_Istr+0x68>
  {
    _SetISTR((uint16_t)CLR_SOF);
 800ce42:	f645 4344 	movw	r3, #23620	; 0x5c44
 800ce46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce4a:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800ce4e:	601a      	str	r2, [r3, #0]
    bIntPackSOF++;
 800ce50:	f240 53b8 	movw	r3, #1464	; 0x5b8
 800ce54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	f103 0301 	add.w	r3, r3, #1
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	f240 53b8 	movw	r3, #1464	; 0x5b8
 800ce66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce6a:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 800ce6c:	f7ff ffa6 	bl	800cdbc <SOF_Callback>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800ce70:	f241 136c 	movw	r3, #4460	; 0x116c
 800ce74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800ce80:	f241 13a4 	movw	r3, #4516	; 0x11a4
 800ce84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	4013      	ands	r3, r2
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <USB_Istr+0x8c>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800ce90:	f001 fc7e 	bl	800e790 <CTR_LP>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800ce94:	f241 136c 	movw	r3, #4460	; 0x116c
 800ce98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce9c:	881b      	ldrh	r3, [r3, #0]
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800cea4:	f241 13a4 	movw	r3, #4516	; 0x11a4
 800cea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	4013      	ands	r3, r2
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00c      	beq.n	800cece <USB_Istr+0xc6>
  {
    _SetISTR((uint16_t)CLR_RESET);
 800ceb4:	f645 4344 	movw	r3, #23620	; 0x5c44
 800ceb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cebc:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800cec0:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 800cec2:	f240 03dc 	movw	r3, #220	; 0xdc
 800cec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800ced4:	f7fe fbe4 	bl	800b6a0 <Get_SerialNum>

  pInformation->Current_Configuration = 0;
 800ced8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800cedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f04f 0200 	mov.w	r2, #0
 800cee6:	729a      	strb	r2, [r3, #10]

  /* Connect the device */
  PowerOn();
 800cee8:	f000 fa0c 	bl	800d304 <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 800ceec:	f002 f9a2 	bl	800f234 <USB_SIL_Init>

  bDeviceState = UNCONNECTED;
 800cef0:	f240 53bc 	movw	r3, #1468	; 0x5bc
 800cef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cef8:	f04f 0200 	mov.w	r2, #0
 800cefc:	601a      	str	r2, [r3, #0]
}
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <Virtual_Com_Port_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	af00      	add	r7, sp, #0
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800cf04:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800cf08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f04f 0200 	mov.w	r2, #0
 800cf12:	729a      	strb	r2, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800cf14:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800cf18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	f642 034c 	movw	r3, #10316	; 0x284c
 800cf22:	f6c0 0301 	movt	r3, #2049	; 0x801
 800cf26:	79db      	ldrb	r3, [r3, #7]
 800cf28:	7253      	strb	r3, [r2, #9]

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800cf2a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800cf2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f04f 0200 	mov.w	r2, #0
 800cf38:	72da      	strb	r2, [r3, #11]

  SetBTABLE(BTABLE_ADDRESS);
 800cf3a:	f04f 0000 	mov.w	r0, #0
 800cf3e:	f001 feb5 	bl	800ecac <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800cf42:	f04f 0000 	mov.w	r0, #0
 800cf46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf4a:	f001 fec3 	bl	800ecd4 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800cf4e:	f04f 0000 	mov.w	r0, #0
 800cf52:	f04f 0110 	mov.w	r1, #16
 800cf56:	f001 fee3 	bl	800ed20 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800cf5a:	f04f 0000 	mov.w	r0, #0
 800cf5e:	f04f 0140 	mov.w	r1, #64	; 0x40
 800cf62:	f002 f859 	bl	800f018 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800cf66:	f04f 0000 	mov.w	r0, #0
 800cf6a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800cf6e:	f002 f82f 	bl	800efd0 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800cf72:	f04f 0000 	mov.w	r0, #0
 800cf76:	f001 ff9f 	bl	800eeb8 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800cf7a:	f240 03dc 	movw	r3, #220	; 0xdc
 800cf7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf86:	f04f 0000 	mov.w	r0, #0
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	f002 f8c8 	bl	800f120 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800cf90:	f04f 0000 	mov.w	r0, #0
 800cf94:	f001 ff64 	bl	800ee60 <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 800cf98:	f04f 0001 	mov.w	r0, #1
 800cf9c:	f04f 0100 	mov.w	r1, #0
 800cfa0:	f001 fe98 	bl	800ecd4 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800cfa4:	f04f 0001 	mov.w	r0, #1
 800cfa8:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800cfac:	f002 f810 	bl	800efd0 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800cfb0:	f04f 0001 	mov.w	r0, #1
 800cfb4:	f04f 0120 	mov.w	r1, #32
 800cfb8:	f001 feb2 	bl	800ed20 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800cfbc:	f04f 0001 	mov.w	r0, #1
 800cfc0:	f04f 0100 	mov.w	r1, #0
 800cfc4:	f001 fee6 	bl	800ed94 <SetEPRxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 800cfc8:	f04f 0002 	mov.w	r0, #2
 800cfcc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cfd0:	f001 fe80 	bl	800ecd4 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800cfd4:	f04f 0002 	mov.w	r0, #2
 800cfd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfdc:	f001 fff8 	bl	800efd0 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800cfe0:	f04f 0002 	mov.w	r0, #2
 800cfe4:	f04f 0100 	mov.w	r1, #0
 800cfe8:	f001 fed4 	bl	800ed94 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800cfec:	f04f 0002 	mov.w	r0, #2
 800cff0:	f04f 0120 	mov.w	r1, #32
 800cff4:	f001 fe94 	bl	800ed20 <SetEPTxStatus>

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800cff8:	f04f 0003 	mov.w	r0, #3
 800cffc:	f04f 0100 	mov.w	r1, #0
 800d000:	f001 fe68 	bl	800ecd4 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800d004:	f04f 0003 	mov.w	r0, #3
 800d008:	f44f 7188 	mov.w	r1, #272	; 0x110
 800d00c:	f002 f804 	bl	800f018 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800d010:	f04f 0003 	mov.w	r0, #3
 800d014:	f04f 0140 	mov.w	r1, #64	; 0x40
 800d018:	f002 f882 	bl	800f120 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800d01c:	f04f 0003 	mov.w	r0, #3
 800d020:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800d024:	f001 feb6 	bl	800ed94 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800d028:	f04f 0003 	mov.w	r0, #3
 800d02c:	f04f 0100 	mov.w	r1, #0
 800d030:	f001 fe76 	bl	800ed20 <SetEPTxStatus>

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 800d034:	f04f 0000 	mov.w	r0, #0
 800d038:	f001 fb60 	bl	800e6fc <SetDeviceAddress>
  
  bDeviceState = ATTACHED;
 800d03c:	f240 53bc 	movw	r3, #1468	; 0x5bc
 800d040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d044:	f04f 0201 	mov.w	r2, #1
 800d048:	601a      	str	r2, [r3, #0]
}
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <Virtual_Com_Port_SetConfiguration>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
  DEVICE_INFO *pInfo = &Device_Info;
 800d052:	f241 1380 	movw	r3, #4480	; 0x1180
 800d056:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d05a:	607b      	str	r3, [r7, #4]

  if (pInfo->Current_Configuration != 0)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	7a9b      	ldrb	r3, [r3, #10]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d006      	beq.n	800d072 <Virtual_Com_Port_SetConfiguration+0x26>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800d064:	f240 53bc 	movw	r3, #1468	; 0x5bc
 800d068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d06c:	f04f 0205 	mov.w	r2, #5
 800d070:	601a      	str	r2, [r3, #0]
  }
}
 800d072:	f107 070c 	add.w	r7, r7, #12
 800d076:	46bd      	mov	sp, r7
 800d078:	bc80      	pop	{r7}
 800d07a:	4770      	bx	lr

0800d07c <Virtual_Com_Port_SetDeviceAddress>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
  bDeviceState = ADDRESSED;
 800d080:	f240 53bc 	movw	r3, #1468	; 0x5bc
 800d084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d088:	f04f 0204 	mov.w	r2, #4
 800d08c:	601a      	str	r2, [r3, #0]
}
 800d08e:	46bd      	mov	sp, r7
 800d090:	bc80      	pop	{r7}
 800d092:	4770      	bx	lr

0800d094 <Virtual_Com_Port_Status_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
 800d094:	b480      	push	{r7}
 800d096:	af00      	add	r7, sp, #0
  if (Request == SET_LINE_CODING)
 800d098:	f240 53b9 	movw	r3, #1465	; 0x5b9
 800d09c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b20      	cmp	r3, #32
 800d0a4:	d106      	bne.n	800d0b4 <Virtual_Com_Port_Status_In+0x20>
  {
    //Set Usart BaudRate here
    Request = 0;
 800d0a6:	f240 53b9 	movw	r3, #1465	; 0x5b9
 800d0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0ae:	f04f 0200 	mov.w	r2, #0
 800d0b2:	701a      	strb	r2, [r3, #0]
  }
}
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bc80      	pop	{r7}
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop

0800d0bc <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800d0bc:	b480      	push	{r7}
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bc80      	pop	{r7}
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop

0800d0c8 <Virtual_Com_Port_Data_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 800d0d2:	f04f 0300 	mov.w	r3, #0
 800d0d6:	60fb      	str	r3, [r7, #12]

  if (RequestNo == GET_LINE_CODING)
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	2b21      	cmp	r3, #33	; 0x21
 800d0dc:	d10f      	bne.n	800d0fe <Virtual_Com_Port_Data_Setup+0x36>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800d0de:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ee:	2b21      	cmp	r3, #33	; 0x21
 800d0f0:	d11e      	bne.n	800d130 <Virtual_Com_Port_Data_Setup+0x68>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800d0f2:	f24d 238d 	movw	r3, #53901	; 0xd28d
 800d0f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	e018      	b.n	800d130 <Virtual_Com_Port_Data_Setup+0x68>
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800d0fe:	79fb      	ldrb	r3, [r7, #7]
 800d100:	2b20      	cmp	r3, #32
 800d102:	d115      	bne.n	800d130 <Virtual_Com_Port_Data_Setup+0x68>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800d104:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d108:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d114:	2b21      	cmp	r3, #33	; 0x21
 800d116:	d104      	bne.n	800d122 <Virtual_Com_Port_Data_Setup+0x5a>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800d118:	f24d 23c9 	movw	r3, #53961	; 0xd2c9
 800d11c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d120:	60fb      	str	r3, [r7, #12]
    }
    Request = SET_LINE_CODING;
 800d122:	f240 53b9 	movw	r3, #1465	; 0x5b9
 800d126:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d12a:	f04f 0220 	mov.w	r2, #32
 800d12e:	701a      	strb	r2, [r3, #0]
  }

  if (CopyRoutine == NULL)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d102      	bne.n	800d13c <Virtual_Com_Port_Data_Setup+0x74>
  {
    return USB_UNSUPPORT;
 800d136:	f04f 0302 	mov.w	r3, #2
 800d13a:	e014      	b.n	800d166 <Virtual_Com_Port_Data_Setup+0x9e>
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800d13c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	619a      	str	r2, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800d14a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f04f 0200 	mov.w	r2, #0
 800d158:	825a      	strh	r2, [r3, #18]
  (*CopyRoutine)(0);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f04f 0000 	mov.w	r0, #0
 800d160:	4798      	blx	r3
  return USB_SUCCESS;
 800d162:	f04f 0300 	mov.w	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	f107 0710 	add.w	r7, r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <Virtual_Com_Port_NoData_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	4603      	mov	r3, r0
 800d178:	71fb      	strb	r3, [r7, #7]

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800d17a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d18a:	2b21      	cmp	r3, #33	; 0x21
 800d18c:	d10b      	bne.n	800d1a6 <Virtual_Com_Port_NoData_Setup+0x36>
  {
    if (RequestNo == SET_COMM_FEATURE)
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	2b02      	cmp	r3, #2
 800d192:	d102      	bne.n	800d19a <Virtual_Com_Port_NoData_Setup+0x2a>
    {
      return USB_SUCCESS;
 800d194:	f04f 0300 	mov.w	r3, #0
 800d198:	e007      	b.n	800d1aa <Virtual_Com_Port_NoData_Setup+0x3a>
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800d19a:	79fb      	ldrb	r3, [r7, #7]
 800d19c:	2b22      	cmp	r3, #34	; 0x22
 800d19e:	d102      	bne.n	800d1a6 <Virtual_Com_Port_NoData_Setup+0x36>
    {
      return USB_SUCCESS;
 800d1a0:	f04f 0300 	mov.w	r3, #0
 800d1a4:	e001      	b.n	800d1aa <Virtual_Com_Port_NoData_Setup+0x3a>
    }
  }

  return USB_UNSUPPORT;
 800d1a6:	f04f 0302 	mov.w	r3, #2
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f107 070c 	add.w	r7, r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bc80      	pop	{r7}
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop

0800d1b8 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	4603      	mov	r3, r0
 800d1c0:	80fb      	strh	r3, [r7, #6]
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800d1c2:	88fb      	ldrh	r3, [r7, #6]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f240 1130 	movw	r1, #304	; 0x130
 800d1ca:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800d1ce:	f000 fc79 	bl	800dac4 <Standard_GetDescriptorData>
 800d1d2:	4603      	mov	r3, r0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f107 0708 	add.w	r7, r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop

0800d1e0 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	80fb      	strh	r3, [r7, #6]
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800d1ea:	88fb      	ldrh	r3, [r7, #6]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f240 1138 	movw	r1, #312	; 0x138
 800d1f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800d1f6:	f000 fc65 	bl	800dac4 <Standard_GetDescriptorData>
 800d1fa:	4603      	mov	r3, r0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f107 0708 	add.w	r7, r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop

0800d208 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	80fb      	strh	r3, [r7, #6]
  uint8_t wValue0 = pInformation->USBwValue0;
 800d212:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d216:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	78db      	ldrb	r3, [r3, #3]
 800d21e:	73fb      	strb	r3, [r7, #15]
  if (wValue0 > 4)
 800d220:	7bfb      	ldrb	r3, [r7, #15]
 800d222:	2b04      	cmp	r3, #4
 800d224:	d902      	bls.n	800d22c <Virtual_Com_Port_GetStringDescriptor+0x24>
  {
    return NULL;
 800d226:	f04f 0300 	mov.w	r3, #0
 800d22a:	e00d      	b.n	800d248 <Virtual_Com_Port_GetStringDescriptor+0x40>
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 800d232:	f240 1340 	movw	r3, #320	; 0x140
 800d236:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d23a:	18d3      	adds	r3, r2, r3
 800d23c:	88fa      	ldrh	r2, [r7, #6]
 800d23e:	4610      	mov	r0, r2
 800d240:	4619      	mov	r1, r3
 800d242:	f000 fc3f 	bl	800dac4 <Standard_GetDescriptorData>
 800d246:	4603      	mov	r3, r0
  }
}
 800d248:	4618      	mov	r0, r3
 800d24a:	f107 0710 	add.w	r7, r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop

0800d254 <Virtual_Com_Port_Get_Interface_Setting>:
* Input2         : uint8_t: AlternateSetting : Alternate Setting number.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	71fa      	strb	r2, [r7, #7]
 800d260:	71bb      	strb	r3, [r7, #6]
  if (AlternateSetting > 0)
 800d262:	79bb      	ldrb	r3, [r7, #6]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <Virtual_Com_Port_Get_Interface_Setting+0x1a>
  {
    return USB_UNSUPPORT;
 800d268:	f04f 0302 	mov.w	r3, #2
 800d26c:	e007      	b.n	800d27e <Virtual_Com_Port_Get_Interface_Setting+0x2a>
  }
  else if (Interface > 1)
 800d26e:	79fb      	ldrb	r3, [r7, #7]
 800d270:	2b01      	cmp	r3, #1
 800d272:	d902      	bls.n	800d27a <Virtual_Com_Port_Get_Interface_Setting+0x26>
  {
    return USB_UNSUPPORT;
 800d274:	f04f 0302 	mov.w	r3, #2
 800d278:	e001      	b.n	800d27e <Virtual_Com_Port_Get_Interface_Setting+0x2a>
  }
  return USB_SUCCESS;
 800d27a:	f04f 0300 	mov.w	r3, #0
}
 800d27e:	4618      	mov	r0, r3
 800d280:	f107 070c 	add.w	r7, r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	bc80      	pop	{r7}
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop

0800d28c <Virtual_Com_Port_GetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	4603      	mov	r3, r0
 800d294:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800d296:	88fb      	ldrh	r3, [r7, #6]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10a      	bne.n	800d2b2 <Virtual_Com_Port_GetLineCoding+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800d29c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f04f 0208 	mov.w	r2, #8
 800d2aa:	821a      	strh	r2, [r3, #16]
    return NULL;
 800d2ac:	f04f 0300 	mov.w	r3, #0
 800d2b0:	e003      	b.n	800d2ba <Virtual_Com_Port_GetLineCoding+0x2e>
  }
  return(uint8_t *)&linecoding;
 800d2b2:	f240 03d0 	movw	r3, #208	; 0xd0
 800d2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f107 070c 	add.w	r7, r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bc80      	pop	{r7}
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop

0800d2c8 <Virtual_Com_Port_SetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800d2d2:	88fb      	ldrh	r3, [r7, #6]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <Virtual_Com_Port_SetLineCoding+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800d2d8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f04f 0208 	mov.w	r2, #8
 800d2e6:	821a      	strh	r2, [r3, #16]
    return NULL;
 800d2e8:	f04f 0300 	mov.w	r3, #0
 800d2ec:	e003      	b.n	800d2f6 <Virtual_Com_Port_SetLineCoding+0x2e>
  }
  return(uint8_t *)&linecoding;
 800d2ee:	f240 03d0 	movw	r3, #208	; 0xd0
 800d2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f107 070c 	add.w	r7, r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bc80      	pop	{r7}
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop

0800d304 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800d30a:	f04f 0001 	mov.w	r0, #1
 800d30e:	f7fe f8e3 	bl	800b4d8 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
 800d312:	f04f 0301 	mov.w	r3, #1
 800d316:	80fb      	strh	r3, [r7, #6]
  _SetCNTR(wRegVal);
 800d318:	f645 4340 	movw	r3, #23616	; 0x5c40
 800d31c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d320:	88fa      	ldrh	r2, [r7, #6]
 800d322:	601a      	str	r2, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
 800d324:	f241 13a4 	movw	r3, #4516	; 0x11a4
 800d328:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d32c:	f04f 0200 	mov.w	r2, #0
 800d330:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800d332:	f645 4340 	movw	r3, #23616	; 0x5c40
 800d336:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d33a:	f241 12a4 	movw	r2, #4516	; 0x11a4
 800d33e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d342:	8812      	ldrh	r2, [r2, #0]
 800d344:	601a      	str	r2, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800d346:	f645 4344 	movw	r3, #23620	; 0x5c44
 800d34a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d34e:	f04f 0200 	mov.w	r2, #0
 800d352:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800d354:	f241 13a4 	movw	r3, #4516	; 0x11a4
 800d358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d35c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800d360:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800d362:	f645 4340 	movw	r3, #23616	; 0x5c40
 800d366:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d36a:	f241 12a4 	movw	r2, #4516	; 0x11a4
 800d36e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d372:	8812      	ldrh	r2, [r2, #0]
 800d374:	601a      	str	r2, [r3, #0]

  return USB_SUCCESS;
 800d376:	f04f 0300 	mov.w	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	f107 0708 	add.w	r7, r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	4603      	mov	r3, r0
 800d38c:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800d38e:	88fb      	ldrh	r3, [r7, #6]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10a      	bne.n	800d3aa <Standard_GetConfiguration+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800d394:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d398:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f04f 0201 	mov.w	r2, #1
 800d3a2:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 800d3a4:	f04f 0300 	mov.w	r3, #0
 800d3a8:	e00d      	b.n	800d3c6 <Standard_GetConfiguration+0x42>
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800d3aa:	f241 139c 	movw	r3, #4508	; 0x119c
 800d3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800d3b8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f103 030a 	add.w	r3, r3, #10
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f107 0708 	add.w	r7, r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	af00      	add	r7, sp, #0

  if ((pInformation->USBwValue0 <=
 800d3d4:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	78da      	ldrb	r2, [r3, #3]
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800d3e0:	f240 03d8 	movw	r3, #216	; 0xd8
 800d3e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d3e8:	785b      	ldrb	r3, [r3, #1]
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d825      	bhi.n	800d43a <Standard_SetConfiguration+0x6a>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800d3ee:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	789b      	ldrb	r3, [r3, #2]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d11d      	bne.n	800d43a <Standard_SetConfiguration+0x6a>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800d3fe:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d402:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	889b      	ldrh	r3, [r3, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d115      	bne.n	800d43a <Standard_SetConfiguration+0x6a>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800d40e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d412:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	78db      	ldrb	r3, [r3, #3]
 800d424:	7293      	strb	r3, [r2, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800d426:	f241 139c 	movw	r3, #4508	; 0x119c
 800d42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	4798      	blx	r3
    return USB_SUCCESS;
 800d434:	f04f 0300 	mov.w	r3, #0
 800d438:	e001      	b.n	800d43e <Standard_SetConfiguration+0x6e>
  }
  else
  {
    return USB_UNSUPPORT;
 800d43a:	f04f 0302 	mov.w	r3, #2
  }
}
 800d43e:	4618      	mov	r0, r3
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop

0800d444 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4603      	mov	r3, r0
 800d44c:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800d44e:	88fb      	ldrh	r3, [r7, #6]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10a      	bne.n	800d46a <Standard_GetInterface+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800d454:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f04f 0201 	mov.w	r2, #1
 800d462:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800d464:	f04f 0300 	mov.w	r3, #0
 800d468:	e00d      	b.n	800d486 <Standard_GetInterface+0x42>
  }
  pUser_Standard_Requests->User_GetInterface();
 800d46a:	f241 139c 	movw	r3, #4508	; 0x119c
 800d46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800d478:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f103 030c 	add.w	r3, r3, #12
}
 800d486:	4618      	mov	r0, r3
 800d488:	f107 0708 	add.w	r7, r7, #8
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800d496:	f241 1378 	movw	r3, #4472	; 0x1178
 800d49a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	699a      	ldr	r2, [r3, #24]
 800d4a2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	7959      	ldrb	r1, [r3, #5]
 800d4ae:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d4b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	78db      	ldrb	r3, [r3, #3]
 800d4ba:	4608      	mov	r0, r1
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4790      	blx	r2
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	71fb      	strb	r3, [r7, #7]

  if (pInformation->Current_Configuration != 0)
 800d4c4:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	7a9b      	ldrb	r3, [r3, #10]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d03a      	beq.n	800d54a <Standard_SetInterface+0xba>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800d4d4:	79fb      	ldrb	r3, [r7, #7]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10f      	bne.n	800d4fa <Standard_SetInterface+0x6a>
 800d4da:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	791b      	ldrb	r3, [r3, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d107      	bne.n	800d4fa <Standard_SetInterface+0x6a>
        || (pInformation->USBwValue1 != 0))
 800d4ea:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d4ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	789b      	ldrb	r3, [r3, #2]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d002      	beq.n	800d500 <Standard_SetInterface+0x70>
    {
      return  USB_UNSUPPORT;
 800d4fa:	f04f 0302 	mov.w	r3, #2
 800d4fe:	e026      	b.n	800d54e <Standard_SetInterface+0xbe>
    }
    else if (Re == USB_SUCCESS)
 800d500:	79fb      	ldrb	r3, [r7, #7]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d121      	bne.n	800d54a <Standard_SetInterface+0xba>
    {
      pUser_Standard_Requests->User_SetInterface();
 800d506:	f241 139c 	movw	r3, #4508	; 0x119c
 800d50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800d514:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d522:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	795b      	ldrb	r3, [r3, #5]
 800d52a:	72d3      	strb	r3, [r2, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800d52c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d530:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	78db      	ldrb	r3, [r3, #3]
 800d542:	7313      	strb	r3, [r2, #12]
      return USB_SUCCESS;
 800d544:	f04f 0300 	mov.w	r3, #0
 800d548:	e001      	b.n	800d54e <Standard_SetInterface+0xbe>
    }

  }

  return USB_UNSUPPORT;
 800d54a:	f04f 0302 	mov.w	r3, #2
}
 800d54e:	4618      	mov	r0, r3
 800d550:	f107 0708 	add.w	r7, r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800d562:	88fb      	ldrh	r3, [r7, #6]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10a      	bne.n	800d57e <Standard_GetStatus+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800d568:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f04f 0202 	mov.w	r2, #2
 800d576:	821a      	strh	r2, [r3, #16]
    return 0;
 800d578:	f04f 0300 	mov.w	r3, #0
 800d57c:	e0c5      	b.n	800d70a <Standard_GetStatus+0x1b2>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800d57e:	f241 1370 	movw	r3, #4464	; 0x1170
 800d582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d586:	f04f 0200 	mov.w	r2, #0
 800d58a:	801a      	strh	r2, [r3, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800d58c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d590:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d147      	bne.n	800d630 <Standard_GetStatus+0xd8>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800d5a0:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	7a5b      	ldrb	r3, [r3, #9]
 800d5ac:	73fb      	strb	r3, [r7, #15]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800d5ae:	7bfb      	ldrb	r3, [r7, #15]
 800d5b0:	f003 0320 	and.w	r3, r3, #32
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00d      	beq.n	800d5d4 <Standard_GetStatus+0x7c>
    {
      SetBit(StatusInfo0, 1);
 800d5b8:	f241 1370 	movw	r3, #4464	; 0x1170
 800d5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	f043 0302 	orr.w	r3, r3, #2
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	f241 1370 	movw	r3, #4464	; 0x1170
 800d5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5d0:	701a      	strb	r2, [r3, #0]
 800d5d2:	e00c      	b.n	800d5ee <Standard_GetStatus+0x96>
    }
    else
    {
      ClrBit(StatusInfo0, 1);
 800d5d4:	f241 1370 	movw	r3, #4464	; 0x1170
 800d5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	f023 0302 	bic.w	r3, r3, #2
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	f241 1370 	movw	r3, #4464	; 0x1170
 800d5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5ec:	701a      	strb	r2, [r3, #0]
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00d      	beq.n	800d614 <Standard_GetStatus+0xbc>
    {
      SetBit(StatusInfo0, 0);
 800d5f8:	f241 1370 	movw	r3, #4464	; 0x1170
 800d5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	f043 0301 	orr.w	r3, r3, #1
 800d606:	b2da      	uxtb	r2, r3
 800d608:	f241 1370 	movw	r3, #4464	; 0x1170
 800d60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d610:	701a      	strb	r2, [r3, #0]
 800d612:	e06f      	b.n	800d6f4 <Standard_GetStatus+0x19c>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 800d614:	f241 1370 	movw	r3, #4464	; 0x1170
 800d618:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f023 0301 	bic.w	r3, r3, #1
 800d622:	b2da      	uxtb	r2, r3
 800d624:	f241 1370 	movw	r3, #4464	; 0x1170
 800d628:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d62c:	701a      	strb	r2, [r3, #0]
 800d62e:	e061      	b.n	800d6f4 <Standard_GetStatus+0x19c>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800d630:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d640:	2b01      	cmp	r3, #1
 800d642:	d104      	bne.n	800d64e <Standard_GetStatus+0xf6>
  {
    return (uint8_t *)&StatusInfo;
 800d644:	f241 1370 	movw	r3, #4464	; 0x1170
 800d648:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d64c:	e05d      	b.n	800d70a <Standard_GetStatus+0x1b2>
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800d64e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d65e:	2b02      	cmp	r3, #2
 800d660:	d145      	bne.n	800d6ee <Standard_GetStatus+0x196>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800d662:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d666:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	795b      	ldrb	r3, [r3, #5]
 800d66e:	73bb      	strb	r3, [r7, #14]

    Related_Endpoint = (wIndex0 & 0x0f);
 800d670:	7bbb      	ldrb	r3, [r7, #14]
 800d672:	f003 030f 	and.w	r3, r3, #15
 800d676:	737b      	strb	r3, [r7, #13]
    if (ValBit(wIndex0, 7))
 800d678:	7bbb      	ldrb	r3, [r7, #14]
 800d67a:	b25b      	sxtb	r3, r3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	da1a      	bge.n	800d6b6 <Standard_GetStatus+0x15e>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800d680:	7b7b      	ldrb	r3, [r7, #13]
 800d682:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d686:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d68a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	b29b      	uxth	r3, r3
 800d692:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d696:	2b10      	cmp	r3, #16
 800d698:	d12c      	bne.n	800d6f4 <Standard_GetStatus+0x19c>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800d69a:	f241 1370 	movw	r3, #4464	; 0x1170
 800d69e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f043 0301 	orr.w	r3, r3, #1
 800d6a8:	b2da      	uxtb	r2, r3
 800d6aa:	f241 1370 	movw	r3, #4464	; 0x1170
 800d6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6b2:	701a      	strb	r2, [r3, #0]
 800d6b4:	e01e      	b.n	800d6f4 <Standard_GetStatus+0x19c>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800d6b6:	7b7b      	ldrb	r3, [r7, #13]
 800d6b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d6bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6c0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d6cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6d0:	d110      	bne.n	800d6f4 <Standard_GetStatus+0x19c>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800d6d2:	f241 1370 	movw	r3, #4464	; 0x1170
 800d6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	f043 0301 	orr.w	r3, r3, #1
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	f241 1370 	movw	r3, #4464	; 0x1170
 800d6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6ea:	701a      	strb	r2, [r3, #0]
 800d6ec:	e002      	b.n	800d6f4 <Standard_GetStatus+0x19c>
    }

  }
  else
  {
    return NULL;
 800d6ee:	f04f 0300 	mov.w	r3, #0
 800d6f2:	e00a      	b.n	800d70a <Standard_GetStatus+0x1b2>
  }
  pUser_Standard_Requests->User_GetStatus();
 800d6f4:	f241 139c 	movw	r3, #4508	; 0x119c
 800d6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800d702:	f241 1370 	movw	r3, #4464	; 0x1170
 800d706:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	f107 0710 	add.w	r7, r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800d714:	b590      	push	{r4, r7, lr}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
  uint32_t     Type_Rec = Type_Recipient;
 800d71a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d71e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d72a:	613b      	str	r3, [r7, #16]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d111      	bne.n	800d756 <Standard_ClearFeature+0x42>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800d732:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d736:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d740:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	7a5b      	ldrb	r3, [r3, #9]
 800d748:	f023 0320 	bic.w	r3, r3, #32
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	7253      	strb	r3, [r2, #9]
    return USB_SUCCESS;
 800d750:	f04f 0300 	mov.w	r3, #0
 800d754:	e0f1      	b.n	800d93a <Standard_ClearFeature+0x226>
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	2b02      	cmp	r3, #2
 800d75a:	f040 80ec 	bne.w	800d936 <Standard_ClearFeature+0x222>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800d75e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d762:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	885b      	ldrh	r3, [r3, #2]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d107      	bne.n	800d77e <Standard_ClearFeature+0x6a>
        || (pInformation->USBwIndex1 != 0))
 800d76e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d772:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	791b      	ldrb	r3, [r3, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d002      	beq.n	800d784 <Standard_ClearFeature+0x70>
    {
      return USB_UNSUPPORT;
 800d77e:	f04f 0302 	mov.w	r3, #2
 800d782:	e0da      	b.n	800d93a <Standard_ClearFeature+0x226>
    }

    pDev = &Device_Table;
 800d784:	f240 03d8 	movw	r3, #216	; 0xd8
 800d788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d78c:	60fb      	str	r3, [r7, #12]
    wIndex0 = pInformation->USBwIndex0;
 800d78e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d792:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	795b      	ldrb	r3, [r3, #5]
 800d79a:	60bb      	str	r3, [r7, #8]
    rEP = wIndex0 & ~0x80;
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7a2:	607b      	str	r3, [r7, #4]
    Related_Endpoint = ENDP0 + rEP;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	603b      	str	r3, [r7, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
 800d7a8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	795b      	ldrb	r3, [r3, #5]
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	b25b      	sxtb	r3, r3
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	da0c      	bge.n	800d7d6 <Standard_ClearFeature+0xc2>
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d7c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d7c6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d7d2:	617b      	str	r3, [r7, #20]
 800d7d4:	e00b      	b.n	800d7ee <Standard_ClearFeature+0xda>
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d7dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d7e0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d7ec:	617b      	str	r3, [r7, #20]
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d90a      	bls.n	800d810 <Standard_ClearFeature+0xfc>
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d007      	beq.n	800d810 <Standard_ClearFeature+0xfc>
        || (pInformation->Current_Configuration == 0))
 800d800:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	7a9b      	ldrb	r3, [r3, #10]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d102      	bne.n	800d816 <Standard_ClearFeature+0x102>
    {
      return USB_UNSUPPORT;
 800d810:	f04f 0302 	mov.w	r3, #2
 800d814:	e091      	b.n	800d93a <Standard_ClearFeature+0x226>
    }


    if (wIndex0 & 0x80)
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d019      	beq.n	800d854 <Standard_ClearFeature+0x140>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d826:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d82a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	b29b      	uxth	r3, r3
 800d832:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d836:	2b10      	cmp	r3, #16
 800d838:	d173      	bne.n	800d922 <Standard_ClearFeature+0x20e>
      {
        ClearDTOG_TX(Related_Endpoint);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	4618      	mov	r0, r3
 800d840:	f001 fb96 	bl	800ef70 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	b2db      	uxtb	r3, r3
 800d848:	4618      	mov	r0, r3
 800d84a:	f04f 0130 	mov.w	r1, #48	; 0x30
 800d84e:	f001 fa67 	bl	800ed20 <SetEPTxStatus>
 800d852:	e066      	b.n	800d922 <Standard_ClearFeature+0x20e>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d85a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d85e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	b29b      	uxth	r3, r3
 800d866:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d86e:	d158      	bne.n	800d922 <Standard_ClearFeature+0x20e>
      {
        if (Related_Endpoint == ENDP0)
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d12e      	bne.n	800d8d4 <Standard_ClearFeature+0x1c0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	f240 03dc 	movw	r3, #220	; 0xdc
 800d87e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d886:	4610      	mov	r0, r2
 800d888:	4619      	mov	r1, r3
 800d88a:	f001 fc49 	bl	800f120 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d894:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d898:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8a8:	b29c      	uxth	r4, r3
 800d8aa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800d8ae:	b29c      	uxth	r4, r3
 800d8b0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800d8b4:	b29c      	uxth	r4, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d8bc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800d8c0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800d8c4:	f248 0380 	movw	r3, #32896	; 0x8080
 800d8c8:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800d8cc:	4323      	orrs	r3, r4
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	6013      	str	r3, [r2, #0]
 800d8d2:	e026      	b.n	800d922 <Standard_ClearFeature+0x20e>
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f001 fb19 	bl	800ef10 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d8e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d8e8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8f8:	b29c      	uxth	r4, r3
 800d8fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800d8fe:	b29c      	uxth	r4, r3
 800d900:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800d904:	b29c      	uxth	r4, r3
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d90c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800d910:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800d914:	f248 0380 	movw	r3, #32896	; 0x8080
 800d918:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800d91c:	4323      	orrs	r3, r4
 800d91e:	b29b      	uxth	r3, r3
 800d920:	6013      	str	r3, [r2, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800d922:	f241 139c 	movw	r3, #4508	; 0x119c
 800d926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	4798      	blx	r3
    return USB_SUCCESS;
 800d930:	f04f 0300 	mov.w	r3, #0
 800d934:	e001      	b.n	800d93a <Standard_ClearFeature+0x226>
  }

  return USB_UNSUPPORT;
 800d936:	f04f 0302 	mov.w	r3, #2
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	f107 071c 	add.w	r7, r7, #28
 800d940:	46bd      	mov	sp, r7
 800d942:	bd90      	pop	{r4, r7, pc}

0800d944 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800d94a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	795b      	ldrb	r3, [r3, #5]
 800d956:	60bb      	str	r3, [r7, #8]
  rEP = wIndex0 & ~0x80;
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d95e:	607b      	str	r3, [r7, #4]
  Related_Endpoint = ENDP0 + rEP;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	603b      	str	r3, [r7, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
 800d964:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d968:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	795b      	ldrb	r3, [r3, #5]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	b25b      	sxtb	r3, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	da0c      	bge.n	800d992 <Standard_SetEndPointFeature+0x4e>
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d97e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d982:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	b29b      	uxth	r3, r3
 800d98a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	e00b      	b.n	800d9aa <Standard_SetEndPointFeature+0x66>
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d99c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d9a8:	60fb      	str	r3, [r7, #12]
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800d9aa:	f240 03d8 	movw	r3, #216	; 0xd8
 800d9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d912      	bls.n	800d9e2 <Standard_SetEndPointFeature+0x9e>
      || pInformation->USBwValue != 0 || Status == 0
 800d9bc:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	885b      	ldrh	r3, [r3, #2]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10a      	bne.n	800d9e2 <Standard_SetEndPointFeature+0x9e>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d007      	beq.n	800d9e2 <Standard_SetEndPointFeature+0x9e>
      || pInformation->Current_Configuration == 0)
 800d9d2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800d9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	7a9b      	ldrb	r3, [r3, #10]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d102      	bne.n	800d9e8 <Standard_SetEndPointFeature+0xa4>
  {
    return USB_UNSUPPORT;
 800d9e2:	f04f 0302 	mov.w	r3, #2
 800d9e6:	e04c      	b.n	800da82 <Standard_SetEndPointFeature+0x13e>
  }
  else
  {
    if (wIndex0 & 0x80)
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d01f      	beq.n	800da32 <Standard_SetEndPointFeature+0xee>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d9f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d9fc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	b29b      	uxth	r3, r3
 800da04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da0c:	b29c      	uxth	r4, r3
 800da0e:	f084 0310 	eor.w	r3, r4, #16
 800da12:	b29c      	uxth	r4, r3
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800da1a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800da1e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800da22:	f248 0380 	movw	r3, #32896	; 0x8080
 800da26:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800da2a:	4323      	orrs	r3, r4
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	e01e      	b.n	800da70 <Standard_SetEndPointFeature+0x12c>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800da38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800da3c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	b29b      	uxth	r3, r3
 800da44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da4c:	b29c      	uxth	r4, r3
 800da4e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800da52:	b29c      	uxth	r4, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800da5a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800da5e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800da62:	f248 0380 	movw	r3, #32896	; 0x8080
 800da66:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800da6a:	4323      	orrs	r3, r4
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	6013      	str	r3, [r2, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800da70:	f241 139c 	movw	r3, #4508	; 0x119c
 800da74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	699b      	ldr	r3, [r3, #24]
 800da7c:	4798      	blx	r3
  return USB_SUCCESS;
 800da7e:	f04f 0300 	mov.w	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	f107 0714 	add.w	r7, r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd90      	pop	{r4, r7, pc}

0800da8c <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	af00      	add	r7, sp, #0
  SetBit(pInformation->Current_Feature, 5);
 800da90:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800da94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800da9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	7a5b      	ldrb	r3, [r3, #9]
 800daa6:	f043 0320 	orr.w	r3, r3, #32
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	7253      	strb	r3, [r2, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800daae:	f241 139c 	movw	r3, #4508	; 0x119c
 800dab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	4798      	blx	r3
  return USB_SUCCESS;
 800dabc:	f04f 0300 	mov.w	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <Standard_GetDescriptorData>:
* Return         : Address of a part of the descriptor pointed by the Usb_
*                  wOffset The buffer pointed by this address contains at least
*                  Length bytes.
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4603      	mov	r3, r0
 800dacc:	6039      	str	r1, [r7, #0]
 800dace:	80fb      	strh	r3, [r7, #6]
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800dad0:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	8a5b      	ldrh	r3, [r3, #18]
 800dadc:	60fb      	str	r3, [r7, #12]
  if (Length == 0)
 800dade:	88fb      	ldrh	r3, [r7, #6]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10e      	bne.n	800db02 <Standard_GetDescriptorData+0x3e>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800dae4:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	8891      	ldrh	r1, [r2, #4]
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	b292      	uxth	r2, r2
 800daf6:	1a8a      	subs	r2, r1, r2
 800daf8:	b292      	uxth	r2, r2
 800dafa:	821a      	strh	r2, [r3, #16]
    return 0;
 800dafc:	f04f 0300 	mov.w	r3, #0
 800db00:	e003      	b.n	800db0a <Standard_GetDescriptorData+0x46>
  }

  return pDesc->Descriptor + wOffset;
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	18d3      	adds	r3, r2, r3
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	f107 0714 	add.w	r7, r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	bc80      	pop	{r7}
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop

0800db18 <DataStageOut>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageOut(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800db1e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800db22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f103 0310 	add.w	r3, r3, #16
 800db2c:	60bb      	str	r3, [r7, #8]
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	607b      	str	r3, [r7, #4]

  if (pEPinfo->CopyData && save_rLength)
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d02f      	beq.n	800db9c <DataStageOut+0x84>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d02c      	beq.n	800db9c <DataStageOut+0x84>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	889b      	ldrh	r3, [r3, #4]
 800db46:	60fb      	str	r3, [r7, #12]
    if (Length > save_rLength)
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d901      	bls.n	800db54 <DataStageOut+0x3c>
    {
      Length = save_rLength;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	60fb      	str	r3, [r7, #12]
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	b292      	uxth	r2, r2
 800db5c:	4610      	mov	r0, r2
 800db5e:	4798      	blx	r3
 800db60:	6038      	str	r0, [r7, #0]
    pEPinfo->Usb_rLength -= Length;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	881a      	ldrh	r2, [r3, #0]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	b29b      	uxth	r3, r3
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	801a      	strh	r2, [r3, #0]
    pEPinfo->Usb_rOffset += Length;
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	885a      	ldrh	r2, [r3, #2]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	b29b      	uxth	r3, r3
 800db7a:	18d3      	adds	r3, r2, r3
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	805a      	strh	r2, [r3, #2]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800db82:	f04f 0000 	mov.w	r0, #0
 800db86:	f001 fa8b 	bl	800f0a0 <GetEPRxAddr>
 800db8a:	4603      	mov	r3, r0
 800db8c:	461a      	mov	r2, r3
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	b29b      	uxth	r3, r3
 800db92:	6838      	ldr	r0, [r7, #0]
 800db94:	4611      	mov	r1, r2
 800db96:	461a      	mov	r2, r3
 800db98:	f001 f852 	bl	800ec40 <PMAToUserBufferCopy>

  }

  if (pEPinfo->Usb_rLength != 0)
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	881b      	ldrh	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d013      	beq.n	800dbcc <DataStageOut+0xb4>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800dba4:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800dba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dbac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800dbb0:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800dbb2:	f04f 0000 	mov.w	r0, #0
 800dbb6:	f04f 0100 	mov.w	r1, #0
 800dbba:	f001 fa91 	bl	800f0e0 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800dbbe:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800dbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dbc6:	f04f 0230 	mov.w	r2, #48	; 0x30
 800dbca:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	881a      	ldrh	r2, [r3, #0]
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	889b      	ldrh	r3, [r3, #4]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d308      	bcc.n	800dbea <DataStageOut+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
 800dbd8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f04f 0203 	mov.w	r2, #3
 800dbe6:	721a      	strb	r2, [r3, #8]
 800dbe8:	e030      	b.n	800dc4c <DataStageOut+0x134>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	881b      	ldrh	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d008      	beq.n	800dc04 <DataStageOut+0xec>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800dbf2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f04f 0205 	mov.w	r2, #5
 800dc00:	721a      	strb	r2, [r3, #8]
 800dc02:	e023      	b.n	800dc4c <DataStageOut+0x134>
    }
    else if (pEPinfo->Usb_rLength == 0)
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d11f      	bne.n	800dc4c <DataStageOut+0x134>
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800dc0c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f04f 0206 	mov.w	r2, #6
 800dc1a:	721a      	strb	r2, [r3, #8]
      USB_StatusIn();
 800dc1c:	f645 4350 	movw	r3, #23632	; 0x5c50
 800dc20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	461a      	mov	r2, r3
 800dc2a:	f243 0302 	movw	r3, #12290	; 0x3002
 800dc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc32:	18d3      	adds	r3, r2, r3
 800dc34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc38:	f04f 0200 	mov.w	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
 800dc3e:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800dc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc46:	f04f 0230 	mov.w	r2, #48	; 0x30
 800dc4a:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800dc4c:	f107 0710 	add.w	r7, r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800dc5a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f103 0310 	add.w	r3, r3, #16
 800dc68:	60fb      	str	r3, [r7, #12]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	60bb      	str	r3, [r7, #8]
  uint32_t ControlState = pInformation->ControlState;
 800dc70:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	7a1b      	ldrb	r3, [r3, #8]
 800dc7c:	617b      	str	r3, [r7, #20]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d137      	bne.n	800dcf4 <DataStageIn+0xa0>
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	2b04      	cmp	r3, #4
 800dc88:	d134      	bne.n	800dcf4 <DataStageIn+0xa0>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800dc8a:	f240 53c0 	movw	r3, #1472	; 0x5c0
 800dc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d122      	bne.n	800dcde <DataStageIn+0x8a>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800dc98:	f645 4350 	movw	r3, #23632	; 0x5c50
 800dc9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	461a      	mov	r2, r3
 800dca6:	f243 0302 	movw	r3, #12290	; 0x3002
 800dcaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dcae:	18d3      	adds	r3, r2, r3
 800dcb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800dcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dcc2:	f04f 0230 	mov.w	r2, #48	; 0x30
 800dcc6:	801a      	strh	r2, [r3, #0]
      ControlState = LAST_IN_DATA;
 800dcc8:	f04f 0304 	mov.w	r3, #4
 800dccc:	617b      	str	r3, [r7, #20]
      Data_Mul_MaxPacketSize = FALSE;
 800dcce:	f240 53c0 	movw	r3, #1472	; 0x5c0
 800dcd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dcd6:	f04f 0200 	mov.w	r2, #0
 800dcda:	701a      	strb	r2, [r3, #0]
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 
    }
    
    goto Expect_Status_Out;
 800dcdc:	e056      	b.n	800dd8c <DataStageIn+0x138>
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 800dcde:	f04f 0307 	mov.w	r3, #7
 800dce2:	617b      	str	r3, [r7, #20]
      vSetEPTxStatus(EP_TX_STALL);
 800dce4:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800dce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dcec:	f04f 0210 	mov.w	r2, #16
 800dcf0:	801a      	strh	r2, [r3, #0]
 
    }
    
    goto Expect_Status_Out;
 800dcf2:	e04b      	b.n	800dd8c <DataStageIn+0x138>
  }

  Length = pEPinfo->PacketSize;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	889b      	ldrh	r3, [r3, #4]
 800dcf8:	613b      	str	r3, [r7, #16]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d802      	bhi.n	800dd08 <DataStageIn+0xb4>
 800dd02:	f04f 0304 	mov.w	r3, #4
 800dd06:	e001      	b.n	800dd0c <DataStageIn+0xb8>
 800dd08:	f04f 0302 	mov.w	r3, #2
 800dd0c:	617b      	str	r3, [r7, #20]

  if (Length > save_wLength)
 800dd0e:	693a      	ldr	r2, [r7, #16]
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d901      	bls.n	800dd1a <DataStageIn+0xc6>
  {
    Length = save_wLength;
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	613b      	str	r3, [r7, #16]
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	b292      	uxth	r2, r2
 800dd22:	4610      	mov	r0, r2
 800dd24:	4798      	blx	r3
 800dd26:	6078      	str	r0, [r7, #4]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800dd28:	f04f 0000 	mov.w	r0, #0
 800dd2c:	f001 f99a 	bl	800f064 <GetEPTxAddr>
 800dd30:	4603      	mov	r3, r0
 800dd32:	461a      	mov	r2, r3
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	f000 ff3b 	bl	800ebb8 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	f04f 0000 	mov.w	r0, #0
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	f001 f9c8 	bl	800f0e0 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	881a      	ldrh	r2, [r3, #0]
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	801a      	strh	r2, [r3, #0]
  pEPinfo->Usb_wOffset += Length;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	885a      	ldrh	r2, [r3, #2]
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	18d3      	adds	r3, r2, r3
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	805a      	strh	r2, [r3, #2]
  vSetEPTxStatus(EP_TX_VALID);
 800dd70:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800dd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd78:	f04f 0230 	mov.w	r2, #48	; 0x30
 800dd7c:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800dd7e:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800dd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd86:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800dd8a:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800dd8c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dd90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	b2d2      	uxtb	r2, r2
 800dd9a:	721a      	strb	r2, [r3, #8]
}
 800dd9c:	f107 0718 	add.w	r7, r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <NoData_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
  RESULT Result = USB_UNSUPPORT;
 800ddaa:	f04f 0302 	mov.w	r3, #2
 800ddae:	73fb      	strb	r3, [r7, #15]
  uint32_t RequestNo = pInformation->USBbRequest;
 800ddb0:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800ddb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	785b      	ldrb	r3, [r3, #1]
 800ddbc:	607b      	str	r3, [r7, #4]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800ddbe:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800ddc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d176      	bne.n	800dec0 <NoData_Setup0+0x11c>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b09      	cmp	r3, #9
 800ddd6:	d104      	bne.n	800dde2 <NoData_Setup0+0x3e>
    {
      Result = Standard_SetConfiguration();
 800ddd8:	f7ff fafa 	bl	800d3d0 <Standard_SetConfiguration>
 800dddc:	4603      	mov	r3, r0
 800ddde:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800dde0:	e09e      	b.n	800df20 <NoData_Setup0+0x17c>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b05      	cmp	r3, #5
 800dde6:	d129      	bne.n	800de3c <NoData_Setup0+0x98>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800dde8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800ddec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	78db      	ldrb	r3, [r3, #3]
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	b25b      	sxtb	r3, r3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	db17      	blt.n	800de2c <NoData_Setup0+0x88>
 800ddfc:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800de00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	789b      	ldrb	r3, [r3, #2]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10f      	bne.n	800de2c <NoData_Setup0+0x88>
          || (pInformation->USBwIndex != 0)
 800de0c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800de10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	889b      	ldrh	r3, [r3, #4]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d107      	bne.n	800de2c <NoData_Setup0+0x88>
          || (pInformation->Current_Configuration != 0))
 800de1c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800de20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	7a9b      	ldrb	r3, [r3, #10]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d003      	beq.n	800de34 <NoData_Setup0+0x90>
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 800de2c:	f04f 0308 	mov.w	r3, #8
 800de30:	60bb      	str	r3, [r7, #8]
        goto exit_NoData_Setup0;
 800de32:	e0ae      	b.n	800df92 <NoData_Setup0+0x1ee>
      }
      else
      {
        Result = USB_SUCCESS;
 800de34:	f04f 0300 	mov.w	r3, #0
 800de38:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800de3a:	e071      	b.n	800df20 <NoData_Setup0+0x17c>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b03      	cmp	r3, #3
 800de40:	d118      	bne.n	800de74 <NoData_Setup0+0xd0>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 800de42:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800de46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	78db      	ldrb	r3, [r3, #3]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d10c      	bne.n	800de6c <NoData_Setup0+0xc8>
          && (pInformation->USBwIndex == 0))
 800de52:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800de56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	889b      	ldrh	r3, [r3, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d104      	bne.n	800de6c <NoData_Setup0+0xc8>
      {
        Result = Standard_SetDeviceFeature();
 800de62:	f7ff fe13 	bl	800da8c <Standard_SetDeviceFeature>
 800de66:	4603      	mov	r3, r0
 800de68:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800de6a:	e059      	b.n	800df20 <NoData_Setup0+0x17c>
      {
        Result = Standard_SetDeviceFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800de6c:	f04f 0302 	mov.w	r3, #2
 800de70:	73fb      	strb	r3, [r7, #15]
 800de72:	e056      	b.n	800df22 <NoData_Setup0+0x17e>
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b01      	cmp	r3, #1
 800de78:	d152      	bne.n	800df20 <NoData_Setup0+0x17c>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800de7a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800de7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	78db      	ldrb	r3, [r3, #3]
 800de86:	2b01      	cmp	r3, #1
 800de88:	d116      	bne.n	800deb8 <NoData_Setup0+0x114>
          && pInformation->USBwIndex == 0
 800de8a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800de8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	889b      	ldrh	r3, [r3, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10e      	bne.n	800deb8 <NoData_Setup0+0x114>
          && ValBit(pInformation->Current_Feature, 5))
 800de9a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800de9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	7a5b      	ldrb	r3, [r3, #9]
 800dea6:	f003 0320 	and.w	r3, r3, #32
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d004      	beq.n	800deb8 <NoData_Setup0+0x114>
      {
        Result = Standard_ClearFeature();
 800deae:	f7ff fc31 	bl	800d714 <Standard_ClearFeature>
 800deb2:	4603      	mov	r3, r0
 800deb4:	73fb      	strb	r3, [r7, #15]
 800deb6:	e034      	b.n	800df22 <NoData_Setup0+0x17e>
      }
      else
      {
        Result = USB_UNSUPPORT;
 800deb8:	f04f 0302 	mov.w	r3, #2
 800debc:	73fb      	strb	r3, [r7, #15]
 800debe:	e02f      	b.n	800df20 <NoData_Setup0+0x17c>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800dec0:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d107      	bne.n	800dee4 <NoData_Setup0+0x140>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b0b      	cmp	r3, #11
 800ded8:	d123      	bne.n	800df22 <NoData_Setup0+0x17e>
    {
      Result = Standard_SetInterface();
 800deda:	f7ff fad9 	bl	800d490 <Standard_SetInterface>
 800dede:	4603      	mov	r3, r0
 800dee0:	73fb      	strb	r3, [r7, #15]
 800dee2:	e01e      	b.n	800df22 <NoData_Setup0+0x17e>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800dee4:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800def4:	2b02      	cmp	r3, #2
 800def6:	d10f      	bne.n	800df18 <NoData_Setup0+0x174>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d104      	bne.n	800df08 <NoData_Setup0+0x164>
    {
      Result = Standard_ClearFeature();
 800defe:	f7ff fc09 	bl	800d714 <Standard_ClearFeature>
 800df02:	4603      	mov	r3, r0
 800df04:	73fb      	strb	r3, [r7, #15]
 800df06:	e00c      	b.n	800df22 <NoData_Setup0+0x17e>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d109      	bne.n	800df22 <NoData_Setup0+0x17e>
    {
      Result = Standard_SetEndPointFeature();
 800df0e:	f7ff fd19 	bl	800d944 <Standard_SetEndPointFeature>
 800df12:	4603      	mov	r3, r0
 800df14:	73fb      	strb	r3, [r7, #15]
 800df16:	e004      	b.n	800df22 <NoData_Setup0+0x17e>
    }
  }
  else
  {
    Result = USB_UNSUPPORT;
 800df18:	f04f 0302 	mov.w	r3, #2
 800df1c:	73fb      	strb	r3, [r7, #15]
 800df1e:	e000      	b.n	800df22 <NoData_Setup0+0x17e>
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800df20:	bf00      	nop
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800df22:	7bfb      	ldrb	r3, [r7, #15]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d012      	beq.n	800df4e <NoData_Setup0+0x1aa>
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800df28:	f241 1378 	movw	r3, #4472	; 0x1178
 800df2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	695b      	ldr	r3, [r3, #20]
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	b2d2      	uxtb	r2, r2
 800df38:	4610      	mov	r0, r2
 800df3a:	4798      	blx	r3
 800df3c:	4603      	mov	r3, r0
 800df3e:	73fb      	strb	r3, [r7, #15]
    if (Result == USB_NOT_READY)
 800df40:	7bfb      	ldrb	r3, [r7, #15]
 800df42:	2b03      	cmp	r3, #3
 800df44:	d103      	bne.n	800df4e <NoData_Setup0+0x1aa>
    {
      ControlState = PAUSE;
 800df46:	f04f 0309 	mov.w	r3, #9
 800df4a:	60bb      	str	r3, [r7, #8]
      goto exit_NoData_Setup0;
 800df4c:	e021      	b.n	800df92 <NoData_Setup0+0x1ee>
    }
  }

  if (Result != USB_SUCCESS)
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d003      	beq.n	800df5c <NoData_Setup0+0x1b8>
  {
    ControlState = STALLED;
 800df54:	f04f 0308 	mov.w	r3, #8
 800df58:	60bb      	str	r3, [r7, #8]
    goto exit_NoData_Setup0;
 800df5a:	e01a      	b.n	800df92 <NoData_Setup0+0x1ee>
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 800df5c:	f04f 0306 	mov.w	r3, #6
 800df60:	60bb      	str	r3, [r7, #8]

  USB_StatusIn();
 800df62:	f645 4350 	movw	r3, #23632	; 0x5c50
 800df66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	461a      	mov	r2, r3
 800df70:	f243 0302 	movw	r3, #12290	; 0x3002
 800df74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df78:	18d3      	adds	r3, r2, r3
 800df7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df7e:	f04f 0200 	mov.w	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800df88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df8c:	f04f 0230 	mov.w	r2, #48	; 0x30
 800df90:	801a      	strh	r2, [r3, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800df92:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800df96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	b2d2      	uxtb	r2, r2
 800dfa0:	721a      	strb	r2, [r3, #8]
  return;
 800dfa2:	bf00      	nop
}
 800dfa4:	f107 0710 	add.w	r7, r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <Data_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Data_Setup0(void)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08a      	sub	sp, #40	; 0x28
 800dfb0:	af00      	add	r7, sp, #0
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800dfb2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	785b      	ldrb	r3, [r3, #1]
 800dfbe:	61bb      	str	r3, [r7, #24]
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 800dfc0:	f04f 0300 	mov.w	r3, #0
 800dfc4:	627b      	str	r3, [r7, #36]	; 0x24
  wOffset = 0;
 800dfc6:	f04f 0300 	mov.w	r3, #0
 800dfca:	617b      	str	r3, [r7, #20]

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	2b06      	cmp	r3, #6
 800dfd0:	d133      	bne.n	800e03a <Data_Setup0+0x8e>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800dfd2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dfd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f040 813c 	bne.w	800e260 <Data_Setup0+0x2b4>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 800dfe8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800dfec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	789b      	ldrb	r3, [r3, #2]
 800dff4:	74fb      	strb	r3, [r7, #19]
      if (wValue1 == DEVICE_DESCRIPTOR)
 800dff6:	7cfb      	ldrb	r3, [r7, #19]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d107      	bne.n	800e00c <Data_Setup0+0x60>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800dffc:	f241 1378 	movw	r3, #4472	; 0x1178
 800e000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	69db      	ldr	r3, [r3, #28]
 800e008:	627b      	str	r3, [r7, #36]	; 0x24
 800e00a:	e129      	b.n	800e260 <Data_Setup0+0x2b4>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800e00c:	7cfb      	ldrb	r3, [r7, #19]
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d107      	bne.n	800e022 <Data_Setup0+0x76>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800e012:	f241 1378 	movw	r3, #4472	; 0x1178
 800e016:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	627b      	str	r3, [r7, #36]	; 0x24
 800e020:	e11e      	b.n	800e260 <Data_Setup0+0x2b4>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800e022:	7cfb      	ldrb	r3, [r7, #19]
 800e024:	2b03      	cmp	r3, #3
 800e026:	f040 811b 	bne.w	800e260 <Data_Setup0+0x2b4>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 800e02a:	f241 1378 	movw	r3, #4472	; 0x1178
 800e02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
 800e038:	e112      	b.n	800e260 <Data_Setup0+0x2b4>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f040 80b5 	bne.w	800e1ac <Data_Setup0+0x200>
 800e042:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e046:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	885b      	ldrh	r3, [r3, #2]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f040 80ac 	bne.w	800e1ac <Data_Setup0+0x200>
           && (pInformation->USBwLength == 0x0002)
 800e054:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	88db      	ldrh	r3, [r3, #6]
 800e060:	2b02      	cmp	r3, #2
 800e062:	f040 80a3 	bne.w	800e1ac <Data_Setup0+0x200>
           && (pInformation->USBwIndex1 == 0))
 800e066:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e06a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	791b      	ldrb	r3, [r3, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	f040 809a 	bne.w	800e1ac <Data_Setup0+0x200>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800e078:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10d      	bne.n	800e0a8 <Data_Setup0+0xfc>
        && (pInformation->USBwIndex == 0))
 800e08c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e090:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	889b      	ldrh	r3, [r3, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d105      	bne.n	800e0a8 <Data_Setup0+0xfc>
    {
      CopyRoutine = Standard_GetStatus;
 800e09c:	f24d 5359 	movw	r3, #54617	; 0xd559
 800e0a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800e0a4:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800e0a6:	e0da      	b.n	800e25e <Data_Setup0+0x2b2>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800e0a8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e0ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d122      	bne.n	800e102 <Data_Setup0+0x156>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800e0bc:	f241 1378 	movw	r3, #4472	; 0x1178
 800e0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	699a      	ldr	r2, [r3, #24]
 800e0c8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	795b      	ldrb	r3, [r3, #5]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f04f 0100 	mov.w	r1, #0
 800e0da:	4790      	blx	r2
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f040 80bd 	bne.w	800e25e <Data_Setup0+0x2b2>
          && (pInformation->Current_Configuration != 0))
 800e0e4:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	7a9b      	ldrb	r3, [r3, #10]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 80b4 	beq.w	800e25e <Data_Setup0+0x2b2>
      {
        CopyRoutine = Standard_GetStatus;
 800e0f6:	f24d 5359 	movw	r3, #54617	; 0xd559
 800e0fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 800e0fe:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800e100:	e0ad      	b.n	800e25e <Data_Setup0+0x2b2>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800e102:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e106:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e112:	2b02      	cmp	r3, #2
 800e114:	f040 80a3 	bne.w	800e25e <Data_Setup0+0x2b2>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800e118:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	795b      	ldrb	r3, [r3, #5]
 800e124:	f003 030f 	and.w	r3, r3, #15
 800e128:	60fb      	str	r3, [r7, #12]
      Reserved = pInformation->USBwIndex0 & 0x70;
 800e12a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	795b      	ldrb	r3, [r3, #5]
 800e136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e13a:	60bb      	str	r3, [r7, #8]

      if (ValBit(pInformation->USBwIndex0, 7))
 800e13c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	795b      	ldrb	r3, [r3, #5]
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	b25b      	sxtb	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	da0c      	bge.n	800e16a <Data_Setup0+0x1be>
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e156:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e15a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	b29b      	uxth	r3, r3
 800e162:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e166:	61fb      	str	r3, [r7, #28]
 800e168:	e00b      	b.n	800e182 <Data_Setup0+0x1d6>
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e174:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e180:	61fb      	str	r3, [r7, #28]
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800e182:	f240 03d8 	movw	r3, #216	; 0xd8
 800e186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	461a      	mov	r2, r3
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	429a      	cmp	r2, r3
 800e192:	d964      	bls.n	800e25e <Data_Setup0+0x2b2>
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d161      	bne.n	800e25e <Data_Setup0+0x2b2>
          && (Status != 0))
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d05e      	beq.n	800e25e <Data_Setup0+0x2b2>
      {
        CopyRoutine = Standard_GetStatus;
 800e1a0:	f24d 5359 	movw	r3, #54617	; 0xd559
 800e1a4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800e1a8:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800e1aa:	e058      	b.n	800e25e <Data_Setup0+0x2b2>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	2b08      	cmp	r3, #8
 800e1b0:	d10f      	bne.n	800e1d2 <Data_Setup0+0x226>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800e1b2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d14c      	bne.n	800e260 <Data_Setup0+0x2b4>
    {
      CopyRoutine = Standard_GetConfiguration;
 800e1c6:	f24d 3385 	movw	r3, #54149	; 0xd385
 800e1ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 800e1ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e1d0:	e046      	b.n	800e260 <Data_Setup0+0x2b4>
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	2b0a      	cmp	r3, #10
 800e1d6:	d143      	bne.n	800e260 <Data_Setup0+0x2b4>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800e1d8:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d139      	bne.n	800e260 <Data_Setup0+0x2b4>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800e1ec:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e1f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	7a9b      	ldrb	r3, [r3, #10]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d031      	beq.n	800e260 <Data_Setup0+0x2b4>
 800e1fc:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e200:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	885b      	ldrh	r3, [r3, #2]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d129      	bne.n	800e260 <Data_Setup0+0x2b4>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800e20c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e210:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	791b      	ldrb	r3, [r3, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d121      	bne.n	800e260 <Data_Setup0+0x2b4>
 800e21c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e220:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	88db      	ldrh	r3, [r3, #6]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d119      	bne.n	800e260 <Data_Setup0+0x2b4>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800e22c:	f241 1378 	movw	r3, #4472	; 0x1178
 800e230:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	699a      	ldr	r2, [r3, #24]
 800e238:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	795b      	ldrb	r3, [r3, #5]
 800e244:	4618      	mov	r0, r3
 800e246:	f04f 0100 	mov.w	r1, #0
 800e24a:	4790      	blx	r2
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d106      	bne.n	800e260 <Data_Setup0+0x2b4>
    {
      CopyRoutine = Standard_GetInterface;
 800e252:	f24d 4345 	movw	r3, #54341	; 0xd445
 800e256:	f6c0 0300 	movt	r3, #2048	; 0x800
 800e25a:	627b      	str	r3, [r7, #36]	; 0x24
 800e25c:	e000      	b.n	800e260 <Data_Setup0+0x2b4>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800e25e:	bf00      	nop
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	2b00      	cmp	r3, #0
 800e264:	d017      	beq.n	800e296 <Data_Setup0+0x2ea>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800e266:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	b292      	uxth	r2, r2
 800e274:	825a      	strh	r2, [r3, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800e276:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e282:	619a      	str	r2, [r3, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	f04f 0000 	mov.w	r0, #0
 800e28a:	4798      	blx	r3
    Result = USB_SUCCESS;
 800e28c:	f04f 0300 	mov.w	r3, #0
 800e290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e294:	e01d      	b.n	800e2d2 <Data_Setup0+0x326>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 800e296:	f241 1378 	movw	r3, #4472	; 0x1178
 800e29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	691a      	ldr	r2, [r3, #16]
 800e2a2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	785b      	ldrb	r3, [r3, #1]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	4790      	blx	r2
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (Result == USB_NOT_READY)
 800e2b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2bc:	2b03      	cmp	r3, #3
 800e2be:	d108      	bne.n	800e2d2 <Data_Setup0+0x326>
    {
      pInformation->ControlState = PAUSE;
 800e2c0:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f04f 0209 	mov.w	r2, #9
 800e2ce:	721a      	strb	r2, [r3, #8]
      return;
 800e2d0:	e0ac      	b.n	800e42c <Data_Setup0+0x480>
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800e2d2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	8a1a      	ldrh	r2, [r3, #16]
 800e2de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d108      	bne.n	800e2f8 <Data_Setup0+0x34c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800e2e6:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f04f 0209 	mov.w	r2, #9
 800e2f4:	721a      	strb	r2, [r3, #8]
    return;
 800e2f6:	e099      	b.n	800e42c <Data_Setup0+0x480>
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800e2f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d007      	beq.n	800e310 <Data_Setup0+0x364>
 800e300:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e304:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	8a1b      	ldrh	r3, [r3, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d108      	bne.n	800e322 <Data_Setup0+0x376>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 800e310:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e314:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f04f 0208 	mov.w	r2, #8
 800e31e:	721a      	strb	r2, [r3, #8]
    return;
 800e320:	e084      	b.n	800e42c <Data_Setup0+0x480>
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800e322:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e326:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	b25b      	sxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	da6a      	bge.n	800e40c <Data_Setup0+0x460>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800e336:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	88db      	ldrh	r3, [r3, #6]
 800e342:	607b      	str	r3, [r7, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800e344:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	8a1b      	ldrh	r3, [r3, #16]
 800e350:	461a      	mov	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	429a      	cmp	r2, r3
 800e356:	d908      	bls.n	800e36a <Data_Setup0+0x3be>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800e358:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	b292      	uxth	r2, r2
 800e366:	821a      	strh	r2, [r3, #16]
 800e368:	e040      	b.n	800e3ec <Data_Setup0+0x440>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800e36a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	8a1a      	ldrh	r2, [r3, #16]
 800e376:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	88db      	ldrh	r3, [r3, #6]
 800e382:	429a      	cmp	r2, r3
 800e384:	d232      	bcs.n	800e3ec <Data_Setup0+0x440>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800e386:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	8a1a      	ldrh	r2, [r3, #16]
 800e392:	f241 1378 	movw	r3, #4472	; 0x1178
 800e396:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d207      	bcs.n	800e3b4 <Data_Setup0+0x408>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800e3a4:	f240 53c0 	movw	r3, #1472	; 0x5c0
 800e3a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3ac:	f04f 0200 	mov.w	r2, #0
 800e3b0:	701a      	strb	r2, [r3, #0]
 800e3b2:	e01b      	b.n	800e3ec <Data_Setup0+0x440>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800e3b4:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	8a1b      	ldrh	r3, [r3, #16]
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	f241 1378 	movw	r3, #4472	; 0x1178
 800e3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e3d0:	fb92 f1f3 	sdiv	r1, r2, r3
 800e3d4:	fb03 f301 	mul.w	r3, r3, r1
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <Data_Setup0+0x440>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800e3de:	f240 53c0 	movw	r3, #1472	; 0x5c0
 800e3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3e6:	f04f 0201 	mov.w	r2, #1
 800e3ea:	701a      	strb	r2, [r3, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800e3ec:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	f241 1378 	movw	r3, #4472	; 0x1178
 800e3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e404:	8293      	strh	r3, [r2, #20]
    DataStageIn();
 800e406:	f7ff fc25 	bl	800dc54 <DataStageIn>
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
  }

  return;
 800e40a:	e00e      	b.n	800e42a <Data_Setup0+0x47e>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800e40c:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e410:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f04f 0203 	mov.w	r2, #3
 800e41a:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800e41c:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e420:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e424:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800e428:	801a      	strh	r2, [r3, #0]
  }

  return;
 800e42a:	bf00      	nop
}
 800e42c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800e434:	b590      	push	{r4, r7, lr}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
  union
  {
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
 800e43a:	f04f 0301 	mov.w	r3, #1
 800e43e:	80fb      	strh	r3, [r7, #6]
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800e440:	f645 4350 	movw	r3, #23632	; 0x5c50
 800e444:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	461a      	mov	r2, r3
 800e44e:	f243 0304 	movw	r3, #12292	; 0x3004
 800e452:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e456:	18d3      	adds	r3, r2, r3
 800e458:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e464:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e468:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800e46c:	603b      	str	r3, [r7, #0]

  if (pInformation->ControlState != PAUSE)
 800e46e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e472:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	7a1b      	ldrb	r3, [r3, #8]
 800e47a:	2b09      	cmp	r3, #9
 800e47c:	d04d      	beq.n	800e51a <Setup0_Process+0xe6>
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800e47e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e482:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	7819      	ldrb	r1, [r3, #0]
 800e48c:	7011      	strb	r1, [r2, #0]
 800e48e:	f103 0301 	add.w	r3, r3, #1
 800e492:	603b      	str	r3, [r7, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800e494:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	7819      	ldrb	r1, [r3, #0]
 800e4a2:	7051      	strb	r1, [r2, #1]
 800e4a4:	f103 0301 	add.w	r3, r3, #1
 800e4a8:	603b      	str	r3, [r7, #0]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800e4aa:	683a      	ldr	r2, [r7, #0]
 800e4ac:	88fb      	ldrh	r3, [r7, #6]
 800e4ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4b2:	18d3      	adds	r3, r2, r3
 800e4b4:	603b      	str	r3, [r7, #0]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800e4b6:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e4be:	681c      	ldr	r4, [r3, #0]
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	881a      	ldrh	r2, [r3, #0]
 800e4c4:	f103 0302 	add.w	r3, r3, #2
 800e4c8:	603b      	str	r3, [r7, #0]
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	f000 fe98 	bl	800f200 <ByteSwap>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	8063      	strh	r3, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	88fb      	ldrh	r3, [r7, #6]
 800e4d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4dc:	18d3      	adds	r3, r2, r3
 800e4de:	603b      	str	r3, [r7, #0]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800e4e0:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e4e8:	681c      	ldr	r4, [r3, #0]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	881a      	ldrh	r2, [r3, #0]
 800e4ee:	f103 0302 	add.w	r3, r3, #2
 800e4f2:	603b      	str	r3, [r7, #0]
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	f000 fe83 	bl	800f200 <ByteSwap>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	80a3      	strh	r3, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	88fb      	ldrh	r3, [r7, #6]
 800e502:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e506:	18d3      	adds	r3, r2, r3
 800e508:	603b      	str	r3, [r7, #0]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800e50a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	8812      	ldrh	r2, [r2, #0]
 800e518:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800e51a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f04f 0201 	mov.w	r2, #1
 800e528:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 800e52a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	88db      	ldrh	r3, [r3, #6]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d102      	bne.n	800e540 <Setup0_Process+0x10c>
  {
    /* Setup with no data stage */
    NoData_Setup0();
 800e53a:	f7ff fc33 	bl	800dda4 <NoData_Setup0>
 800e53e:	e001      	b.n	800e544 <Setup0_Process+0x110>
  }
  else
  {
    /* Setup with data stage */
    Data_Setup0();
 800e540:	f7ff fd34 	bl	800dfac <Data_Setup0>
  }
  return Post0_Process();
 800e544:	f000 f8aa 	bl	800e69c <Post0_Process>
 800e548:	4603      	mov	r3, r0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	f107 070c 	add.w	r7, r7, #12
 800e550:	46bd      	mov	sp, r7
 800e552:	bd90      	pop	{r4, r7, pc}

0800e554 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 800e55a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	7a1b      	ldrb	r3, [r3, #8]
 800e566:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d002      	beq.n	800e574 <In0_Process+0x20>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b04      	cmp	r3, #4
 800e572:	d109      	bne.n	800e588 <In0_Process+0x34>
  {
    DataStageIn();
 800e574:	f7ff fb6e 	bl	800dc54 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 800e578:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	7a1b      	ldrb	r3, [r3, #8]
 800e584:	607b      	str	r3, [r7, #4]
 800e586:	e032      	b.n	800e5ee <In0_Process+0x9a>
  }

  else if (ControlState == WAIT_STATUS_IN)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b06      	cmp	r3, #6
 800e58c:	d12c      	bne.n	800e5e8 <In0_Process+0x94>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800e58e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e592:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	785b      	ldrb	r3, [r3, #1]
 800e59a:	2b05      	cmp	r3, #5
 800e59c:	d119      	bne.n	800e5d2 <In0_Process+0x7e>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 800e59e:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10f      	bne.n	800e5d2 <In0_Process+0x7e>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800e5b2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	78db      	ldrb	r3, [r3, #3]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f000 f89c 	bl	800e6fc <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 800e5c4:	f241 139c 	movw	r3, #4508	; 0x119c
 800e5c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	6a1b      	ldr	r3, [r3, #32]
 800e5d0:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 800e5d2:	f241 1378 	movw	r3, #4472	; 0x1178
 800e5d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	4798      	blx	r3
    ControlState = STALLED;
 800e5e0:	f04f 0308 	mov.w	r3, #8
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	e002      	b.n	800e5ee <In0_Process+0x9a>
  }

  else
  {
    ControlState = STALLED;
 800e5e8:	f04f 0308 	mov.w	r3, #8
 800e5ec:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 800e5ee:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	b2d2      	uxtb	r2, r2
 800e5fc:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800e5fe:	f000 f84d 	bl	800e69c <Post0_Process>
 800e602:	4603      	mov	r3, r0
}
 800e604:	4618      	mov	r0, r3
 800e606:	f107 0708 	add.w	r7, r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop

0800e610 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 800e616:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	7a1b      	ldrb	r3, [r3, #8]
 800e622:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b02      	cmp	r3, #2
 800e628:	d002      	beq.n	800e630 <Out0_Process+0x20>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2b04      	cmp	r3, #4
 800e62e:	d103      	bne.n	800e638 <Out0_Process+0x28>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 800e630:	f04f 0308 	mov.w	r3, #8
 800e634:	607b      	str	r3, [r7, #4]
 800e636:	e020      	b.n	800e67a <Out0_Process+0x6a>
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d002      	beq.n	800e644 <Out0_Process+0x34>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2b05      	cmp	r3, #5
 800e642:	d109      	bne.n	800e658 <Out0_Process+0x48>
  {
    DataStageOut();
 800e644:	f7ff fa68 	bl	800db18 <DataStageOut>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800e648:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	7a1b      	ldrb	r3, [r3, #8]
 800e654:	607b      	str	r3, [r7, #4]
 800e656:	e010      	b.n	800e67a <Out0_Process+0x6a>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b07      	cmp	r3, #7
 800e65c:	d10a      	bne.n	800e674 <Out0_Process+0x64>
  {
    (*pProperty->Process_Status_OUT)();
 800e65e:	f241 1378 	movw	r3, #4472	; 0x1178
 800e662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	68db      	ldr	r3, [r3, #12]
 800e66a:	4798      	blx	r3
    ControlState = STALLED;
 800e66c:	f04f 0308 	mov.w	r3, #8
 800e670:	607b      	str	r3, [r7, #4]
 800e672:	e002      	b.n	800e67a <Out0_Process+0x6a>


  /* Unexpect state, STALL the endpoint */
  else
  {
    ControlState = STALLED;
 800e674:	f04f 0308 	mov.w	r3, #8
 800e678:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 800e67a:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	b2d2      	uxtb	r2, r2
 800e688:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800e68a:	f000 f807 	bl	800e69c <Post0_Process>
 800e68e:	4603      	mov	r3, r0
}
 800e690:	4618      	mov	r0, r3
 800e692:	f107 0708 	add.w	r7, r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop

0800e69c <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	af00      	add	r7, sp, #0
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800e6a0:	f240 03dc 	movw	r3, #220	; 0xdc
 800e6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e6ac:	f04f 0000 	mov.w	r0, #0
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	f000 fd35 	bl	800f120 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800e6b6:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	7a1b      	ldrb	r3, [r3, #8]
 800e6c2:	2b08      	cmp	r3, #8
 800e6c4:	d10d      	bne.n	800e6e2 <Post0_Process+0x46>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800e6c6:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e6d2:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800e6d4:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800e6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6dc:	f04f 0210 	mov.w	r2, #16
 800e6e0:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
 800e6e2:	f241 13a0 	movw	r3, #4512	; 0x11a0
 800e6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	7a1b      	ldrb	r3, [r3, #8]
 800e6ee:	2b09      	cmp	r3, #9
 800e6f0:	bf14      	ite	ne
 800e6f2:	2300      	movne	r3, #0
 800e6f4:	2301      	moveq	r3, #1
 800e6f6:	b2db      	uxtb	r3, r3
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	4603      	mov	r3, r0
 800e704:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800e706:	f240 03d8 	movw	r3, #216	; 0xd8
 800e70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	60bb      	str	r3, [r7, #8]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800e712:	f04f 0300 	mov.w	r3, #0
 800e716:	60fb      	str	r3, [r7, #12]
 800e718:	e021      	b.n	800e75e <SetDeviceAddress+0x62>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e726:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800e72a:	68fa      	ldr	r2, [r7, #12]
 800e72c:	b2d2      	uxtb	r2, r2
 800e72e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800e732:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800e736:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800e73a:	6812      	ldr	r2, [r2, #0]
 800e73c:	b292      	uxth	r2, r2
 800e73e:	4611      	mov	r1, r2
 800e740:	f640 720f 	movw	r2, #3855	; 0xf0f
 800e744:	400a      	ands	r2, r1
 800e746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e74a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e74e:	68f9      	ldr	r1, [r7, #12]
 800e750:	b2c9      	uxtb	r1, r1
 800e752:	430a      	orrs	r2, r1
 800e754:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f103 0301 	add.w	r3, r3, #1
 800e75c:	60fb      	str	r3, [r7, #12]
 800e75e:	68fa      	ldr	r2, [r7, #12]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	429a      	cmp	r2, r3
 800e764:	d3d9      	bcc.n	800e71a <SetDeviceAddress+0x1e>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800e766:	f645 434c 	movw	r3, #23628	; 0x5c4c
 800e76a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e76e:	79fa      	ldrb	r2, [r7, #7]
 800e770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e774:	b2d2      	uxtb	r2, r2
 800e776:	601a      	str	r2, [r3, #0]
}
 800e778:	f107 0714 	add.w	r7, r7, #20
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bc80      	pop	{r7}
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop

0800e784 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800e784:	b480      	push	{r7}
 800e786:	af00      	add	r7, sp, #0
}
 800e788:	46bd      	mov	sp, r7
 800e78a:	bc80      	pop	{r7}
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop

0800e790 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 800e790:	b590      	push	{r4, r7, lr}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
  __IO uint16_t wEPVal = 0;
 800e796:	f04f 0300 	mov.w	r3, #0
 800e79a:	80fb      	strh	r3, [r7, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800e79c:	e1f5      	b.n	800eb8a <CTR_LP+0x3fa>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800e79e:	f241 136c 	movw	r3, #4460	; 0x116c
 800e7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	f003 030f 	and.w	r3, r3, #15
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	f241 137c 	movw	r3, #4476	; 0x117c
 800e7b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7ba:	701a      	strb	r2, [r3, #0]
    if (EPindex == 0)
 800e7bc:	f241 137c 	movw	r3, #4476	; 0x117c
 800e7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f040 816f 	bne.w	800eaaa <CTR_LP+0x31a>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800e7cc:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e7d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7e0:	801a      	strh	r2, [r3, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800e7e2:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7ea:	881b      	ldrh	r3, [r3, #0]
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800e7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7fc:	801a      	strh	r2, [r3, #0]
	    SaveRState &=  EPRX_STAT;	
 800e7fe:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e806:	881b      	ldrh	r3, [r3, #0]
 800e808:	b29b      	uxth	r3, r3
 800e80a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e80e:	b29a      	uxth	r2, r3
 800e810:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e818:	801a      	strh	r2, [r3, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800e81a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e81e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	b29b      	uxth	r3, r3
 800e826:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800e82a:	401c      	ands	r4, r3
 800e82c:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 800e830:	f084 0420 	eor.w	r4, r4, #32
 800e834:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800e838:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e83c:	b2a1      	uxth	r1, r4
 800e83e:	f248 0380 	movw	r3, #32896	; 0x8080
 800e842:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800e846:	430b      	orrs	r3, r1
 800e848:	b29b      	uxth	r3, r3
 800e84a:	6013      	str	r3, [r2, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 800e84c:	f241 136c 	movw	r3, #4460	; 0x116c
 800e850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	b29b      	uxth	r3, r3
 800e858:	f003 0310 	and.w	r3, r3, #16
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d15a      	bne.n	800e916 <CTR_LP+0x186>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800e860:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e864:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e868:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800e86c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e870:	6812      	ldr	r2, [r2, #0]
 800e872:	b292      	uxth	r2, r2
 800e874:	4611      	mov	r1, r2
 800e876:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800e87a:	400a      	ands	r2, r1
 800e87c:	601a      	str	r2, [r3, #0]
        In0_Process();
 800e87e:	f7ff fe69 	bl	800e554 <In0_Process>

           /* before terminate set Tx & Rx status */

            _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800e882:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e886:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800e892:	401c      	ands	r4, r3
 800e894:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e89c:	881b      	ldrh	r3, [r3, #0]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <CTR_LP+0x11e>
 800e8aa:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800e8ae:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d001      	beq.n	800e8c8 <CTR_LP+0x138>
 800e8c4:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 800e8c8:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800e8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	f003 0310 	and.w	r3, r3, #16
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d001      	beq.n	800e8e2 <CTR_LP+0x152>
 800e8de:	f084 0410 	eor.w	r4, r4, #16
 800e8e2:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800e8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8ea:	881b      	ldrh	r3, [r3, #0]
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	f003 0320 	and.w	r3, r3, #32
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <CTR_LP+0x16c>
 800e8f8:	f084 0420 	eor.w	r4, r4, #32
 800e8fc:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800e900:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e904:	b2a1      	uxth	r1, r4
 800e906:	f248 0380 	movw	r3, #32896	; 0x8080
 800e90a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800e90e:	430b      	orrs	r3, r1
 800e910:	b29b      	uxth	r3, r3
 800e912:	6013      	str	r3, [r2, #0]
		  return;
 800e914:	e14b      	b.n	800ebae <CTR_LP+0x41e>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800e916:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e91a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	b29b      	uxth	r3, r3
 800e922:	80fb      	strh	r3, [r7, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800e924:	88fb      	ldrh	r3, [r7, #6]
 800e926:	b29b      	uxth	r3, r3
 800e928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d05a      	beq.n	800e9e6 <CTR_LP+0x256>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800e930:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e934:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e938:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800e93c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e940:	6812      	ldr	r2, [r2, #0]
 800e942:	b292      	uxth	r2, r2
 800e944:	4611      	mov	r1, r2
 800e946:	f640 728f 	movw	r2, #3983	; 0xf8f
 800e94a:	400a      	ands	r2, r1
 800e94c:	601a      	str	r2, [r3, #0]
          Setup0_Process();
 800e94e:	f7ff fd71 	bl	800e434 <Setup0_Process>
          /* before terminate set Tx & Rx status */

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800e952:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e956:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800e962:	401c      	ands	r4, r3
 800e964:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e968:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e96c:	881b      	ldrh	r3, [r3, #0]
 800e96e:	b29b      	uxth	r3, r3
 800e970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e974:	b29b      	uxth	r3, r3
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <CTR_LP+0x1ee>
 800e97a:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800e97e:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800e982:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e986:	881b      	ldrh	r3, [r3, #0]
 800e988:	b29b      	uxth	r3, r3
 800e98a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e98e:	b29b      	uxth	r3, r3
 800e990:	2b00      	cmp	r3, #0
 800e992:	d001      	beq.n	800e998 <CTR_LP+0x208>
 800e994:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 800e998:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800e99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9a0:	881b      	ldrh	r3, [r3, #0]
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	f003 0310 	and.w	r3, r3, #16
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <CTR_LP+0x222>
 800e9ae:	f084 0410 	eor.w	r4, r4, #16
 800e9b2:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800e9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9ba:	881b      	ldrh	r3, [r3, #0]
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	f003 0320 	and.w	r3, r3, #32
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d001      	beq.n	800e9cc <CTR_LP+0x23c>
 800e9c8:	f084 0420 	eor.w	r4, r4, #32
 800e9cc:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800e9d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e9d4:	b2a1      	uxth	r1, r4
 800e9d6:	f248 0380 	movw	r3, #32896	; 0x8080
 800e9da:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800e9de:	430b      	orrs	r3, r1
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	6013      	str	r3, [r2, #0]
          return;
 800e9e4:	e0e3      	b.n	800ebae <CTR_LP+0x41e>
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800e9e6:	88fb      	ldrh	r3, [r7, #6]
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	b21b      	sxth	r3, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f280 80cb 	bge.w	800eb8a <CTR_LP+0x3fa>
        {
          _ClearEP_CTR_RX(ENDP0);
 800e9f4:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800e9f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e9fc:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800ea00:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ea04:	6812      	ldr	r2, [r2, #0]
 800ea06:	b292      	uxth	r2, r2
 800ea08:	4611      	mov	r1, r2
 800ea0a:	f640 728f 	movw	r2, #3983	; 0xf8f
 800ea0e:	400a      	ands	r2, r1
 800ea10:	601a      	str	r2, [r3, #0]
          Out0_Process();
 800ea12:	f7ff fdfd 	bl	800e610 <Out0_Process>
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800ea16:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800ea1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800ea26:	401c      	ands	r4, r3
 800ea28:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800ea2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea30:	881b      	ldrh	r3, [r3, #0]
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <CTR_LP+0x2b2>
 800ea3e:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800ea42:	f241 13a6 	movw	r3, #4518	; 0x11a6
 800ea46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea4a:	881b      	ldrh	r3, [r3, #0]
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <CTR_LP+0x2cc>
 800ea58:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 800ea5c:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800ea60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea64:	881b      	ldrh	r3, [r3, #0]
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	f003 0310 	and.w	r3, r3, #16
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d001      	beq.n	800ea76 <CTR_LP+0x2e6>
 800ea72:	f084 0410 	eor.w	r4, r4, #16
 800ea76:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800ea7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea7e:	881b      	ldrh	r3, [r3, #0]
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	f003 0320 	and.w	r3, r3, #32
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d001      	beq.n	800ea90 <CTR_LP+0x300>
 800ea8c:	f084 0420 	eor.w	r4, r4, #32
 800ea90:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800ea94:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ea98:	b2a1      	uxth	r1, r4
 800ea9a:	f248 0380 	movw	r3, #32896	; 0x8080
 800ea9e:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800eaa2:	430b      	orrs	r3, r1
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	6013      	str	r3, [r2, #0]
          return;
 800eaa8:	e081      	b.n	800ebae <CTR_LP+0x41e>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800eaaa:	f241 137c 	movw	r3, #4476	; 0x117c
 800eaae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eab8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eabc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	80fb      	strh	r3, [r7, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800eac6:	88fb      	ldrh	r3, [r7, #6]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	b21b      	sxth	r3, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	da2a      	bge.n	800eb28 <CTR_LP+0x398>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800ead2:	f241 137c 	movw	r3, #4476	; 0x117c
 800ead6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eae0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eae4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800eae8:	f241 127c 	movw	r2, #4476	; 0x117c
 800eaec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800eaf0:	7812      	ldrb	r2, [r2, #0]
 800eaf2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800eaf6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800eafa:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800eafe:	6812      	ldr	r2, [r2, #0]
 800eb00:	b292      	uxth	r2, r2
 800eb02:	4611      	mov	r1, r2
 800eb04:	f640 728f 	movw	r2, #3983	; 0xf8f
 800eb08:	400a      	ands	r2, r1
 800eb0a:	601a      	str	r2, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800eb0c:	f241 137c 	movw	r3, #4476	; 0x117c
 800eb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800eb1a:	f240 03b4 	movw	r3, #180	; 0xb4
 800eb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb26:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800eb28:	88fb      	ldrh	r3, [r7, #6]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d02a      	beq.n	800eb8a <CTR_LP+0x3fa>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800eb34:	f241 137c 	movw	r3, #4476	; 0x117c
 800eb38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eb42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eb46:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800eb4a:	f241 127c 	movw	r2, #4476	; 0x117c
 800eb4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800eb52:	7812      	ldrb	r2, [r2, #0]
 800eb54:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800eb58:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800eb5c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800eb60:	6812      	ldr	r2, [r2, #0]
 800eb62:	b292      	uxth	r2, r2
 800eb64:	4611      	mov	r1, r2
 800eb66:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800eb6a:	400a      	ands	r2, r1
 800eb6c:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800eb6e:	f241 137c 	movw	r3, #4476	; 0x117c
 800eb72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800eb7c:	f240 0398 	movw	r3, #152	; 0x98
 800eb80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb88:	4798      	blx	r3
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800eb8a:	f645 4344 	movw	r3, #23620	; 0x5c44
 800eb8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	461a      	mov	r2, r3
 800eb98:	f241 136c 	movw	r3, #4460	; 0x116c
 800eb9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eba0:	4611      	mov	r1, r2
 800eba2:	8019      	strh	r1, [r3, #0]
 800eba4:	b293      	uxth	r3, r2
 800eba6:	b21b      	sxth	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f6ff adf8 	blt.w	800e79e <CTR_LP+0xe>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800ebae:	f107 070c 	add.w	r7, r7, #12
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd90      	pop	{r4, r7, pc}
 800ebb6:	bf00      	nop

0800ebb8 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b089      	sub	sp, #36	; 0x24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	460a      	mov	r2, r1
 800ebc4:	807a      	strh	r2, [r7, #2]
 800ebc6:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800ebc8:	883b      	ldrh	r3, [r7, #0]
 800ebca:	f103 0301 	add.w	r3, r3, #1
 800ebce:	ea4f 0363 	mov.w	r3, r3, asr #1
 800ebd2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800ebd4:	887b      	ldrh	r3, [r7, #2]
 800ebd6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ebda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ebde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ebe2:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0; i--)
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	61fb      	str	r3, [r7, #28]
 800ebe8:	e022      	b.n	800ec30 <UserToPMABufferCopy+0x78>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	613b      	str	r3, [r7, #16]
    pbUsrBuf++;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f103 0301 	add.w	r3, r3, #1
 800ebf6:	607b      	str	r3, [r7, #4]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ec00:	461a      	mov	r2, r3
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	4313      	orrs	r3, r2
 800ec06:	60fb      	str	r3, [r7, #12]
    *pdwVal++ = temp2;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	801a      	strh	r2, [r3, #0]
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	f103 0302 	add.w	r3, r3, #2
 800ec16:	61bb      	str	r3, [r7, #24]
    pdwVal++;
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	f103 0302 	add.w	r3, r3, #2
 800ec1e:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f103 0301 	add.w	r3, r3, #1
 800ec26:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ec2e:	61fb      	str	r3, [r7, #28]
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1d9      	bne.n	800ebea <UserToPMABufferCopy+0x32>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800ec36:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bc80      	pop	{r7}
 800ec3e:	4770      	bx	lr

0800ec40 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b087      	sub	sp, #28
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	4613      	mov	r3, r2
 800ec4a:	460a      	mov	r2, r1
 800ec4c:	807a      	strh	r2, [r7, #2]
 800ec4e:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800ec50:	883b      	ldrh	r3, [r7, #0]
 800ec52:	f103 0301 	add.w	r3, r3, #1
 800ec56:	ea4f 0363 	mov.w	r3, r3, asr #1
 800ec5a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800ec5c:	887b      	ldrh	r3, [r7, #2]
 800ec5e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ec62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800ec66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec6a:	613b      	str	r3, [r7, #16]
  for (i = n; i != 0; i--)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	617b      	str	r3, [r7, #20]
 800ec70:	e014      	b.n	800ec9c <PMAToUserBufferCopy+0x5c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	801a      	strh	r2, [r3, #0]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f103 0301 	add.w	r3, r3, #1
 800ec82:	607b      	str	r3, [r7, #4]
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	f103 0304 	add.w	r3, r3, #4
 800ec8a:	613b      	str	r3, [r7, #16]
    pbUsrBuf++;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f103 0301 	add.w	r3, r3, #1
 800ec92:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ec9a:	617b      	str	r3, [r7, #20]
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1e7      	bne.n	800ec72 <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800eca2:	f107 071c 	add.w	r7, r7, #28
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bc80      	pop	{r7}
 800ecaa:	4770      	bx	lr

0800ecac <SetBTABLE>:
* Input          : wRegValue: New register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	80fb      	strh	r3, [r7, #6]
  _SetBTABLE(wRegValue);
 800ecb6:	f645 4350 	movw	r3, #23632	; 0x5c50
 800ecba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ecbe:	88f9      	ldrh	r1, [r7, #6]
 800ecc0:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 800ecc4:	400a      	ands	r2, r1
 800ecc6:	601a      	str	r2, [r3, #0]
}
 800ecc8:	f107 070c 	add.w	r7, r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bc80      	pop	{r7}
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop

0800ecd4 <SetEPType>:
*                  wType: type definition.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	71fa      	strb	r2, [r7, #7]
 800ece0:	80bb      	strh	r3, [r7, #4]
  _SetEPType(bEpNum, wType);
 800ece2:	79fb      	ldrb	r3, [r7, #7]
 800ece4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ece8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecec:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ecf0:	79fa      	ldrb	r2, [r7, #7]
 800ecf2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800ecf6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ecfa:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ecfe:	6812      	ldr	r2, [r2, #0]
 800ed00:	b292      	uxth	r2, r2
 800ed02:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800ed06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ed0a:	b291      	uxth	r1, r2
 800ed0c:	88ba      	ldrh	r2, [r7, #4]
 800ed0e:	430a      	orrs	r2, r1
 800ed10:	b292      	uxth	r2, r2
 800ed12:	b292      	uxth	r2, r2
 800ed14:	601a      	str	r2, [r3, #0]
}
 800ed16:	f107 070c 	add.w	r7, r7, #12
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bc80      	pop	{r7}
 800ed1e:	4770      	bx	lr

0800ed20 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 800ed20:	b490      	push	{r4, r7}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	4602      	mov	r2, r0
 800ed28:	460b      	mov	r3, r1
 800ed2a:	71fa      	strb	r2, [r7, #7]
 800ed2c:	80bb      	strh	r3, [r7, #4]
  _SetEPTxStatus(bEpNum, wState);
 800ed2e:	79fb      	ldrb	r3, [r7, #7]
 800ed30:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ed34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed38:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed48:	b29c      	uxth	r4, r3
 800ed4a:	88bb      	ldrh	r3, [r7, #4]
 800ed4c:	f003 0310 	and.w	r3, r3, #16
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d002      	beq.n	800ed5c <SetEPTxStatus+0x3c>
 800ed56:	f084 0310 	eor.w	r3, r4, #16
 800ed5a:	b29c      	uxth	r4, r3
 800ed5c:	88bb      	ldrh	r3, [r7, #4]
 800ed5e:	f003 0320 	and.w	r3, r3, #32
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d002      	beq.n	800ed6e <SetEPTxStatus+0x4e>
 800ed68:	f084 0320 	eor.w	r3, r4, #32
 800ed6c:	b29c      	uxth	r4, r3
 800ed6e:	79fb      	ldrb	r3, [r7, #7]
 800ed70:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ed74:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800ed78:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ed7c:	f248 0380 	movw	r3, #32896	; 0x8080
 800ed80:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800ed84:	4323      	orrs	r3, r4
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	6013      	str	r3, [r2, #0]
}
 800ed8a:	f107 0708 	add.w	r7, r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bc90      	pop	{r4, r7}
 800ed92:	4770      	bx	lr

0800ed94 <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 800ed94:	b490      	push	{r4, r7}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	71fa      	strb	r2, [r7, #7]
 800eda0:	80bb      	strh	r3, [r7, #4]
  _SetEPRxStatus(bEpNum, wState);
 800eda2:	79fb      	ldrb	r3, [r7, #7]
 800eda4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eda8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800edac:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800edb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edbc:	b29c      	uxth	r4, r3
 800edbe:	88bb      	ldrh	r3, [r7, #4]
 800edc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d002      	beq.n	800edd0 <SetEPRxStatus+0x3c>
 800edca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800edce:	b29c      	uxth	r4, r3
 800edd0:	88bb      	ldrh	r3, [r7, #4]
 800edd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d002      	beq.n	800ede2 <SetEPRxStatus+0x4e>
 800eddc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800ede0:	b29c      	uxth	r4, r3
 800ede2:	79fb      	ldrb	r3, [r7, #7]
 800ede4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ede8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800edec:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800edf0:	f248 0380 	movw	r3, #32896	; 0x8080
 800edf4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800edf8:	4323      	orrs	r3, r4
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	6013      	str	r3, [r2, #0]
}
 800edfe:	f107 0708 	add.w	r7, r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bc90      	pop	{r4, r7}
 800ee06:	4770      	bx	lr

0800ee08 <SetEPTxValid>:
* Input          : bEpNum: Endpoint Number.  
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
 800ee08:	b490      	push	{r4, r7}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4603      	mov	r3, r0
 800ee10:	71fb      	strb	r3, [r7, #7]
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ee18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee1c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee2c:	b29c      	uxth	r4, r3
 800ee2e:	f084 0310 	eor.w	r3, r4, #16
 800ee32:	b29c      	uxth	r4, r3
 800ee34:	f084 0320 	eor.w	r3, r4, #32
 800ee38:	b29c      	uxth	r4, r3
 800ee3a:	79fb      	ldrb	r3, [r7, #7]
 800ee3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ee40:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800ee44:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ee48:	f248 0380 	movw	r3, #32896	; 0x8080
 800ee4c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800ee50:	4323      	orrs	r3, r4
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	6013      	str	r3, [r2, #0]
}
 800ee56:	f107 0708 	add.w	r7, r7, #8
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bc90      	pop	{r4, r7}
 800ee5e:	4770      	bx	lr

0800ee60 <SetEPRxValid>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
 800ee60:	b490      	push	{r4, r7}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4603      	mov	r3, r0
 800ee68:	71fb      	strb	r3, [r7, #7]
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ee70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ee74:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ee80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee84:	b29c      	uxth	r4, r3
 800ee86:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ee8a:	b29c      	uxth	r4, r3
 800ee8c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800ee90:	b29c      	uxth	r4, r3
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ee98:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800ee9c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800eea0:	f248 0380 	movw	r3, #32896	; 0x8080
 800eea4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800eea8:	4323      	orrs	r3, r4
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	6013      	str	r3, [r2, #0]
}
 800eeae:	f107 0708 	add.w	r7, r7, #8
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bc90      	pop	{r4, r7}
 800eeb6:	4770      	bx	lr

0800eeb8 <Clear_Status_Out>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	71fb      	strb	r3, [r7, #7]
  _ClearEP_KIND(bEpNum);
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eec8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800eecc:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eed6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eeda:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800eee6:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800eeea:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	6013      	str	r3, [r2, #0]
}
 800ef06:	f107 070c 	add.w	r7, r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bc80      	pop	{r7}
 800ef0e:	4770      	bx	lr

0800ef10 <ClearDTOG_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	4603      	mov	r3, r0
 800ef18:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_RX(bEpNum);
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ef20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef24:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d018      	beq.n	800ef66 <ClearDTOG_RX+0x56>
 800ef34:	79fb      	ldrb	r3, [r7, #7]
 800ef36:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ef3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef3e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ef42:	79fa      	ldrb	r2, [r7, #7]
 800ef44:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800ef48:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ef4c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ef50:	6812      	ldr	r2, [r2, #0]
 800ef52:	b292      	uxth	r2, r2
 800ef54:	4611      	mov	r1, r2
 800ef56:	f640 720f 	movw	r2, #3855	; 0xf0f
 800ef5a:	400a      	ands	r2, r1
 800ef5c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800ef60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ef64:	601a      	str	r2, [r3, #0]
}
 800ef66:	f107 070c 	add.w	r7, r7, #12
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bc80      	pop	{r7}
 800ef6e:	4770      	bx	lr

0800ef70 <ClearDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	4603      	mov	r3, r0
 800ef78:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_TX(bEpNum);
 800ef7a:	79fb      	ldrb	r3, [r7, #7]
 800ef7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ef80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef84:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d018      	beq.n	800efc6 <ClearDTOG_TX+0x56>
 800ef94:	79fb      	ldrb	r3, [r7, #7]
 800ef96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ef9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef9e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800efa2:	79fa      	ldrb	r2, [r7, #7]
 800efa4:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800efa8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800efac:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800efb0:	6812      	ldr	r2, [r2, #0]
 800efb2:	b292      	uxth	r2, r2
 800efb4:	4611      	mov	r1, r2
 800efb6:	f640 720f 	movw	r2, #3855	; 0xf0f
 800efba:	400a      	ands	r2, r1
 800efbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800efc0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800efc4:	601a      	str	r2, [r3, #0]
}
 800efc6:	f107 070c 	add.w	r7, r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	bc80      	pop	{r7}
 800efce:	4770      	bx	lr

0800efd0 <SetEPTxAddr>:
*                  wAddr: new address. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4602      	mov	r2, r0
 800efd8:	460b      	mov	r3, r1
 800efda:	71fa      	strb	r2, [r7, #7]
 800efdc:	80bb      	strh	r3, [r7, #4]
  _SetEPTxAddr(bEpNum, wAddr);
 800efde:	f645 4350 	movw	r3, #23632	; 0x5c50
 800efe2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	b29b      	uxth	r3, r3
 800efea:	461a      	mov	r2, r3
 800efec:	79fb      	ldrb	r3, [r7, #7]
 800efee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800eff2:	18d3      	adds	r3, r2, r3
 800eff4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800eff8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800effc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f000:	88ba      	ldrh	r2, [r7, #4]
 800f002:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f006:	b292      	uxth	r2, r2
 800f008:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f00c:	601a      	str	r2, [r3, #0]
}
 800f00e:	f107 070c 	add.w	r7, r7, #12
 800f012:	46bd      	mov	sp, r7
 800f014:	bc80      	pop	{r7}
 800f016:	4770      	bx	lr

0800f018 <SetEPRxAddr>:
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	4602      	mov	r2, r0
 800f020:	460b      	mov	r3, r1
 800f022:	71fa      	strb	r2, [r7, #7]
 800f024:	80bb      	strh	r3, [r7, #4]
  _SetEPRxAddr(bEpNum, wAddr);
 800f026:	f645 4350 	movw	r3, #23632	; 0x5c50
 800f02a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	b29b      	uxth	r3, r3
 800f032:	461a      	mov	r2, r3
 800f034:	79fb      	ldrb	r3, [r7, #7]
 800f036:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f03a:	18d2      	adds	r2, r2, r3
 800f03c:	f243 0304 	movw	r3, #12292	; 0x3004
 800f040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f044:	18d3      	adds	r3, r2, r3
 800f046:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f04a:	88ba      	ldrh	r2, [r7, #4]
 800f04c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f050:	b292      	uxth	r2, r2
 800f052:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f056:	601a      	str	r2, [r3, #0]
}
 800f058:	f107 070c 	add.w	r7, r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bc80      	pop	{r7}
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop

0800f064 <GetEPTxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	4603      	mov	r3, r0
 800f06c:	71fb      	strb	r3, [r7, #7]
  return(_GetEPTxAddr(bEpNum));
 800f06e:	f645 4350 	movw	r3, #23632	; 0x5c50
 800f072:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	461a      	mov	r2, r3
 800f07c:	79fb      	ldrb	r3, [r7, #7]
 800f07e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f082:	18d3      	adds	r3, r2, r3
 800f084:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f088:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800f08c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	b29b      	uxth	r3, r3
}
 800f094:	4618      	mov	r0, r3
 800f096:	f107 070c 	add.w	r7, r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bc80      	pop	{r7}
 800f09e:	4770      	bx	lr

0800f0a0 <GetEPRxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxAddr(bEpNum));
 800f0aa:	f645 4350 	movw	r3, #23632	; 0x5c50
 800f0ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	79fb      	ldrb	r3, [r7, #7]
 800f0ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f0be:	18d2      	adds	r2, r2, r3
 800f0c0:	f243 0304 	movw	r3, #12292	; 0x3004
 800f0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0c8:	18d3      	adds	r3, r2, r3
 800f0ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	b29b      	uxth	r3, r3
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f107 070c 	add.w	r7, r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bc80      	pop	{r7}
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop

0800f0e0 <SetEPTxCount>:
*                  wCount: new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	71fa      	strb	r2, [r7, #7]
 800f0ec:	80bb      	strh	r3, [r7, #4]
  _SetEPTxCount(bEpNum, wCount);
 800f0ee:	f645 4350 	movw	r3, #23632	; 0x5c50
 800f0f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	79fb      	ldrb	r3, [r7, #7]
 800f0fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f102:	18d2      	adds	r2, r2, r3
 800f104:	f243 0302 	movw	r3, #12290	; 0x3002
 800f108:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f10c:	18d3      	adds	r3, r2, r3
 800f10e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f112:	88ba      	ldrh	r2, [r7, #4]
 800f114:	601a      	str	r2, [r3, #0]
}
 800f116:	f107 070c 	add.w	r7, r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bc80      	pop	{r7}
 800f11e:	4770      	bx	lr

0800f120 <SetEPRxCount>:
*                  wCount: the new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
 800f120:	b480      	push	{r7}
 800f122:	b085      	sub	sp, #20
 800f124:	af00      	add	r7, sp, #0
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	71fa      	strb	r2, [r7, #7]
 800f12c:	80bb      	strh	r3, [r7, #4]
  _SetEPRxCount(bEpNum, wCount);
 800f12e:	f645 4350 	movw	r3, #23632	; 0x5c50
 800f132:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	b29b      	uxth	r3, r3
 800f13a:	461a      	mov	r2, r3
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f142:	18d2      	adds	r2, r2, r3
 800f144:	f243 0306 	movw	r3, #12294	; 0x3006
 800f148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f14c:	18d3      	adds	r3, r2, r3
 800f14e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f152:	60bb      	str	r3, [r7, #8]
 800f154:	88bb      	ldrh	r3, [r7, #4]
 800f156:	2b3e      	cmp	r3, #62	; 0x3e
 800f158:	d915      	bls.n	800f186 <SetEPRxCount+0x66>
 800f15a:	88bb      	ldrh	r3, [r7, #4]
 800f15c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800f160:	81fb      	strh	r3, [r7, #14]
 800f162:	88bb      	ldrh	r3, [r7, #4]
 800f164:	f003 031f 	and.w	r3, r3, #31
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d103      	bne.n	800f174 <SetEPRxCount+0x54>
 800f16c:	89fb      	ldrh	r3, [r7, #14]
 800f16e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f172:	81fb      	strh	r3, [r7, #14]
 800f174:	89fb      	ldrh	r3, [r7, #14]
 800f176:	ea4f 2383 	mov.w	r3, r3, lsl #10
 800f17a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f17e:	461a      	mov	r2, r3
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	e012      	b.n	800f1ac <SetEPRxCount+0x8c>
 800f186:	88bb      	ldrh	r3, [r7, #4]
 800f188:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800f18c:	81fb      	strh	r3, [r7, #14]
 800f18e:	88bb      	ldrh	r3, [r7, #4]
 800f190:	f003 0301 	and.w	r3, r3, #1
 800f194:	2b00      	cmp	r3, #0
 800f196:	d003      	beq.n	800f1a0 <SetEPRxCount+0x80>
 800f198:	89fb      	ldrh	r3, [r7, #14]
 800f19a:	f103 0301 	add.w	r3, r3, #1
 800f19e:	81fb      	strh	r3, [r7, #14]
 800f1a0:	89fb      	ldrh	r3, [r7, #14]
 800f1a2:	ea4f 2383 	mov.w	r3, r3, lsl #10
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	601a      	str	r2, [r3, #0]
}
 800f1ac:	f107 0714 	add.w	r7, r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bc80      	pop	{r7}
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop

0800f1b8 <GetEPRxCount>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	4603      	mov	r3, r0
 800f1c0:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxCount(bEpNum));
 800f1c2:	f645 4350 	movw	r3, #23632	; 0x5c50
 800f1c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f1d6:	18d2      	adds	r2, r2, r3
 800f1d8:	f243 0306 	movw	r3, #12294	; 0x3006
 800f1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1e0:	18d3      	adds	r3, r2, r3
 800f1e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	ea4f 5383 	mov.w	r3, r3, lsl #22
 800f1ee:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800f1f2:	b29b      	uxth	r3, r3
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f107 070c 	add.w	r7, r7, #12
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bc80      	pop	{r7}
 800f1fe:	4770      	bx	lr

0800f200 <ByteSwap>:
* Input          : wSwW: word to Swap.
* Output         : None.
* Return         : resulted word.
*******************************************************************************/
uint16_t ByteSwap(uint16_t wSwW)
{
 800f200:	b480      	push	{r7}
 800f202:	b085      	sub	sp, #20
 800f204:	af00      	add	r7, sp, #0
 800f206:	4603      	mov	r3, r0
 800f208:	80fb      	strh	r3, [r7, #6]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
 800f20a:	88fb      	ldrh	r3, [r7, #6]
 800f20c:	73fb      	strb	r3, [r7, #15]
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800f20e:	88fb      	ldrh	r3, [r7, #6]
 800f210:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f214:	b29b      	uxth	r3, r3
 800f216:	b29a      	uxth	r2, r3
 800f218:	7bfb      	ldrb	r3, [r7, #15]
 800f21a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f21e:	b29b      	uxth	r3, r3
 800f220:	4313      	orrs	r3, r2
 800f222:	b29b      	uxth	r3, r3
 800f224:	81bb      	strh	r3, [r7, #12]
  return(wRet);
 800f226:	89bb      	ldrh	r3, [r7, #12]
}
 800f228:	4618      	mov	r0, r3
 800f22a:	f107 0714 	add.w	r7, r7, #20
 800f22e:	46bd      	mov	sp, r7
 800f230:	bc80      	pop	{r7}
 800f232:	4770      	bx	lr

0800f234 <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 800f234:	b480      	push	{r7}
 800f236:	af00      	add	r7, sp, #0
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800f238:	f645 4344 	movw	r3, #23620	; 0x5c44
 800f23c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f240:	f04f 0200 	mov.w	r2, #0
 800f244:	601a      	str	r2, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 800f246:	f241 13a4 	movw	r3, #4516	; 0x11a4
 800f24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f24e:	f44f 4206 	mov.w	r2, #34304	; 0x8600
 800f252:	801a      	strh	r2, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800f254:	f645 4340 	movw	r3, #23616	; 0x5c40
 800f258:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f25c:	f241 12a4 	movw	r2, #4516	; 0x11a4
 800f260:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800f264:	8812      	ldrh	r2, [r2, #0]
 800f266:	601a      	str	r2, [r3, #0]
  return 0;
 800f268:	f04f 0300 	mov.w	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	46bd      	mov	sp, r7
 800f270:	bc80      	pop	{r7}
 800f272:	4770      	bx	lr

0800f274 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800f27c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800f280:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 800f28a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f28e:	60da      	str	r2, [r3, #12]
}
 800f290:	f107 070c 	add.w	r7, r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	bc80      	pop	{r7}
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop

0800f29c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b087      	sub	sp, #28
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800f2a4:	f04f 0300 	mov.w	r3, #0
 800f2a8:	617b      	str	r3, [r7, #20]
 800f2aa:	f04f 0300 	mov.w	r3, #0
 800f2ae:	613b      	str	r3, [r7, #16]
 800f2b0:	f04f 030f 	mov.w	r3, #15
 800f2b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	78db      	ldrb	r3, [r3, #3]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d047      	beq.n	800f34e <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800f2be:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800f2c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	ea6f 0303 	mvn.w	r3, r3
 800f2cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f2d0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f2d4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	f1c3 0304 	rsb	r3, r3, #4
 800f2dc:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	68fa      	ldr	r2, [r7, #12]
 800f2e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2e6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	785b      	ldrb	r3, [r3, #1]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	789b      	ldrb	r3, [r3, #2]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4013      	ands	r3, r2
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	4313      	orrs	r3, r2
 800f304:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f30c:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800f30e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800f312:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	7812      	ldrb	r2, [r2, #0]
 800f31a:	4611      	mov	r1, r2
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	b2d2      	uxtb	r2, r2
 800f320:	185b      	adds	r3, r3, r1
 800f322:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800f326:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800f32a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	7812      	ldrb	r2, [r2, #0]
 800f332:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800f336:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800f338:	6879      	ldr	r1, [r7, #4]
 800f33a:	7809      	ldrb	r1, [r1, #0]
 800f33c:	f001 011f 	and.w	r1, r1, #31
 800f340:	f04f 0001 	mov.w	r0, #1
 800f344:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800f348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f34c:	e014      	b.n	800f378 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800f34e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800f352:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	7812      	ldrb	r2, [r2, #0]
 800f35a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800f35e:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	7809      	ldrb	r1, [r1, #0]
 800f364:	f001 011f 	and.w	r1, r1, #31
 800f368:	f04f 0001 	mov.w	r0, #1
 800f36c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800f370:	f102 0220 	add.w	r2, r2, #32
 800f374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800f378:	f107 071c 	add.w	r7, r7, #28
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bc80      	pop	{r7}
 800f380:	4770      	bx	lr
 800f382:	bf00      	nop

0800f384 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800f38e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800f392:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800f396:	683a      	ldr	r2, [r7, #0]
 800f398:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800f39c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	430a      	orrs	r2, r1
 800f3a4:	609a      	str	r2, [r3, #8]
}
 800f3a6:	f107 070c 	add.w	r7, r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bc80      	pop	{r7}
 800f3ae:	4770      	bx	lr

0800f3b0 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f3c0:	4013      	ands	r3, r2
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f04f 0200 	mov.w	r2, #0
 800f3cc:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f04f 0200 	mov.w	r2, #0
 800f3d4:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f04f 0200 	mov.w	r2, #0
 800f3dc:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f04f 0200 	mov.w	r2, #0
 800f3e4:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	f04f 0308 	mov.w	r3, #8
 800f3ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d10c      	bne.n	800f40e <DMA_DeInit+0x5e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 800f3f4:	f04f 0300 	mov.w	r3, #0
 800f3f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f3fc:	f04f 0200 	mov.w	r2, #0
 800f400:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f404:	6852      	ldr	r2, [r2, #4]
 800f406:	f042 020f 	orr.w	r2, r2, #15
 800f40a:	605a      	str	r2, [r3, #4]
 800f40c:	e0da      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	f04f 031c 	mov.w	r3, #28
 800f414:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f418:	429a      	cmp	r2, r3
 800f41a:	d10c      	bne.n	800f436 <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 800f41c:	f04f 0300 	mov.w	r3, #0
 800f420:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f424:	f04f 0200 	mov.w	r2, #0
 800f428:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f42c:	6852      	ldr	r2, [r2, #4]
 800f42e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800f432:	605a      	str	r2, [r3, #4]
 800f434:	e0c6      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	f04f 0330 	mov.w	r3, #48	; 0x30
 800f43c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f440:	429a      	cmp	r2, r3
 800f442:	d10c      	bne.n	800f45e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 800f444:	f04f 0300 	mov.w	r3, #0
 800f448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f44c:	f04f 0200 	mov.w	r2, #0
 800f450:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f454:	6852      	ldr	r2, [r2, #4]
 800f456:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 800f45a:	605a      	str	r2, [r3, #4]
 800f45c:	e0b2      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	f04f 0344 	mov.w	r3, #68	; 0x44
 800f464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f468:	429a      	cmp	r2, r3
 800f46a:	d10c      	bne.n	800f486 <DMA_DeInit+0xd6>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 800f46c:	f04f 0300 	mov.w	r3, #0
 800f470:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f474:	f04f 0200 	mov.w	r2, #0
 800f478:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f47c:	6852      	ldr	r2, [r2, #4]
 800f47e:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 800f482:	605a      	str	r2, [r3, #4]
 800f484:	e09e      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	f04f 0358 	mov.w	r3, #88	; 0x58
 800f48c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f490:	429a      	cmp	r2, r3
 800f492:	d10c      	bne.n	800f4ae <DMA_DeInit+0xfe>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 800f494:	f04f 0300 	mov.w	r3, #0
 800f498:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f49c:	f04f 0200 	mov.w	r2, #0
 800f4a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f4a4:	6852      	ldr	r2, [r2, #4]
 800f4a6:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 800f4aa:	605a      	str	r2, [r3, #4]
 800f4ac:	e08a      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	f04f 036c 	mov.w	r3, #108	; 0x6c
 800f4b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d10c      	bne.n	800f4d6 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 800f4bc:	f04f 0300 	mov.w	r3, #0
 800f4c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f4c4:	f04f 0200 	mov.w	r2, #0
 800f4c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f4cc:	6852      	ldr	r2, [r2, #4]
 800f4ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800f4d2:	605a      	str	r2, [r3, #4]
 800f4d4:	e076      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	f04f 0380 	mov.w	r3, #128	; 0x80
 800f4dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d10c      	bne.n	800f4fe <DMA_DeInit+0x14e>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 800f4e4:	f04f 0300 	mov.w	r3, #0
 800f4e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f4ec:	f04f 0200 	mov.w	r2, #0
 800f4f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f4f4:	6852      	ldr	r2, [r2, #4]
 800f4f6:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 800f4fa:	605a      	str	r2, [r3, #4]
 800f4fc:	e062      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800f504:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f508:	429a      	cmp	r2, r3
 800f50a:	d10c      	bne.n	800f526 <DMA_DeInit+0x176>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 800f50c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f510:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f518:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f51c:	6852      	ldr	r2, [r2, #4]
 800f51e:	f042 020f 	orr.w	r2, r2, #15
 800f522:	605a      	str	r2, [r3, #4]
 800f524:	e04e      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	f240 431c 	movw	r3, #1052	; 0x41c
 800f52c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f530:	429a      	cmp	r2, r3
 800f532:	d10c      	bne.n	800f54e <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 800f534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f538:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f53c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f540:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f544:	6852      	ldr	r2, [r2, #4]
 800f546:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800f54a:	605a      	str	r2, [r3, #4]
 800f54c:	e03a      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800f554:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f558:	429a      	cmp	r2, r3
 800f55a:	d10c      	bne.n	800f576 <DMA_DeInit+0x1c6>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 800f55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f560:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f568:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f56c:	6852      	ldr	r2, [r2, #4]
 800f56e:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 800f572:	605a      	str	r2, [r3, #4]
 800f574:	e026      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	f240 4344 	movw	r3, #1092	; 0x444
 800f57c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f580:	429a      	cmp	r2, r3
 800f582:	d10c      	bne.n	800f59e <DMA_DeInit+0x1ee>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 800f584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f588:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f58c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f590:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f594:	6852      	ldr	r2, [r2, #4]
 800f596:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 800f59a:	605a      	str	r2, [r3, #4]
 800f59c:	e012      	b.n	800f5c4 <DMA_DeInit+0x214>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	f44f 638b 	mov.w	r3, #1112	; 0x458
 800f5a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d10b      	bne.n	800f5c4 <DMA_DeInit+0x214>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 800f5ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f5b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f5bc:	6852      	ldr	r2, [r2, #4]
 800f5be:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 800f5c2:	605a      	str	r2, [r3, #4]
    }
  }
}
 800f5c4:	f107 070c 	add.w	r7, r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bc80      	pop	{r7}
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop

0800f5d0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f5da:	f04f 0300 	mov.w	r3, #0
 800f5de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800f5ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5f0:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	689a      	ldr	r2, [r3, #8]
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800f600:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	695b      	ldr	r3, [r3, #20]
 800f606:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800f60c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	69db      	ldr	r3, [r3, #28]
 800f612:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800f618:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f61e:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	4313      	orrs	r3, r2
 800f624:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	68da      	ldr	r2, [r3, #12]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	685a      	ldr	r2, [r3, #4]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	60da      	str	r2, [r3, #12]
}
 800f644:	f107 0714 	add.w	r7, r7, #20
 800f648:	46bd      	mov	sp, r7
 800f64a:	bc80      	pop	{r7}
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop

0800f650 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	460b      	mov	r3, r1
 800f65a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f65c:	78fb      	ldrb	r3, [r7, #3]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d006      	beq.n	800f670 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f043 0201 	orr.w	r2, r3, #1
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	e006      	b.n	800f67e <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f678:	4013      	ands	r3, r2
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	6013      	str	r3, [r2, #0]
  }
}
 800f67e:	f107 070c 	add.w	r7, r7, #12
 800f682:	46bd      	mov	sp, r7
 800f684:	bc80      	pop	{r7}
 800f686:	4770      	bx	lr

0800f688 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	4613      	mov	r3, r2
 800f694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f696:	79fb      	ldrb	r3, [r7, #7]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d006      	beq.n	800f6aa <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	431a      	orrs	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	601a      	str	r2, [r3, #0]
 800f6a8:	e007      	b.n	800f6ba <DMA_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	ea6f 0303 	mvn.w	r3, r3
 800f6b4:	401a      	ands	r2, r3
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	601a      	str	r2, [r3, #0]
  }
}
 800f6ba:	f107 0714 	add.w	r7, r7, #20
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bc80      	pop	{r7}
 800f6c2:	4770      	bx	lr

0800f6c4 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	b29b      	uxth	r3, r3
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f107 070c 	add.w	r7, r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bc80      	pop	{r7}
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop

0800f6e0 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f6e8:	f04f 0300 	mov.w	r3, #0
 800f6ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800f6ee:	f04f 0300 	mov.w	r3, #0
 800f6f2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d006      	beq.n	800f70c <DMA_GetFlagStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 800f6fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f702:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	60bb      	str	r3, [r7, #8]
 800f70a:	e005      	b.n	800f718 <DMA_GetFlagStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800f70c:	f04f 0300 	mov.w	r3, #0
 800f710:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4013      	ands	r3, r2
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d003      	beq.n	800f72a <DMA_GetFlagStatus+0x4a>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800f722:	f04f 0301 	mov.w	r3, #1
 800f726:	73fb      	strb	r3, [r7, #15]
 800f728:	e002      	b.n	800f730 <DMA_GetFlagStatus+0x50>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 800f72a:	f04f 0300 	mov.w	r3, #0
 800f72e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 800f730:	7bfb      	ldrb	r3, [r7, #15]
}
 800f732:	4618      	mov	r0, r3
 800f734:	f107 0714 	add.w	r7, r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	bc80      	pop	{r7}
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop

0800f740 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d006      	beq.n	800f760 <DMA_ClearFlag+0x20>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 800f752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f756:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	605a      	str	r2, [r3, #4]
 800f75e:	e005      	b.n	800f76c <DMA_ClearFlag+0x2c>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 800f760:	f04f 0300 	mov.w	r3, #0
 800f764:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	605a      	str	r2, [r3, #4]
  }
}
 800f76c:	f107 070c 	add.w	r7, r7, #12
 800f770:	46bd      	mov	sp, r7
 800f772:	bc80      	pop	{r7}
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop

0800f778 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800f778:	b480      	push	{r7}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800f780:	f04f 0300 	mov.w	r3, #0
 800f784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800f786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f78a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f78e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	799b      	ldrb	r3, [r3, #6]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d078      	beq.n	800f88a <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800f798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f79c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f7a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f7a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f7a8:	6811      	ldr	r1, [r2, #0]
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	6812      	ldr	r2, [r2, #0]
 800f7ae:	ea6f 0202 	mvn.w	r2, r2
 800f7b2:	400a      	ands	r2, r1
 800f7b4:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800f7b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f7be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f7c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f7c6:	6851      	ldr	r1, [r2, #4]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	6812      	ldr	r2, [r2, #0]
 800f7cc:	ea6f 0202 	mvn.w	r2, r2
 800f7d0:	400a      	ands	r2, r1
 800f7d2:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	791b      	ldrb	r3, [r3, #4]
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	18d3      	adds	r3, r2, r3
 800f7dc:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	6811      	ldr	r1, [r2, #0]
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	6812      	ldr	r2, [r2, #0]
 800f7e8:	430a      	orrs	r2, r1
 800f7ea:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800f7ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f7f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f7f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f7fc:	6891      	ldr	r1, [r2, #8]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	6812      	ldr	r2, [r2, #0]
 800f802:	ea6f 0202 	mvn.w	r2, r2
 800f806:	400a      	ands	r2, r1
 800f808:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800f80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f80e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f816:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f81a:	68d1      	ldr	r1, [r2, #12]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	6812      	ldr	r2, [r2, #0]
 800f820:	ea6f 0202 	mvn.w	r2, r2
 800f824:	400a      	ands	r2, r1
 800f826:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	795b      	ldrb	r3, [r3, #5]
 800f82c:	2b10      	cmp	r3, #16
 800f82e:	d11a      	bne.n	800f866 <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800f830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f834:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f83c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f840:	6891      	ldr	r1, [r2, #8]
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	6812      	ldr	r2, [r2, #0]
 800f846:	430a      	orrs	r2, r1
 800f848:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800f84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f84e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f856:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f85a:	68d1      	ldr	r1, [r2, #12]
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	6812      	ldr	r2, [r2, #0]
 800f860:	430a      	orrs	r2, r1
 800f862:	60da      	str	r2, [r3, #12]
 800f864:	e01f      	b.n	800f8a6 <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800f866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f86a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f86e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	795b      	ldrb	r3, [r3, #5]
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	18d3      	adds	r3, r2, r3
 800f878:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	6811      	ldr	r1, [r2, #0]
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	6812      	ldr	r2, [r2, #0]
 800f884:	430a      	orrs	r2, r1
 800f886:	601a      	str	r2, [r3, #0]
 800f888:	e00d      	b.n	800f8a6 <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	791b      	ldrb	r3, [r3, #4]
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	18d3      	adds	r3, r2, r3
 800f892:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	6811      	ldr	r1, [r2, #0]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	6812      	ldr	r2, [r2, #0]
 800f89e:	ea6f 0202 	mvn.w	r2, r2
 800f8a2:	400a      	ands	r2, r1
 800f8a4:	601a      	str	r2, [r3, #0]
  }
}
 800f8a6:	f107 0714 	add.w	r7, r7, #20
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bc80      	pop	{r7}
 800f8ae:	4770      	bx	lr

0800f8b0 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800f8b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	615a      	str	r2, [r3, #20]
}
 800f8c4:	f107 070c 	add.w	r7, r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bc80      	pop	{r7}
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop

0800f8d0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b085      	sub	sp, #20
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800f8d8:	f04f 0300 	mov.w	r3, #0
 800f8dc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800f8de:	f04f 0300 	mov.w	r3, #0
 800f8e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800f8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4013      	ands	r3, r2
 800f8f2:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800f8f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f8fc:	695a      	ldr	r2, [r3, #20]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4013      	ands	r3, r2
 800f902:	2b00      	cmp	r3, #0
 800f904:	d006      	beq.n	800f914 <EXTI_GetITStatus+0x44>
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d003      	beq.n	800f914 <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
 800f90c:	f04f 0301 	mov.w	r3, #1
 800f910:	73fb      	strb	r3, [r7, #15]
 800f912:	e002      	b.n	800f91a <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 800f914:	f04f 0300 	mov.w	r3, #0
 800f918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	f107 0714 	add.w	r7, r7, #20
 800f922:	46bd      	mov	sp, r7
 800f924:	bc80      	pop	{r7}
 800f926:	4770      	bx	lr

0800f928 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800f928:	b480      	push	{r7}
 800f92a:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 800f92c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f930:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f934:	f240 1223 	movw	r2, #291	; 0x123
 800f938:	f2c4 5267 	movt	r2, #17767	; 0x4567
 800f93c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800f93e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f942:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f946:	f648 12ab 	movw	r2, #35243	; 0x89ab
 800f94a:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 800f94e:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 800f950:	46bd      	mov	sp, r7
 800f952:	bc80      	pop	{r7}
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop

0800f958 <FLASH_Lock>:
  *           to FLASH_LockBank1 function.
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800f958:	b480      	push	{r7}
 800f95a:	af00      	add	r7, sp, #0
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 800f95c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f960:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f968:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f96c:	6912      	ldr	r2, [r2, #16]
 800f96e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f972:	611a      	str	r2, [r3, #16]

#ifdef STM32F10X_XL
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
  FLASH->CR2 |= CR_LOCK_Set;
#endif /* STM32F10X_XL */
}
 800f974:	46bd      	mov	sp, r7
 800f976:	bc80      	pop	{r7}
 800f978:	4770      	bx	lr
 800f97a:	bf00      	nop

0800f97c <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 800f984:	f04f 0304 	mov.w	r3, #4
 800f988:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800f98a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800f98e:	f000 f8bf 	bl	800fb10 <FLASH_WaitForLastOperation>
 800f992:	4603      	mov	r3, r0
 800f994:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800f996:	7bfb      	ldrb	r3, [r7, #15]
 800f998:	2b04      	cmp	r3, #4
 800f99a:	d130      	bne.n	800f9fe <FLASH_ErasePage+0x82>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800f99c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f9a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f9a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f9ac:	6912      	ldr	r2, [r2, #16]
 800f9ae:	f042 0202 	orr.w	r2, r2, #2
 800f9b2:	611a      	str	r2, [r3, #16]
    FLASH->AR = Page_Address; 
 800f9b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	615a      	str	r2, [r3, #20]
    FLASH->CR|= CR_STRT_Set;
 800f9c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f9c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f9cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f9d0:	6912      	ldr	r2, [r2, #16]
 800f9d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f9d6:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800f9d8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 800f9dc:	f000 f898 	bl	800fb10 <FLASH_WaitForLastOperation>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 800f9e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f9ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f9f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f9f4:	6911      	ldr	r1, [r2, #16]
 800f9f6:	f641 72fd 	movw	r2, #8189	; 0x1ffd
 800f9fa:	400a      	ands	r2, r1
 800f9fc:	611a      	str	r2, [r3, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 800f9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	f107 0710 	add.w	r7, r7, #16
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop

0800fa0c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	460b      	mov	r3, r1
 800fa16:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 800fa18:	f04f 0304 	mov.w	r3, #4
 800fa1c:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800fa1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800fa22:	f000 f875 	bl	800fb10 <FLASH_WaitForLastOperation>
 800fa26:	4603      	mov	r3, r0
 800fa28:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800fa2a:	7bfb      	ldrb	r3, [r7, #15]
 800fa2c:	2b04      	cmp	r3, #4
 800fa2e:	d121      	bne.n	800fa74 <FLASH_ProgramHalfWord+0x68>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 800fa30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fa38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fa3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800fa40:	6912      	ldr	r2, [r2, #16]
 800fa42:	f042 0201 	orr.w	r2, r2, #1
 800fa46:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	887a      	ldrh	r2, [r7, #2]
 800fa4c:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800fa4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800fa52:	f000 f85d 	bl	800fb10 <FLASH_WaitForLastOperation>
 800fa56:	4603      	mov	r3, r0
 800fa58:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 800fa5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fa62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fa66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800fa6a:	6911      	ldr	r1, [r2, #16]
 800fa6c:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800fa70:	400a      	ands	r2, r1
 800fa72:	611a      	str	r2, [r3, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	f107 0710 	add.w	r7, r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
  *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800fa88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	60da      	str	r2, [r3, #12]
#endif /* STM32F10X_XL */
}
 800fa94:	f107 070c 	add.w	r7, r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bc80      	pop	{r7}
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop

0800faa0 <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800faa6:	f04f 0304 	mov.w	r3, #4
 800faaa:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800faac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fab0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	f003 0301 	and.w	r3, r3, #1
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d003      	beq.n	800fac6 <FLASH_GetBank1Status+0x26>
  {
    flashstatus = FLASH_BUSY;
 800fabe:	f04f 0301 	mov.w	r3, #1
 800fac2:	71fb      	strb	r3, [r7, #7]
 800fac4:	e01c      	b.n	800fb00 <FLASH_GetBank1Status+0x60>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800fac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800faca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	f003 0304 	and.w	r3, r3, #4
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d003      	beq.n	800fae0 <FLASH_GetBank1Status+0x40>
    { 
      flashstatus = FLASH_ERROR_PG;
 800fad8:	f04f 0302 	mov.w	r3, #2
 800fadc:	71fb      	strb	r3, [r7, #7]
 800fade:	e00f      	b.n	800fb00 <FLASH_GetBank1Status+0x60>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 800fae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fae4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fae8:	68db      	ldr	r3, [r3, #12]
 800faea:	f003 0310 	and.w	r3, r3, #16
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d003      	beq.n	800fafa <FLASH_GetBank1Status+0x5a>
      {
        flashstatus = FLASH_ERROR_WRP;
 800faf2:	f04f 0303 	mov.w	r3, #3
 800faf6:	71fb      	strb	r3, [r7, #7]
 800faf8:	e002      	b.n	800fb00 <FLASH_GetBank1Status+0x60>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 800fafa:	f04f 0304 	mov.w	r3, #4
 800fafe:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 800fb00:	79fb      	ldrb	r3, [r7, #7]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	f107 070c 	add.w	r7, r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bc80      	pop	{r7}
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop

0800fb10 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 800fb18:	f04f 0304 	mov.w	r3, #4
 800fb1c:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 800fb1e:	f7ff ffbf 	bl	800faa0 <FLASH_GetBank1Status>
 800fb22:	4603      	mov	r3, r0
 800fb24:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800fb26:	e007      	b.n	800fb38 <FLASH_WaitForLastOperation+0x28>
  {
    status = FLASH_GetBank1Status();
 800fb28:	f7ff ffba 	bl	800faa0 <FLASH_GetBank1Status>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fb36:	607b      	str	r3, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800fb38:	7bfb      	ldrb	r3, [r7, #15]
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d102      	bne.n	800fb44 <FLASH_WaitForLastOperation+0x34>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1f1      	bne.n	800fb28 <FLASH_WaitForLastOperation+0x18>
  {
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d102      	bne.n	800fb50 <FLASH_WaitForLastOperation+0x40>
  {
    status = FLASH_TIMEOUT;
 800fb4a:	f04f 0305 	mov.w	r3, #5
 800fb4e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	f107 0710 	add.w	r7, r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b089      	sub	sp, #36	; 0x24
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
 800fb64:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800fb66:	f04f 0300 	mov.w	r3, #0
 800fb6a:	61fb      	str	r3, [r7, #28]
 800fb6c:	f04f 0300 	mov.w	r3, #0
 800fb70:	613b      	str	r3, [r7, #16]
 800fb72:	f04f 0300 	mov.w	r3, #0
 800fb76:	61bb      	str	r3, [r7, #24]
 800fb78:	f04f 0300 	mov.w	r3, #0
 800fb7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800fb7e:	f04f 0300 	mov.w	r3, #0
 800fb82:	617b      	str	r3, [r7, #20]
 800fb84:	f04f 0300 	mov.w	r3, #0
 800fb88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	78db      	ldrb	r3, [r3, #3]
 800fb8e:	f003 030f 	and.w	r3, r3, #15
 800fb92:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	78db      	ldrb	r3, [r3, #3]
 800fb98:	f003 0310 	and.w	r3, r3, #16
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d004      	beq.n	800fbaa <GPIO_Init+0x4e>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	789b      	ldrb	r3, [r3, #2]
 800fba4:	69fa      	ldr	r2, [r7, #28]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	881b      	ldrh	r3, [r3, #0]
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d04e      	beq.n	800fc52 <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800fbba:	f04f 0300 	mov.w	r3, #0
 800fbbe:	61bb      	str	r3, [r7, #24]
 800fbc0:	e041      	b.n	800fc46 <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	f04f 0201 	mov.w	r2, #1
 800fbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbcc:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	881b      	ldrh	r3, [r3, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	4013      	ands	r3, r2
 800fbd8:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800fbda:	693a      	ldr	r2, [r7, #16]
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d12d      	bne.n	800fc3e <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fbe8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f04f 020f 	mov.w	r2, #15
 800fbf0:	fa02 f303 	lsl.w	r3, r2, r3
 800fbf4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	ea6f 0303 	mvn.w	r3, r3
 800fbfc:	697a      	ldr	r2, [r7, #20]
 800fbfe:	4013      	ands	r3, r2
 800fc00:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	69fa      	ldr	r2, [r7, #28]
 800fc06:	fa02 f303 	lsl.w	r3, r2, r3
 800fc0a:	697a      	ldr	r2, [r7, #20]
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	78db      	ldrb	r3, [r3, #3]
 800fc14:	2b28      	cmp	r3, #40	; 0x28
 800fc16:	d107      	bne.n	800fc28 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	f04f 0201 	mov.w	r2, #1
 800fc1e:	fa02 f203 	lsl.w	r2, r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	615a      	str	r2, [r3, #20]
 800fc26:	e00a      	b.n	800fc3e <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	78db      	ldrb	r3, [r3, #3]
 800fc2c:	2b48      	cmp	r3, #72	; 0x48
 800fc2e:	d106      	bne.n	800fc3e <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	f04f 0201 	mov.w	r2, #1
 800fc36:	fa02 f203 	lsl.w	r2, r2, r3
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	f103 0301 	add.w	r3, r3, #1
 800fc44:	61bb      	str	r3, [r7, #24]
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	2b07      	cmp	r3, #7
 800fc4a:	d9ba      	bls.n	800fbc2 <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	697a      	ldr	r2, [r7, #20]
 800fc50:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	881b      	ldrh	r3, [r3, #0]
 800fc56:	2bff      	cmp	r3, #255	; 0xff
 800fc58:	d953      	bls.n	800fd02 <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800fc60:	f04f 0300 	mov.w	r3, #0
 800fc64:	61bb      	str	r3, [r7, #24]
 800fc66:	e046      	b.n	800fcf6 <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	f103 0308 	add.w	r3, r3, #8
 800fc6e:	f04f 0201 	mov.w	r2, #1
 800fc72:	fa02 f303 	lsl.w	r3, r2, r3
 800fc76:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	4013      	ands	r3, r2
 800fc82:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800fc84:	693a      	ldr	r2, [r7, #16]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d130      	bne.n	800fcee <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fc92:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f04f 020f 	mov.w	r2, #15
 800fc9a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc9e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	ea6f 0303 	mvn.w	r3, r3
 800fca6:	697a      	ldr	r2, [r7, #20]
 800fca8:	4013      	ands	r3, r2
 800fcaa:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	69fa      	ldr	r2, [r7, #28]
 800fcb0:	fa02 f303 	lsl.w	r3, r2, r3
 800fcb4:	697a      	ldr	r2, [r7, #20]
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	78db      	ldrb	r3, [r3, #3]
 800fcbe:	2b28      	cmp	r3, #40	; 0x28
 800fcc0:	d108      	bne.n	800fcd4 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	f103 0308 	add.w	r3, r3, #8
 800fcc8:	f04f 0201 	mov.w	r2, #1
 800fccc:	fa02 f203 	lsl.w	r2, r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	78db      	ldrb	r3, [r3, #3]
 800fcd8:	2b48      	cmp	r3, #72	; 0x48
 800fcda:	d108      	bne.n	800fcee <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	f103 0308 	add.w	r3, r3, #8
 800fce2:	f04f 0201 	mov.w	r2, #1
 800fce6:	fa02 f203 	lsl.w	r2, r2, r3
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	f103 0301 	add.w	r3, r3, #1
 800fcf4:	61bb      	str	r3, [r7, #24]
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	2b07      	cmp	r3, #7
 800fcfa:	d9b5      	bls.n	800fc68 <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	697a      	ldr	r2, [r7, #20]
 800fd00:	605a      	str	r2, [r3, #4]
  }
}
 800fd02:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bc80      	pop	{r7}
 800fd0a:	4770      	bx	lr

0800fd0c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b085      	sub	sp, #20
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800fd18:	f04f 0300 	mov.w	r3, #0
 800fd1c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	689a      	ldr	r2, [r3, #8]
 800fd22:	887b      	ldrh	r3, [r7, #2]
 800fd24:	4013      	ands	r3, r2
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d003      	beq.n	800fd32 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 800fd2a:	f04f 0301 	mov.w	r3, #1
 800fd2e:	73fb      	strb	r3, [r7, #15]
 800fd30:	e002      	b.n	800fd38 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800fd32:	f04f 0300 	mov.w	r3, #0
 800fd36:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800fd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f107 0714 	add.w	r7, r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bc80      	pop	{r7}
 800fd44:	4770      	bx	lr
 800fd46:	bf00      	nop

0800fd48 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	460b      	mov	r3, r1
 800fd52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800fd54:	887a      	ldrh	r2, [r7, #2]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	611a      	str	r2, [r3, #16]
}
 800fd5a:	f107 070c 	add.w	r7, r7, #12
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bc80      	pop	{r7}
 800fd62:	4770      	bx	lr

0800fd64 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800fd70:	887a      	ldrh	r2, [r7, #2]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	615a      	str	r2, [r3, #20]
}
 800fd76:	f107 070c 	add.w	r7, r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bc80      	pop	{r7}
 800fd7e:	4770      	bx	lr

0800fd80 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800fd80:	b490      	push	{r4, r7}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	71fa      	strb	r2, [r7, #7]
 800fd8c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800fd8e:	f04f 0300 	mov.w	r3, #0
 800fd92:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800fd94:	79bb      	ldrb	r3, [r7, #6]
 800fd96:	f003 0303 	and.w	r3, r3, #3
 800fd9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fd9e:	f04f 020f 	mov.w	r2, #15
 800fda2:	fa02 f303 	lsl.w	r3, r2, r3
 800fda6:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800fda8:	f04f 0300 	mov.w	r3, #0
 800fdac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fdb0:	79ba      	ldrb	r2, [r7, #6]
 800fdb2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800fdb6:	b2d2      	uxtb	r2, r2
 800fdb8:	4610      	mov	r0, r2
 800fdba:	f04f 0200 	mov.w	r2, #0
 800fdbe:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800fdc2:	79b9      	ldrb	r1, [r7, #6]
 800fdc4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800fdc8:	b2c9      	uxtb	r1, r1
 800fdca:	f101 0102 	add.w	r1, r1, #2
 800fdce:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	ea6f 0202 	mvn.w	r2, r2
 800fdd8:	4011      	ands	r1, r2
 800fdda:	f100 0202 	add.w	r2, r0, #2
 800fdde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800fde2:	f04f 0300 	mov.w	r3, #0
 800fde6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fdea:	79ba      	ldrb	r2, [r7, #6]
 800fdec:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800fdf0:	b2d2      	uxtb	r2, r2
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	f04f 0200 	mov.w	r2, #0
 800fdf8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800fdfc:	79b9      	ldrb	r1, [r7, #6]
 800fdfe:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800fe02:	b2c9      	uxtb	r1, r1
 800fe04:	f101 0102 	add.w	r1, r1, #2
 800fe08:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800fe0c:	79fc      	ldrb	r4, [r7, #7]
 800fe0e:	79ba      	ldrb	r2, [r7, #6]
 800fe10:	f002 0203 	and.w	r2, r2, #3
 800fe14:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fe18:	fa04 f202 	lsl.w	r2, r4, r2
 800fe1c:	4311      	orrs	r1, r2
 800fe1e:	f100 0202 	add.w	r2, r0, #2
 800fe22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800fe26:	f107 0710 	add.w	r7, r7, #16
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bc90      	pop	{r4, r7}
 800fe2e:	4770      	bx	lr

0800fe30 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the RTC and backup registers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	4603      	mov	r3, r0
 800fe38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800fe3a:	f04f 0320 	mov.w	r3, #32
 800fe3e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800fe42:	79fa      	ldrb	r2, [r7, #7]
 800fe44:	601a      	str	r2, [r3, #0]
}
 800fe46:	f107 070c 	add.w	r7, r7, #12
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bc80      	pop	{r7}
 800fe4e:	4770      	bx	lr

0800fe50 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	460b      	mov	r3, r1
 800fe5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fe5c:	78fb      	ldrb	r3, [r7, #3]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00c      	beq.n	800fe7c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800fe62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fe6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe6e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800fe72:	6951      	ldr	r1, [r2, #20]
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	430a      	orrs	r2, r1
 800fe78:	615a      	str	r2, [r3, #20]
 800fe7a:	e00d      	b.n	800fe98 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800fe7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fe84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800fe8c:	6951      	ldr	r1, [r2, #20]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	ea6f 0202 	mvn.w	r2, r2
 800fe94:	400a      	ands	r2, r1
 800fe96:	615a      	str	r2, [r3, #20]
  }
}
 800fe98:	f107 070c 	add.w	r7, r7, #12
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bc80      	pop	{r7}
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop

0800fea4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	460b      	mov	r3, r1
 800feae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800feb0:	78fb      	ldrb	r3, [r7, #3]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00c      	beq.n	800fed0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800feb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800feba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800febe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fec2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800fec6:	6991      	ldr	r1, [r2, #24]
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	430a      	orrs	r2, r1
 800fecc:	619a      	str	r2, [r3, #24]
 800fece:	e00d      	b.n	800feec <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800fed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fed4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800fed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fedc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800fee0:	6991      	ldr	r1, [r2, #24]
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	ea6f 0202 	mvn.w	r2, r2
 800fee8:	400a      	ands	r2, r1
 800feea:	619a      	str	r2, [r3, #24]
  }
}
 800feec:	f107 070c 	add.w	r7, r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bc80      	pop	{r7}
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop

0800fef8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	460b      	mov	r3, r1
 800ff02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff04:	78fb      	ldrb	r3, [r7, #3]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d00c      	beq.n	800ff24 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800ff0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ff12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ff1a:	69d1      	ldr	r1, [r2, #28]
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	430a      	orrs	r2, r1
 800ff20:	61da      	str	r2, [r3, #28]
 800ff22:	e00d      	b.n	800ff40 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800ff24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ff2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ff34:	69d1      	ldr	r1, [r2, #28]
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	ea6f 0202 	mvn.w	r2, r2
 800ff3c:	400a      	ands	r2, r1
 800ff3e:	61da      	str	r2, [r3, #28]
  }
}
 800ff40:	f107 070c 	add.w	r7, r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bc80      	pop	{r7}
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop

0800ff4c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800ff56:	f04f 0300 	mov.w	r3, #0
 800ff5a:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	881b      	ldrh	r3, [r3, #0]
 800ff60:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800ff62:	89fb      	ldrh	r3, [r7, #14]
 800ff64:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800ff68:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	881a      	ldrh	r2, [r3, #0]
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	885b      	ldrh	r3, [r3, #2]
 800ff72:	4313      	orrs	r3, r2
 800ff74:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ff82:	4313      	orrs	r3, r2
 800ff84:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ff92:	4313      	orrs	r3, r2
 800ff94:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	89fb      	ldrh	r3, [r7, #14]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	89fa      	ldrh	r2, [r7, #14]
 800ffb0:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	8b9b      	ldrh	r3, [r3, #28]
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	8a1a      	ldrh	r2, [r3, #16]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	821a      	strh	r2, [r3, #16]
}
 800ffca:	f107 0714 	add.w	r7, r7, #20
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bc80      	pop	{r7}
 800ffd2:	4770      	bx	lr

0800ffd4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	460b      	mov	r3, r1
 800ffde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d008      	beq.n	800fff8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	801a      	strh	r2, [r3, #0]
 800fff6:	e007      	b.n	8010008 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	881b      	ldrh	r3, [r3, #0]
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010002:	b29a      	uxth	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	801a      	strh	r2, [r3, #0]
  }
}
 8010008:	f107 070c 	add.w	r7, r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	bc80      	pop	{r7}
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop

08010014 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	4613      	mov	r3, r2
 801001e:	460a      	mov	r2, r1
 8010020:	807a      	strh	r2, [r7, #2]
 8010022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8010024:	787b      	ldrb	r3, [r7, #1]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d008      	beq.n	801003c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	889b      	ldrh	r3, [r3, #4]
 801002e:	b29a      	uxth	r2, r3
 8010030:	887b      	ldrh	r3, [r7, #2]
 8010032:	4313      	orrs	r3, r2
 8010034:	b29a      	uxth	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	809a      	strh	r2, [r3, #4]
 801003a:	e00a      	b.n	8010052 <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	889b      	ldrh	r3, [r3, #4]
 8010040:	b29a      	uxth	r2, r3
 8010042:	887b      	ldrh	r3, [r7, #2]
 8010044:	ea6f 0303 	mvn.w	r3, r3
 8010048:	b29b      	uxth	r3, r3
 801004a:	4013      	ands	r3, r2
 801004c:	b29a      	uxth	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	809a      	strh	r2, [r3, #4]
  }
}
 8010052:	f107 070c 	add.w	r7, r7, #12
 8010056:	46bd      	mov	sp, r7
 8010058:	bc80      	pop	{r7}
 801005a:	4770      	bx	lr

0801005c <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 801005c:	b480      	push	{r7}
 801005e:	b085      	sub	sp, #20
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	460b      	mov	r3, r1
 8010066:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8010068:	f04f 0300 	mov.w	r3, #0
 801006c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	891b      	ldrh	r3, [r3, #8]
 8010072:	b29a      	uxth	r2, r3
 8010074:	887b      	ldrh	r3, [r7, #2]
 8010076:	4013      	ands	r3, r2
 8010078:	b29b      	uxth	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	d003      	beq.n	8010086 <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 801007e:	f04f 0301 	mov.w	r3, #1
 8010082:	73fb      	strb	r3, [r7, #15]
 8010084:	e002      	b.n	801008c <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8010086:	f04f 0300 	mov.w	r3, #0
 801008a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 801008c:	7bfb      	ldrb	r3, [r7, #15]
}
 801008e:	4618      	mov	r0, r3
 8010090:	f107 0714 	add.w	r7, r7, #20
 8010094:	46bd      	mov	sp, r7
 8010096:	bc80      	pop	{r7}
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop

0801009c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80100a6:	f04f 0300 	mov.w	r3, #0
 80100aa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80100b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80100bc:	429a      	cmp	r2, r3
 80100be:	d01f      	beq.n	8010100 <TIM_TimeBaseInit+0x64>
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80100c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d018      	beq.n	8010100 <TIM_TimeBaseInit+0x64>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100d4:	d014      	beq.n	8010100 <TIM_TimeBaseInit+0x64>
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d00d      	beq.n	8010100 <TIM_TimeBaseInit+0x64>
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80100ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d006      	beq.n	8010100 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80100f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d108      	bne.n	8010112 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8010100:	89fb      	ldrh	r3, [r7, #14]
 8010102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010106:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	885a      	ldrh	r2, [r3, #2]
 801010c:	89fb      	ldrh	r3, [r7, #14]
 801010e:	4313      	orrs	r3, r2
 8010110:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010118:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801011c:	429a      	cmp	r2, r3
 801011e:	d00f      	beq.n	8010140 <TIM_TimeBaseInit+0xa4>
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010126:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801012a:	429a      	cmp	r2, r3
 801012c:	d008      	beq.n	8010140 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 801012e:	89fb      	ldrh	r3, [r7, #14]
 8010130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010134:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	88da      	ldrh	r2, [r3, #6]
 801013a:	89fb      	ldrh	r3, [r7, #14]
 801013c:	4313      	orrs	r3, r2
 801013e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	89fa      	ldrh	r2, [r7, #14]
 8010144:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	889a      	ldrh	r2, [r3, #4]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	881a      	ldrh	r2, [r3, #0]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801015c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010160:	429a      	cmp	r2, r3
 8010162:	d01b      	beq.n	801019c <TIM_TimeBaseInit+0x100>
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 801016a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801016e:	429a      	cmp	r2, r3
 8010170:	d014      	beq.n	801019c <TIM_TimeBaseInit+0x100>
 8010172:	687a      	ldr	r2, [r7, #4]
 8010174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010178:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801017c:	429a      	cmp	r2, r3
 801017e:	d00d      	beq.n	801019c <TIM_TimeBaseInit+0x100>
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8010186:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801018a:	429a      	cmp	r2, r3
 801018c:	d006      	beq.n	801019c <TIM_TimeBaseInit+0x100>
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8010194:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010198:	429a      	cmp	r2, r3
 801019a:	d104      	bne.n	80101a6 <TIM_TimeBaseInit+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	7a1b      	ldrb	r3, [r3, #8]
 80101a0:	461a      	mov	r2, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f04f 0201 	mov.w	r2, #1
 80101ac:	829a      	strh	r2, [r3, #20]
}
 80101ae:	f107 0714 	add.w	r7, r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bc80      	pop	{r7}
 80101b6:	4770      	bx	lr

080101b8 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101c6:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f04f 0200 	mov.w	r2, #0
 80101ce:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f04f 0200 	mov.w	r2, #0
 80101d6:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f04f 0200 	mov.w	r2, #0
 80101de:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f04f 0200 	mov.w	r2, #0
 80101e6:	721a      	strb	r2, [r3, #8]
}
 80101e8:	f107 070c 	add.w	r7, r7, #12
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bc80      	pop	{r7}
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop

080101f4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	460b      	mov	r3, r1
 80101fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8010200:	78fb      	ldrb	r3, [r7, #3]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d008      	beq.n	8010218 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	881b      	ldrh	r3, [r3, #0]
 801020a:	b29b      	uxth	r3, r3
 801020c:	f043 0301 	orr.w	r3, r3, #1
 8010210:	b29a      	uxth	r2, r3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	801a      	strh	r2, [r3, #0]
 8010216:	e007      	b.n	8010228 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	b29b      	uxth	r3, r3
 801021e:	f023 0301 	bic.w	r3, r3, #1
 8010222:	b29a      	uxth	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	801a      	strh	r2, [r3, #0]
  }
}
 8010228:	f107 070c 	add.w	r7, r7, #12
 801022c:	46bd      	mov	sp, r7
 801022e:	bc80      	pop	{r7}
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop

08010234 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	4613      	mov	r3, r2
 801023e:	460a      	mov	r2, r1
 8010240:	807a      	strh	r2, [r7, #2]
 8010242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8010244:	787b      	ldrb	r3, [r7, #1]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d008      	beq.n	801025c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	899b      	ldrh	r3, [r3, #12]
 801024e:	b29a      	uxth	r2, r3
 8010250:	887b      	ldrh	r3, [r7, #2]
 8010252:	4313      	orrs	r3, r2
 8010254:	b29a      	uxth	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	819a      	strh	r2, [r3, #12]
 801025a:	e00a      	b.n	8010272 <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	899b      	ldrh	r3, [r3, #12]
 8010260:	b29a      	uxth	r2, r3
 8010262:	887b      	ldrh	r3, [r7, #2]
 8010264:	ea6f 0303 	mvn.w	r3, r3
 8010268:	b29b      	uxth	r3, r3
 801026a:	4013      	ands	r3, r2
 801026c:	b29a      	uxth	r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	819a      	strh	r2, [r3, #12]
  }
}
 8010272:	f107 070c 	add.w	r7, r7, #12
 8010276:	46bd      	mov	sp, r7
 8010278:	bc80      	pop	{r7}
 801027a:	4770      	bx	lr

0801027c <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	460b      	mov	r3, r1
 8010286:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	b29b      	uxth	r3, r3
 801028e:	f023 0308 	bic.w	r3, r3, #8
 8010292:	b29a      	uxth	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	881b      	ldrh	r3, [r3, #0]
 801029c:	b29a      	uxth	r2, r3
 801029e:	887b      	ldrh	r3, [r7, #2]
 80102a0:	4313      	orrs	r3, r2
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	801a      	strh	r2, [r3, #0]
}
 80102a8:	f107 070c 	add.w	r7, r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bc80      	pop	{r7}
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop

080102b4 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b085      	sub	sp, #20
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	460b      	mov	r3, r1
 80102be:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80102c0:	f04f 0300 	mov.w	r3, #0
 80102c4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80102c6:	f04f 0300 	mov.w	r3, #0
 80102ca:	81bb      	strh	r3, [r7, #12]
 80102cc:	f04f 0300 	mov.w	r3, #0
 80102d0:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	8a1b      	ldrh	r3, [r3, #16]
 80102d6:	b29a      	uxth	r2, r3
 80102d8:	887b      	ldrh	r3, [r7, #2]
 80102da:	4013      	ands	r3, r2
 80102dc:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	899b      	ldrh	r3, [r3, #12]
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	887b      	ldrh	r3, [r7, #2]
 80102e6:	4013      	ands	r3, r2
 80102e8:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80102ea:	89bb      	ldrh	r3, [r7, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d006      	beq.n	80102fe <TIM_GetITStatus+0x4a>
 80102f0:	897b      	ldrh	r3, [r7, #10]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d003      	beq.n	80102fe <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80102f6:	f04f 0301 	mov.w	r3, #1
 80102fa:	73fb      	strb	r3, [r7, #15]
 80102fc:	e002      	b.n	8010304 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 80102fe:	f04f 0300 	mov.w	r3, #0
 8010302:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010304:	7bfb      	ldrb	r3, [r7, #15]
}
 8010306:	4618      	mov	r0, r3
 8010308:	f107 0714 	add.w	r7, r7, #20
 801030c:	46bd      	mov	sp, r7
 801030e:	bc80      	pop	{r7}
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop

08010314 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	460b      	mov	r3, r1
 801031e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8010320:	887b      	ldrh	r3, [r7, #2]
 8010322:	ea6f 0303 	mvn.w	r3, r3
 8010326:	b29a      	uxth	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	821a      	strh	r2, [r3, #16]
}
 801032c:	f107 070c 	add.w	r7, r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	bc80      	pop	{r7}
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop

08010338 <UINT32_TO_STREAM_f>:
//!						   while converting to little endian format.
//
//*****************************************************************************

unsigned char* UINT32_TO_STREAM_f (unsigned char *p, unsigned long u32)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
	*(p)++ = (unsigned char)(u32);
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	b2da      	uxtb	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	701a      	strb	r2, [r3, #0]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f103 0301 	add.w	r3, r3, #1
 8010350:	607b      	str	r3, [r7, #4]
	*(p)++ = (unsigned char)((u32) >> 8);
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8010358:	b2da      	uxtb	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	701a      	strb	r2, [r3, #0]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f103 0301 	add.w	r3, r3, #1
 8010364:	607b      	str	r3, [r7, #4]
	*(p)++ = (unsigned char)((u32) >> 16);
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	ea4f 4313 	mov.w	r3, r3, lsr #16
 801036c:	b2da      	uxtb	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	701a      	strb	r2, [r3, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f103 0301 	add.w	r3, r3, #1
 8010378:	607b      	str	r3, [r7, #4]
	*(p)++ = (unsigned char)((u32) >> 24);
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8010380:	b2da      	uxtb	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	701a      	strb	r2, [r3, #0]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f103 0301 	add.w	r3, r3, #1
 801038c:	607b      	str	r3, [r7, #4]
	return p;
 801038e:	687b      	ldr	r3, [r7, #4]
}
 8010390:	4618      	mov	r0, r3
 8010392:	f107 070c 	add.w	r7, r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	bc80      	pop	{r7}
 801039a:	4770      	bx	lr

0801039c <UINT16_TO_STREAM_f>:
//!                       while converting to little endian format.
//
//*****************************************************************************

unsigned char* UINT16_TO_STREAM_f (unsigned char *p, unsigned short u16)
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	460b      	mov	r3, r1
 80103a6:	807b      	strh	r3, [r7, #2]
	*(p)++ = (unsigned char)(u16);
 80103a8:	887b      	ldrh	r3, [r7, #2]
 80103aa:	b2da      	uxtb	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	701a      	strb	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f103 0301 	add.w	r3, r3, #1
 80103b6:	607b      	str	r3, [r7, #4]
	*(p)++ = (unsigned char)((u16) >> 8);
 80103b8:	887b      	ldrh	r3, [r7, #2]
 80103ba:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80103be:	b29b      	uxth	r3, r3
 80103c0:	b2da      	uxtb	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	701a      	strb	r2, [r3, #0]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f103 0301 	add.w	r3, r3, #1
 80103cc:	607b      	str	r3, [r7, #4]
	return p;
 80103ce:	687b      	ldr	r3, [r7, #4]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	f107 070c 	add.w	r7, r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bc80      	pop	{r7}
 80103da:	4770      	bx	lr

080103dc <STREAM_TO_UINT16_f>:
//!                       16 bit in little endian format.
//
//*****************************************************************************

unsigned short STREAM_TO_UINT16_f(char* p, unsigned short offset)
{
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	460b      	mov	r3, r1
 80103e6:	807b      	strh	r3, [r7, #2]
        return (unsigned short)((unsigned short)((unsigned short)
								(*(p + offset + 1)) << 8) + (unsigned short)(*(p + offset)));
 80103e8:	887b      	ldrh	r3, [r7, #2]
 80103ea:	f103 0301 	add.w	r3, r3, #1
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	18d3      	adds	r3, r2, r3
 80103f2:	781b      	ldrb	r3, [r3, #0]
//
//*****************************************************************************

unsigned short STREAM_TO_UINT16_f(char* p, unsigned short offset)
{
        return (unsigned short)((unsigned short)((unsigned short)
 80103f4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80103f8:	b29a      	uxth	r2, r3
								(*(p + offset + 1)) << 8) + (unsigned short)(*(p + offset)));
 80103fa:	887b      	ldrh	r3, [r7, #2]
 80103fc:	6879      	ldr	r1, [r7, #4]
 80103fe:	18cb      	adds	r3, r1, r3
 8010400:	781b      	ldrb	r3, [r3, #0]
//
//*****************************************************************************

unsigned short STREAM_TO_UINT16_f(char* p, unsigned short offset)
{
        return (unsigned short)((unsigned short)((unsigned short)
 8010402:	18d3      	adds	r3, r2, r3
 8010404:	b29b      	uxth	r3, r3
								(*(p + offset + 1)) << 8) + (unsigned short)(*(p + offset)));
}
 8010406:	4618      	mov	r0, r3
 8010408:	f107 070c 	add.w	r7, r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	bc80      	pop	{r7}
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop

08010414 <STREAM_TO_UINT32_f>:
//!                       32 bit in little endian format.
//
//*****************************************************************************

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	460b      	mov	r3, r1
 801041e:	807b      	strh	r3, [r7, #2]
        return (unsigned long)((unsigned long)((unsigned long)
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
 8010420:	887b      	ldrh	r3, [r7, #2]
 8010422:	f103 0303 	add.w	r3, r3, #3
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	18d3      	adds	r3, r2, r3
 801042a:	781b      	ldrb	r3, [r3, #0]
//
//*****************************************************************************

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
        return (unsigned long)((unsigned long)((unsigned long)
 801042c:	ea4f 6203 	mov.w	r2, r3, lsl #24
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
							 (*(p + offset + 2)) << 16) + (unsigned long)((unsigned long)
 8010430:	887b      	ldrh	r3, [r7, #2]
 8010432:	f103 0302 	add.w	r3, r3, #2
 8010436:	6879      	ldr	r1, [r7, #4]
 8010438:	18cb      	adds	r3, r1, r3
 801043a:	781b      	ldrb	r3, [r3, #0]
//*****************************************************************************

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
        return (unsigned long)((unsigned long)((unsigned long)
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
 801043c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8010440:	18d2      	adds	r2, r2, r3
							 (*(p + offset + 2)) << 16) + (unsigned long)((unsigned long)
							 (*(p + offset + 1)) << 8) + (unsigned long)(*(p + offset)));
 8010442:	887b      	ldrh	r3, [r7, #2]
 8010444:	f103 0301 	add.w	r3, r3, #1
 8010448:	6879      	ldr	r1, [r7, #4]
 801044a:	18cb      	adds	r3, r1, r3
 801044c:	781b      	ldrb	r3, [r3, #0]

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
        return (unsigned long)((unsigned long)((unsigned long)
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
							 (*(p + offset + 2)) << 16) + (unsigned long)((unsigned long)
 801044e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010452:	18d2      	adds	r2, r2, r3
							 (*(p + offset + 1)) << 8) + (unsigned long)(*(p + offset)));
 8010454:	887b      	ldrh	r3, [r7, #2]
 8010456:	6879      	ldr	r1, [r7, #4]
 8010458:	18cb      	adds	r3, r1, r3
 801045a:	781b      	ldrb	r3, [r3, #0]
//
//*****************************************************************************

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
        return (unsigned long)((unsigned long)((unsigned long)
 801045c:	18d3      	adds	r3, r2, r3
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
							 (*(p + offset + 2)) << 16) + (unsigned long)((unsigned long)
							 (*(p + offset + 1)) << 8) + (unsigned long)(*(p + offset)));
}
 801045e:	4618      	mov	r0, r3
 8010460:	f107 070c 	add.w	r7, r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	bc80      	pop	{r7}
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop

0801046c <hci_unsol_handle_patch_request>:
//!
//!  @brief   Handle unsolicited event from type patch request
//
//*****************************************************************************
void hci_unsol_handle_patch_request(char *event_hdr)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b086      	sub	sp, #24
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
	char *params = (char *)(event_hdr) + HCI_EVENT_HEADER_SIZE;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f103 0305 	add.w	r3, r3, #5
 801047a:	617b      	str	r3, [r7, #20]
	unsigned long ucLength = 0;
 801047c:	f04f 0300 	mov.w	r3, #0
 8010480:	60fb      	str	r3, [r7, #12]
	char *patch;
	
	switch (*params)
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	2b02      	cmp	r3, #2
 8010488:	d035      	beq.n	80104f6 <hci_unsol_handle_patch_request+0x8a>
 801048a:	2b03      	cmp	r3, #3
 801048c:	d064      	beq.n	8010558 <hci_unsol_handle_patch_request+0xec>
 801048e:	2b01      	cmp	r3, #1
 8010490:	f040 8093 	bne.w	80105ba <hci_unsol_handle_patch_request+0x14e>
	{
	case HCI_EVENT_PATCHES_DRV_REQ:
		
		if (tSLInformation.sDriverPatches)
 8010494:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010498:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801049c:	691b      	ldr	r3, [r3, #16]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d01a      	beq.n	80104d8 <hci_unsol_handle_patch_request+0x6c>
		{
			patch = tSLInformation.sDriverPatches(&ucLength);
 80104a2:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80104a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80104aa:	691b      	ldr	r3, [r3, #16]
 80104ac:	f107 020c 	add.w	r2, r7, #12
 80104b0:	4610      	mov	r0, r2
 80104b2:	4798      	blx	r3
 80104b4:	6138      	str	r0, [r7, #16]
			
			if (patch)
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d00d      	beq.n	80104d8 <hci_unsol_handle_patch_request+0x6c>
			{
				hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
 80104bc:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80104c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80104c4:	689a      	ldr	r2, [r3, #8]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	f04f 0001 	mov.w	r0, #1
 80104ce:	4611      	mov	r1, r2
 80104d0:	693a      	ldr	r2, [r7, #16]
 80104d2:	f000 fea5 	bl	8011220 <hci_patch_send>
 80104d6:	e070      	b.n	80105ba <hci_unsol_handle_patch_request+0x14e>
				return;
			}
		}
		
		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
 80104d8:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80104dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	f04f 0001 	mov.w	r0, #1
 80104e6:	4619      	mov	r1, r3
 80104e8:	f04f 0200 	mov.w	r2, #0
 80104ec:	f04f 0300 	mov.w	r3, #0
 80104f0:	f000 fe96 	bl	8011220 <hci_patch_send>
									 tSLInformation.pucTxCommandBuffer, 0, 0);
		break;
 80104f4:	e061      	b.n	80105ba <hci_unsol_handle_patch_request+0x14e>
		
	case HCI_EVENT_PATCHES_FW_REQ:
		
		if (tSLInformation.sFWPatches)
 80104f6:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80104fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d01a      	beq.n	801053a <hci_unsol_handle_patch_request+0xce>
		{
			patch = tSLInformation.sFWPatches(&ucLength);
 8010504:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	f107 020c 	add.w	r2, r7, #12
 8010512:	4610      	mov	r0, r2
 8010514:	4798      	blx	r3
 8010516:	6138      	str	r0, [r7, #16]
			
			// Build and send a patch
			if (patch)
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00d      	beq.n	801053a <hci_unsol_handle_patch_request+0xce>
			{
				hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
 801051e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010522:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010526:	689a      	ldr	r2, [r3, #8]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	b29b      	uxth	r3, r3
 801052c:	f04f 0002 	mov.w	r0, #2
 8010530:	4611      	mov	r1, r2
 8010532:	693a      	ldr	r2, [r7, #16]
 8010534:	f000 fe74 	bl	8011220 <hci_patch_send>
 8010538:	e03f      	b.n	80105ba <hci_unsol_handle_patch_request+0x14e>
				return;
			}
		}
		
		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
 801053a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801053e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010542:	689b      	ldr	r3, [r3, #8]
 8010544:	f04f 0002 	mov.w	r0, #2
 8010548:	4619      	mov	r1, r3
 801054a:	f04f 0200 	mov.w	r2, #0
 801054e:	f04f 0300 	mov.w	r3, #0
 8010552:	f000 fe65 	bl	8011220 <hci_patch_send>
									 tSLInformation.pucTxCommandBuffer, 0, 0);
		break;
 8010556:	e030      	b.n	80105ba <hci_unsol_handle_patch_request+0x14e>
		
	case HCI_EVENT_PATCHES_BOOTLOAD_REQ:
		
		if (tSLInformation.sBootLoaderPatches)
 8010558:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801055c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010560:	695b      	ldr	r3, [r3, #20]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d01a      	beq.n	801059c <hci_unsol_handle_patch_request+0x130>
		{
			patch = tSLInformation.sBootLoaderPatches(&ucLength);
 8010566:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801056a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801056e:	695b      	ldr	r3, [r3, #20]
 8010570:	f107 020c 	add.w	r2, r7, #12
 8010574:	4610      	mov	r0, r2
 8010576:	4798      	blx	r3
 8010578:	6138      	str	r0, [r7, #16]
			
			if (patch)
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00d      	beq.n	801059c <hci_unsol_handle_patch_request+0x130>
			{
				hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ,  
 8010580:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010588:	689a      	ldr	r2, [r3, #8]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	b29b      	uxth	r3, r3
 801058e:	f04f 0003 	mov.w	r0, #3
 8010592:	4611      	mov	r1, r2
 8010594:	693a      	ldr	r2, [r7, #16]
 8010596:	f000 fe43 	bl	8011220 <hci_patch_send>
 801059a:	e00e      	b.n	80105ba <hci_unsol_handle_patch_request+0x14e>
				return;
			}
		}
		
		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ, 
 801059c:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80105a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	f04f 0003 	mov.w	r0, #3
 80105aa:	4619      	mov	r1, r3
 80105ac:	f04f 0200 	mov.w	r2, #0
 80105b0:	f04f 0300 	mov.w	r3, #0
 80105b4:	f000 fe34 	bl	8011220 <hci_patch_send>
									 tSLInformation.pucTxCommandBuffer, 0, 0);
		break;
 80105b8:	bf00      	nop
	}
}
 80105ba:	f107 0718 	add.w	r7, r7, #24
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop

080105c4 <hci_event_handler>:
//*****************************************************************************

	
unsigned char *
hci_event_handler(void *pRetParams, unsigned char *from, unsigned char *fromlen)
{
 80105c4:	b590      	push	{r4, r7, lr}
 80105c6:	b08d      	sub	sp, #52	; 0x34
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	607a      	str	r2, [r7, #4]
	unsigned char *pucReceivedData, ucArgsize;
	unsigned short usLength;
	unsigned char *pucReceivedParams;
	unsigned short usReceivedEventOpcode = 0;
 80105d0:	f04f 0300 	mov.w	r3, #0
 80105d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80105d6:	e000      	b.n	80105da <hci_event_handler+0x16>
			if ((tSLInformation.usRxEventOpcode == 0) && (tSLInformation.usRxDataPending == 0))
			{
				return NULL;
			}	
		}
	}
 80105d8:	bf00      	nop
  unsigned char *RetParams;
	
	
	while (1)
	{
		if (tSLInformation.usEventOrDataReceived != 0)
 80105da:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80105de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105e2:	885b      	ldrh	r3, [r3, #2]
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d0f6      	beq.n	80105d8 <hci_event_handler+0x14>
		{				
			pucReceivedData = (tSLInformation.pucReceivedData);
 80105ea:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80105ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	627b      	str	r3, [r7, #36]	; 0x24

			if (*pucReceivedData == HCI_TYPE_EVNT)
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	2b04      	cmp	r3, #4
 80105fc:	f040 8268 	bne.w	8010ad0 <hci_event_handler+0x50c>
			{
				// Event Received
				STREAM_TO_UINT16((char *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
 8010600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010602:	f04f 0101 	mov.w	r1, #1
 8010606:	f7ff fee9 	bl	80103dc <STREAM_TO_UINT16_f>
 801060a:	4603      	mov	r3, r0
 801060c:	85fb      	strh	r3, [r7, #46]	; 0x2e
												 usReceivedEventOpcode);
				pucReceivedParams = pucReceivedData + HCI_EVENT_HEADER_SIZE;		
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	f103 0305 	add.w	r3, r3, #5
 8010614:	623b      	str	r3, [r7, #32]
				RecvParams = pucReceivedParams;
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	61fb      	str	r3, [r7, #28]
				RetParams = pRetParams;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	62bb      	str	r3, [r7, #40]	; 0x28
				
				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((char *)pucReceivedData) == 0)
 801061e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010620:	f000 fabe 	bl	8010ba0 <hci_unsol_event_handler>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	f040 8241 	bne.w	8010aae <hci_event_handler+0x4ea>
				{
					STREAM_TO_UINT8(pucReceivedData, HCI_DATA_LENGTH_OFFSET, usLength);
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	f103 0303 	add.w	r3, r3, #3
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	837b      	strh	r3, [r7, #26]
					
					switch(usReceivedEventOpcode)
 8010636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010638:	f241 0207 	movw	r2, #4103	; 0x1007
 801063c:	4293      	cmp	r3, r2
 801063e:	dc3a      	bgt.n	80106b6 <hci_event_handler+0xf2>
 8010640:	f241 0206 	movw	r2, #4102	; 0x1006
 8010644:	4293      	cmp	r3, r2
 8010646:	f280 8093 	bge.w	8010770 <hci_event_handler+0x1ac>
 801064a:	f240 2202 	movw	r2, #514	; 0x202
 801064e:	4293      	cmp	r3, r2
 8010650:	f000 808e 	beq.w	8010770 <hci_event_handler+0x1ac>
 8010654:	f240 2202 	movw	r2, #514	; 0x202
 8010658:	4293      	cmp	r3, r2
 801065a:	dc11      	bgt.n	8010680 <hci_event_handler+0xbc>
 801065c:	2b0c      	cmp	r3, #12
 801065e:	dc08      	bgt.n	8010672 <hci_event_handler+0xae>
 8010660:	2b08      	cmp	r3, #8
 8010662:	f280 8085 	bge.w	8010770 <hci_event_handler+0x1ac>
 8010666:	2b01      	cmp	r3, #1
 8010668:	f2c0 8221 	blt.w	8010aae <hci_event_handler+0x4ea>
 801066c:	2b06      	cmp	r3, #6
 801066e:	dd7f      	ble.n	8010770 <hci_event_handler+0x1ac>
 8010670:	e139      	b.n	80108e6 <hci_event_handler+0x322>
 8010672:	2b0d      	cmp	r3, #13
 8010674:	d077      	beq.n	8010766 <hci_event_handler+0x1a2>
 8010676:	f240 2201 	movw	r2, #513	; 0x201
 801067a:	4293      	cmp	r3, r2
 801067c:	d073      	beq.n	8010766 <hci_event_handler+0x1a2>
 801067e:	e216      	b.n	8010aae <hci_event_handler+0x4ea>
 8010680:	f241 0202 	movw	r2, #4098	; 0x1002
 8010684:	4293      	cmp	r3, r2
 8010686:	dc0b      	bgt.n	80106a0 <hci_event_handler+0xdc>
 8010688:	f241 0201 	movw	r2, #4097	; 0x1001
 801068c:	4293      	cmp	r3, r2
 801068e:	da6f      	bge.n	8010770 <hci_event_handler+0x1ac>
 8010690:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8010694:	dd67      	ble.n	8010766 <hci_event_handler+0x1a2>
 8010696:	f240 2207 	movw	r2, #519	; 0x207
 801069a:	4293      	cmp	r3, r2
 801069c:	d071      	beq.n	8010782 <hci_event_handler+0x1be>
 801069e:	e206      	b.n	8010aae <hci_event_handler+0x4ea>
 80106a0:	f241 0204 	movw	r2, #4100	; 0x1004
 80106a4:	4293      	cmp	r3, r2
 80106a6:	f000 80b6 	beq.w	8010816 <hci_event_handler+0x252>
 80106aa:	f241 0205 	movw	r2, #4101	; 0x1005
 80106ae:	4293      	cmp	r3, r2
 80106b0:	f000 808f 	beq.w	80107d2 <hci_event_handler+0x20e>
 80106b4:	e1fb      	b.n	8010aae <hci_event_handler+0x4ea>
 80106b6:	f242 0204 	movw	r2, #8196	; 0x2004
 80106ba:	4293      	cmp	r3, r2
 80106bc:	dc23      	bgt.n	8010706 <hci_event_handler+0x142>
 80106be:	f242 0201 	movw	r2, #8193	; 0x2001
 80106c2:	4293      	cmp	r3, r2
 80106c4:	da4f      	bge.n	8010766 <hci_event_handler+0x1a2>
 80106c6:	f241 020b 	movw	r2, #4107	; 0x100b
 80106ca:	4293      	cmp	r3, r2
 80106cc:	d050      	beq.n	8010770 <hci_event_handler+0x1ac>
 80106ce:	f241 020b 	movw	r2, #4107	; 0x100b
 80106d2:	4293      	cmp	r3, r2
 80106d4:	dc09      	bgt.n	80106ea <hci_event_handler+0x126>
 80106d6:	f241 0209 	movw	r2, #4105	; 0x1009
 80106da:	4293      	cmp	r3, r2
 80106dc:	d048      	beq.n	8010770 <hci_event_handler+0x1ac>
 80106de:	f241 0209 	movw	r2, #4105	; 0x1009
 80106e2:	4293      	cmp	r3, r2
 80106e4:	f300 80f2 	bgt.w	80108cc <hci_event_handler+0x308>
 80106e8:	e0c3      	b.n	8010872 <hci_event_handler+0x2ae>
 80106ea:	f241 0210 	movw	r2, #4112	; 0x1010
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d05a      	beq.n	80107a8 <hci_event_handler+0x1e4>
 80106f2:	f241 0211 	movw	r2, #4113	; 0x1011
 80106f6:	4293      	cmp	r3, r2
 80106f8:	d03a      	beq.n	8010770 <hci_event_handler+0x1ac>
 80106fa:	f241 020d 	movw	r2, #4109	; 0x100d
 80106fe:	4293      	cmp	r3, r2
 8010700:	f000 8089 	beq.w	8010816 <hci_event_handler+0x252>
 8010704:	e1d3      	b.n	8010aae <hci_event_handler+0x4ea>
 8010706:	f242 0209 	movw	r2, #8201	; 0x2009
 801070a:	4293      	cmp	r3, r2
 801070c:	dc0d      	bgt.n	801072a <hci_event_handler+0x166>
 801070e:	f242 0208 	movw	r2, #8200	; 0x2008
 8010712:	4293      	cmp	r3, r2
 8010714:	da27      	bge.n	8010766 <hci_event_handler+0x1a2>
 8010716:	f242 0205 	movw	r2, #8197	; 0x2005
 801071a:	4293      	cmp	r3, r2
 801071c:	f000 811f 	beq.w	801095e <hci_event_handler+0x39a>
 8010720:	f242 0206 	movw	r2, #8198	; 0x2006
 8010724:	4293      	cmp	r3, r2
 8010726:	d01e      	beq.n	8010766 <hci_event_handler+0x1a2>
 8010728:	e1c1      	b.n	8010aae <hci_event_handler+0x4ea>
 801072a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801072e:	f000 81bb 	beq.w	8010aa8 <hci_event_handler+0x4e4>
 8010732:	f244 020b 	movw	r2, #16395	; 0x400b
 8010736:	4293      	cmp	r3, r2
 8010738:	f040 81b9 	bne.w	8010aae <hci_event_handler+0x4ea>
					{		
					case HCI_CMND_READ_BUFFER_SIZE:
						{
							STREAM_TO_UINT8((char *)pucReceivedParams, 0, 
 801073c:	6a3b      	ldr	r3, [r7, #32]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	461a      	mov	r2, r3
 8010742:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010746:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801074a:	861a      	strh	r2, [r3, #48]	; 0x30
															tSLInformation.usNumberOfFreeBuffers);
							STREAM_TO_UINT16((char *)pucReceivedParams, 1, 
 801074c:	6a38      	ldr	r0, [r7, #32]
 801074e:	f04f 0101 	mov.w	r1, #1
 8010752:	f7ff fe43 	bl	80103dc <STREAM_TO_UINT16_f>
 8010756:	4603      	mov	r3, r0
 8010758:	461a      	mov	r2, r3
 801075a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801075e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010762:	865a      	strh	r2, [r3, #50]	; 0x32
															 tSLInformation.usSlBufferLength);
						}
						break;
 8010764:	e1a3      	b.n	8010aae <hci_event_handler+0x4ea>
					case HCI_EVNT_NVMEM_READ:
					case HCI_EVNT_NVMEM_CREATE_ENTRY:
					case HCI_CMND_NVMEM_WRITE_PATCH:
					case HCI_NETAPP_PING_REPORT:
						
						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
 8010766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010768:	791a      	ldrb	r2, [r3, #4]
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	701a      	strb	r2, [r3, #0]
														,*(unsigned char *)pRetParams);
						break;
 801076e:	e19e      	b.n	8010aae <hci_event_handler+0x4ea>
					case HCI_EVNT_CLOSE_SOCKET:
					case HCI_EVNT_MDNS_ADVERTISE:
					case HCI_EVNT_CONNECT:
					case HCI_EVNT_NVMEM_WRITE:
						
						STREAM_TO_UINT32((char *)pucReceivedParams,0
 8010770:	6a38      	ldr	r0, [r7, #32]
 8010772:	f04f 0100 	mov.w	r1, #0
 8010776:	f7ff fe4d 	bl	8010414 <STREAM_TO_UINT32_f>
 801077a:	4602      	mov	r2, r0
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	601a      	str	r2, [r3, #0]
														 ,*(unsigned long *)pRetParams);
						break;
 8010780:	e195      	b.n	8010aae <hci_event_handler+0x4ea>
						
					case HCI_EVNT_READ_SP_VERSION:
						
						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
 8010782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010784:	791a      	ldrb	r2, [r3, #4]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	701a      	strb	r2, [r3, #0]
														,*(unsigned char *)pRetParams);
						pRetParams = ((char *)pRetParams) + 1;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f103 0301 	add.w	r3, r3, #1
 8010790:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT32((char *)pucReceivedParams, 0, retValue32);
 8010792:	6a38      	ldr	r0, [r7, #32]
 8010794:	f04f 0100 	mov.w	r1, #0
 8010798:	f7ff fe3c 	bl	8010414 <STREAM_TO_UINT32_f>
 801079c:	6178      	str	r0, [r7, #20]
						UINT32_TO_STREAM((unsigned char *)pRetParams, retValue32);				
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	6979      	ldr	r1, [r7, #20]
 80107a2:	f7ff fdc9 	bl	8010338 <UINT32_TO_STREAM_f>
						break;
 80107a6:	e182      	b.n	8010aae <hci_event_handler+0x4ea>
						
					case HCI_EVNT_BSD_GETHOSTBYNAME:
						
						STREAM_TO_UINT32((char *)pucReceivedParams
 80107a8:	6a38      	ldr	r0, [r7, #32]
 80107aa:	f04f 0100 	mov.w	r1, #0
 80107ae:	f7ff fe31 	bl	8010414 <STREAM_TO_UINT32_f>
 80107b2:	4602      	mov	r2, r0
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	601a      	str	r2, [r3, #0]
						      ,GET_HOST_BY_NAME_RETVAL_OFFSET,*(unsigned long *)pRetParams);
						pRetParams = ((char *)pRetParams) + 4;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f103 0304 	add.w	r3, r3, #4
 80107be:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT32((char *)pucReceivedParams
 80107c0:	6a38      	ldr	r0, [r7, #32]
 80107c2:	f04f 0104 	mov.w	r1, #4
 80107c6:	f7ff fe25 	bl	8010414 <STREAM_TO_UINT32_f>
 80107ca:	4602      	mov	r2, r0
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	601a      	str	r2, [r3, #0]
									,GET_HOST_BY_NAME_ADDR_OFFSET,*(unsigned long *)pRetParams);					
						break;
 80107d0:	e16d      	b.n	8010aae <hci_event_handler+0x4ea>
						
					case HCI_EVNT_ACCEPT:
						{
							STREAM_TO_UINT32((char *)pucReceivedParams,ACCEPT_SD_OFFSET
 80107d2:	6a38      	ldr	r0, [r7, #32]
 80107d4:	f04f 0100 	mov.w	r1, #0
 80107d8:	f7ff fe1c 	bl	8010414 <STREAM_TO_UINT32_f>
 80107dc:	4602      	mov	r2, r0
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	601a      	str	r2, [r3, #0]
															 ,*(unsigned long *)pRetParams);
							pRetParams = ((char *)pRetParams) + 4;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f103 0304 	add.w	r3, r3, #4
 80107e8:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams
 80107ea:	6a38      	ldr	r0, [r7, #32]
 80107ec:	f04f 0104 	mov.w	r1, #4
 80107f0:	f7ff fe10 	bl	8010414 <STREAM_TO_UINT32_f>
 80107f4:	4602      	mov	r2, r0
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	601a      	str	r2, [r3, #0]
										,ACCEPT_RETURN_STATUS_OFFSET,*(unsigned long *)pRetParams);
              pRetParams = ((char *)pRetParams) + 4; 
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f103 0304 	add.w	r3, r3, #4
 8010800:	60fb      	str	r3, [r7, #12]
							
							//This argument returns in network order
							memcpy((unsigned char *)pRetParams, 
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	f103 0308 	add.w	r3, r3, #8
 8010808:	68f8      	ldr	r0, [r7, #12]
 801080a:	4619      	mov	r1, r3
 801080c:	f04f 0210 	mov.w	r2, #16
 8010810:	f001 fc4c 	bl	80120ac <memcpy>
								  pucReceivedParams + ACCEPT_ADDRESS__OFFSET, sizeof(sockaddr));	
							break;
 8010814:	e14b      	b.n	8010aae <hci_event_handler+0x4ea>
						}
						
					case HCI_EVNT_RECV:
					case HCI_EVNT_RECVFROM:
						{
							STREAM_TO_UINT32((char *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(unsigned long *)pRetParams);
 8010816:	6a38      	ldr	r0, [r7, #32]
 8010818:	f04f 0100 	mov.w	r1, #0
 801081c:	f7ff fdfa 	bl	8010414 <STREAM_TO_UINT32_f>
 8010820:	4602      	mov	r2, r0
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f103 0304 	add.w	r3, r3, #4
 801082c:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(unsigned long *)pRetParams);
 801082e:	6a38      	ldr	r0, [r7, #32]
 8010830:	f04f 0104 	mov.w	r1, #4
 8010834:	f7ff fdee 	bl	8010414 <STREAM_TO_UINT32_f>
 8010838:	4602      	mov	r2, r0
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f103 0304 	add.w	r3, r3, #4
 8010844:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SL_RECEIVE__FLAGS__OFFSET,*(unsigned long *)pRetParams);
 8010846:	6a38      	ldr	r0, [r7, #32]
 8010848:	f04f 0108 	mov.w	r1, #8
 801084c:	f7ff fde2 	bl	8010414 <STREAM_TO_UINT32_f>
 8010850:	4602      	mov	r2, r0
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	601a      	str	r2, [r3, #0]
							
							if(((tBsdReadReturnParams *)pRetParams)->iNumberOfBytes == ERROR_SOCKET_INACTIVE)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	f113 0f39 	cmn.w	r3, #57	; 0x39
 801085e:	f040 8125 	bne.w	8010aac <hci_event_handler+0x4e8>
							{
								set_socket_active_status(((tBsdReadReturnParams *)pRetParams)->iSocketDescriptor,SOCKET_STATUS_INACTIVE);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4618      	mov	r0, r3
 8010868:	f04f 0101 	mov.w	r1, #1
 801086c:	f000 fb64 	bl	8010f38 <set_socket_active_status>
							}
							break;
 8010870:	e11c      	b.n	8010aac <hci_event_handler+0x4e8>
						}
						
					case HCI_EVNT_SELECT:
						{ 
							STREAM_TO_UINT32((char *)pucReceivedParams,SELECT_STATUS_OFFSET,*(unsigned long *)pRetParams);
 8010872:	6a38      	ldr	r0, [r7, #32]
 8010874:	f04f 0100 	mov.w	r1, #0
 8010878:	f7ff fdcc 	bl	8010414 <STREAM_TO_UINT32_f>
 801087c:	4602      	mov	r2, r0
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f103 0304 	add.w	r3, r3, #4
 8010888:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SELECT_READFD_OFFSET,*(unsigned long *)pRetParams);
 801088a:	6a38      	ldr	r0, [r7, #32]
 801088c:	f04f 0104 	mov.w	r1, #4
 8010890:	f7ff fdc0 	bl	8010414 <STREAM_TO_UINT32_f>
 8010894:	4602      	mov	r2, r0
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f103 0304 	add.w	r3, r3, #4
 80108a0:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SELECT_WRITEFD_OFFSET,*(unsigned long *)pRetParams);
 80108a2:	6a38      	ldr	r0, [r7, #32]
 80108a4:	f04f 0108 	mov.w	r1, #8
 80108a8:	f7ff fdb4 	bl	8010414 <STREAM_TO_UINT32_f>
 80108ac:	4602      	mov	r2, r0
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f103 0304 	add.w	r3, r3, #4
 80108b8:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SELECT_EXFD_OFFSET,*(unsigned long *)pRetParams);			
 80108ba:	6a38      	ldr	r0, [r7, #32]
 80108bc:	f04f 010c 	mov.w	r1, #12
 80108c0:	f7ff fda8 	bl	8010414 <STREAM_TO_UINT32_f>
 80108c4:	4602      	mov	r2, r0
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	601a      	str	r2, [r3, #0]
							break;
 80108ca:	e0f0      	b.n	8010aae <hci_event_handler+0x4ea>
						}
						
					case HCI_CMND_GETSOCKOPT:
						
						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET,((tBsdGetSockOptReturnParams *)pRetParams)->iStatus);
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	f103 0304 	add.w	r3, r3, #4
 80108d2:	781a      	ldrb	r2, [r3, #0]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	711a      	strb	r2, [r3, #4]
						//This argument returns in network order
						memcpy((unsigned char *)pRetParams, pucReceivedParams, 4);
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	6a39      	ldr	r1, [r7, #32]
 80108dc:	f04f 0204 	mov.w	r2, #4
 80108e0:	f001 fbe4 	bl	80120ac <memcpy>
						break;
 80108e4:	e0e3      	b.n	8010aae <hci_event_handler+0x4ea>
						
					case HCI_CMND_WLAN_IOCTL_GET_SCAN_RESULTS:
						
						STREAM_TO_UINT32((char *)pucReceivedParams,GET_SCAN_RESULTS_TABlE_COUNT_OFFSET,*(unsigned long *)pRetParams);
 80108e6:	6a38      	ldr	r0, [r7, #32]
 80108e8:	f04f 0100 	mov.w	r1, #0
 80108ec:	f7ff fd92 	bl	8010414 <STREAM_TO_UINT32_f>
 80108f0:	4602      	mov	r2, r0
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	601a      	str	r2, [r3, #0]
						pRetParams = ((char *)pRetParams) + 4;   					
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f103 0304 	add.w	r3, r3, #4
 80108fc:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT32((char *)pucReceivedParams,GET_SCAN_RESULTS_SCANRESULT_STATUS_OFFSET,*(unsigned long *)pRetParams);
 80108fe:	6a38      	ldr	r0, [r7, #32]
 8010900:	f04f 0104 	mov.w	r1, #4
 8010904:	f7ff fd86 	bl	8010414 <STREAM_TO_UINT32_f>
 8010908:	4602      	mov	r2, r0
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	601a      	str	r2, [r3, #0]
						pRetParams = ((char *)pRetParams) + 4;                                                        					
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f103 0304 	add.w	r3, r3, #4
 8010914:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT16((char *)pucReceivedParams,GET_SCAN_RESULTS_ISVALID_TO_SSIDLEN_OFFSET,*(unsigned long *)pRetParams);
 8010916:	6a38      	ldr	r0, [r7, #32]
 8010918:	f04f 0108 	mov.w	r1, #8
 801091c:	f7ff fd5e 	bl	80103dc <STREAM_TO_UINT16_f>
 8010920:	4603      	mov	r3, r0
 8010922:	461a      	mov	r2, r3
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	601a      	str	r2, [r3, #0]
						pRetParams = ((char *)pRetParams) + 2;   					
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f103 0302 	add.w	r3, r3, #2
 801092e:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT16((char *)pucReceivedParams,GET_SCAN_RESULTS_FRAME_TIME_OFFSET,*(unsigned long *)pRetParams);
 8010930:	6a38      	ldr	r0, [r7, #32]
 8010932:	f04f 010a 	mov.w	r1, #10
 8010936:	f7ff fd51 	bl	80103dc <STREAM_TO_UINT16_f>
 801093a:	4603      	mov	r3, r0
 801093c:	461a      	mov	r2, r3
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	601a      	str	r2, [r3, #0]
						pRetParams = ((char *)pRetParams) + 2;  
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f103 0302 	add.w	r3, r3, #2
 8010948:	60fb      	str	r3, [r7, #12]
						memcpy((unsigned char *)pRetParams, (char *)(pucReceivedParams + GET_SCAN_RESULTS_FRAME_TIME_OFFSET + 2), GET_SCAN_RESULTS_SSID_MAC_LENGTH);	
 801094a:	6a3b      	ldr	r3, [r7, #32]
 801094c:	f103 030c 	add.w	r3, r3, #12
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	4619      	mov	r1, r3
 8010954:	f04f 0226 	mov.w	r2, #38	; 0x26
 8010958:	f001 fba8 	bl	80120ac <memcpy>
						break;
 801095c:	e0a7      	b.n	8010aae <hci_event_handler+0x4ea>
						break;
						
					case HCI_NETAPP_IPCONFIG:
						
						//Read IP address
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 801095e:	f04f 0400 	mov.w	r4, #0
 8010962:	e00d      	b.n	8010980 <hci_event_handler+0x3bc>
 8010964:	b223      	sxth	r3, r4
 8010966:	69fa      	ldr	r2, [r7, #28]
 8010968:	18d3      	adds	r3, r2, r3
 801096a:	781a      	ldrb	r2, [r3, #0]
 801096c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096e:	701a      	strb	r2, [r3, #0]
 8010970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010972:	f103 0301 	add.w	r3, r3, #1
 8010976:	62bb      	str	r3, [r7, #40]	; 0x28
 8010978:	4623      	mov	r3, r4
 801097a:	f103 0301 	add.w	r3, r3, #1
 801097e:	b29c      	uxth	r4, r3
 8010980:	b223      	sxth	r3, r4
 8010982:	2b03      	cmp	r3, #3
 8010984:	ddee      	ble.n	8010964 <hci_event_handler+0x3a0>
						RecvParams += 4;
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	f103 0304 	add.w	r3, r3, #4
 801098c:	61fb      	str	r3, [r7, #28]
						
						//Read subnet
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 801098e:	f04f 0400 	mov.w	r4, #0
 8010992:	e00d      	b.n	80109b0 <hci_event_handler+0x3ec>
 8010994:	b223      	sxth	r3, r4
 8010996:	69fa      	ldr	r2, [r7, #28]
 8010998:	18d3      	adds	r3, r2, r3
 801099a:	781a      	ldrb	r2, [r3, #0]
 801099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099e:	701a      	strb	r2, [r3, #0]
 80109a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a2:	f103 0301 	add.w	r3, r3, #1
 80109a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80109a8:	4623      	mov	r3, r4
 80109aa:	f103 0301 	add.w	r3, r3, #1
 80109ae:	b29c      	uxth	r4, r3
 80109b0:	b223      	sxth	r3, r4
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	ddee      	ble.n	8010994 <hci_event_handler+0x3d0>
						RecvParams += 4;
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	f103 0304 	add.w	r3, r3, #4
 80109bc:	61fb      	str	r3, [r7, #28]
						
						//Read default GW
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 80109be:	f04f 0400 	mov.w	r4, #0
 80109c2:	e00d      	b.n	80109e0 <hci_event_handler+0x41c>
 80109c4:	b223      	sxth	r3, r4
 80109c6:	69fa      	ldr	r2, [r7, #28]
 80109c8:	18d3      	adds	r3, r2, r3
 80109ca:	781a      	ldrb	r2, [r3, #0]
 80109cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ce:	701a      	strb	r2, [r3, #0]
 80109d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d2:	f103 0301 	add.w	r3, r3, #1
 80109d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80109d8:	4623      	mov	r3, r4
 80109da:	f103 0301 	add.w	r3, r3, #1
 80109de:	b29c      	uxth	r4, r3
 80109e0:	b223      	sxth	r3, r4
 80109e2:	2b03      	cmp	r3, #3
 80109e4:	ddee      	ble.n	80109c4 <hci_event_handler+0x400>
						RecvParams += 4;
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	f103 0304 	add.w	r3, r3, #4
 80109ec:	61fb      	str	r3, [r7, #28]
						
						//Read DHCP server                                          	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 80109ee:	f04f 0400 	mov.w	r4, #0
 80109f2:	e00d      	b.n	8010a10 <hci_event_handler+0x44c>
 80109f4:	b223      	sxth	r3, r4
 80109f6:	69fa      	ldr	r2, [r7, #28]
 80109f8:	18d3      	adds	r3, r2, r3
 80109fa:	781a      	ldrb	r2, [r3, #0]
 80109fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fe:	701a      	strb	r2, [r3, #0]
 8010a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a02:	f103 0301 	add.w	r3, r3, #1
 8010a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a08:	4623      	mov	r3, r4
 8010a0a:	f103 0301 	add.w	r3, r3, #1
 8010a0e:	b29c      	uxth	r4, r3
 8010a10:	b223      	sxth	r3, r4
 8010a12:	2b03      	cmp	r3, #3
 8010a14:	ddee      	ble.n	80109f4 <hci_event_handler+0x430>
						RecvParams += 4;
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	f103 0304 	add.w	r3, r3, #4
 8010a1c:	61fb      	str	r3, [r7, #28]
						
						//Read DNS server                                           
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 8010a1e:	f04f 0400 	mov.w	r4, #0
 8010a22:	e00d      	b.n	8010a40 <hci_event_handler+0x47c>
 8010a24:	b223      	sxth	r3, r4
 8010a26:	69fa      	ldr	r2, [r7, #28]
 8010a28:	18d3      	adds	r3, r2, r3
 8010a2a:	781a      	ldrb	r2, [r3, #0]
 8010a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2e:	701a      	strb	r2, [r3, #0]
 8010a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a32:	f103 0301 	add.w	r3, r3, #1
 8010a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a38:	4623      	mov	r3, r4
 8010a3a:	f103 0301 	add.w	r3, r3, #1
 8010a3e:	b29c      	uxth	r4, r3
 8010a40:	b223      	sxth	r3, r4
 8010a42:	2b03      	cmp	r3, #3
 8010a44:	ddee      	ble.n	8010a24 <hci_event_handler+0x460>
						RecvParams += 4;
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	f103 0304 	add.w	r3, r3, #4
 8010a4c:	61fb      	str	r3, [r7, #28]
						
						//Read Mac address                            	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_MAC_LENGTH);
 8010a4e:	f04f 0400 	mov.w	r4, #0
 8010a52:	e00d      	b.n	8010a70 <hci_event_handler+0x4ac>
 8010a54:	b223      	sxth	r3, r4
 8010a56:	69fa      	ldr	r2, [r7, #28]
 8010a58:	18d3      	adds	r3, r2, r3
 8010a5a:	781a      	ldrb	r2, [r3, #0]
 8010a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5e:	701a      	strb	r2, [r3, #0]
 8010a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a62:	f103 0301 	add.w	r3, r3, #1
 8010a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a68:	4623      	mov	r3, r4
 8010a6a:	f103 0301 	add.w	r3, r3, #1
 8010a6e:	b29c      	uxth	r4, r3
 8010a70:	b223      	sxth	r3, r4
 8010a72:	2b05      	cmp	r3, #5
 8010a74:	ddee      	ble.n	8010a54 <hci_event_handler+0x490>
						RecvParams += 6;
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	f103 0306 	add.w	r3, r3, #6
 8010a7c:	61fb      	str	r3, [r7, #28]
						
						//Read SSID
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_SSID_LENGTH);
 8010a7e:	f04f 0400 	mov.w	r4, #0
 8010a82:	e00d      	b.n	8010aa0 <hci_event_handler+0x4dc>
 8010a84:	b223      	sxth	r3, r4
 8010a86:	69fa      	ldr	r2, [r7, #28]
 8010a88:	18d3      	adds	r3, r2, r3
 8010a8a:	781a      	ldrb	r2, [r3, #0]
 8010a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8e:	701a      	strb	r2, [r3, #0]
 8010a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a92:	f103 0301 	add.w	r3, r3, #1
 8010a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a98:	4623      	mov	r3, r4
 8010a9a:	f103 0301 	add.w	r3, r3, #1
 8010a9e:	b29c      	uxth	r4, r3
 8010aa0:	b223      	sxth	r3, r4
 8010aa2:	2b1f      	cmp	r3, #31
 8010aa4:	ddee      	ble.n	8010a84 <hci_event_handler+0x4c0>
 8010aa6:	e002      	b.n	8010aae <hci_event_handler+0x4ea>
						pRetParams = ((char *)pRetParams) + 2;  
						memcpy((unsigned char *)pRetParams, (char *)(pucReceivedParams + GET_SCAN_RESULTS_FRAME_TIME_OFFSET + 2), GET_SCAN_RESULTS_SSID_MAC_LENGTH);	
						break;
						
					case HCI_CMND_SIMPLE_LINK_START:
						break;
 8010aa8:	bf00      	nop
 8010aaa:	e000      	b.n	8010aae <hci_event_handler+0x4ea>
							
							if(((tBsdReadReturnParams *)pRetParams)->iNumberOfBytes == ERROR_SOCKET_INACTIVE)
							{
								set_socket_active_status(((tBsdReadReturnParams *)pRetParams)->iSocketDescriptor,SOCKET_STATUS_INACTIVE);
							}
							break;
 8010aac:	bf00      	nop
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_SSID_LENGTH);
	
					}
				}
				
				if (usReceivedEventOpcode == tSLInformation.usRxEventOpcode)
 8010aae:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ab6:	881b      	ldrh	r3, [r3, #0]
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d141      	bne.n	8010b44 <hci_event_handler+0x580>
				{
					tSLInformation.usRxEventOpcode = 0;
 8010ac0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ac8:	f04f 0200 	mov.w	r2, #0
 8010acc:	801a      	strh	r2, [r3, #0]
 8010ace:	e039      	b.n	8010b44 <hci_event_handler+0x580>
				}
			}
			else
			{				
				pucReceivedParams = pucReceivedData;
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	623b      	str	r3, [r7, #32]
				STREAM_TO_UINT8((char *)pucReceivedData, HCI_PACKET_ARGSIZE_OFFSET, ucArgsize);
 8010ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad6:	f103 0302 	add.w	r3, r3, #2
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	74fb      	strb	r3, [r7, #19]
				
				STREAM_TO_UINT16((char *)pucReceivedData, HCI_PACKET_LENGTH_OFFSET, usLength);
 8010ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ae0:	f04f 0103 	mov.w	r1, #3
 8010ae4:	f7ff fc7a 	bl	80103dc <STREAM_TO_UINT16_f>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	837b      	strh	r3, [r7, #26]

				// Data received: note that the only case where from and from length 
				// are not null is in recv from, so fill the args accordingly
				if (from)
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d014      	beq.n	8010b1c <hci_event_handler+0x558>
				{
					STREAM_TO_UINT32((char *)(pucReceivedData + HCI_DATA_HEADER_SIZE), BSD_RECV_FROM_FROMLEN_OFFSET, *(unsigned long *)fromlen);
 8010af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af4:	f103 0305 	add.w	r3, r3, #5
 8010af8:	4618      	mov	r0, r3
 8010afa:	f04f 0104 	mov.w	r1, #4
 8010afe:	f7ff fc89 	bl	8010414 <STREAM_TO_UINT32_f>
 8010b02:	4602      	mov	r2, r0
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	601a      	str	r2, [r3, #0]
					memcpy(from, (pucReceivedData + HCI_DATA_HEADER_SIZE + BSD_RECV_FROM_FROM_OFFSET) ,*fromlen);
 8010b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0a:	f103 0215 	add.w	r2, r3, #21
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	68b8      	ldr	r0, [r7, #8]
 8010b14:	4611      	mov	r1, r2
 8010b16:	461a      	mov	r2, r3
 8010b18:	f001 fac8 	bl	80120ac <memcpy>
				}
				
				memcpy(pRetParams, pucReceivedParams + HCI_DATA_HEADER_SIZE + ucArgsize,
 8010b1c:	7cfb      	ldrb	r3, [r7, #19]
 8010b1e:	f103 0305 	add.w	r3, r3, #5
 8010b22:	6a3a      	ldr	r2, [r7, #32]
 8010b24:	18d2      	adds	r2, r2, r3
							 usLength - ucArgsize);
 8010b26:	8b79      	ldrh	r1, [r7, #26]
 8010b28:	7cfb      	ldrb	r3, [r7, #19]
 8010b2a:	1acb      	subs	r3, r1, r3
				{
					STREAM_TO_UINT32((char *)(pucReceivedData + HCI_DATA_HEADER_SIZE), BSD_RECV_FROM_FROMLEN_OFFSET, *(unsigned long *)fromlen);
					memcpy(from, (pucReceivedData + HCI_DATA_HEADER_SIZE + BSD_RECV_FROM_FROM_OFFSET) ,*fromlen);
				}
				
				memcpy(pRetParams, pucReceivedParams + HCI_DATA_HEADER_SIZE + ucArgsize,
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	4611      	mov	r1, r2
 8010b30:	461a      	mov	r2, r3
 8010b32:	f001 fabb 	bl	80120ac <memcpy>
							 usLength - ucArgsize);
				
				tSLInformation.usRxDataPending = 0;
 8010b36:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b3e:	f04f 0200 	mov.w	r2, #0
 8010b42:	86da      	strh	r2, [r3, #54]	; 0x36
			}
		
			tSLInformation.usEventOrDataReceived = 0;
 8010b44:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b4c:	f04f 0200 	mov.w	r2, #0
 8010b50:	805a      	strh	r2, [r3, #2]
			
			SpiResumeSpi();
 8010b52:	f7f9 fb5b 	bl	800a20c <SpiResumeSpi>
			
			// Since we are going to TX - we need to handle this event after the 
			// ResumeSPi since we need interrupts
			if ((*pucReceivedData == HCI_TYPE_EVNT) &&
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	2b04      	cmp	r3, #4
 8010b5c:	d106      	bne.n	8010b6c <hci_event_handler+0x5a8>
 8010b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b64:	d102      	bne.n	8010b6c <hci_event_handler+0x5a8>
					(usReceivedEventOpcode == HCI_EVNT_PATCHES_REQ))
			{
				hci_unsol_handle_patch_request((char *)pucReceivedData);
 8010b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b68:	f7ff fc80 	bl	801046c <hci_unsol_handle_patch_request>
			}
			
			if ((tSLInformation.usRxEventOpcode == 0) && (tSLInformation.usRxDataPending == 0))
 8010b6c:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f47f ad2d 	bne.w	80105d8 <hci_event_handler+0x14>
 8010b7e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f47f ad24 	bne.w	80105d8 <hci_event_handler+0x14>
			{
				return NULL;
 8010b90:	f04f 0300 	mov.w	r3, #0
			}	
		}
	}

}
 8010b94:	4618      	mov	r0, r3
 8010b96:	f107 0734 	add.w	r7, r7, #52	; 0x34
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd90      	pop	{r4, r7, pc}
 8010b9e:	bf00      	nop

08010ba0 <hci_unsol_event_handler>:
//!  @brief              Handle unsolicited events
//
//*****************************************************************************
long
hci_unsol_event_handler(char *event_hdr)
{
 8010ba0:	b590      	push	{r4, r7, lr}
 8010ba2:	b093      	sub	sp, #76	; 0x4c
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
	char * data = NULL;
 8010ba8:	f04f 0300 	mov.w	r3, #0
 8010bac:	643b      	str	r3, [r7, #64]	; 0x40
	long event_type;
	unsigned long NumberOfReleasedPackets;
	unsigned long NumberOfSentPackets;
	
	STREAM_TO_UINT16(event_hdr, HCI_EVENT_OPCODE_OFFSET,event_type);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f04f 0101 	mov.w	r1, #1
 8010bb4:	f7ff fc12 	bl	80103dc <STREAM_TO_UINT16_f>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	63fb      	str	r3, [r7, #60]	; 0x3c
	
	if (event_type & HCI_EVNT_UNSOL_BASE)
 8010bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d02e      	beq.n	8010c24 <hci_unsol_event_handler+0x84>
	{
		switch(event_type)
 8010bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bc8:	f5b3 4f82 	cmp.w	r3, #16640	; 0x4100
 8010bcc:	d12a      	bne.n	8010c24 <hci_unsol_event_handler+0x84>
		{
	
		case HCI_EVNT_DATA_UNSOL_FREE_BUFF:
			{
				hci_event_unsol_flowcontrol_handler(event_hdr);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 f9ec 	bl	8010fac <hci_event_unsol_flowcontrol_handler>
				
				NumberOfReleasedPackets = tSLInformation.NumberOfReleasedPackets;
 8010bd4:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bde:	63bb      	str	r3, [r7, #56]	; 0x38
				NumberOfSentPackets = tSLInformation.NumberOfSentPackets;
 8010be0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bea:	637b      	str	r3, [r7, #52]	; 0x34
								
				if (NumberOfReleasedPackets == NumberOfSentPackets)
 8010bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d114      	bne.n	8010c1e <hci_unsol_event_handler+0x7e>
				{
					if (tSLInformation.InformHostOnTxComplete)
 8010bf4:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c00:	b2db      	uxtb	r3, r3
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d00b      	beq.n	8010c1e <hci_unsol_event_handler+0x7e>
					{
						tSLInformation.sWlanCB(HCI_EVENT_CC3000_CAN_SHUT_DOWN, NULL, 0);
 8010c06:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c0e:	699b      	ldr	r3, [r3, #24]
 8010c10:	f04f 0099 	mov.w	r0, #153	; 0x99
 8010c14:	f04f 0100 	mov.w	r1, #0
 8010c18:	f04f 0200 	mov.w	r2, #0
 8010c1c:	4798      	blx	r3
					}
				}				
				return 1;
 8010c1e:	f04f 0301 	mov.w	r3, #1
 8010c22:	e154      	b.n	8010ece <hci_unsol_event_handler+0x32e>
				
			}
		}
	}
	
	if(event_type & HCI_EVNT_WLAN_UNSOL_BASE)
 8010c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	f000 812b 	beq.w	8010e86 <hci_unsol_event_handler+0x2e6>
	{           
		switch(event_type)
 8010c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c32:	f248 0210 	movw	r2, #32784	; 0x8010
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d03b      	beq.n	8010cb2 <hci_unsol_event_handler+0x112>
 8010c3a:	f248 0210 	movw	r2, #32784	; 0x8010
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	dc0d      	bgt.n	8010c5e <hci_unsol_event_handler+0xbe>
 8010c42:	f248 0201 	movw	r2, #32769	; 0x8001
 8010c46:	4293      	cmp	r3, r2
 8010c48:	f2c0 8110 	blt.w	8010e6c <hci_unsol_event_handler+0x2cc>
 8010c4c:	f248 0202 	movw	r2, #32770	; 0x8002
 8010c50:	4293      	cmp	r3, r2
 8010c52:	dd1a      	ble.n	8010c8a <hci_unsol_event_handler+0xea>
 8010c54:	f248 0204 	movw	r2, #32772	; 0x8004
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d016      	beq.n	8010c8a <hci_unsol_event_handler+0xea>
 8010c5c:	e106      	b.n	8010e6c <hci_unsol_event_handler+0x2cc>
 8010c5e:	f248 0280 	movw	r2, #32896	; 0x8080
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d011      	beq.n	8010c8a <hci_unsol_event_handler+0xea>
 8010c66:	f248 0280 	movw	r2, #32896	; 0x8080
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	dc05      	bgt.n	8010c7a <hci_unsol_event_handler+0xda>
 8010c6e:	f248 0240 	movw	r2, #32832	; 0x8040
 8010c72:	4293      	cmp	r3, r2
 8010c74:	f000 80ac 	beq.w	8010dd0 <hci_unsol_event_handler+0x230>
 8010c78:	e0f8      	b.n	8010e6c <hci_unsol_event_handler+0x2cc>
 8010c7a:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8010c7e:	d004      	beq.n	8010c8a <hci_unsol_event_handler+0xea>
 8010c80:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 8010c84:	f000 80df 	beq.w	8010e46 <hci_unsol_event_handler+0x2a6>
 8010c88:	e0f0      	b.n	8010e6c <hci_unsol_event_handler+0x2cc>
		case HCI_EVNT_WLAN_UNSOL_CONNECT:
		case HCI_EVNT_WLAN_UNSOL_DISCONNECT:
		case HCI_EVNT_WLAN_UNSOL_INIT:
		case HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE:
			
			if( tSLInformation.sWlanCB )
 8010c8a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010c92:	699b      	ldr	r3, [r3, #24]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f000 80ec 	beq.w	8010e72 <hci_unsol_event_handler+0x2d2>
			{
				tSLInformation.sWlanCB(event_type, 0, 0);
 8010c9a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010ca2:	699b      	ldr	r3, [r3, #24]
 8010ca4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ca6:	f04f 0100 	mov.w	r1, #0
 8010caa:	f04f 0200 	mov.w	r2, #0
 8010cae:	4798      	blx	r3
			}
			break;
 8010cb0:	e0df      	b.n	8010e72 <hci_unsol_event_handler+0x2d2>
			
		case HCI_EVNT_WLAN_UNSOL_DHCP:
			{
				tNetappDhcpParams params;
				unsigned char *recParams = (unsigned char *)&params;			
 8010cb2:	f107 0320 	add.w	r3, r7, #32
 8010cb6:	647b      	str	r3, [r7, #68]	; 0x44
				data = (char*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f103 0305 	add.w	r3, r3, #5
 8010cbe:	643b      	str	r3, [r7, #64]	; 0x40
				
				//Read IP address
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
 8010cc0:	f04f 0400 	mov.w	r4, #0
 8010cc4:	e00d      	b.n	8010ce2 <hci_unsol_event_handler+0x142>
 8010cc6:	b223      	sxth	r3, r4
 8010cc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010cca:	18d3      	adds	r3, r2, r3
 8010ccc:	781a      	ldrb	r2, [r3, #0]
 8010cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cd0:	701a      	strb	r2, [r3, #0]
 8010cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cd4:	f103 0301 	add.w	r3, r3, #1
 8010cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8010cda:	4623      	mov	r3, r4
 8010cdc:	f103 0301 	add.w	r3, r3, #1
 8010ce0:	b29c      	uxth	r4, r3
 8010ce2:	b223      	sxth	r3, r4
 8010ce4:	2b03      	cmp	r3, #3
 8010ce6:	ddee      	ble.n	8010cc6 <hci_unsol_event_handler+0x126>
				data += 4;
 8010ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cea:	f103 0304 	add.w	r3, r3, #4
 8010cee:	643b      	str	r3, [r7, #64]	; 0x40
				//Read subnet
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
 8010cf0:	f04f 0400 	mov.w	r4, #0
 8010cf4:	e00d      	b.n	8010d12 <hci_unsol_event_handler+0x172>
 8010cf6:	b223      	sxth	r3, r4
 8010cf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010cfa:	18d3      	adds	r3, r2, r3
 8010cfc:	781a      	ldrb	r2, [r3, #0]
 8010cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d00:	701a      	strb	r2, [r3, #0]
 8010d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d04:	f103 0301 	add.w	r3, r3, #1
 8010d08:	647b      	str	r3, [r7, #68]	; 0x44
 8010d0a:	4623      	mov	r3, r4
 8010d0c:	f103 0301 	add.w	r3, r3, #1
 8010d10:	b29c      	uxth	r4, r3
 8010d12:	b223      	sxth	r3, r4
 8010d14:	2b03      	cmp	r3, #3
 8010d16:	ddee      	ble.n	8010cf6 <hci_unsol_event_handler+0x156>
				data += 4;
 8010d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d1a:	f103 0304 	add.w	r3, r3, #4
 8010d1e:	643b      	str	r3, [r7, #64]	; 0x40
				//Read default GW
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
 8010d20:	f04f 0400 	mov.w	r4, #0
 8010d24:	e00d      	b.n	8010d42 <hci_unsol_event_handler+0x1a2>
 8010d26:	b223      	sxth	r3, r4
 8010d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d2a:	18d3      	adds	r3, r2, r3
 8010d2c:	781a      	ldrb	r2, [r3, #0]
 8010d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d30:	701a      	strb	r2, [r3, #0]
 8010d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d34:	f103 0301 	add.w	r3, r3, #1
 8010d38:	647b      	str	r3, [r7, #68]	; 0x44
 8010d3a:	4623      	mov	r3, r4
 8010d3c:	f103 0301 	add.w	r3, r3, #1
 8010d40:	b29c      	uxth	r4, r3
 8010d42:	b223      	sxth	r3, r4
 8010d44:	2b03      	cmp	r3, #3
 8010d46:	ddee      	ble.n	8010d26 <hci_unsol_event_handler+0x186>
				data += 4;
 8010d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d4a:	f103 0304 	add.w	r3, r3, #4
 8010d4e:	643b      	str	r3, [r7, #64]	; 0x40
				//Read DHCP server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);     
 8010d50:	f04f 0400 	mov.w	r4, #0
 8010d54:	e00d      	b.n	8010d72 <hci_unsol_event_handler+0x1d2>
 8010d56:	b223      	sxth	r3, r4
 8010d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d5a:	18d3      	adds	r3, r2, r3
 8010d5c:	781a      	ldrb	r2, [r3, #0]
 8010d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d60:	701a      	strb	r2, [r3, #0]
 8010d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d64:	f103 0301 	add.w	r3, r3, #1
 8010d68:	647b      	str	r3, [r7, #68]	; 0x44
 8010d6a:	4623      	mov	r3, r4
 8010d6c:	f103 0301 	add.w	r3, r3, #1
 8010d70:	b29c      	uxth	r4, r3
 8010d72:	b223      	sxth	r3, r4
 8010d74:	2b03      	cmp	r3, #3
 8010d76:	ddee      	ble.n	8010d56 <hci_unsol_event_handler+0x1b6>
				data += 4;
 8010d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d7a:	f103 0304 	add.w	r3, r3, #4
 8010d7e:	643b      	str	r3, [r7, #64]	; 0x40
				//Read DNS server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
 8010d80:	f04f 0400 	mov.w	r4, #0
 8010d84:	e00d      	b.n	8010da2 <hci_unsol_event_handler+0x202>
 8010d86:	b223      	sxth	r3, r4
 8010d88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d8a:	18d3      	adds	r3, r2, r3
 8010d8c:	781a      	ldrb	r2, [r3, #0]
 8010d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d90:	701a      	strb	r2, [r3, #0]
 8010d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d94:	f103 0301 	add.w	r3, r3, #1
 8010d98:	647b      	str	r3, [r7, #68]	; 0x44
 8010d9a:	4623      	mov	r3, r4
 8010d9c:	f103 0301 	add.w	r3, r3, #1
 8010da0:	b29c      	uxth	r4, r3
 8010da2:	b223      	sxth	r3, r4
 8010da4:	2b03      	cmp	r3, #3
 8010da6:	ddee      	ble.n	8010d86 <hci_unsol_event_handler+0x1e6>
					
				if( tSLInformation.sWlanCB )
 8010da8:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d05f      	beq.n	8010e76 <hci_unsol_event_handler+0x2d6>
				{
					tSLInformation.sWlanCB(event_type, (char *)&params, sizeof(params));
 8010db6:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010dbe:	699b      	ldr	r3, [r3, #24]
 8010dc0:	f107 0220 	add.w	r2, r7, #32
 8010dc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	f04f 0214 	mov.w	r2, #20
 8010dcc:	4798      	blx	r3
				}
			}
			break;
 8010dce:	e052      	b.n	8010e76 <hci_unsol_event_handler+0x2d6>
			
		case HCI_EVNT_WLAN_ASYNC_PING_REPORT:
			{
				netapp_pingreport_args_t params;			
				data = (char*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f103 0305 	add.w	r3, r3, #5
 8010dd6:	643b      	str	r3, [r7, #64]	; 0x40
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
 8010dd8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010dda:	f04f 0100 	mov.w	r1, #0
 8010dde:	f7ff fb19 	bl	8010414 <STREAM_TO_UINT32_f>
 8010de2:	4603      	mov	r3, r0
 8010de4:	60fb      	str	r3, [r7, #12]
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
 8010de6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010de8:	f04f 0104 	mov.w	r1, #4
 8010dec:	f7ff fb12 	bl	8010414 <STREAM_TO_UINT32_f>
 8010df0:	4603      	mov	r3, r0
 8010df2:	613b      	str	r3, [r7, #16]
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
 8010df4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010df6:	f04f 0108 	mov.w	r1, #8
 8010dfa:	f7ff fb0b 	bl	8010414 <STREAM_TO_UINT32_f>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	617b      	str	r3, [r7, #20]
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
 8010e02:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010e04:	f04f 010c 	mov.w	r1, #12
 8010e08:	f7ff fb04 	bl	8010414 <STREAM_TO_UINT32_f>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	61bb      	str	r3, [r7, #24]
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
 8010e10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010e12:	f04f 0110 	mov.w	r1, #16
 8010e16:	f7ff fafd 	bl	8010414 <STREAM_TO_UINT32_f>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	61fb      	str	r3, [r7, #28]
				
				if( tSLInformation.sWlanCB )
 8010e1e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e26:	699b      	ldr	r3, [r3, #24]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d026      	beq.n	8010e7a <hci_unsol_event_handler+0x2da>
				{
					tSLInformation.sWlanCB(event_type, (char *)&params, sizeof(params));
 8010e2c:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e34:	699b      	ldr	r3, [r3, #24]
 8010e36:	f107 020c 	add.w	r2, r7, #12
 8010e3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	f04f 0214 	mov.w	r2, #20
 8010e42:	4798      	blx	r3
				}
			}
			break;
 8010e44:	e019      	b.n	8010e7a <hci_unsol_event_handler+0x2da>
		case HCI_EVNT_BSD_TCP_CLOSE_WAIT:
			{
				if( tSLInformation.sWlanCB )
 8010e46:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e4e:	699b      	ldr	r3, [r3, #24]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d014      	beq.n	8010e7e <hci_unsol_event_handler+0x2de>
				{
					tSLInformation.sWlanCB(event_type, NULL, 0);
 8010e54:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e5c:	699b      	ldr	r3, [r3, #24]
 8010e5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e60:	f04f 0100 	mov.w	r1, #0
 8010e64:	f04f 0200 	mov.w	r2, #0
 8010e68:	4798      	blx	r3
				}
			}
			break;
 8010e6a:	e008      	b.n	8010e7e <hci_unsol_event_handler+0x2de>
			
		//'default' case which means "event not supported" 	
		default: 
			return (0);
 8010e6c:	f04f 0300 	mov.w	r3, #0
 8010e70:	e02d      	b.n	8010ece <hci_unsol_event_handler+0x32e>
			
			if( tSLInformation.sWlanCB )
			{
				tSLInformation.sWlanCB(event_type, 0, 0);
			}
			break;
 8010e72:	bf00      	nop
 8010e74:	e004      	b.n	8010e80 <hci_unsol_event_handler+0x2e0>
				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, (char *)&params, sizeof(params));
				}
			}
			break;
 8010e76:	bf00      	nop
 8010e78:	e002      	b.n	8010e80 <hci_unsol_event_handler+0x2e0>
				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, (char *)&params, sizeof(params));
				}
			}
			break;
 8010e7a:	bf00      	nop
 8010e7c:	e000      	b.n	8010e80 <hci_unsol_event_handler+0x2e0>
				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, NULL, 0);
				}
			}
			break;
 8010e7e:	bf00      	nop
			
		//'default' case which means "event not supported" 	
		default: 
			return (0);
		}
		return(1);
 8010e80:	f04f 0301 	mov.w	r3, #1
 8010e84:	e023      	b.n	8010ece <hci_unsol_event_handler+0x32e>
	}
	
	if ((event_type == HCI_EVNT_SEND) || (event_type == HCI_EVNT_SENDTO)
 8010e86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e88:	f241 0303 	movw	r3, #4099	; 0x1003
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d009      	beq.n	8010ea4 <hci_unsol_event_handler+0x304>
 8010e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e92:	f241 030f 	movw	r3, #4111	; 0x100f
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d004      	beq.n	8010ea4 <hci_unsol_event_handler+0x304>
			|| (event_type == HCI_EVNT_WRITE))
 8010e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010e9c:	f241 030e 	movw	r3, #4110	; 0x100e
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d112      	bne.n	8010eca <hci_unsol_event_handler+0x32a>
	{
		// The only synchronous event that can come from SL device in form of 
		// command complete is "Command Complete" on data sent, in case SL device 
		// was unable to transmit
		STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, tSLInformation.slTransmitDataError);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f103 0304 	add.w	r3, r3, #4
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	461a      	mov	r2, r3
 8010eae:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010eb6:	62da      	str	r2, [r3, #44]	; 0x2c
		update_socket_active_status(M_BSD_RESP_PARAMS_OFFSET(event_hdr));
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f103 0305 	add.w	r3, r3, #5
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f000 f8ea 	bl	8011098 <update_socket_active_status>
		
		return (1);
 8010ec4:	f04f 0301 	mov.w	r3, #1
 8010ec8:	e001      	b.n	8010ece <hci_unsol_event_handler+0x32e>
	}
	
	return(0);
 8010eca:	f04f 0300 	mov.w	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f107 074c 	add.w	r7, r7, #76	; 0x4c
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd90      	pop	{r4, r7, pc}

08010ed8 <hci_unsolicited_event_handler>:
//!                  corresponding event handler.
//
//*****************************************************************************
long
hci_unsolicited_event_handler(void)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
	unsigned long   res = 0;
 8010ede:	f04f 0300 	mov.w	r3, #0
 8010ee2:	607b      	str	r3, [r7, #4]
	unsigned char *pucReceivedData;
	
	if (tSLInformation.usEventOrDataReceived != 0)
 8010ee4:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010eec:	885b      	ldrh	r3, [r3, #2]
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d01b      	beq.n	8010f2c <hci_unsolicited_event_handler+0x54>
	{
		pucReceivedData = (tSLInformation.pucReceivedData);
 8010ef4:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	603b      	str	r3, [r7, #0]
		
		if (*pucReceivedData == HCI_TYPE_EVNT)
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b04      	cmp	r3, #4
 8010f06:	d111      	bne.n	8010f2c <hci_unsolicited_event_handler+0x54>
		{			
			
			// In case unsolicited event received - here the handling finished
			if (hci_unsol_event_handler((char *)pucReceivedData) == 1)
 8010f08:	6838      	ldr	r0, [r7, #0]
 8010f0a:	f7ff fe49 	bl	8010ba0 <hci_unsol_event_handler>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d10b      	bne.n	8010f2c <hci_unsolicited_event_handler+0x54>
			{
				
				// There was an unsolicited event received - we can release the buffer
				// and clean the event received 
				tSLInformation.usEventOrDataReceived = 0;
 8010f14:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8010f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f1c:	f04f 0200 	mov.w	r2, #0
 8010f20:	805a      	strh	r2, [r3, #2]
				
				res = 1;
 8010f22:	f04f 0301 	mov.w	r3, #1
 8010f26:	607b      	str	r3, [r7, #4]
				SpiResumeSpi();
 8010f28:	f7f9 f970 	bl	800a20c <SpiResumeSpi>
			}
		}
	}
	
	return res;
 8010f2c:	687b      	ldr	r3, [r7, #4]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f107 0708 	add.w	r7, r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <set_socket_active_status>:
//!  @brief          Check if the socket ID and status are valid and set 
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(long Sd, long Status)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	db2b      	blt.n	8010fa0 <set_socket_active_status+0x68>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2b07      	cmp	r3, #7
 8010f4c:	dc28      	bgt.n	8010fa0 <set_socket_active_status+0x68>
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <set_socket_active_status+0x22>
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d122      	bne.n	8010fa0 <set_socket_active_status+0x68>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
 8010f5a:	f04f 0201 	mov.w	r2, #1
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	fa02 f303 	lsl.w	r3, r2, r3
 8010f64:	ea6f 0303 	mvn.w	r3, r3
 8010f68:	461a      	mov	r2, r3
 8010f6a:	f240 1360 	movw	r3, #352	; 0x160
 8010f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	401a      	ands	r2, r3
 8010f76:	f240 1360 	movw	r3, #352	; 0x160
 8010f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f7e:	601a      	str	r2, [r3, #0]
		socket_active_status |= (Status << Sd); /* set new socket's mask */
 8010f80:	683a      	ldr	r2, [r7, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	fa02 f303 	lsl.w	r3, r2, r3
 8010f88:	461a      	mov	r2, r3
 8010f8a:	f240 1360 	movw	r3, #352	; 0x160
 8010f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	431a      	orrs	r2, r3
 8010f96:	f240 1360 	movw	r3, #352	; 0x160
 8010f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010f9e:	601a      	str	r2, [r3, #0]
	}
}
 8010fa0:	f107 070c 	add.w	r7, r7, #12
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bc80      	pop	{r7}
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop

08010fac <hci_event_unsol_flowcontrol_handler>:
//!					 number of free buffer in the SL device.
//
//*****************************************************************************
long
hci_event_unsol_flowcontrol_handler(char *pEvent)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b088      	sub	sp, #32
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
	
	long temp, value;
	unsigned short i;
	unsigned short  pusNumberOfHandles=0;
 8010fb4:	f04f 0300 	mov.w	r3, #0
 8010fb8:	827b      	strh	r3, [r7, #18]
	char *pReadPayload;
	
	STREAM_TO_UINT16((char *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f04f 0105 	mov.w	r1, #5
 8010fc0:	f7ff fa0c 	bl	80103dc <STREAM_TO_UINT16_f>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	827b      	strh	r3, [r7, #18]
	pReadPayload = ((char *)pEvent +
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f103 0307 	add.w	r3, r3, #7
 8010fce:	617b      	str	r3, [r7, #20]
									HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
	temp = 0;
 8010fd0:	f04f 0300 	mov.w	r3, #0
 8010fd4:	61fb      	str	r3, [r7, #28]
	
	for(i = 0; i < pusNumberOfHandles ; i++)
 8010fd6:	f04f 0300 	mov.w	r3, #0
 8010fda:	837b      	strh	r3, [r7, #26]
 8010fdc:	e012      	b.n	8011004 <hci_event_unsol_flowcontrol_handler+0x58>
	{
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
 8010fde:	6978      	ldr	r0, [r7, #20]
 8010fe0:	f04f 0102 	mov.w	r1, #2
 8010fe4:	f7ff f9fa 	bl	80103dc <STREAM_TO_UINT16_f>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	60fb      	str	r3, [r7, #12]
		temp += value;
 8010fec:	69fa      	ldr	r2, [r7, #28]
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	18d3      	adds	r3, r2, r3
 8010ff2:	61fb      	str	r3, [r7, #28]
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	f103 0304 	add.w	r3, r3, #4
 8010ffa:	617b      	str	r3, [r7, #20]
	STREAM_TO_UINT16((char *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
	pReadPayload = ((char *)pEvent +
									HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
	temp = 0;
	
	for(i = 0; i < pusNumberOfHandles ; i++)
 8010ffc:	8b7b      	ldrh	r3, [r7, #26]
 8010ffe:	f103 0301 	add.w	r3, r3, #1
 8011002:	837b      	strh	r3, [r7, #26]
 8011004:	8b7a      	ldrh	r2, [r7, #26]
 8011006:	8a7b      	ldrh	r3, [r7, #18]
 8011008:	429a      	cmp	r2, r3
 801100a:	d3e8      	bcc.n	8010fde <hci_event_unsol_flowcontrol_handler+0x32>
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
		temp += value;
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
	}
	
	tSLInformation.usNumberOfFreeBuffers += temp;
 801100c:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011010:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011014:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011016:	b29a      	uxth	r2, r3
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	b29b      	uxth	r3, r3
 801101c:	18d3      	adds	r3, r2, r3
 801101e:	b29a      	uxth	r2, r3
 8011020:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011024:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011028:	861a      	strh	r2, [r3, #48]	; 0x30
	tSLInformation.NumberOfReleasedPackets += temp;
 801102a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801102e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011034:	69fb      	ldr	r3, [r7, #28]
 8011036:	18d2      	adds	r2, r2, r3
 8011038:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801103c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011040:	63da      	str	r2, [r3, #60]	; 0x3c
	
	return(ESUCCESS);
 8011042:	f04f 0300 	mov.w	r3, #0
}
 8011046:	4618      	mov	r0, r3
 8011048:	f107 0720 	add.w	r7, r7, #32
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <get_socket_active_status>:
//
//*****************************************************************************

long
get_socket_active_status(long Sd)
{
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
	if(M_IS_VALID_SD(Sd))
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	db14      	blt.n	8011088 <get_socket_active_status+0x38>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2b07      	cmp	r3, #7
 8011062:	dc11      	bgt.n	8011088 <get_socket_active_status+0x38>
	{
		return (socket_active_status & (1 << Sd)) ? SOCKET_STATUS_INACTIVE : SOCKET_STATUS_ACTIVE;
 8011064:	f04f 0201 	mov.w	r2, #1
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	fa02 f303 	lsl.w	r3, r2, r3
 801106e:	461a      	mov	r2, r3
 8011070:	f240 1360 	movw	r3, #352	; 0x160
 8011074:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	4013      	ands	r3, r2
 801107c:	2b00      	cmp	r3, #0
 801107e:	bf0c      	ite	eq
 8011080:	2300      	moveq	r3, #0
 8011082:	2301      	movne	r3, #1
 8011084:	b2db      	uxtb	r3, r3
 8011086:	e001      	b.n	801108c <get_socket_active_status+0x3c>
	}
	return SOCKET_STATUS_INACTIVE;
 8011088:	f04f 0301 	mov.w	r3, #1
}
 801108c:	4618      	mov	r0, r3
 801108e:	f107 070c 	add.w	r7, r7, #12
 8011092:	46bd      	mov	sp, r7
 8011094:	bc80      	pop	{r7}
 8011096:	4770      	bx	lr

08011098 <update_socket_active_status>:
//!  @brief  Retrieve socket status
//
//*****************************************************************************
void
update_socket_active_status(char *resp_params)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
	long status, sd;
	
	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_SOCKET_OFFSET,sd);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f04f 0100 	mov.w	r1, #0
 80110a6:	f7ff f9b5 	bl	8010414 <STREAM_TO_UINT32_f>
 80110aa:	4603      	mov	r3, r0
 80110ac:	60fb      	str	r3, [r7, #12]
	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_STATUS_OFFSET,status);
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f04f 0104 	mov.w	r1, #4
 80110b4:	f7ff f9ae 	bl	8010414 <STREAM_TO_UINT32_f>
 80110b8:	4603      	mov	r3, r0
 80110ba:	60bb      	str	r3, [r7, #8]
	
	if(ERROR_SOCKET_INACTIVE == status)
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	f113 0f39 	cmn.w	r3, #57	; 0x39
 80110c2:	d104      	bne.n	80110ce <update_socket_active_status+0x36>
	{
		set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
 80110c4:	68f8      	ldr	r0, [r7, #12]
 80110c6:	f04f 0101 	mov.w	r1, #1
 80110ca:	f7ff ff35 	bl	8010f38 <set_socket_active_status>
	}
}
 80110ce:	f107 0710 	add.w	r7, r7, #16
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop

080110d8 <SimpleLinkWaitEvent>:
//
//*****************************************************************************

void 
SimpleLinkWaitEvent(unsigned short usOpcode, void *pRetParams)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	4603      	mov	r3, r0
 80110e0:	6039      	str	r1, [r7, #0]
 80110e2:	80fb      	strh	r3, [r7, #6]
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction
	tSLInformation.usRxEventOpcode = usOpcode;
 80110e4:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80110e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80110ec:	88fa      	ldrh	r2, [r7, #6]
 80110ee:	801a      	strh	r2, [r3, #0]
	hci_event_handler(pRetParams, 0, 0);
 80110f0:	6838      	ldr	r0, [r7, #0]
 80110f2:	f04f 0100 	mov.w	r1, #0
 80110f6:	f04f 0200 	mov.w	r2, #0
 80110fa:	f7ff fa63 	bl	80105c4 <hci_event_handler>
}
 80110fe:	f107 0708 	add.w	r7, r7, #8
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop

08011108 <SimpleLinkWaitData>:
//*****************************************************************************

void 
SimpleLinkWaitData(unsigned char *pBuf, unsigned char *from, 
									 unsigned char *fromlen)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction, i.e. only after data will be received
	tSLInformation.usRxDataPending = 1;
 8011114:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011118:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801111c:	f04f 0201 	mov.w	r2, #1
 8011120:	86da      	strh	r2, [r3, #54]	; 0x36
	hci_event_handler(pBuf, from, fromlen);
 8011122:	68f8      	ldr	r0, [r7, #12]
 8011124:	68b9      	ldr	r1, [r7, #8]
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	f7ff fa4c 	bl	80105c4 <hci_event_handler>
}
 801112c:	f107 0710 	add.w	r7, r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <hci_command_send>:
//
//*****************************************************************************
unsigned short 
hci_command_send(unsigned short usOpcode, unsigned char *pucBuff,
                     unsigned char ucArgsLength)
{ 
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6039      	str	r1, [r7, #0]
 801113c:	4613      	mov	r3, r2
 801113e:	4602      	mov	r2, r0
 8011140:	80fa      	strh	r2, [r7, #6]
 8011142:	717b      	strb	r3, [r7, #5]
	unsigned char *stream;
	
	stream = (pucBuff + SPI_HEADER_SIZE);
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	f103 0305 	add.w	r3, r3, #5
 801114a:	60fb      	str	r3, [r7, #12]
	
	UINT8_TO_STREAM(stream, HCI_TYPE_CMND);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f04f 0201 	mov.w	r2, #1
 8011152:	701a      	strb	r2, [r3, #0]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f103 0301 	add.w	r3, r3, #1
 801115a:	60fb      	str	r3, [r7, #12]
	stream = UINT16_TO_STREAM(stream, usOpcode);
 801115c:	88fb      	ldrh	r3, [r7, #6]
 801115e:	68f8      	ldr	r0, [r7, #12]
 8011160:	4619      	mov	r1, r3
 8011162:	f7ff f91b 	bl	801039c <UINT16_TO_STREAM_f>
 8011166:	60f8      	str	r0, [r7, #12]
	UINT8_TO_STREAM(stream, ucArgsLength);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	797a      	ldrb	r2, [r7, #5]
 801116c:	701a      	strb	r2, [r3, #0]
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	f103 0301 	add.w	r3, r3, #1
 8011174:	60fb      	str	r3, [r7, #12]
	
	//Update the opcode of the event we will be waiting for
	SpiWrite(pucBuff, ucArgsLength + SIMPLE_LINK_HCI_CMND_HEADER_SIZE);
 8011176:	797b      	ldrb	r3, [r7, #5]
 8011178:	b29b      	uxth	r3, r3
 801117a:	f103 0304 	add.w	r3, r3, #4
 801117e:	b29b      	uxth	r3, r3
 8011180:	6838      	ldr	r0, [r7, #0]
 8011182:	4619      	mov	r1, r3
 8011184:	f7f9 f9be 	bl	800a504 <SpiWrite>
	
	return(0);
 8011188:	f04f 0300 	mov.w	r3, #0
}
 801118c:	4618      	mov	r0, r3
 801118e:	f107 0710 	add.w	r7, r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop

08011198 <hci_data_send>:
							unsigned char *ucArgs,
							unsigned short usArgsLength, 
							unsigned short usDataLength,
							const unsigned char *ucTail,
							unsigned short usTailLength)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b086      	sub	sp, #24
 801119c:	af00      	add	r7, sp, #0
 801119e:	60b9      	str	r1, [r7, #8]
 80111a0:	4601      	mov	r1, r0
 80111a2:	73f9      	strb	r1, [r7, #15]
 80111a4:	81ba      	strh	r2, [r7, #12]
 80111a6:	80fb      	strh	r3, [r7, #6]
	unsigned char *stream;
	
	stream = ((ucArgs) + SPI_HEADER_SIZE);
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	f103 0305 	add.w	r3, r3, #5
 80111ae:	617b      	str	r3, [r7, #20]
	
	UINT8_TO_STREAM(stream, HCI_TYPE_DATA);
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	f04f 0202 	mov.w	r2, #2
 80111b6:	701a      	strb	r2, [r3, #0]
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	f103 0301 	add.w	r3, r3, #1
 80111be:	617b      	str	r3, [r7, #20]
	UINT8_TO_STREAM(stream, ucOpcode);
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	7bfa      	ldrb	r2, [r7, #15]
 80111c4:	701a      	strb	r2, [r3, #0]
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	f103 0301 	add.w	r3, r3, #1
 80111cc:	617b      	str	r3, [r7, #20]
	UINT8_TO_STREAM(stream, usArgsLength);
 80111ce:	89bb      	ldrh	r3, [r7, #12]
 80111d0:	b2da      	uxtb	r2, r3
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	701a      	strb	r2, [r3, #0]
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	f103 0301 	add.w	r3, r3, #1
 80111dc:	617b      	str	r3, [r7, #20]
	stream = UINT16_TO_STREAM(stream, usArgsLength + usDataLength + usTailLength);
 80111de:	89ba      	ldrh	r2, [r7, #12]
 80111e0:	88fb      	ldrh	r3, [r7, #6]
 80111e2:	18d3      	adds	r3, r2, r3
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111e8:	18d3      	adds	r3, r2, r3
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	6978      	ldr	r0, [r7, #20]
 80111ee:	4619      	mov	r1, r3
 80111f0:	f7ff f8d4 	bl	801039c <UINT16_TO_STREAM_f>
 80111f4:	6178      	str	r0, [r7, #20]
	
	// Send the packet over the SPI
	SpiWrite(ucArgs, SIMPLE_LINK_HCI_DATA_HEADER_SIZE + usArgsLength + usDataLength + usTailLength);
 80111f6:	89ba      	ldrh	r2, [r7, #12]
 80111f8:	88fb      	ldrh	r3, [r7, #6]
 80111fa:	18d3      	adds	r3, r2, r3
 80111fc:	b29a      	uxth	r2, r3
 80111fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011200:	18d3      	adds	r3, r2, r3
 8011202:	b29b      	uxth	r3, r3
 8011204:	f103 0305 	add.w	r3, r3, #5
 8011208:	b29b      	uxth	r3, r3
 801120a:	68b8      	ldr	r0, [r7, #8]
 801120c:	4619      	mov	r1, r3
 801120e:	f7f9 f979 	bl	800a504 <SpiWrite>
	
	return(ESUCCESS);
 8011212:	f04f 0300 	mov.w	r3, #0
}
 8011216:	4618      	mov	r0, r3
 8011218:	f107 0718 	add.w	r7, r7, #24
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <hci_patch_send>:
//!  @brief               Prepeare HCI header and initiate an HCI patch write operation
//
//*****************************************************************************
void
hci_patch_send(unsigned char ucOpcode, unsigned char *pucBuff, char *patch, unsigned short usDataLength)
{ 
 8011220:	b580      	push	{r7, lr}
 8011222:	b088      	sub	sp, #32
 8011224:	af00      	add	r7, sp, #0
 8011226:	60b9      	str	r1, [r7, #8]
 8011228:	607a      	str	r2, [r7, #4]
 801122a:	4602      	mov	r2, r0
 801122c:	73fa      	strb	r2, [r7, #15]
 801122e:	81bb      	strh	r3, [r7, #12]
 	unsigned char *data_ptr = (pucBuff + SPI_HEADER_SIZE);
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	f103 0305 	add.w	r3, r3, #5
 8011236:	61bb      	str	r3, [r7, #24]
	unsigned short usTransLength;
	unsigned char *stream = (pucBuff + SPI_HEADER_SIZE);
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	f103 0305 	add.w	r3, r3, #5
 801123e:	617b      	str	r3, [r7, #20]
	
	UINT8_TO_STREAM(stream, HCI_TYPE_PATCH);
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	f04f 0203 	mov.w	r2, #3
 8011246:	701a      	strb	r2, [r3, #0]
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	f103 0301 	add.w	r3, r3, #1
 801124e:	617b      	str	r3, [r7, #20]
	UINT8_TO_STREAM(stream, ucOpcode);
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	7bfa      	ldrb	r2, [r7, #15]
 8011254:	701a      	strb	r2, [r3, #0]
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	f103 0301 	add.w	r3, r3, #1
 801125c:	617b      	str	r3, [r7, #20]
	stream = UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
 801125e:	89bb      	ldrh	r3, [r7, #12]
 8011260:	f103 0302 	add.w	r3, r3, #2
 8011264:	b29b      	uxth	r3, r3
 8011266:	6978      	ldr	r0, [r7, #20]
 8011268:	4619      	mov	r1, r3
 801126a:	f7ff f897 	bl	801039c <UINT16_TO_STREAM_f>
 801126e:	6178      	str	r0, [r7, #20]
	
	if (usDataLength <= SL_PATCH_PORTION_SIZE)
 8011270:	89bb      	ldrh	r3, [r7, #12]
 8011272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011276:	d81c      	bhi.n	80112b2 <hci_patch_send+0x92>
	{
		UINT16_TO_STREAM(stream, usDataLength);
 8011278:	89bb      	ldrh	r3, [r7, #12]
 801127a:	6978      	ldr	r0, [r7, #20]
 801127c:	4619      	mov	r1, r3
 801127e:	f7ff f88d 	bl	801039c <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, usDataLength);
 8011282:	89bb      	ldrh	r3, [r7, #12]
 8011284:	6978      	ldr	r0, [r7, #20]
 8011286:	4619      	mov	r1, r3
 8011288:	f7ff f888 	bl	801039c <UINT16_TO_STREAM_f>
 801128c:	6178      	str	r0, [r7, #20]
		memcpy((pucBuff + SPI_HEADER_SIZE) + HCI_PATCH_HEADER_SIZE, patch, usDataLength);
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	f103 020b 	add.w	r2, r3, #11
 8011294:	89bb      	ldrh	r3, [r7, #12]
 8011296:	4610      	mov	r0, r2
 8011298:	6879      	ldr	r1, [r7, #4]
 801129a:	461a      	mov	r2, r3
 801129c:	f000 ff06 	bl	80120ac <memcpy>
		
		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, usDataLength + HCI_PATCH_HEADER_SIZE);
 80112a0:	89bb      	ldrh	r3, [r7, #12]
 80112a2:	f103 0306 	add.w	r3, r3, #6
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	68b8      	ldr	r0, [r7, #8]
 80112aa:	4619      	mov	r1, r3
 80112ac:	f7f9 f92a 	bl	800a504 <SpiWrite>
 80112b0:	e060      	b.n	8011374 <hci_patch_send+0x154>
	}
	else
	{
		
		usTransLength = (usDataLength/SL_PATCH_PORTION_SIZE);
 80112b2:	89ba      	ldrh	r2, [r7, #12]
 80112b4:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80112b8:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80112bc:	fba3 1302 	umull	r1, r3, r3, r2
 80112c0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80112c4:	83fb      	strh	r3, [r7, #30]
		UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE + usTransLength*SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
 80112c6:	8bfb      	ldrh	r3, [r7, #30]
 80112c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80112cc:	b29a      	uxth	r2, r3
 80112ce:	89bb      	ldrh	r3, [r7, #12]
 80112d0:	18d3      	adds	r3, r2, r3
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	f103 0302 	add.w	r3, r3, #2
 80112d8:	b29b      	uxth	r3, r3
 80112da:	6978      	ldr	r0, [r7, #20]
 80112dc:	4619      	mov	r1, r3
 80112de:	f7ff f85d 	bl	801039c <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, SL_PATCH_PORTION_SIZE);
 80112e2:	6978      	ldr	r0, [r7, #20]
 80112e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80112e8:	f7ff f858 	bl	801039c <UINT16_TO_STREAM_f>
 80112ec:	6178      	str	r0, [r7, #20]
		memcpy(pucBuff + SPI_HEADER_SIZE + HCI_PATCH_HEADER_SIZE, patch, SL_PATCH_PORTION_SIZE);
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	f103 030b 	add.w	r3, r3, #11
 80112f4:	4618      	mov	r0, r3
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80112fc:	f000 fed6 	bl	80120ac <memcpy>
		usDataLength -= SL_PATCH_PORTION_SIZE;
 8011300:	89bb      	ldrh	r3, [r7, #12]
 8011302:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8011306:	81bb      	strh	r3, [r7, #12]
		patch += SL_PATCH_PORTION_SIZE;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801130e:	607b      	str	r3, [r7, #4]
		
		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);
 8011310:	68b8      	ldr	r0, [r7, #8]
 8011312:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8011316:	f7f9 f8f5 	bl	800a504 <SpiWrite>
		
		while (usDataLength)
 801131a:	e028      	b.n	801136e <hci_patch_send+0x14e>
		{
			if (usDataLength <= SL_PATCH_PORTION_SIZE)
 801131c:	89bb      	ldrh	r3, [r7, #12]
 801131e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011322:	d805      	bhi.n	8011330 <hci_patch_send+0x110>
			{
				usTransLength = usDataLength;
 8011324:	89bb      	ldrh	r3, [r7, #12]
 8011326:	83fb      	strh	r3, [r7, #30]
				usDataLength = 0;
 8011328:	f04f 0300 	mov.w	r3, #0
 801132c:	81bb      	strh	r3, [r7, #12]
 801132e:	e006      	b.n	801133e <hci_patch_send+0x11e>
				
			}
			else
			{
				usTransLength = SL_PATCH_PORTION_SIZE;
 8011330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011334:	83fb      	strh	r3, [r7, #30]
				usDataLength -= usTransLength;
 8011336:	89ba      	ldrh	r2, [r7, #12]
 8011338:	8bfb      	ldrh	r3, [r7, #30]
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	81bb      	strh	r3, [r7, #12]
			}
			
			*(unsigned short *)data_ptr = usTransLength;
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	8bfa      	ldrh	r2, [r7, #30]
 8011342:	801a      	strh	r2, [r3, #0]
			memcpy(data_ptr + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE, patch, usTransLength);
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	f103 0202 	add.w	r2, r3, #2
 801134a:	8bfb      	ldrh	r3, [r7, #30]
 801134c:	4610      	mov	r0, r2
 801134e:	6879      	ldr	r1, [r7, #4]
 8011350:	461a      	mov	r2, r3
 8011352:	f000 feab 	bl	80120ac <memcpy>
			patch += usTransLength;
 8011356:	8bfb      	ldrh	r3, [r7, #30]
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	18d3      	adds	r3, r2, r3
 801135c:	607b      	str	r3, [r7, #4]
			
			// Update the opcode of the event we will be waiting for
			SpiWrite((unsigned char *)data_ptr, usTransLength + sizeof(usTransLength));
 801135e:	8bfb      	ldrh	r3, [r7, #30]
 8011360:	f103 0302 	add.w	r3, r3, #2
 8011364:	b29b      	uxth	r3, r3
 8011366:	69b8      	ldr	r0, [r7, #24]
 8011368:	4619      	mov	r1, r3
 801136a:	f7f9 f8cb 	bl	800a504 <SpiWrite>
		patch += SL_PATCH_PORTION_SIZE;
		
		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);
		
		while (usDataLength)
 801136e:	89bb      	ldrh	r3, [r7, #12]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1d3      	bne.n	801131c <hci_patch_send+0xfc>
			
			// Update the opcode of the event we will be waiting for
			SpiWrite((unsigned char *)data_ptr, usTransLength + sizeof(usTransLength));
		}
	}
}
 8011374:	f107 0720 	add.w	r7, r7, #32
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <netapp_timeout_values>:
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
long 
netapp_timeout_values(unsigned long *aucDHCP, unsigned long *aucARP,unsigned long *aucKeepalive,	unsigned long *aucInactivity)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b088      	sub	sp, #32
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
 8011388:	603b      	str	r3, [r7, #0]
	signed char scRet;
	unsigned char *ptr;
	unsigned char *args;
	
	scRet = EFAIL;
 801138a:	f04f 03ff 	mov.w	r3, #255	; 0xff
 801138e:	75fb      	strb	r3, [r7, #23]
	ptr = tSLInformation.pucTxCommandBuffer;
 8011390:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	61fb      	str	r3, [r7, #28]
	args = (ptr + HEADERS_SIZE_CMD);
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	f103 0309 	add.w	r3, r3, #9
 80113a2:	61bb      	str	r3, [r7, #24]
	
	// Set minimal values of timers 
	MIN_TIMER_SET(*aucDHCP)
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d007      	beq.n	80113bc <netapp_timeout_values+0x40>
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2b13      	cmp	r3, #19
 80113b2:	d803      	bhi.n	80113bc <netapp_timeout_values+0x40>
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	f04f 0214 	mov.w	r2, #20
 80113ba:	601a      	str	r2, [r3, #0]
    MIN_TIMER_SET(*aucARP)
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d007      	beq.n	80113d4 <netapp_timeout_values+0x58>
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b13      	cmp	r3, #19
 80113ca:	d803      	bhi.n	80113d4 <netapp_timeout_values+0x58>
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	f04f 0214 	mov.w	r2, #20
 80113d2:	601a      	str	r2, [r3, #0]
	MIN_TIMER_SET(*aucKeepalive)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d007      	beq.n	80113ec <netapp_timeout_values+0x70>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2b13      	cmp	r3, #19
 80113e2:	d803      	bhi.n	80113ec <netapp_timeout_values+0x70>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f04f 0214 	mov.w	r2, #20
 80113ea:	601a      	str	r2, [r3, #0]
	MIN_TIMER_SET(*aucInactivity)
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d007      	beq.n	8011404 <netapp_timeout_values+0x88>
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2b13      	cmp	r3, #19
 80113fa:	d803      	bhi.n	8011404 <netapp_timeout_values+0x88>
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	f04f 0214 	mov.w	r2, #20
 8011402:	601a      	str	r2, [r3, #0]
					
	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, *aucDHCP);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	69b8      	ldr	r0, [r7, #24]
 801140a:	4619      	mov	r1, r3
 801140c:	f7fe ff94 	bl	8010338 <UINT32_TO_STREAM_f>
 8011410:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, *aucARP);
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	69b8      	ldr	r0, [r7, #24]
 8011418:	4619      	mov	r1, r3
 801141a:	f7fe ff8d 	bl	8010338 <UINT32_TO_STREAM_f>
 801141e:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, *aucKeepalive);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	69b8      	ldr	r0, [r7, #24]
 8011426:	4619      	mov	r1, r3
 8011428:	f7fe ff86 	bl	8010338 <UINT32_TO_STREAM_f>
 801142c:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, *aucInactivity);
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	69b8      	ldr	r0, [r7, #24]
 8011434:	4619      	mov	r1, r3
 8011436:	f7fe ff7f 	bl	8010338 <UINT32_TO_STREAM_f>
 801143a:	61b8      	str	r0, [r7, #24]
	
	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_SET_TIMERS, ptr, NETAPP_SET_TIMER_PARAMS_LEN);
 801143c:	f242 0009 	movw	r0, #8201	; 0x2009
 8011440:	69f9      	ldr	r1, [r7, #28]
 8011442:	f04f 0214 	mov.w	r2, #20
 8011446:	f7ff fe75 	bl	8011134 <hci_command_send>
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_SET_TIMERS, &scRet);
 801144a:	f107 0317 	add.w	r3, r7, #23
 801144e:	f242 0009 	movw	r0, #8201	; 0x2009
 8011452:	4619      	mov	r1, r3
 8011454:	f7ff fe40 	bl	80110d8 <SimpleLinkWaitEvent>
	
	return(scRet);
 8011458:	7dfb      	ldrb	r3, [r7, #23]
 801145a:	b25b      	sxtb	r3, r3
}
 801145c:	4618      	mov	r0, r3
 801145e:	f107 0720 	add.w	r7, r7, #32
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop

08011468 <nvmem_read_sp_version>:
//!	 
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
unsigned char nvmem_read_sp_version(unsigned char* patchVer)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b086      	sub	sp, #24
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
	unsigned char *ptr;
	// 1st byte is the status and the rest is the SP version
	unsigned char	retBuf[5];	
	
	ptr = tSLInformation.pucTxCommandBuffer;
 8011470:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	617b      	str	r3, [r7, #20]
  
   // Initiate a HCI command, no args are required
	hci_command_send(HCI_CMND_READ_SP_VERSION, ptr, 0);	
 801147c:	f240 2007 	movw	r0, #519	; 0x207
 8011480:	6979      	ldr	r1, [r7, #20]
 8011482:	f04f 0200 	mov.w	r2, #0
 8011486:	f7ff fe55 	bl	8011134 <hci_command_send>
	SimpleLinkWaitEvent(HCI_CMND_READ_SP_VERSION, retBuf);
 801148a:	f107 030c 	add.w	r3, r7, #12
 801148e:	f240 2007 	movw	r0, #519	; 0x207
 8011492:	4619      	mov	r1, r3
 8011494:	f7ff fe20 	bl	80110d8 <SimpleLinkWaitEvent>
	
	// package ID
	*patchVer = retBuf[3];			
 8011498:	7bfa      	ldrb	r2, [r7, #15]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	701a      	strb	r2, [r3, #0]
	// package build number
	*(patchVer+1) = retBuf[4];		
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f103 0301 	add.w	r3, r3, #1
 80114a4:	7c3a      	ldrb	r2, [r7, #16]
 80114a6:	701a      	strb	r2, [r3, #0]
	
	return(retBuf[0]);
 80114a8:	7b3b      	ldrb	r3, [r7, #12]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	f107 0718 	add.w	r7, r7, #24
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <HostFlowControlConsumeBuff>:
//!          regarding the buffers available.
//
//*****************************************************************************
int
HostFlowControlConsumeBuff(int sd)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
	do
	{
		// In case last transmission failed then we will return the last failure 
		// reason here.
		// Note that the buffer will not be allocated in this case
		if (tSLInformation.slTransmitDataError != 0)
 80114bc:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80114c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80114c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d014      	beq.n	80114f4 <HostFlowControlConsumeBuff+0x40>
		{
			errno = tSLInformation.slTransmitDataError;
 80114ca:	f000 fde9 	bl	80120a0 <__errno>
 80114ce:	4602      	mov	r2, r0
 80114d0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80114d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80114d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114da:	6013      	str	r3, [r2, #0]
			tSLInformation.slTransmitDataError = 0;
 80114dc:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80114e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80114e4:	f04f 0200 	mov.w	r2, #0
 80114e8:	62da      	str	r2, [r3, #44]	; 0x2c
			return errno;
 80114ea:	f000 fdd9 	bl	80120a0 <__errno>
 80114ee:	4603      	mov	r3, r0
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	e020      	b.n	8011536 <HostFlowControlConsumeBuff+0x82>
		}
		
		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7ff fdab 	bl	8011050 <get_socket_active_status>
 80114fa:	4603      	mov	r3, r0
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d002      	beq.n	8011506 <HostFlowControlConsumeBuff+0x52>
			return -1;
 8011500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011504:	e017      	b.n	8011536 <HostFlowControlConsumeBuff+0x82>
	} while(0 == tSLInformation.usNumberOfFreeBuffers);
 8011506:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801150a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801150e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011510:	b29b      	uxth	r3, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	d0d2      	beq.n	80114bc <HostFlowControlConsumeBuff+0x8>
	
	tSLInformation.usNumberOfFreeBuffers--;
 8011516:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801151a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801151e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011520:	b29b      	uxth	r3, r3
 8011522:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011526:	b29a      	uxth	r2, r3
 8011528:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801152c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011530:	861a      	strh	r2, [r3, #48]	; 0x30
	
	return 0;
 8011532:	f04f 0300 	mov.w	r3, #0
	{
		tSLInformation.usNumberOfFreeBuffers--;
		return 0;
	}
#endif
}
 8011536:	4618      	mov	r0, r3
 8011538:	f107 0708 	add.w	r7, r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <socket>:
//
//*****************************************************************************

int
socket(long domain, long type, long protocol)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b088      	sub	sp, #32
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
	long ret;
	unsigned char *ptr, *args;
	
	ret = EFAIL;
 801154c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011550:	617b      	str	r3, [r7, #20]
	ptr = tSLInformation.pucTxCommandBuffer;
 8011552:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011556:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	61fb      	str	r3, [r7, #28]
	args = (ptr + HEADERS_SIZE_CMD);
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	f103 0309 	add.w	r3, r3, #9
 8011564:	61bb      	str	r3, [r7, #24]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, domain);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	69b8      	ldr	r0, [r7, #24]
 801156a:	4619      	mov	r1, r3
 801156c:	f7fe fee4 	bl	8010338 <UINT32_TO_STREAM_f>
 8011570:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, type);
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	69b8      	ldr	r0, [r7, #24]
 8011576:	4619      	mov	r1, r3
 8011578:	f7fe fede 	bl	8010338 <UINT32_TO_STREAM_f>
 801157c:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, protocol);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	69b8      	ldr	r0, [r7, #24]
 8011582:	4619      	mov	r1, r3
 8011584:	f7fe fed8 	bl	8010338 <UINT32_TO_STREAM_f>
 8011588:	61b8      	str	r0, [r7, #24]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_SOCKET, ptr, SOCKET_OPEN_PARAMS_LEN);
 801158a:	f241 0001 	movw	r0, #4097	; 0x1001
 801158e:	69f9      	ldr	r1, [r7, #28]
 8011590:	f04f 020c 	mov.w	r2, #12
 8011594:	f7ff fdce 	bl	8011134 <hci_command_send>
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SOCKET, &ret);
 8011598:	f107 0314 	add.w	r3, r7, #20
 801159c:	f241 0001 	movw	r0, #4097	; 0x1001
 80115a0:	4619      	mov	r1, r3
 80115a2:	f7ff fd99 	bl	80110d8 <SimpleLinkWaitEvent>
	
	// Process the event 
	errno = ret;
 80115a6:	f000 fd7b 	bl	80120a0 <__errno>
 80115aa:	4603      	mov	r3, r0
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	601a      	str	r2, [r3, #0]
	
	set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	4618      	mov	r0, r3
 80115b4:	f04f 0100 	mov.w	r1, #0
 80115b8:	f7ff fcbe 	bl	8010f38 <set_socket_active_status>
	
	return(ret);
 80115bc:	697b      	ldr	r3, [r7, #20]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	f107 0720 	add.w	r7, r7, #32
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}

080115c8 <closesocket>:
//
//*****************************************************************************

long
closesocket(long sd)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
	long ret;
	unsigned char *ptr, *args;
	
	ret = EFAIL;
 80115d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115d4:	60fb      	str	r3, [r7, #12]
	ptr = tSLInformation.pucTxCommandBuffer;
 80115d6:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80115da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80115de:	689b      	ldr	r3, [r3, #8]
 80115e0:	617b      	str	r3, [r7, #20]
	args = (ptr + HEADERS_SIZE_CMD);
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	f103 0309 	add.w	r3, r3, #9
 80115e8:	613b      	str	r3, [r7, #16]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6938      	ldr	r0, [r7, #16]
 80115ee:	4619      	mov	r1, r3
 80115f0:	f7fe fea2 	bl	8010338 <UINT32_TO_STREAM_f>
 80115f4:	6138      	str	r0, [r7, #16]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_CLOSE_SOCKET,
 80115f6:	f241 000b 	movw	r0, #4107	; 0x100b
 80115fa:	6979      	ldr	r1, [r7, #20]
 80115fc:	f04f 0204 	mov.w	r2, #4
 8011600:	f7ff fd98 	bl	8011134 <hci_command_send>
									 ptr, SOCKET_CLOSE_PARAMS_LEN);
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CLOSE_SOCKET, &ret);
 8011604:	f107 030c 	add.w	r3, r7, #12
 8011608:	f241 000b 	movw	r0, #4107	; 0x100b
 801160c:	4619      	mov	r1, r3
 801160e:	f7ff fd63 	bl	80110d8 <SimpleLinkWaitEvent>
	errno = ret;
 8011612:	f000 fd45 	bl	80120a0 <__errno>
 8011616:	4603      	mov	r3, r0
 8011618:	68fa      	ldr	r2, [r7, #12]
 801161a:	601a      	str	r2, [r3, #0]
	
	// since 'close' call may result in either OK (and then it closed) or error 
	// mark this socket as invalid 
	set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f04f 0101 	mov.w	r1, #1
 8011622:	f7ff fc89 	bl	8010f38 <set_socket_active_status>
	
	return(ret);
 8011626:	68fb      	ldr	r3, [r7, #12]
}
 8011628:	4618      	mov	r0, r3
 801162a:	f107 0718 	add.w	r7, r7, #24
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop

08011634 <connect>:
//
//*****************************************************************************

long
connect(long sd, const sockaddr *addr, long addrlen)
{
 8011634:	b590      	push	{r4, r7, lr}
 8011636:	b089      	sub	sp, #36	; 0x24
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
	long int ret;
	unsigned char *ptr, *args;
	
	ret = EFAIL;
 8011640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011644:	613b      	str	r3, [r7, #16]
	ptr = tSLInformation.pucTxCommandBuffer;
 8011646:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801164a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801164e:	689b      	ldr	r3, [r3, #8]
 8011650:	61bb      	str	r3, [r7, #24]
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	f103 0309 	add.w	r3, r3, #9
 8011658:	61fb      	str	r3, [r7, #28]
	addrlen = 8;
 801165a:	f04f 0308 	mov.w	r3, #8
 801165e:	617b      	str	r3, [r7, #20]
	
	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	69f8      	ldr	r0, [r7, #28]
 8011664:	4619      	mov	r1, r3
 8011666:	f7fe fe67 	bl	8010338 <UINT32_TO_STREAM_f>
 801166a:	61f8      	str	r0, [r7, #28]
	args = UINT32_TO_STREAM(args, 0x00000008);
 801166c:	69f8      	ldr	r0, [r7, #28]
 801166e:	f04f 0108 	mov.w	r1, #8
 8011672:	f7fe fe61 	bl	8010338 <UINT32_TO_STREAM_f>
 8011676:	61f8      	str	r0, [r7, #28]
	args = UINT32_TO_STREAM(args, addrlen);
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	69f8      	ldr	r0, [r7, #28]
 801167c:	4619      	mov	r1, r3
 801167e:	f7fe fe5b 	bl	8010338 <UINT32_TO_STREAM_f>
 8011682:	61f8      	str	r0, [r7, #28]
	ARRAY_TO_STREAM(args, ((unsigned char *)addr), addrlen);
 8011684:	f04f 0400 	mov.w	r4, #0
 8011688:	e00d      	b.n	80116a6 <connect+0x72>
 801168a:	b223      	sxth	r3, r4
 801168c:	68ba      	ldr	r2, [r7, #8]
 801168e:	18d3      	adds	r3, r2, r3
 8011690:	781a      	ldrb	r2, [r3, #0]
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	701a      	strb	r2, [r3, #0]
 8011696:	69fb      	ldr	r3, [r7, #28]
 8011698:	f103 0301 	add.w	r3, r3, #1
 801169c:	61fb      	str	r3, [r7, #28]
 801169e:	4623      	mov	r3, r4
 80116a0:	f103 0301 	add.w	r3, r3, #1
 80116a4:	b29c      	uxth	r4, r3
 80116a6:	b222      	sxth	r2, r4
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	dbed      	blt.n	801168a <connect+0x56>
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_CONNECT,
 80116ae:	f241 0007 	movw	r0, #4103	; 0x1007
 80116b2:	69b9      	ldr	r1, [r7, #24]
 80116b4:	f04f 0214 	mov.w	r2, #20
 80116b8:	f7ff fd3c 	bl	8011134 <hci_command_send>
									 ptr, SOCKET_CONNECT_PARAMS_LEN);
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CONNECT, &ret);
 80116bc:	f107 0310 	add.w	r3, r7, #16
 80116c0:	f241 0007 	movw	r0, #4103	; 0x1007
 80116c4:	4619      	mov	r1, r3
 80116c6:	f7ff fd07 	bl	80110d8 <SimpleLinkWaitEvent>
	
	errno = ret;
 80116ca:	f000 fce9 	bl	80120a0 <__errno>
 80116ce:	4603      	mov	r3, r0
 80116d0:	693a      	ldr	r2, [r7, #16]
 80116d2:	601a      	str	r2, [r3, #0]
	
	return((long)ret);
 80116d4:	693b      	ldr	r3, [r7, #16]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd90      	pop	{r4, r7, pc}

080116e0 <select>:
//*****************************************************************************

int
select(long nfds, fd_set *readsds, fd_set *writesds, fd_set *exceptsds, 
       struct timeval *timeout)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b08c      	sub	sp, #48	; 0x30
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
 80116ec:	603b      	str	r3, [r7, #0]
	unsigned char *ptr, *args;
	tBsdSelectRecvParams tParams;
	unsigned long is_blocking;
	
	if( timeout == NULL)
 80116ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d103      	bne.n	80116fc <select+0x1c>
	{
		is_blocking = 1; /* blocking , infinity timeout */
 80116f4:	f04f 0301 	mov.w	r3, #1
 80116f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116fa:	e002      	b.n	8011702 <select+0x22>
	}
	else
	{
		is_blocking = 0; /* no blocking, timeout */
 80116fc:	f04f 0300 	mov.w	r3, #0
 8011700:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	
	// Fill in HCI packet structure
	ptr = tSLInformation.pucTxCommandBuffer;
 8011702:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011706:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801170a:	689b      	ldr	r3, [r3, #8]
 801170c:	62bb      	str	r3, [r7, #40]	; 0x28
	args = (ptr + HEADERS_SIZE_CMD);
 801170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011710:	f103 0309 	add.w	r3, r3, #9
 8011714:	627b      	str	r3, [r7, #36]	; 0x24
	
	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, nfds);
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801171a:	4619      	mov	r1, r3
 801171c:	f7fe fe0c 	bl	8010338 <UINT32_TO_STREAM_f>
 8011720:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000014);
 8011722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011724:	f04f 0114 	mov.w	r1, #20
 8011728:	f7fe fe06 	bl	8010338 <UINT32_TO_STREAM_f>
 801172c:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000014);
 801172e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011730:	f04f 0114 	mov.w	r1, #20
 8011734:	f7fe fe00 	bl	8010338 <UINT32_TO_STREAM_f>
 8011738:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000014);
 801173a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801173c:	f04f 0114 	mov.w	r1, #20
 8011740:	f7fe fdfa 	bl	8010338 <UINT32_TO_STREAM_f>
 8011744:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000014);
 8011746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011748:	f04f 0114 	mov.w	r1, #20
 801174c:	f7fe fdf4 	bl	8010338 <UINT32_TO_STREAM_f>
 8011750:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, is_blocking);
 8011752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011756:	f7fe fdef 	bl	8010338 <UINT32_TO_STREAM_f>
 801175a:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ((readsds) ? *(unsigned long*)readsds : 0));
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d002      	beq.n	8011768 <select+0x88>
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	e001      	b.n	801176c <select+0x8c>
 8011768:	f04f 0300 	mov.w	r3, #0
 801176c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801176e:	4619      	mov	r1, r3
 8011770:	f7fe fde2 	bl	8010338 <UINT32_TO_STREAM_f>
 8011774:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ((writesds) ? *(unsigned long*)writesds : 0));
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d002      	beq.n	8011782 <select+0xa2>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	e001      	b.n	8011786 <select+0xa6>
 8011782:	f04f 0300 	mov.w	r3, #0
 8011786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011788:	4619      	mov	r1, r3
 801178a:	f7fe fdd5 	bl	8010338 <UINT32_TO_STREAM_f>
 801178e:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ((exceptsds) ? *(unsigned long*)exceptsds : 0));
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d002      	beq.n	801179c <select+0xbc>
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	e001      	b.n	80117a0 <select+0xc0>
 801179c:	f04f 0300 	mov.w	r3, #0
 80117a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117a2:	4619      	mov	r1, r3
 80117a4:	f7fe fdc8 	bl	8010338 <UINT32_TO_STREAM_f>
 80117a8:	6278      	str	r0, [r7, #36]	; 0x24
	
	if (timeout)
 80117aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d01b      	beq.n	80117e8 <select+0x108>
	{
		if ( 0 == timeout->tv_sec && timeout->tv_usec < 
 80117b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d109      	bne.n	80117cc <select+0xec>
 80117b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ba:	685a      	ldr	r2, [r3, #4]
 80117bc:	f241 3387 	movw	r3, #4999	; 0x1387
 80117c0:	429a      	cmp	r2, r3
 80117c2:	dc03      	bgt.n	80117cc <select+0xec>
				SELECT_TIMEOUT_MIN_MICRO_SECONDS)
		{
			timeout->tv_usec = SELECT_TIMEOUT_MIN_MICRO_SECONDS;
 80117c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80117ca:	605a      	str	r2, [r3, #4]
		}
		args = UINT32_TO_STREAM(args, timeout->tv_sec);
 80117cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117d2:	4619      	mov	r1, r3
 80117d4:	f7fe fdb0 	bl	8010338 <UINT32_TO_STREAM_f>
 80117d8:	6278      	str	r0, [r7, #36]	; 0x24
		args = UINT32_TO_STREAM(args, timeout->tv_usec);
 80117da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117e0:	4619      	mov	r1, r3
 80117e2:	f7fe fda9 	bl	8010338 <UINT32_TO_STREAM_f>
 80117e6:	6278      	str	r0, [r7, #36]	; 0x24
	}
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_BSD_SELECT, ptr, SOCKET_SELECT_PARAMS_LEN);
 80117e8:	f241 0008 	movw	r0, #4104	; 0x1008
 80117ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117ee:	f04f 022c 	mov.w	r2, #44	; 0x2c
 80117f2:	f7ff fc9f 	bl	8011134 <hci_command_send>
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_SELECT, &tParams);
 80117f6:	f107 0314 	add.w	r3, r7, #20
 80117fa:	f241 0008 	movw	r0, #4104	; 0x1008
 80117fe:	4619      	mov	r1, r3
 8011800:	f7ff fc6a 	bl	80110d8 <SimpleLinkWaitEvent>
	
	// Update actually read FD
	if (tParams.iStatus >= 0)
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	2b00      	cmp	r3, #0
 8011808:	db28      	blt.n	801185c <select+0x17c>
	{
		if (readsds)
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d009      	beq.n	8011824 <select+0x144>
		{
			memcpy(readsds, &tParams.uiRdfd, sizeof(tParams.uiRdfd));
 8011810:	f107 0314 	add.w	r3, r7, #20
 8011814:	f103 0304 	add.w	r3, r3, #4
 8011818:	68b8      	ldr	r0, [r7, #8]
 801181a:	4619      	mov	r1, r3
 801181c:	f04f 0204 	mov.w	r2, #4
 8011820:	f000 fc44 	bl	80120ac <memcpy>
		}
		
		if (writesds)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d009      	beq.n	801183e <select+0x15e>
		{
			memcpy(writesds, &tParams.uiWrfd, sizeof(tParams.uiWrfd)); 
 801182a:	f107 0314 	add.w	r3, r7, #20
 801182e:	f103 0308 	add.w	r3, r3, #8
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	4619      	mov	r1, r3
 8011836:	f04f 0204 	mov.w	r2, #4
 801183a:	f000 fc37 	bl	80120ac <memcpy>
		}
		
		if (exceptsds)
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d009      	beq.n	8011858 <select+0x178>
		{
			memcpy(exceptsds, &tParams.uiExfd, sizeof(tParams.uiExfd)); 
 8011844:	f107 0314 	add.w	r3, r7, #20
 8011848:	f103 030c 	add.w	r3, r3, #12
 801184c:	6838      	ldr	r0, [r7, #0]
 801184e:	4619      	mov	r1, r3
 8011850:	f04f 0204 	mov.w	r2, #4
 8011854:	f000 fc2a 	bl	80120ac <memcpy>
		}
		
		return(tParams.iStatus);
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	e006      	b.n	801186a <select+0x18a>
		
	}
	else
	{
		errno = tParams.iStatus;
 801185c:	f000 fc20 	bl	80120a0 <__errno>
 8011860:	4603      	mov	r3, r0
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	601a      	str	r2, [r3, #0]
		return(-1);
 8011866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 801186a:	4618      	mov	r0, r3
 801186c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <simple_link_recv>:
//
//*****************************************************************************
int
simple_link_recv(long sd, void *buf, long len, long flags, sockaddr *from,
                socklen_t *fromlen, long opcode)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b08a      	sub	sp, #40	; 0x28
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	607a      	str	r2, [r7, #4]
 8011880:	603b      	str	r3, [r7, #0]
	unsigned char *ptr, *args;
	tBsdReadReturnParams tSocketReadEvent;
	
	ptr = tSLInformation.pucTxCommandBuffer;
 8011882:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011886:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	627b      	str	r3, [r7, #36]	; 0x24
	args = (ptr + HEADERS_SIZE_CMD);
 801188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011890:	f103 0309 	add.w	r3, r3, #9
 8011894:	623b      	str	r3, [r7, #32]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6a38      	ldr	r0, [r7, #32]
 801189a:	4619      	mov	r1, r3
 801189c:	f7fe fd4c 	bl	8010338 <UINT32_TO_STREAM_f>
 80118a0:	6238      	str	r0, [r7, #32]
	args = UINT32_TO_STREAM(args, len);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6a38      	ldr	r0, [r7, #32]
 80118a6:	4619      	mov	r1, r3
 80118a8:	f7fe fd46 	bl	8010338 <UINT32_TO_STREAM_f>
 80118ac:	6238      	str	r0, [r7, #32]
	args = UINT32_TO_STREAM(args, flags);
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	6a38      	ldr	r0, [r7, #32]
 80118b2:	4619      	mov	r1, r3
 80118b4:	f7fe fd40 	bl	8010338 <UINT32_TO_STREAM_f>
 80118b8:	6238      	str	r0, [r7, #32]
	
	// Generate the read command, and wait for the 
	hci_command_send(opcode,  ptr, SOCKET_RECV_FROM_PARAMS_LEN);
 80118ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118bc:	b29b      	uxth	r3, r3
 80118be:	4618      	mov	r0, r3
 80118c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118c2:	f04f 020c 	mov.w	r2, #12
 80118c6:	f7ff fc35 	bl	8011134 <hci_command_send>
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(opcode, &tSocketReadEvent);
 80118ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118cc:	b29a      	uxth	r2, r3
 80118ce:	f107 0314 	add.w	r3, r7, #20
 80118d2:	4610      	mov	r0, r2
 80118d4:	4619      	mov	r1, r3
 80118d6:	f7ff fbff 	bl	80110d8 <SimpleLinkWaitEvent>
	
	// In case the number of bytes is more then zero - read data
	if (tSocketReadEvent.iNumberOfBytes > 0)
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	dd04      	ble.n	80118ea <simple_link_recv+0x76>
	{
		// Wait for the data in a synchronous way. Here we assume that the bug is 
		// big enough to store also parameters of receive from too....
		SimpleLinkWaitData(buf, (unsigned char *)from, (unsigned char *)fromlen);
 80118e0:	68b8      	ldr	r0, [r7, #8]
 80118e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80118e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80118e6:	f7ff fc0f 	bl	8011108 <SimpleLinkWaitData>
	}
	
	errno = tSocketReadEvent.iNumberOfBytes;
 80118ea:	f000 fbd9 	bl	80120a0 <__errno>
 80118ee:	4603      	mov	r3, r0
 80118f0:	69ba      	ldr	r2, [r7, #24]
 80118f2:	601a      	str	r2, [r3, #0]
	
	return(tSocketReadEvent.iNumberOfBytes);
 80118f4:	69bb      	ldr	r3, [r7, #24]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <recv>:
//
//*****************************************************************************

int
recv(long sd, void *buf, long len, long flags)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b088      	sub	sp, #32
 8011904:	af04      	add	r7, sp, #16
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
 801190c:	603b      	str	r3, [r7, #0]
	return(simple_link_recv(sd, buf, len, flags, NULL, NULL, HCI_CMND_RECV));
 801190e:	f04f 0300 	mov.w	r3, #0
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	f04f 0300 	mov.w	r3, #0
 8011918:	9301      	str	r3, [sp, #4]
 801191a:	f241 0304 	movw	r3, #4100	; 0x1004
 801191e:	9302      	str	r3, [sp, #8]
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	68b9      	ldr	r1, [r7, #8]
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	f7ff ffa4 	bl	8011874 <simple_link_recv>
 801192c:	4603      	mov	r3, r0
}
 801192e:	4618      	mov	r0, r3
 8011930:	f107 0710 	add.w	r7, r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <simple_link_send>:
//
//*****************************************************************************
int
simple_link_send(long sd, const void *buf, long len, long flags,
              const sockaddr *to, long tolen, long opcode)
{    
 8011938:	b590      	push	{r4, r7, lr}
 801193a:	b08d      	sub	sp, #52	; 0x34
 801193c:	af02      	add	r7, sp, #8
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	60b9      	str	r1, [r7, #8]
 8011942:	607a      	str	r2, [r7, #4]
 8011944:	603b      	str	r3, [r7, #0]
	unsigned char *ptr, *pDataPtr, *args;
	unsigned long addr_offset;
	int res;
	
	// Check the bsd_arguments
	if (0 != (res = HostFlowControlConsumeBuff(sd)))
 8011946:	68f8      	ldr	r0, [r7, #12]
 8011948:	f7ff fdb4 	bl	80114b4 <HostFlowControlConsumeBuff>
 801194c:	61b8      	str	r0, [r7, #24]
 801194e:	69bb      	ldr	r3, [r7, #24]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d001      	beq.n	8011958 <simple_link_send+0x20>
	{
		return res;
 8011954:	69bb      	ldr	r3, [r7, #24]
 8011956:	e0a3      	b.n	8011aa0 <simple_link_send+0x168>
	}
	
	//Update the number of sent packets
	tSLInformation.NumberOfSentPackets++;
 8011958:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801195c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011962:	f103 0201 	add.w	r2, r3, #1
 8011966:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801196a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801196e:	639a      	str	r2, [r3, #56]	; 0x38
	
	// Allocate a buffer and construct a packet and send it over spi
	ptr = tSLInformation.pucTxCommandBuffer;
 8011970:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011978:	689b      	ldr	r3, [r3, #8]
 801197a:	617b      	str	r3, [r7, #20]
	args = (ptr + HEADERS_SIZE_DATA);
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	f103 030a 	add.w	r3, r3, #10
 8011982:	613b      	str	r3, [r7, #16]
	
	// Update the offset of data and parameters according to the command
	switch(opcode)
 8011984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011986:	2b81      	cmp	r3, #129	; 0x81
 8011988:	d012      	beq.n	80119b0 <simple_link_send+0x78>
 801198a:	2b83      	cmp	r3, #131	; 0x83
 801198c:	d11f      	bne.n	80119ce <simple_link_send+0x96>
	{ 
	case HCI_CMND_SENDTO:
		{
			addr_offset = len + sizeof(len) + sizeof(len);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f103 0308 	add.w	r3, r3, #8
 8011994:	61fb      	str	r3, [r7, #28]
			addrlen = 8;
 8011996:	f04f 0308 	mov.w	r3, #8
 801199a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uArgSize = SOCKET_SENDTO_PARAMS_LEN;
 801199e:	f04f 0318 	mov.w	r3, #24
 80119a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			pDataPtr = ptr + HEADERS_SIZE_DATA + SOCKET_SENDTO_PARAMS_LEN;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80119ac:	623b      	str	r3, [r7, #32]
			break;
 80119ae:	e00f      	b.n	80119d0 <simple_link_send+0x98>
		}
		
	case HCI_CMND_SEND:
		{
			tolen = 0;
 80119b0:	f04f 0300 	mov.w	r3, #0
 80119b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			to = NULL;
 80119b6:	f04f 0300 	mov.w	r3, #0
 80119ba:	63bb      	str	r3, [r7, #56]	; 0x38
			uArgSize = HCI_CMND_SEND_ARG_LENGTH;
 80119bc:	f04f 0310 	mov.w	r3, #16
 80119c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			pDataPtr = ptr + HEADERS_SIZE_DATA + HCI_CMND_SEND_ARG_LENGTH;
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	f103 031a 	add.w	r3, r3, #26
 80119ca:	623b      	str	r3, [r7, #32]
			break;
 80119cc:	e000      	b.n	80119d0 <simple_link_send+0x98>
		}
		
	default:
		{
			break;
 80119ce:	bf00      	nop
		}
	}
	
	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	6938      	ldr	r0, [r7, #16]
 80119d4:	4619      	mov	r1, r3
 80119d6:	f7fe fcaf 	bl	8010338 <UINT32_TO_STREAM_f>
 80119da:	6138      	str	r0, [r7, #16]
	args = UINT32_TO_STREAM(args, uArgSize - sizeof(sd));
 80119dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119e0:	f1a3 0304 	sub.w	r3, r3, #4
 80119e4:	6938      	ldr	r0, [r7, #16]
 80119e6:	4619      	mov	r1, r3
 80119e8:	f7fe fca6 	bl	8010338 <UINT32_TO_STREAM_f>
 80119ec:	6138      	str	r0, [r7, #16]
	args = UINT32_TO_STREAM(args, len);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6938      	ldr	r0, [r7, #16]
 80119f2:	4619      	mov	r1, r3
 80119f4:	f7fe fca0 	bl	8010338 <UINT32_TO_STREAM_f>
 80119f8:	6138      	str	r0, [r7, #16]
	args = UINT32_TO_STREAM(args, flags);
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	6938      	ldr	r0, [r7, #16]
 80119fe:	4619      	mov	r1, r3
 8011a00:	f7fe fc9a 	bl	8010338 <UINT32_TO_STREAM_f>
 8011a04:	6138      	str	r0, [r7, #16]
	
	if (opcode == HCI_CMND_SENDTO)
 8011a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a08:	2b83      	cmp	r3, #131	; 0x83
 8011a0a:	d10b      	bne.n	8011a24 <simple_link_send+0xec>
	{
		args = UINT32_TO_STREAM(args, addr_offset);
 8011a0c:	6938      	ldr	r0, [r7, #16]
 8011a0e:	69f9      	ldr	r1, [r7, #28]
 8011a10:	f7fe fc92 	bl	8010338 <UINT32_TO_STREAM_f>
 8011a14:	6138      	str	r0, [r7, #16]
		args = UINT32_TO_STREAM(args, addrlen);
 8011a16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a1a:	6938      	ldr	r0, [r7, #16]
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	f7fe fc8b 	bl	8010338 <UINT32_TO_STREAM_f>
 8011a22:	6138      	str	r0, [r7, #16]
	}
	
	// Copy the data received from user into the TX Buffer
	ARRAY_TO_STREAM(pDataPtr, ((unsigned char *)buf), len);
 8011a24:	f04f 0400 	mov.w	r4, #0
 8011a28:	e00d      	b.n	8011a46 <simple_link_send+0x10e>
 8011a2a:	b223      	sxth	r3, r4
 8011a2c:	68ba      	ldr	r2, [r7, #8]
 8011a2e:	18d3      	adds	r3, r2, r3
 8011a30:	781a      	ldrb	r2, [r3, #0]
 8011a32:	6a3b      	ldr	r3, [r7, #32]
 8011a34:	701a      	strb	r2, [r3, #0]
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	f103 0301 	add.w	r3, r3, #1
 8011a3c:	623b      	str	r3, [r7, #32]
 8011a3e:	4623      	mov	r3, r4
 8011a40:	f103 0301 	add.w	r3, r3, #1
 8011a44:	b29c      	uxth	r4, r3
 8011a46:	b222      	sxth	r2, r4
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	dbed      	blt.n	8011a2a <simple_link_send+0xf2>
	
	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
 8011a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a50:	2b83      	cmp	r3, #131	; 0x83
 8011a52:	d114      	bne.n	8011a7e <simple_link_send+0x146>
	{	
		ARRAY_TO_STREAM(pDataPtr, ((unsigned char *)to), tolen);
 8011a54:	f04f 0400 	mov.w	r4, #0
 8011a58:	e00d      	b.n	8011a76 <simple_link_send+0x13e>
 8011a5a:	b223      	sxth	r3, r4
 8011a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a5e:	18d3      	adds	r3, r2, r3
 8011a60:	781a      	ldrb	r2, [r3, #0]
 8011a62:	6a3b      	ldr	r3, [r7, #32]
 8011a64:	701a      	strb	r2, [r3, #0]
 8011a66:	6a3b      	ldr	r3, [r7, #32]
 8011a68:	f103 0301 	add.w	r3, r3, #1
 8011a6c:	623b      	str	r3, [r7, #32]
 8011a6e:	4623      	mov	r3, r4
 8011a70:	f103 0301 	add.w	r3, r3, #1
 8011a74:	b29c      	uxth	r4, r3
 8011a76:	b222      	sxth	r2, r4
 8011a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	dbed      	blt.n	8011a5a <simple_link_send+0x122>
	}
	
	// Initiate a HCI command
	hci_data_send(opcode, ptr, uArgSize, len,(unsigned char*)to, tolen);
 8011a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a80:	b2d9      	uxtb	r1, r3
 8011a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011a8e:	b280      	uxth	r0, r0
 8011a90:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8011a92:	9400      	str	r4, [sp, #0]
 8011a94:	9001      	str	r0, [sp, #4]
 8011a96:	4608      	mov	r0, r1
 8011a98:	6979      	ldr	r1, [r7, #20]
 8011a9a:	f7ff fb7d 	bl	8011198 <hci_data_send>
	
	return	(len);
 8011a9e:	687b      	ldr	r3, [r7, #4]
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd90      	pop	{r4, r7, pc}
 8011aaa:	bf00      	nop

08011aac <send>:
//
//*****************************************************************************

int
send(long sd, const void *buf, long len, long flags)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b088      	sub	sp, #32
 8011ab0:	af04      	add	r7, sp, #16
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	60b9      	str	r1, [r7, #8]
 8011ab6:	607a      	str	r2, [r7, #4]
 8011ab8:	603b      	str	r3, [r7, #0]
	return(simple_link_send(sd, buf, len, flags, NULL, 0, HCI_CMND_SEND));
 8011aba:	f04f 0300 	mov.w	r3, #0
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	f04f 0300 	mov.w	r3, #0
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	f04f 0381 	mov.w	r3, #129	; 0x81
 8011aca:	9302      	str	r3, [sp, #8]
 8011acc:	68f8      	ldr	r0, [r7, #12]
 8011ace:	68b9      	ldr	r1, [r7, #8]
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	f7ff ff30 	bl	8011938 <simple_link_send>
 8011ad8:	4603      	mov	r3, r0
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	f107 0710 	add.w	r7, r7, #16
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <SimpleLink_Init_Start>:
//!
//!  @brief    Send HCI_CMND_SIMPLE_LINK_START to CC3000
//
//*****************************************************************************
static void SimpleLink_Init_Start(unsigned short usPatchesAvailableAtHost)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	4603      	mov	r3, r0
 8011aec:	80fb      	strh	r3, [r7, #6]
	unsigned char *ptr;
	unsigned char *args;
	
	ptr = tSLInformation.pucTxCommandBuffer;
 8011aee:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011af6:	689b      	ldr	r3, [r3, #8]
 8011af8:	60fb      	str	r3, [r7, #12]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	f103 0309 	add.w	r3, r3, #9
 8011b00:	60bb      	str	r3, [r7, #8]
	
	UINT8_TO_STREAM(args, ((usPatchesAvailableAtHost) ? SL_PATCHES_REQUEST_FORCE_HOST : SL_PATCHES_REQUEST_DEFAULT));
 8011b02:	88fb      	ldrh	r3, [r7, #6]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	bf0c      	ite	eq
 8011b08:	2300      	moveq	r3, #0
 8011b0a:	2301      	movne	r3, #1
 8011b0c:	b2db      	uxtb	r3, r3
 8011b0e:	461a      	mov	r2, r3
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	701a      	strb	r2, [r3, #0]
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	f103 0301 	add.w	r3, r3, #1
 8011b1a:	60bb      	str	r3, [r7, #8]
	
	// IRQ Line asserted - send HCI_CMND_SIMPLE_LINK_START to CC3000
	hci_command_send(HCI_CMND_SIMPLE_LINK_START, ptr, WLAN_SL_INIT_START_PARAMS_LEN);
 8011b1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011b20:	68f9      	ldr	r1, [r7, #12]
 8011b22:	f04f 0201 	mov.w	r2, #1
 8011b26:	f7ff fb05 	bl	8011134 <hci_command_send>
	
	SimpleLinkWaitEvent(HCI_CMND_SIMPLE_LINK_START, 0);
 8011b2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011b2e:	f04f 0100 	mov.w	r1, #0
 8011b32:	f7ff fad1 	bl	80110d8 <SimpleLinkWaitEvent>
}
 8011b36:	f107 0710 	add.w	r7, r7, #16
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop

08011b40 <wlan_init>:
							 tBootLoaderPatches sBootLoaderPatches,
							 tWlanReadInteruptPin  sReadWlanInterruptPin,
							 tWlanInterruptEnable  sWlanInterruptEnable,
							 tWlanInterruptDisable sWlanInterruptDisable,
							 tWriteWlanPin         sWriteWlanPin)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	607a      	str	r2, [r7, #4]
 8011b4c:	603b      	str	r3, [r7, #0]
	
	tSLInformation.sFWPatches = sFWPatches;
 8011b4e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	60da      	str	r2, [r3, #12]
	tSLInformation.sDriverPatches = sDriverPatches;
 8011b5a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	611a      	str	r2, [r3, #16]
	tSLInformation.sBootLoaderPatches = sBootLoaderPatches;
 8011b66:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b6e:	683a      	ldr	r2, [r7, #0]
 8011b70:	615a      	str	r2, [r3, #20]
	
	// init io callback
	tSLInformation.ReadWlanInterruptPin = sReadWlanInterruptPin;
 8011b72:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b7a:	69ba      	ldr	r2, [r7, #24]
 8011b7c:	61da      	str	r2, [r3, #28]
	tSLInformation.WlanInterruptEnable  = sWlanInterruptEnable;
 8011b7e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b86:	69fa      	ldr	r2, [r7, #28]
 8011b88:	621a      	str	r2, [r3, #32]
	tSLInformation.WlanInterruptDisable = sWlanInterruptDisable;
 8011b8a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b92:	6a3a      	ldr	r2, [r7, #32]
 8011b94:	625a      	str	r2, [r3, #36]	; 0x24
	tSLInformation.WriteWlanPin = sWriteWlanPin;
 8011b96:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ba0:	629a      	str	r2, [r3, #40]	; 0x28
	
	//init asynchronous events callback
	tSLInformation.sWlanCB= sWlanCB;
 8011ba2:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	619a      	str	r2, [r3, #24]
	
	// By default TX Complete events are routed to host too
	tSLInformation.InformHostOnTxComplete = 1;
 8011bae:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011bb6:	f04f 0201 	mov.w	r2, #1
 8011bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8011bbe:	f107 0714 	add.w	r7, r7, #20
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bc80      	pop	{r7}
 8011bc6:	4770      	bx	lr

08011bc8 <SpiReceiveHandler>:
//!  @brief         The function triggers Received event/data processing. It is 
//! 			          called from the SPI library to receive the data
//
//*****************************************************************************
void SpiReceiveHandler(void *pvBuffer)
{	
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
	tSLInformation.usEventOrDataReceived = 1;
 8011bd0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011bd8:	f04f 0201 	mov.w	r2, #1
 8011bdc:	805a      	strh	r2, [r3, #2]
	tSLInformation.pucReceivedData = (unsigned char 	*)pvBuffer;
 8011bde:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	605a      	str	r2, [r3, #4]
	
	hci_unsolicited_event_handler();
 8011bea:	f7ff f975 	bl	8010ed8 <hci_unsolicited_event_handler>
}
 8011bee:	f107 0708 	add.w	r7, r7, #8
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop

08011bf8 <wlan_start>:
//
//*****************************************************************************

void
wlan_start(unsigned short usPatchesAvailableAtHost)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	4603      	mov	r3, r0
 8011c00:	80fb      	strh	r3, [r7, #6]
	
	unsigned long ulSpiIRQState;
	
	tSLInformation.NumberOfSentPackets = 0;
 8011c02:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c0a:	f04f 0200 	mov.w	r2, #0
 8011c0e:	639a      	str	r2, [r3, #56]	; 0x38
	tSLInformation.NumberOfReleasedPackets = 0;
 8011c10:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c18:	f04f 0200 	mov.w	r2, #0
 8011c1c:	63da      	str	r2, [r3, #60]	; 0x3c
	tSLInformation.usRxEventOpcode = 0;
 8011c1e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c26:	f04f 0200 	mov.w	r2, #0
 8011c2a:	801a      	strh	r2, [r3, #0]
	tSLInformation.usNumberOfFreeBuffers = 0;
 8011c2c:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c34:	f04f 0200 	mov.w	r2, #0
 8011c38:	861a      	strh	r2, [r3, #48]	; 0x30
	tSLInformation.usSlBufferLength = 0;
 8011c3a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c42:	f04f 0200 	mov.w	r2, #0
 8011c46:	865a      	strh	r2, [r3, #50]	; 0x32
	tSLInformation.usBufferSize = 0;
 8011c48:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c50:	f04f 0200 	mov.w	r2, #0
 8011c54:	869a      	strh	r2, [r3, #52]	; 0x34
	tSLInformation.usRxDataPending = 0;
 8011c56:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c5e:	f04f 0200 	mov.w	r2, #0
 8011c62:	86da      	strh	r2, [r3, #54]	; 0x36
	tSLInformation.slTransmitDataError = 0;
 8011c64:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c6c:	f04f 0200 	mov.w	r2, #0
 8011c70:	62da      	str	r2, [r3, #44]	; 0x2c
	tSLInformation.usEventOrDataReceived = 0;
 8011c72:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c7a:	f04f 0200 	mov.w	r2, #0
 8011c7e:	805a      	strh	r2, [r3, #2]
	tSLInformation.pucReceivedData = 0;
 8011c80:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c88:	f04f 0200 	mov.w	r2, #0
 8011c8c:	605a      	str	r2, [r3, #4]
	
	// Allocate the memory for the RX/TX data transactions
	tSLInformation.pucTxCommandBuffer = (unsigned char *)wlan_tx_buffer;
 8011c8e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011c96:	f240 52d8 	movw	r2, #1496	; 0x5d8
 8011c9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8011c9e:	609a      	str	r2, [r3, #8]
	
	// init spi
	SpiOpen(SpiReceiveHandler);
 8011ca0:	f641 30c9 	movw	r0, #7113	; 0x1bc9
 8011ca4:	f6c0 0001 	movt	r0, #2049	; 0x801
 8011ca8:	f7f8 fa76 	bl	800a198 <SpiOpen>
	
	// Check the IRQ line
	ulSpiIRQState = tSLInformation.ReadWlanInterruptPin();
 8011cac:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cb4:	69db      	ldr	r3, [r3, #28]
 8011cb6:	4798      	blx	r3
 8011cb8:	4603      	mov	r3, r0
 8011cba:	60fb      	str	r3, [r7, #12]
	
	// ASIC 1273 chip enable: toggle WLAN EN line
	tSLInformation.WriteWlanPin( WLAN_ENABLE );
 8011cbc:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cc6:	f04f 0001 	mov.w	r0, #1
 8011cca:	4798      	blx	r3
	
	if (ulSpiIRQState)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d00a      	beq.n	8011ce8 <wlan_start+0xf0>
	{
		// wait till the IRQ line goes low
		while(tSLInformation.ReadWlanInterruptPin() != 0)
 8011cd2:	bf00      	nop
 8011cd4:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cdc:	69db      	ldr	r3, [r3, #28]
 8011cde:	4798      	blx	r3
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1f6      	bne.n	8011cd4 <wlan_start+0xdc>
 8011ce6:	e013      	b.n	8011d10 <wlan_start+0x118>
		}
	}
	else
	{
		// wait till the IRQ line goes high and than low
		while(tSLInformation.ReadWlanInterruptPin() == 0)
 8011ce8:	bf00      	nop
 8011cea:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cf2:	69db      	ldr	r3, [r3, #28]
 8011cf4:	4798      	blx	r3
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d0f6      	beq.n	8011cea <wlan_start+0xf2>
		{
		}
		
		while(tSLInformation.ReadWlanInterruptPin() != 0)
 8011cfc:	bf00      	nop
 8011cfe:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d06:	69db      	ldr	r3, [r3, #28]
 8011d08:	4798      	blx	r3
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d1f6      	bne.n	8011cfe <wlan_start+0x106>
		{
		}
	}
	
	SimpleLink_Init_Start(usPatchesAvailableAtHost);
 8011d10:	88fb      	ldrh	r3, [r7, #6]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7ff fee6 	bl	8011ae4 <SimpleLink_Init_Start>
	
	// Read Buffer's size and finish
	hci_command_send(HCI_CMND_READ_BUFFER_SIZE, tSLInformation.pucTxCommandBuffer, 0);
 8011d18:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d20:	689b      	ldr	r3, [r3, #8]
 8011d22:	f244 000b 	movw	r0, #16395	; 0x400b
 8011d26:	4619      	mov	r1, r3
 8011d28:	f04f 0200 	mov.w	r2, #0
 8011d2c:	f7ff fa02 	bl	8011134 <hci_command_send>
	SimpleLinkWaitEvent(HCI_CMND_READ_BUFFER_SIZE, 0);
 8011d30:	f244 000b 	movw	r0, #16395	; 0x400b
 8011d34:	f04f 0100 	mov.w	r1, #0
 8011d38:	f7ff f9ce 	bl	80110d8 <SimpleLinkWaitEvent>
}
 8011d3c:	f107 0710 	add.w	r7, r7, #16
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <wlan_connect>:
  
#ifndef CC3000_TINY_DRIVER
long
wlan_connect(unsigned long ulSecType, char *ssid, long ssid_len,
             unsigned char *bssid, unsigned char *key, long key_len)
{
 8011d44:	b590      	push	{r4, r7, lr}
 8011d46:	b08b      	sub	sp, #44	; 0x2c
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	607a      	str	r2, [r7, #4]
 8011d50:	603b      	str	r3, [r7, #0]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	unsigned char bssid_zero[] = {0, 0, 0, 0, 0, 0};
 8011d52:	f04f 0300 	mov.w	r3, #0
 8011d56:	753b      	strb	r3, [r7, #20]
 8011d58:	f04f 0300 	mov.w	r3, #0
 8011d5c:	757b      	strb	r3, [r7, #21]
 8011d5e:	f04f 0300 	mov.w	r3, #0
 8011d62:	75bb      	strb	r3, [r7, #22]
 8011d64:	f04f 0300 	mov.w	r3, #0
 8011d68:	75fb      	strb	r3, [r7, #23]
 8011d6a:	f04f 0300 	mov.w	r3, #0
 8011d6e:	763b      	strb	r3, [r7, #24]
 8011d70:	f04f 0300 	mov.w	r3, #0
 8011d74:	767b      	strb	r3, [r7, #25]
	
	ret  	= EFAIL;
 8011d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d7a:	61fb      	str	r3, [r7, #28]
	ptr  	= tSLInformation.pucTxCommandBuffer;
 8011d7c:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	623b      	str	r3, [r7, #32]
	args 	= (ptr + HEADERS_SIZE_CMD);
 8011d88:	6a3b      	ldr	r3, [r7, #32]
 8011d8a:	f103 0309 	add.w	r3, r3, #9
 8011d8e:	627b      	str	r3, [r7, #36]	; 0x24
	
	// Fill in command buffer
	args = UINT32_TO_STREAM(args, 0x0000001c);
 8011d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d92:	f04f 011c 	mov.w	r1, #28
 8011d96:	f7fe facf 	bl	8010338 <UINT32_TO_STREAM_f>
 8011d9a:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ssid_len);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011da0:	4619      	mov	r1, r3
 8011da2:	f7fe fac9 	bl	8010338 <UINT32_TO_STREAM_f>
 8011da6:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ulSecType);
 8011da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011daa:	68f9      	ldr	r1, [r7, #12]
 8011dac:	f7fe fac4 	bl	8010338 <UINT32_TO_STREAM_f>
 8011db0:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000010 + ssid_len);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f103 0310 	add.w	r3, r3, #16
 8011db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dba:	4619      	mov	r1, r3
 8011dbc:	f7fe fabc 	bl	8010338 <UINT32_TO_STREAM_f>
 8011dc0:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, key_len);
 8011dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	f7fe fab6 	bl	8010338 <UINT32_TO_STREAM_f>
 8011dcc:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT16_TO_STREAM(args, 0);
 8011dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dd0:	f04f 0100 	mov.w	r1, #0
 8011dd4:	f7fe fae2 	bl	801039c <UINT16_TO_STREAM_f>
 8011dd8:	6278      	str	r0, [r7, #36]	; 0x24
	
	// padding shall be zeroed
	if(bssid)
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d014      	beq.n	8011e0a <wlan_connect+0xc6>
	{
		ARRAY_TO_STREAM(args, bssid, ETH_ALEN);
 8011de0:	f04f 0400 	mov.w	r4, #0
 8011de4:	e00d      	b.n	8011e02 <wlan_connect+0xbe>
 8011de6:	b223      	sxth	r3, r4
 8011de8:	683a      	ldr	r2, [r7, #0]
 8011dea:	18d3      	adds	r3, r2, r3
 8011dec:	781a      	ldrb	r2, [r3, #0]
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	701a      	strb	r2, [r3, #0]
 8011df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df4:	f103 0301 	add.w	r3, r3, #1
 8011df8:	627b      	str	r3, [r7, #36]	; 0x24
 8011dfa:	4623      	mov	r3, r4
 8011dfc:	f103 0301 	add.w	r3, r3, #1
 8011e00:	b29c      	uxth	r4, r3
 8011e02:	b223      	sxth	r3, r4
 8011e04:	2b05      	cmp	r3, #5
 8011e06:	ddee      	ble.n	8011de6 <wlan_connect+0xa2>
 8011e08:	e014      	b.n	8011e34 <wlan_connect+0xf0>
	}
	else
	{
		ARRAY_TO_STREAM(args, bssid_zero, ETH_ALEN);
 8011e0a:	f04f 0400 	mov.w	r4, #0
 8011e0e:	e00e      	b.n	8011e2e <wlan_connect+0xea>
 8011e10:	b223      	sxth	r3, r4
 8011e12:	f107 0214 	add.w	r2, r7, #20
 8011e16:	18d3      	adds	r3, r2, r3
 8011e18:	781a      	ldrb	r2, [r3, #0]
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1c:	701a      	strb	r2, [r3, #0]
 8011e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e20:	f103 0301 	add.w	r3, r3, #1
 8011e24:	627b      	str	r3, [r7, #36]	; 0x24
 8011e26:	4623      	mov	r3, r4
 8011e28:	f103 0301 	add.w	r3, r3, #1
 8011e2c:	b29c      	uxth	r4, r3
 8011e2e:	b223      	sxth	r3, r4
 8011e30:	2b05      	cmp	r3, #5
 8011e32:	dded      	ble.n	8011e10 <wlan_connect+0xcc>
	}
	
	ARRAY_TO_STREAM(args, ssid, ssid_len);
 8011e34:	f04f 0400 	mov.w	r4, #0
 8011e38:	e00d      	b.n	8011e56 <wlan_connect+0x112>
 8011e3a:	b223      	sxth	r3, r4
 8011e3c:	68ba      	ldr	r2, [r7, #8]
 8011e3e:	18d3      	adds	r3, r2, r3
 8011e40:	781a      	ldrb	r2, [r3, #0]
 8011e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e44:	701a      	strb	r2, [r3, #0]
 8011e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e48:	f103 0301 	add.w	r3, r3, #1
 8011e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8011e4e:	4623      	mov	r3, r4
 8011e50:	f103 0301 	add.w	r3, r3, #1
 8011e54:	b29c      	uxth	r4, r3
 8011e56:	b222      	sxth	r2, r4
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	dbed      	blt.n	8011e3a <wlan_connect+0xf6>
	
	if(key_len && key)
 8011e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d017      	beq.n	8011e94 <wlan_connect+0x150>
 8011e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d014      	beq.n	8011e94 <wlan_connect+0x150>
	{
		ARRAY_TO_STREAM(args, key, key_len);
 8011e6a:	f04f 0400 	mov.w	r4, #0
 8011e6e:	e00d      	b.n	8011e8c <wlan_connect+0x148>
 8011e70:	b223      	sxth	r3, r4
 8011e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e74:	18d3      	adds	r3, r2, r3
 8011e76:	781a      	ldrb	r2, [r3, #0]
 8011e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7a:	701a      	strb	r2, [r3, #0]
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7e:	f103 0301 	add.w	r3, r3, #1
 8011e82:	627b      	str	r3, [r7, #36]	; 0x24
 8011e84:	4623      	mov	r3, r4
 8011e86:	f103 0301 	add.w	r3, r3, #1
 8011e8a:	b29c      	uxth	r4, r3
 8011e8c:	b222      	sxth	r2, r4
 8011e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e90:	429a      	cmp	r2, r3
 8011e92:	dbed      	blt.n	8011e70 <wlan_connect+0x12c>
	}
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_CONNECT, ptr, WLAN_CONNECT_PARAM_LEN + 
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	b2da      	uxtb	r2, r3
 8011e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	18d3      	adds	r3, r2, r3
 8011e9e:	b2db      	uxtb	r3, r3
 8011ea0:	f103 031c 	add.w	r3, r3, #28
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	f04f 0001 	mov.w	r0, #1
 8011eaa:	6a39      	ldr	r1, [r7, #32]
 8011eac:	461a      	mov	r2, r3
 8011eae:	f7ff f941 	bl	8011134 <hci_command_send>
									 ssid_len + key_len - 1);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_CONNECT, &ret);
 8011eb2:	f107 031c 	add.w	r3, r7, #28
 8011eb6:	f04f 0001 	mov.w	r0, #1
 8011eba:	4619      	mov	r1, r3
 8011ebc:	f7ff f90c 	bl	80110d8 <SimpleLinkWaitEvent>
	errno = ret;
 8011ec0:	f000 f8ee 	bl	80120a0 <__errno>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	69fa      	ldr	r2, [r7, #28]
 8011ec8:	601a      	str	r2, [r3, #0]
	
	return(ret);
 8011eca:	69fb      	ldr	r3, [r7, #28]
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd90      	pop	{r4, r7, pc}
 8011ed6:	bf00      	nop

08011ed8 <wlan_ioctl_set_connection_policy>:

long
wlan_ioctl_set_connection_policy(unsigned long should_connect_to_open_ap, 
                                 unsigned long ulShouldUseFastConnect,
                                 unsigned long ulUseProfiles)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b088      	sub	sp, #32
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	
	ret = EFAIL;
 8011ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ee8:	617b      	str	r3, [r7, #20]
	ptr = tSLInformation.pucTxCommandBuffer;
 8011eea:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ef2:	689b      	ldr	r3, [r3, #8]
 8011ef4:	61fb      	str	r3, [r7, #28]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	f103 0309 	add.w	r3, r3, #9
 8011efc:	61bb      	str	r3, [r7, #24]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, should_connect_to_open_ap);
 8011efe:	69b8      	ldr	r0, [r7, #24]
 8011f00:	68f9      	ldr	r1, [r7, #12]
 8011f02:	f7fe fa19 	bl	8010338 <UINT32_TO_STREAM_f>
 8011f06:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, ulShouldUseFastConnect);
 8011f08:	69b8      	ldr	r0, [r7, #24]
 8011f0a:	68b9      	ldr	r1, [r7, #8]
 8011f0c:	f7fe fa14 	bl	8010338 <UINT32_TO_STREAM_f>
 8011f10:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, ulUseProfiles);
 8011f12:	69b8      	ldr	r0, [r7, #24]
 8011f14:	6879      	ldr	r1, [r7, #4]
 8011f16:	f7fe fa0f 	bl	8010338 <UINT32_TO_STREAM_f>
 8011f1a:	61b8      	str	r0, [r7, #24]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY,
 8011f1c:	f04f 0004 	mov.w	r0, #4
 8011f20:	69f9      	ldr	r1, [r7, #28]
 8011f22:	f04f 020c 	mov.w	r2, #12
 8011f26:	f7ff f905 	bl	8011134 <hci_command_send>
									 ptr, WLAN_SET_CONNECTION_POLICY_PARAMS_LEN);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY, &ret);
 8011f2a:	f107 0314 	add.w	r3, r7, #20
 8011f2e:	f04f 0004 	mov.w	r0, #4
 8011f32:	4619      	mov	r1, r3
 8011f34:	f7ff f8d0 	bl	80110d8 <SimpleLinkWaitEvent>
	
	return(ret);
 8011f38:	697b      	ldr	r3, [r7, #20]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f107 0720 	add.w	r7, r7, #32
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <wlan_ioctl_del_profile>:
//
//*****************************************************************************

long
wlan_ioctl_del_profile(unsigned long ulIndex)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b086      	sub	sp, #24
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	
	ptr = tSLInformation.pucTxCommandBuffer;
 8011f4c:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f54:	689b      	ldr	r3, [r3, #8]
 8011f56:	617b      	str	r3, [r7, #20]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	f103 0309 	add.w	r3, r3, #9
 8011f5e:	613b      	str	r3, [r7, #16]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulIndex);
 8011f60:	6938      	ldr	r0, [r7, #16]
 8011f62:	6879      	ldr	r1, [r7, #4]
 8011f64:	f7fe f9e8 	bl	8010338 <UINT32_TO_STREAM_f>
 8011f68:	6138      	str	r0, [r7, #16]
	ret = EFAIL;
 8011f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f6e:	60fb      	str	r3, [r7, #12]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_DEL_PROFILE,
 8011f70:	f04f 0006 	mov.w	r0, #6
 8011f74:	6979      	ldr	r1, [r7, #20]
 8011f76:	f04f 0204 	mov.w	r2, #4
 8011f7a:	f7ff f8db 	bl	8011134 <hci_command_send>
									 ptr, WLAN_DEL_PROFILE_PARAMS_LEN);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_DEL_PROFILE, &ret);
 8011f7e:	f107 030c 	add.w	r3, r7, #12
 8011f82:	f04f 0006 	mov.w	r0, #6
 8011f86:	4619      	mov	r1, r3
 8011f88:	f7ff f8a6 	bl	80110d8 <SimpleLinkWaitEvent>
	
	return(ret);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f107 0718 	add.w	r7, r7, #24
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <wlan_set_event_mask>:
//
//*****************************************************************************

long
wlan_set_event_mask(unsigned long ulMask)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b086      	sub	sp, #24
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	
	
	if ((ulMask & HCI_EVNT_WLAN_TX_COMPLETE) == HCI_EVNT_WLAN_TX_COMPLETE)
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	f248 0308 	movw	r3, #32776	; 0x8008
 8011fa6:	4013      	ands	r3, r2
 8011fa8:	f248 0208 	movw	r2, #32776	; 0x8008
 8011fac:	4293      	cmp	r3, r2
 8011fae:	d11a      	bne.n	8011fe6 <wlan_set_event_mask+0x4e>
	{
		tSLInformation.InformHostOnTxComplete = 0;
 8011fb0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fb8:	f04f 0200 	mov.w	r2, #0
 8011fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		
		// Since an event is a virtual event - i.e. it is not coming from CC3000
		// there is no need to send anything to the device if it was an only event
		if (ulMask == HCI_EVNT_WLAN_TX_COMPLETE)
 8011fc0:	687a      	ldr	r2, [r7, #4]
 8011fc2:	f248 0308 	movw	r3, #32776	; 0x8008
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d102      	bne.n	8011fd0 <wlan_set_event_mask+0x38>
		{
			return 0;
 8011fca:	f04f 0300 	mov.w	r3, #0
 8011fce:	e033      	b.n	8012038 <wlan_set_event_mask+0xa0>
		}
		
		ulMask &= ~HCI_EVNT_WLAN_TX_COMPLETE;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011fd6:	f023 0308 	bic.w	r3, r3, #8
 8011fda:	607b      	str	r3, [r7, #4]
		ulMask |= HCI_EVNT_WLAN_UNSOL_BASE;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011fe2:	607b      	str	r3, [r7, #4]
 8011fe4:	e007      	b.n	8011ff6 <wlan_set_event_mask+0x5e>
	}
	else
	{
		tSLInformation.InformHostOnTxComplete = 1;
 8011fe6:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011fee:	f04f 0201 	mov.w	r2, #1
 8011ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	
	ret = EFAIL;
 8011ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ffa:	60fb      	str	r3, [r7, #12]
	ptr = tSLInformation.pucTxCommandBuffer;
 8011ffc:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8012000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012004:	689b      	ldr	r3, [r3, #8]
 8012006:	617b      	str	r3, [r7, #20]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	f103 0309 	add.w	r3, r3, #9
 801200e:	613b      	str	r3, [r7, #16]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulMask);
 8012010:	6938      	ldr	r0, [r7, #16]
 8012012:	6879      	ldr	r1, [r7, #4]
 8012014:	f7fe f990 	bl	8010338 <UINT32_TO_STREAM_f>
 8012018:	6138      	str	r0, [r7, #16]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_EVENT_MASK,
 801201a:	f04f 0008 	mov.w	r0, #8
 801201e:	6979      	ldr	r1, [r7, #20]
 8012020:	f04f 0204 	mov.w	r2, #4
 8012024:	f7ff f886 	bl	8011134 <hci_command_send>
									 ptr, WLAN_SET_MASK_PARAMS_LEN);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_EVENT_MASK, &ret);
 8012028:	f107 030c 	add.w	r3, r7, #12
 801202c:	f04f 0008 	mov.w	r0, #8
 8012030:	4619      	mov	r1, r3
 8012032:	f7ff f851 	bl	80110d8 <SimpleLinkWaitEvent>
	
	return(ret);
 8012036:	68fb      	ldr	r3, [r7, #12]
}
 8012038:	4618      	mov	r0, r3
 801203a:	f107 0718 	add.w	r7, r7, #24
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop

08012044 <wlan_smart_config_start>:
//
//*****************************************************************************

long
wlan_smart_config_start(unsigned long algoEncryptedFlag)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b086      	sub	sp, #24
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	
	ret = EFAIL;
 801204c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012050:	60fb      	str	r3, [r7, #12]
	ptr = tSLInformation.pucTxCommandBuffer;
 8012052:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8012056:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801205a:	689b      	ldr	r3, [r3, #8]
 801205c:	617b      	str	r3, [r7, #20]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	f103 0309 	add.w	r3, r3, #9
 8012064:	613b      	str	r3, [r7, #16]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, algoEncryptedFlag);
 8012066:	6938      	ldr	r0, [r7, #16]
 8012068:	6879      	ldr	r1, [r7, #4]
 801206a:	f7fe f965 	bl	8010338 <UINT32_TO_STREAM_f>
 801206e:	6138      	str	r0, [r7, #16]
	ret = EFAIL;
 8012070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012074:	60fb      	str	r3, [r7, #12]
	
	hci_command_send(HCI_CMND_WLAN_IOCTL_SIMPLE_CONFIG_START, ptr, 
 8012076:	f04f 000a 	mov.w	r0, #10
 801207a:	6979      	ldr	r1, [r7, #20]
 801207c:	f04f 0204 	mov.w	r2, #4
 8012080:	f7ff f858 	bl	8011134 <hci_command_send>
									 WLAN_SMART_CONFIG_START_PARAMS_LEN);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SIMPLE_CONFIG_START, &ret);
 8012084:	f107 030c 	add.w	r3, r7, #12
 8012088:	f04f 000a 	mov.w	r0, #10
 801208c:	4619      	mov	r1, r3
 801208e:	f7ff f823 	bl	80110d8 <SimpleLinkWaitEvent>
	
	return(ret);    
 8012092:	68fb      	ldr	r3, [r7, #12]
}
 8012094:	4618      	mov	r0, r3
 8012096:	f107 0718 	add.w	r7, r7, #24
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop

080120a0 <__errno>:
 80120a0:	f240 5390 	movw	r3, #1424	; 0x590
 80120a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80120a8:	6818      	ldr	r0, [r3, #0]
 80120aa:	4770      	bx	lr

080120ac <memcpy>:
 80120ac:	2a0f      	cmp	r2, #15
 80120ae:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80120b2:	f240 80a1 	bls.w	80121f8 <memcpy+0x14c>
 80120b6:	ea41 0300 	orr.w	r3, r1, r0
 80120ba:	079b      	lsls	r3, r3, #30
 80120bc:	f040 809e 	bne.w	80121fc <memcpy+0x150>
 80120c0:	680c      	ldr	r4, [r1, #0]
 80120c2:	f1a2 0510 	sub.w	r5, r2, #16
 80120c6:	6004      	str	r4, [r0, #0]
 80120c8:	684b      	ldr	r3, [r1, #4]
 80120ca:	46ac      	mov	ip, r5
 80120cc:	6043      	str	r3, [r0, #4]
 80120ce:	688c      	ldr	r4, [r1, #8]
 80120d0:	f1bc 0f0f 	cmp.w	ip, #15
 80120d4:	6084      	str	r4, [r0, #8]
 80120d6:	68cc      	ldr	r4, [r1, #12]
 80120d8:	f3c5 1500 	ubfx	r5, r5, #4, #1
 80120dc:	60c4      	str	r4, [r0, #12]
 80120de:	f100 0310 	add.w	r3, r0, #16
 80120e2:	f101 0410 	add.w	r4, r1, #16
 80120e6:	d92b      	bls.n	8012140 <memcpy+0x94>
 80120e8:	b175      	cbz	r5, 8012108 <memcpy+0x5c>
 80120ea:	6825      	ldr	r5, [r4, #0]
 80120ec:	f1ac 0c10 	sub.w	ip, ip, #16
 80120f0:	601d      	str	r5, [r3, #0]
 80120f2:	6865      	ldr	r5, [r4, #4]
 80120f4:	605d      	str	r5, [r3, #4]
 80120f6:	68a5      	ldr	r5, [r4, #8]
 80120f8:	609d      	str	r5, [r3, #8]
 80120fa:	68e5      	ldr	r5, [r4, #12]
 80120fc:	3410      	adds	r4, #16
 80120fe:	60dd      	str	r5, [r3, #12]
 8012100:	3310      	adds	r3, #16
 8012102:	f1bc 0f0f 	cmp.w	ip, #15
 8012106:	d91b      	bls.n	8012140 <memcpy+0x94>
 8012108:	6827      	ldr	r7, [r4, #0]
 801210a:	f104 0610 	add.w	r6, r4, #16
 801210e:	601f      	str	r7, [r3, #0]
 8012110:	6867      	ldr	r7, [r4, #4]
 8012112:	f103 0510 	add.w	r5, r3, #16
 8012116:	605f      	str	r7, [r3, #4]
 8012118:	68a7      	ldr	r7, [r4, #8]
 801211a:	f1ac 0c20 	sub.w	ip, ip, #32
 801211e:	609f      	str	r7, [r3, #8]
 8012120:	68e7      	ldr	r7, [r4, #12]
 8012122:	60df      	str	r7, [r3, #12]
 8012124:	6924      	ldr	r4, [r4, #16]
 8012126:	611c      	str	r4, [r3, #16]
 8012128:	6877      	ldr	r7, [r6, #4]
 801212a:	f106 0410 	add.w	r4, r6, #16
 801212e:	606f      	str	r7, [r5, #4]
 8012130:	68b7      	ldr	r7, [r6, #8]
 8012132:	3320      	adds	r3, #32
 8012134:	60af      	str	r7, [r5, #8]
 8012136:	68f6      	ldr	r6, [r6, #12]
 8012138:	f1bc 0f0f 	cmp.w	ip, #15
 801213c:	60ee      	str	r6, [r5, #12]
 801213e:	d8e3      	bhi.n	8012108 <memcpy+0x5c>
 8012140:	f1a2 0810 	sub.w	r8, r2, #16
 8012144:	f028 030f 	bic.w	r3, r8, #15
 8012148:	f002 040f 	and.w	r4, r2, #15
 801214c:	f103 0c10 	add.w	ip, r3, #16
 8012150:	2c03      	cmp	r4, #3
 8012152:	eb00 030c 	add.w	r3, r0, ip
 8012156:	eb01 080c 	add.w	r8, r1, ip
 801215a:	d951      	bls.n	8012200 <memcpy+0x154>
 801215c:	1f21      	subs	r1, r4, #4
 801215e:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8012162:	4644      	mov	r4, r8
 8012164:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 8012168:	f854 6b04 	ldr.w	r6, [r4], #4
 801216c:	ebc8 010c 	rsb	r1, r8, ip
 8012170:	f10c 0c04 	add.w	ip, ip, #4
 8012174:	461d      	mov	r5, r3
 8012176:	4564      	cmp	r4, ip
 8012178:	f845 6b04 	str.w	r6, [r5], #4
 801217c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8012180:	d012      	beq.n	80121a8 <memcpy+0xfc>
 8012182:	b129      	cbz	r1, 8012190 <memcpy+0xe4>
 8012184:	f854 1b04 	ldr.w	r1, [r4], #4
 8012188:	4564      	cmp	r4, ip
 801218a:	f845 1b04 	str.w	r1, [r5], #4
 801218e:	d00b      	beq.n	80121a8 <memcpy+0xfc>
 8012190:	4627      	mov	r7, r4
 8012192:	f857 1b04 	ldr.w	r1, [r7], #4
 8012196:	462e      	mov	r6, r5
 8012198:	f846 1b04 	str.w	r1, [r6], #4
 801219c:	6864      	ldr	r4, [r4, #4]
 801219e:	606c      	str	r4, [r5, #4]
 80121a0:	1d3c      	adds	r4, r7, #4
 80121a2:	1d35      	adds	r5, r6, #4
 80121a4:	4564      	cmp	r4, ip
 80121a6:	d1f3      	bne.n	8012190 <memcpy+0xe4>
 80121a8:	f109 0c01 	add.w	ip, r9, #1
 80121ac:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80121b0:	f002 0203 	and.w	r2, r2, #3
 80121b4:	eb08 0109 	add.w	r1, r8, r9
 80121b8:	444b      	add	r3, r9
 80121ba:	b1d2      	cbz	r2, 80121f2 <memcpy+0x146>
 80121bc:	780d      	ldrb	r5, [r1, #0]
 80121be:	189a      	adds	r2, r3, r2
 80121c0:	43dc      	mvns	r4, r3
 80121c2:	f803 5b01 	strb.w	r5, [r3], #1
 80121c6:	1914      	adds	r4, r2, r4
 80121c8:	4293      	cmp	r3, r2
 80121ca:	f004 0401 	and.w	r4, r4, #1
 80121ce:	d010      	beq.n	80121f2 <memcpy+0x146>
 80121d0:	b12c      	cbz	r4, 80121de <memcpy+0x132>
 80121d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80121d6:	f803 4b01 	strb.w	r4, [r3], #1
 80121da:	4293      	cmp	r3, r2
 80121dc:	d009      	beq.n	80121f2 <memcpy+0x146>
 80121de:	784d      	ldrb	r5, [r1, #1]
 80121e0:	461c      	mov	r4, r3
 80121e2:	f804 5b01 	strb.w	r5, [r4], #1
 80121e6:	788d      	ldrb	r5, [r1, #2]
 80121e8:	3102      	adds	r1, #2
 80121ea:	705d      	strb	r5, [r3, #1]
 80121ec:	1c63      	adds	r3, r4, #1
 80121ee:	4293      	cmp	r3, r2
 80121f0:	d1f5      	bne.n	80121de <memcpy+0x132>
 80121f2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80121f6:	4770      	bx	lr
 80121f8:	4603      	mov	r3, r0
 80121fa:	e7de      	b.n	80121ba <memcpy+0x10e>
 80121fc:	4603      	mov	r3, r0
 80121fe:	e7dd      	b.n	80121bc <memcpy+0x110>
 8012200:	4641      	mov	r1, r8
 8012202:	4622      	mov	r2, r4
 8012204:	e7d9      	b.n	80121ba <memcpy+0x10e>
 8012206:	bf00      	nop

08012208 <memset>:
 8012208:	b4f0      	push	{r4, r5, r6, r7}
 801220a:	0784      	lsls	r4, r0, #30
 801220c:	4603      	mov	r3, r0
 801220e:	f000 808d 	beq.w	801232c <memset+0x124>
 8012212:	1e54      	subs	r4, r2, #1
 8012214:	2a00      	cmp	r2, #0
 8012216:	f000 8087 	beq.w	8012328 <memset+0x120>
 801221a:	07e5      	lsls	r5, r4, #31
 801221c:	b2ce      	uxtb	r6, r1
 801221e:	d411      	bmi.n	8012244 <memset+0x3c>
 8012220:	461a      	mov	r2, r3
 8012222:	f802 6b01 	strb.w	r6, [r2], #1
 8012226:	4613      	mov	r3, r2
 8012228:	4615      	mov	r5, r2
 801222a:	0792      	lsls	r2, r2, #30
 801222c:	d010      	beq.n	8012250 <memset+0x48>
 801222e:	1e62      	subs	r2, r4, #1
 8012230:	2c00      	cmp	r4, #0
 8012232:	d079      	beq.n	8012328 <memset+0x120>
 8012234:	f803 6b01 	strb.w	r6, [r3], #1
 8012238:	4614      	mov	r4, r2
 801223a:	079a      	lsls	r2, r3, #30
 801223c:	461d      	mov	r5, r3
 801223e:	d007      	beq.n	8012250 <memset+0x48>
 8012240:	3c01      	subs	r4, #1
 8012242:	e7ed      	b.n	8012220 <memset+0x18>
 8012244:	4603      	mov	r3, r0
 8012246:	f803 6b01 	strb.w	r6, [r3], #1
 801224a:	079a      	lsls	r2, r3, #30
 801224c:	461d      	mov	r5, r3
 801224e:	d1f7      	bne.n	8012240 <memset+0x38>
 8012250:	2c03      	cmp	r4, #3
 8012252:	d952      	bls.n	80122fa <memset+0xf2>
 8012254:	b2ce      	uxtb	r6, r1
 8012256:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 801225a:	2c0f      	cmp	r4, #15
 801225c:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8012260:	d92d      	bls.n	80122be <memset+0xb6>
 8012262:	f1a4 0210 	sub.w	r2, r4, #16
 8012266:	4617      	mov	r7, r2
 8012268:	2f0f      	cmp	r7, #15
 801226a:	f3c2 1600 	ubfx	r6, r2, #4, #1
 801226e:	602b      	str	r3, [r5, #0]
 8012270:	606b      	str	r3, [r5, #4]
 8012272:	60ab      	str	r3, [r5, #8]
 8012274:	60eb      	str	r3, [r5, #12]
 8012276:	f105 0210 	add.w	r2, r5, #16
 801227a:	d916      	bls.n	80122aa <memset+0xa2>
 801227c:	b13e      	cbz	r6, 801228e <memset+0x86>
 801227e:	3f10      	subs	r7, #16
 8012280:	6013      	str	r3, [r2, #0]
 8012282:	6053      	str	r3, [r2, #4]
 8012284:	6093      	str	r3, [r2, #8]
 8012286:	60d3      	str	r3, [r2, #12]
 8012288:	3210      	adds	r2, #16
 801228a:	2f0f      	cmp	r7, #15
 801228c:	d90d      	bls.n	80122aa <memset+0xa2>
 801228e:	3f20      	subs	r7, #32
 8012290:	f102 0610 	add.w	r6, r2, #16
 8012294:	6013      	str	r3, [r2, #0]
 8012296:	6053      	str	r3, [r2, #4]
 8012298:	6093      	str	r3, [r2, #8]
 801229a:	60d3      	str	r3, [r2, #12]
 801229c:	6113      	str	r3, [r2, #16]
 801229e:	6153      	str	r3, [r2, #20]
 80122a0:	6193      	str	r3, [r2, #24]
 80122a2:	61d3      	str	r3, [r2, #28]
 80122a4:	3220      	adds	r2, #32
 80122a6:	2f0f      	cmp	r7, #15
 80122a8:	d8f1      	bhi.n	801228e <memset+0x86>
 80122aa:	f1a4 0210 	sub.w	r2, r4, #16
 80122ae:	f022 020f 	bic.w	r2, r2, #15
 80122b2:	f004 040f 	and.w	r4, r4, #15
 80122b6:	3210      	adds	r2, #16
 80122b8:	2c03      	cmp	r4, #3
 80122ba:	4415      	add	r5, r2
 80122bc:	d91d      	bls.n	80122fa <memset+0xf2>
 80122be:	1f27      	subs	r7, r4, #4
 80122c0:	463e      	mov	r6, r7
 80122c2:	462a      	mov	r2, r5
 80122c4:	2e03      	cmp	r6, #3
 80122c6:	f842 3b04 	str.w	r3, [r2], #4
 80122ca:	f3c7 0780 	ubfx	r7, r7, #2, #1
 80122ce:	d90d      	bls.n	80122ec <memset+0xe4>
 80122d0:	b127      	cbz	r7, 80122dc <memset+0xd4>
 80122d2:	3e04      	subs	r6, #4
 80122d4:	2e03      	cmp	r6, #3
 80122d6:	f842 3b04 	str.w	r3, [r2], #4
 80122da:	d907      	bls.n	80122ec <memset+0xe4>
 80122dc:	4617      	mov	r7, r2
 80122de:	f847 3b04 	str.w	r3, [r7], #4
 80122e2:	3e08      	subs	r6, #8
 80122e4:	6053      	str	r3, [r2, #4]
 80122e6:	1d3a      	adds	r2, r7, #4
 80122e8:	2e03      	cmp	r6, #3
 80122ea:	d8f7      	bhi.n	80122dc <memset+0xd4>
 80122ec:	1f23      	subs	r3, r4, #4
 80122ee:	f023 0203 	bic.w	r2, r3, #3
 80122f2:	1d13      	adds	r3, r2, #4
 80122f4:	f004 0403 	and.w	r4, r4, #3
 80122f8:	18ed      	adds	r5, r5, r3
 80122fa:	b1ac      	cbz	r4, 8012328 <memset+0x120>
 80122fc:	b2c9      	uxtb	r1, r1
 80122fe:	43ea      	mvns	r2, r5
 8012300:	192c      	adds	r4, r5, r4
 8012302:	f805 1b01 	strb.w	r1, [r5], #1
 8012306:	18a3      	adds	r3, r4, r2
 8012308:	42a5      	cmp	r5, r4
 801230a:	f003 0201 	and.w	r2, r3, #1
 801230e:	d00b      	beq.n	8012328 <memset+0x120>
 8012310:	b11a      	cbz	r2, 801231a <memset+0x112>
 8012312:	f805 1b01 	strb.w	r1, [r5], #1
 8012316:	42a5      	cmp	r5, r4
 8012318:	d006      	beq.n	8012328 <memset+0x120>
 801231a:	462b      	mov	r3, r5
 801231c:	f803 1b01 	strb.w	r1, [r3], #1
 8012320:	7069      	strb	r1, [r5, #1]
 8012322:	1c5d      	adds	r5, r3, #1
 8012324:	42a5      	cmp	r5, r4
 8012326:	d1f8      	bne.n	801231a <memset+0x112>
 8012328:	bcf0      	pop	{r4, r5, r6, r7}
 801232a:	4770      	bx	lr
 801232c:	4605      	mov	r5, r0
 801232e:	4614      	mov	r4, r2
 8012330:	e78e      	b.n	8012250 <memset+0x48>
 8012332:	bf00      	nop

08012334 <strchr>:
 8012334:	b2c9      	uxtb	r1, r1
 8012336:	b4f0      	push	{r4, r5, r6, r7}
 8012338:	2900      	cmp	r1, #0
 801233a:	d04b      	beq.n	80123d4 <strchr+0xa0>
 801233c:	0782      	lsls	r2, r0, #30
 801233e:	d00f      	beq.n	8012360 <strchr+0x2c>
 8012340:	7802      	ldrb	r2, [r0, #0]
 8012342:	2a00      	cmp	r2, #0
 8012344:	d071      	beq.n	801242a <strchr+0xf6>
 8012346:	4291      	cmp	r1, r2
 8012348:	d042      	beq.n	80123d0 <strchr+0x9c>
 801234a:	1c43      	adds	r3, r0, #1
 801234c:	e005      	b.n	801235a <strchr+0x26>
 801234e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012352:	2a00      	cmp	r2, #0
 8012354:	d03b      	beq.n	80123ce <strchr+0x9a>
 8012356:	4291      	cmp	r1, r2
 8012358:	d03a      	beq.n	80123d0 <strchr+0x9c>
 801235a:	079a      	lsls	r2, r3, #30
 801235c:	4618      	mov	r0, r3
 801235e:	d1f6      	bne.n	801234e <strchr+0x1a>
 8012360:	6803      	ldr	r3, [r0, #0]
 8012362:	ea41 2701 	orr.w	r7, r1, r1, lsl #8
 8012366:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801236a:	ea22 0203 	bic.w	r2, r2, r3
 801236e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8012372:	ea47 4707 	orr.w	r7, r7, r7, lsl #16
 8012376:	d11c      	bne.n	80123b2 <strchr+0x7e>
 8012378:	407b      	eors	r3, r7
 801237a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801237e:	ea22 0303 	bic.w	r3, r2, r3
 8012382:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8012386:	d114      	bne.n	80123b2 <strchr+0x7e>
 8012388:	1d02      	adds	r2, r0, #4
 801238a:	e002      	b.n	8012392 <strchr+0x5e>
 801238c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8012390:	d10f      	bne.n	80123b2 <strchr+0x7e>
 8012392:	4610      	mov	r0, r2
 8012394:	f852 3b04 	ldr.w	r3, [r2], #4
 8012398:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
 801239c:	ea87 0403 	eor.w	r4, r7, r3
 80123a0:	ea26 0303 	bic.w	r3, r6, r3
 80123a4:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80123a8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80123ac:	ea25 0404 	bic.w	r4, r5, r4
 80123b0:	d0ec      	beq.n	801238c <strchr+0x58>
 80123b2:	7802      	ldrb	r2, [r0, #0]
 80123b4:	2a00      	cmp	r2, #0
 80123b6:	d038      	beq.n	801242a <strchr+0xf6>
 80123b8:	4291      	cmp	r1, r2
 80123ba:	d009      	beq.n	80123d0 <strchr+0x9c>
 80123bc:	1c43      	adds	r3, r0, #1
 80123be:	e001      	b.n	80123c4 <strchr+0x90>
 80123c0:	4291      	cmp	r1, r2
 80123c2:	d005      	beq.n	80123d0 <strchr+0x9c>
 80123c4:	4618      	mov	r0, r3
 80123c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123ca:	2a00      	cmp	r2, #0
 80123cc:	d1f8      	bne.n	80123c0 <strchr+0x8c>
 80123ce:	4610      	mov	r0, r2
 80123d0:	bcf0      	pop	{r4, r5, r6, r7}
 80123d2:	4770      	bx	lr
 80123d4:	0783      	lsls	r3, r0, #30
 80123d6:	d00b      	beq.n	80123f0 <strchr+0xbc>
 80123d8:	7802      	ldrb	r2, [r0, #0]
 80123da:	2a00      	cmp	r2, #0
 80123dc:	d0f8      	beq.n	80123d0 <strchr+0x9c>
 80123de:	1c43      	adds	r3, r0, #1
 80123e0:	e003      	b.n	80123ea <strchr+0xb6>
 80123e2:	7801      	ldrb	r1, [r0, #0]
 80123e4:	3301      	adds	r3, #1
 80123e6:	2900      	cmp	r1, #0
 80123e8:	d0f2      	beq.n	80123d0 <strchr+0x9c>
 80123ea:	0799      	lsls	r1, r3, #30
 80123ec:	4618      	mov	r0, r3
 80123ee:	d1f8      	bne.n	80123e2 <strchr+0xae>
 80123f0:	6801      	ldr	r1, [r0, #0]
 80123f2:	f1a1 3301 	sub.w	r3, r1, #16843009	; 0x1010101
 80123f6:	ea23 0201 	bic.w	r2, r3, r1
 80123fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80123fe:	d10a      	bne.n	8012416 <strchr+0xe2>
 8012400:	1d03      	adds	r3, r0, #4
 8012402:	4618      	mov	r0, r3
 8012404:	f853 1b04 	ldr.w	r1, [r3], #4
 8012408:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
 801240c:	ea24 0201 	bic.w	r2, r4, r1
 8012410:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8012414:	d0f5      	beq.n	8012402 <strchr+0xce>
 8012416:	7803      	ldrb	r3, [r0, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d0d9      	beq.n	80123d0 <strchr+0x9c>
 801241c:	1c42      	adds	r2, r0, #1
 801241e:	7811      	ldrb	r1, [r2, #0]
 8012420:	4610      	mov	r0, r2
 8012422:	3201      	adds	r2, #1
 8012424:	2900      	cmp	r1, #0
 8012426:	d1fa      	bne.n	801241e <strchr+0xea>
 8012428:	e7d2      	b.n	80123d0 <strchr+0x9c>
 801242a:	4610      	mov	r0, r2
 801242c:	e7d0      	b.n	80123d0 <strchr+0x9c>
 801242e:	bf00      	nop

08012430 <strcmp>:
 8012430:	ea80 0201 	eor.w	r2, r0, r1
 8012434:	f012 0f03 	tst.w	r2, #3
 8012438:	f040 803a 	bne.w	80124b0 <strcmp_unaligned>
 801243c:	f010 0203 	ands.w	r2, r0, #3
 8012440:	f020 0003 	bic.w	r0, r0, #3
 8012444:	f021 0103 	bic.w	r1, r1, #3
 8012448:	f850 cb04 	ldr.w	ip, [r0], #4
 801244c:	bf08      	it	eq
 801244e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8012452:	d00d      	beq.n	8012470 <strcmp+0x40>
 8012454:	f082 0203 	eor.w	r2, r2, #3
 8012458:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801245c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012460:	fa23 f202 	lsr.w	r2, r3, r2
 8012464:	f851 3b04 	ldr.w	r3, [r1], #4
 8012468:	ea4c 0c02 	orr.w	ip, ip, r2
 801246c:	ea43 0302 	orr.w	r3, r3, r2
 8012470:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8012474:	459c      	cmp	ip, r3
 8012476:	bf01      	itttt	eq
 8012478:	ea22 020c 	biceq.w	r2, r2, ip
 801247c:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8012480:	f850 cb04 	ldreq.w	ip, [r0], #4
 8012484:	f851 3b04 	ldreq.w	r3, [r1], #4
 8012488:	d0f2      	beq.n	8012470 <strcmp+0x40>
 801248a:	ea4f 600c 	mov.w	r0, ip, lsl #24
 801248e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8012492:	2801      	cmp	r0, #1
 8012494:	bf28      	it	cs
 8012496:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 801249a:	bf08      	it	eq
 801249c:	0a1b      	lsreq	r3, r3, #8
 801249e:	d0f4      	beq.n	801248a <strcmp+0x5a>
 80124a0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80124a4:	ea4f 6010 	mov.w	r0, r0, lsr #24
 80124a8:	eba0 0003 	sub.w	r0, r0, r3
 80124ac:	4770      	bx	lr
 80124ae:	bf00      	nop

080124b0 <strcmp_unaligned>:
 80124b0:	f010 0f03 	tst.w	r0, #3
 80124b4:	d00a      	beq.n	80124cc <strcmp_unaligned+0x1c>
 80124b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124be:	2a01      	cmp	r2, #1
 80124c0:	bf28      	it	cs
 80124c2:	429a      	cmpcs	r2, r3
 80124c4:	d0f4      	beq.n	80124b0 <strcmp_unaligned>
 80124c6:	eba2 0003 	sub.w	r0, r2, r3
 80124ca:	4770      	bx	lr
 80124cc:	f84d 5d04 	str.w	r5, [sp, #-4]!
 80124d0:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80124d4:	f04f 0201 	mov.w	r2, #1
 80124d8:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 80124dc:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80124e0:	f001 0c03 	and.w	ip, r1, #3
 80124e4:	f021 0103 	bic.w	r1, r1, #3
 80124e8:	f850 4b04 	ldr.w	r4, [r0], #4
 80124ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80124f0:	f1bc 0f02 	cmp.w	ip, #2
 80124f4:	d026      	beq.n	8012544 <strcmp_unaligned+0x94>
 80124f6:	d84b      	bhi.n	8012590 <strcmp_unaligned+0xe0>
 80124f8:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 80124fc:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8012500:	eba4 0302 	sub.w	r3, r4, r2
 8012504:	ea23 0304 	bic.w	r3, r3, r4
 8012508:	d10d      	bne.n	8012526 <strcmp_unaligned+0x76>
 801250a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 801250e:	bf08      	it	eq
 8012510:	f851 5b04 	ldreq.w	r5, [r1], #4
 8012514:	d10a      	bne.n	801252c <strcmp_unaligned+0x7c>
 8012516:	ea8c 0c04 	eor.w	ip, ip, r4
 801251a:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 801251e:	d10c      	bne.n	801253a <strcmp_unaligned+0x8a>
 8012520:	f850 4b04 	ldr.w	r4, [r0], #4
 8012524:	e7e8      	b.n	80124f8 <strcmp_unaligned+0x48>
 8012526:	ea4f 2515 	mov.w	r5, r5, lsr #8
 801252a:	e05c      	b.n	80125e6 <strcmp_unaligned+0x136>
 801252c:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8012530:	d152      	bne.n	80125d8 <strcmp_unaligned+0x128>
 8012532:	780d      	ldrb	r5, [r1, #0]
 8012534:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8012538:	e055      	b.n	80125e6 <strcmp_unaligned+0x136>
 801253a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 801253e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8012542:	e050      	b.n	80125e6 <strcmp_unaligned+0x136>
 8012544:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8012548:	eba4 0302 	sub.w	r3, r4, r2
 801254c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8012550:	ea23 0304 	bic.w	r3, r3, r4
 8012554:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8012558:	d117      	bne.n	801258a <strcmp_unaligned+0xda>
 801255a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 801255e:	bf08      	it	eq
 8012560:	f851 5b04 	ldreq.w	r5, [r1], #4
 8012564:	d107      	bne.n	8012576 <strcmp_unaligned+0xc6>
 8012566:	ea8c 0c04 	eor.w	ip, ip, r4
 801256a:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 801256e:	d108      	bne.n	8012582 <strcmp_unaligned+0xd2>
 8012570:	f850 4b04 	ldr.w	r4, [r0], #4
 8012574:	e7e6      	b.n	8012544 <strcmp_unaligned+0x94>
 8012576:	041b      	lsls	r3, r3, #16
 8012578:	d12e      	bne.n	80125d8 <strcmp_unaligned+0x128>
 801257a:	880d      	ldrh	r5, [r1, #0]
 801257c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8012580:	e031      	b.n	80125e6 <strcmp_unaligned+0x136>
 8012582:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8012586:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801258a:	ea4f 4515 	mov.w	r5, r5, lsr #16
 801258e:	e02a      	b.n	80125e6 <strcmp_unaligned+0x136>
 8012590:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8012594:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8012598:	eba4 0302 	sub.w	r3, r4, r2
 801259c:	ea23 0304 	bic.w	r3, r3, r4
 80125a0:	d10d      	bne.n	80125be <strcmp_unaligned+0x10e>
 80125a2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 80125a6:	bf08      	it	eq
 80125a8:	f851 5b04 	ldreq.w	r5, [r1], #4
 80125ac:	d10a      	bne.n	80125c4 <strcmp_unaligned+0x114>
 80125ae:	ea8c 0c04 	eor.w	ip, ip, r4
 80125b2:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 80125b6:	d10a      	bne.n	80125ce <strcmp_unaligned+0x11e>
 80125b8:	f850 4b04 	ldr.w	r4, [r0], #4
 80125bc:	e7e8      	b.n	8012590 <strcmp_unaligned+0xe0>
 80125be:	ea4f 6515 	mov.w	r5, r5, lsr #24
 80125c2:	e010      	b.n	80125e6 <strcmp_unaligned+0x136>
 80125c4:	f014 0fff 	tst.w	r4, #255	; 0xff
 80125c8:	d006      	beq.n	80125d8 <strcmp_unaligned+0x128>
 80125ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80125ce:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80125d2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80125d6:	e006      	b.n	80125e6 <strcmp_unaligned+0x136>
 80125d8:	f04f 0000 	mov.w	r0, #0
 80125dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125e0:	f85d 5b04 	ldr.w	r5, [sp], #4
 80125e4:	4770      	bx	lr
 80125e6:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 80125ea:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 80125ee:	2801      	cmp	r0, #1
 80125f0:	bf28      	it	cs
 80125f2:	4290      	cmpcs	r0, r2
 80125f4:	bf04      	itt	eq
 80125f6:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 80125fa:	0a2d      	lsreq	r5, r5, #8
 80125fc:	d0f3      	beq.n	80125e6 <strcmp_unaligned+0x136>
 80125fe:	eba2 0000 	sub.w	r0, r2, r0
 8012602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012606:	f85d 5b04 	ldr.w	r5, [sp], #4
 801260a:	4770      	bx	lr

0801260c <strlen>:
 801260c:	f020 0103 	bic.w	r1, r0, #3
 8012610:	f010 0003 	ands.w	r0, r0, #3
 8012614:	f1c0 0000 	rsb	r0, r0, #0
 8012618:	f851 3b04 	ldr.w	r3, [r1], #4
 801261c:	f100 0c04 	add.w	ip, r0, #4
 8012620:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012624:	f06f 0200 	mvn.w	r2, #0
 8012628:	bf1c      	itt	ne
 801262a:	fa22 f20c 	lsrne.w	r2, r2, ip
 801262e:	4313      	orrne	r3, r2
 8012630:	f04f 0c01 	mov.w	ip, #1
 8012634:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8012638:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 801263c:	eba3 020c 	sub.w	r2, r3, ip
 8012640:	ea22 0203 	bic.w	r2, r2, r3
 8012644:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8012648:	bf04      	itt	eq
 801264a:	f851 3b04 	ldreq.w	r3, [r1], #4
 801264e:	3004      	addeq	r0, #4
 8012650:	d0f4      	beq.n	801263c <strlen+0x30>
 8012652:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012656:	bf1f      	itttt	ne
 8012658:	3001      	addne	r0, #1
 801265a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 801265e:	3001      	addne	r0, #1
 8012660:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8012664:	bf18      	it	ne
 8012666:	3001      	addne	r0, #1
 8012668:	4770      	bx	lr
 801266a:	bf00      	nop

0801266c <strncmp>:
 801266c:	b4f0      	push	{r4, r5, r6, r7}
 801266e:	2a00      	cmp	r2, #0
 8012670:	f000 8083 	beq.w	801277a <strncmp+0x10e>
 8012674:	ea41 0300 	orr.w	r3, r1, r0
 8012678:	f013 0503 	ands.w	r5, r3, #3
 801267c:	d02e      	beq.n	80126dc <strncmp+0x70>
 801267e:	1e55      	subs	r5, r2, #1
 8012680:	7803      	ldrb	r3, [r0, #0]
 8012682:	780a      	ldrb	r2, [r1, #0]
 8012684:	4293      	cmp	r3, r2
 8012686:	d126      	bne.n	80126d6 <strncmp+0x6a>
 8012688:	2d00      	cmp	r5, #0
 801268a:	d07a      	beq.n	8012782 <strncmp+0x116>
 801268c:	2b00      	cmp	r3, #0
 801268e:	d07a      	beq.n	8012786 <strncmp+0x11a>
 8012690:	3501      	adds	r5, #1
 8012692:	1c8c      	adds	r4, r1, #2
 8012694:	194d      	adds	r5, r1, r5
 8012696:	1b2b      	subs	r3, r5, r4
 8012698:	07db      	lsls	r3, r3, #31
 801269a:	d516      	bpl.n	80126ca <strncmp+0x5e>
 801269c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80126a0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80126a4:	4293      	cmp	r3, r2
 80126a6:	d116      	bne.n	80126d6 <strncmp+0x6a>
 80126a8:	1ccc      	adds	r4, r1, #3
 80126aa:	b973      	cbnz	r3, 80126ca <strncmp+0x5e>
 80126ac:	e036      	b.n	801271c <strncmp+0xb0>
 80126ae:	42ac      	cmp	r4, r5
 80126b0:	d034      	beq.n	801271c <strncmp+0xb0>
 80126b2:	3401      	adds	r4, #1
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d031      	beq.n	801271c <strncmp+0xb0>
 80126b8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80126bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80126c0:	3401      	adds	r4, #1
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d107      	bne.n	80126d6 <strncmp+0x6a>
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d028      	beq.n	801271c <strncmp+0xb0>
 80126ca:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80126ce:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d0eb      	beq.n	80126ae <strncmp+0x42>
 80126d6:	1a98      	subs	r0, r3, r2
 80126d8:	bcf0      	pop	{r4, r5, r6, r7}
 80126da:	4770      	bx	lr
 80126dc:	2a03      	cmp	r2, #3
 80126de:	d9ce      	bls.n	801267e <strncmp+0x12>
 80126e0:	6804      	ldr	r4, [r0, #0]
 80126e2:	680b      	ldr	r3, [r1, #0]
 80126e4:	429c      	cmp	r4, r3
 80126e6:	d1ca      	bne.n	801267e <strncmp+0x12>
 80126e8:	1f13      	subs	r3, r2, #4
 80126ea:	d04c      	beq.n	8012786 <strncmp+0x11a>
 80126ec:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80126f0:	ea22 0404 	bic.w	r4, r2, r4
 80126f4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80126f8:	d143      	bne.n	8012782 <strncmp+0x116>
 80126fa:	075a      	lsls	r2, r3, #29
 80126fc:	d52f      	bpl.n	801275e <strncmp+0xf2>
 80126fe:	6842      	ldr	r2, [r0, #4]
 8012700:	684c      	ldr	r4, [r1, #4]
 8012702:	3004      	adds	r0, #4
 8012704:	3104      	adds	r1, #4
 8012706:	42a2      	cmp	r2, r4
 8012708:	d139      	bne.n	801277e <strncmp+0x112>
 801270a:	3b04      	subs	r3, #4
 801270c:	d006      	beq.n	801271c <strncmp+0xb0>
 801270e:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8012712:	ea24 0202 	bic.w	r2, r4, r2
 8012716:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801271a:	d020      	beq.n	801275e <strncmp+0xf2>
 801271c:	2000      	movs	r0, #0
 801271e:	e7db      	b.n	80126d8 <strncmp+0x6c>
 8012720:	6872      	ldr	r2, [r6, #4]
 8012722:	6864      	ldr	r4, [r4, #4]
 8012724:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8012728:	42a2      	cmp	r2, r4
 801272a:	ea25 0502 	bic.w	r5, r5, r2
 801272e:	d126      	bne.n	801277e <strncmp+0x112>
 8012730:	3b04      	subs	r3, #4
 8012732:	f100 0004 	add.w	r0, r0, #4
 8012736:	f101 0104 	add.w	r1, r1, #4
 801273a:	d0ef      	beq.n	801271c <strncmp+0xb0>
 801273c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8012740:	d1ec      	bne.n	801271c <strncmp+0xb0>
 8012742:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012746:	687c      	ldr	r4, [r7, #4]
 8012748:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 801274c:	42a2      	cmp	r2, r4
 801274e:	ea25 0502 	bic.w	r5, r5, r2
 8012752:	d114      	bne.n	801277e <strncmp+0x112>
 8012754:	3b04      	subs	r3, #4
 8012756:	d0e1      	beq.n	801271c <strncmp+0xb0>
 8012758:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 801275c:	d1de      	bne.n	801271c <strncmp+0xb0>
 801275e:	460c      	mov	r4, r1
 8012760:	4606      	mov	r6, r0
 8012762:	3104      	adds	r1, #4
 8012764:	3004      	adds	r0, #4
 8012766:	2b03      	cmp	r3, #3
 8012768:	4684      	mov	ip, r0
 801276a:	460f      	mov	r7, r1
 801276c:	d8d8      	bhi.n	8012720 <strncmp+0xb4>
 801276e:	1e5d      	subs	r5, r3, #1
 8012770:	2b00      	cmp	r3, #0
 8012772:	d185      	bne.n	8012680 <strncmp+0x14>
 8012774:	7933      	ldrb	r3, [r6, #4]
 8012776:	7922      	ldrb	r2, [r4, #4]
 8012778:	e7ad      	b.n	80126d6 <strncmp+0x6a>
 801277a:	4610      	mov	r0, r2
 801277c:	e7ac      	b.n	80126d8 <strncmp+0x6c>
 801277e:	1e5d      	subs	r5, r3, #1
 8012780:	e77e      	b.n	8012680 <strncmp+0x14>
 8012782:	4628      	mov	r0, r5
 8012784:	e7a8      	b.n	80126d8 <strncmp+0x6c>
 8012786:	4618      	mov	r0, r3
 8012788:	e7a6      	b.n	80126d8 <strncmp+0x6c>
 801278a:	bf00      	nop

0801278c <DIO_PIN>:
 801278c:	0080 0040 0020 0010 0008 8000 4000 2000     ..@. ........@. 

0801279c <DIO_CLK>:
 801279c:	0008 0000 0008 0000 0008 0000 0008 0000     ................
 80127ac:	0008 0000 0004 0000 0004 0000 0004 0000     ................

080127bc <LED_PIN>:
 80127bc:	0100 0200                                   ....

080127c0 <LED_CLK>:
 80127c0:	0004 0000 0004 0000                         ........

080127c8 <BUTTON_PIN>:
 80127c8:	0400 0000                                   ....

080127cc <BUTTON_CLK>:
 80127cc:	0004 0000 0000 0000                         ........

080127d4 <BUTTON_EXTI_LINE>:
 80127d4:	0400 0000                                   ....

080127d8 <BUTTON_PORT_SOURCE>:
 80127d8:	0000 0000                                   ....

080127dc <BUTTON_PIN_SOURCE>:
 80127dc:	000a 0000                                   ....

080127e0 <BUTTON_IRQn>:
 80127e0:	0028 0000 4556 0044 4442 3831 3430 3830     (...VED.BD180408
 80127f0:	0000 0000                                   ....

080127f4 <Device_Secret>:
 80127f4:	6573 7263 7465 0000                         secret..

080127fc <Device_Name>:
 80127fc:	6173 6974 6873 0000                         satish..

08012804 <Device_Ok>:
 8012804:	4b4f 0020                                   OK .

08012808 <Device_Fail>:
 8012808:	4146 4c49 0020 0000                         FAIL ...

08012810 <Device_CRLF>:
 8012810:	000a 0000                                   ....

08012814 <API_Alive>:
 8012814:	6c61 7669 0065 0000                         alive...

0801281c <API_Who>:
 801281c:	6877 006f                                   who.

08012820 <API_UserFunc>:
 8012820:	5355 5245 5546 434e 0020 0000               USERFUNC ...

0801282c <API_Callback>:
 801282c:	4143 4c4c 4142 4b43 0020 0000               CALLBACK ...

08012838 <Virtual_Com_Port_DeviceDescriptor>:
 8012838:	0112 0200 0002 4000 0483 5740 0200 0201     .......@..@W....
 8012848:	0103 0000                                   ....

0801284c <Virtual_Com_Port_ConfigDescriptor>:
 801284c:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
 801285c:	0001 2405 1000 0501 0124 0100 2404 0202     ...$....$....$..
 801286c:	2405 0006 0701 8205 0803 ff00 0409 0001     .$..............
 801287c:	0a02 0000 0700 0305 4002 0000 0507 0281     .........@......
 801288c:	0040 0000                                   @...

08012890 <Virtual_Com_Port_StringLangID>:
 8012890:	0304 0409                                   ....

08012894 <Virtual_Com_Port_StringVendor>:
 8012894:	0326 0053 0054 004d 0069 0063 0072 006f     &.S.T.M.i.c.r.o.
 80128a4:	0065 006c 0065 0063 0074 0072 006f 006e     e.l.e.c.t.r.o.n.
 80128b4:	0069 0063 0073 0000                         i.c.s...

080128bc <Virtual_Com_Port_StringProduct>:
 80128bc:	0332 0053 0054 004d 0033 0032 0020 0056     2.S.T.M.3.2. .V.
 80128cc:	0069 0072 0074 0075 0061 006c 0020 0043     i.r.t.u.a.l. .C.
 80128dc:	004f 004d 0020 0050 006f 0072 0074 0020     O.M. .P.o.r.t. .
 80128ec:	0020 0000 0043 0000                          ...C...
