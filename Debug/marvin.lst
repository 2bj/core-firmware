
marvin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0800a000  0800a000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a394  0800a10c  0800a10c  0000210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000738  20000000  080144a0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000cb4  20000738  08014bd8  00010738  2**2
                  ALLOC
  4 ._usrstack    00000100  200013ec  0801588c  00010738  2**0
                  ALLOC
  5 .comment      00000070  00000000  00000000  00010738  2**0
                  CONTENTS, READONLY
  6 .ARM.attributes 0000002f  00000000  00000000  000107a8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001500  00000000  00000000  000107d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00011397  00000000  00000000  00011cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000370c  00000000  00000000  0002306f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000103b5  00000000  00000000  0002677b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00004410  00000000  00000000  00036b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00057ad4  00000000  00000000  0003af40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000076b9  00000000  00000000  00092a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012b0  00000000  00000000  0009a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00013fd5  00000000  00000000  0009b380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800a10c <__aeabi_drsub>:
 800a10c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800a110:	e002      	b.n	800a118 <__adddf3>
 800a112:	bf00      	nop

0800a114 <__aeabi_dsub>:
 800a114:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800a118 <__adddf3>:
 800a118:	b530      	push	{r4, r5, lr}
 800a11a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800a11e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800a122:	ea94 0f05 	teq	r4, r5
 800a126:	bf08      	it	eq
 800a128:	ea90 0f02 	teqeq	r0, r2
 800a12c:	bf1f      	itttt	ne
 800a12e:	ea54 0c00 	orrsne.w	ip, r4, r0
 800a132:	ea55 0c02 	orrsne.w	ip, r5, r2
 800a136:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800a13a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800a13e:	f000 80e2 	beq.w	800a306 <__adddf3+0x1ee>
 800a142:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800a146:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800a14a:	bfb8      	it	lt
 800a14c:	426d      	neglt	r5, r5
 800a14e:	dd0c      	ble.n	800a16a <__adddf3+0x52>
 800a150:	442c      	add	r4, r5
 800a152:	ea80 0202 	eor.w	r2, r0, r2
 800a156:	ea81 0303 	eor.w	r3, r1, r3
 800a15a:	ea82 0000 	eor.w	r0, r2, r0
 800a15e:	ea83 0101 	eor.w	r1, r3, r1
 800a162:	ea80 0202 	eor.w	r2, r0, r2
 800a166:	ea81 0303 	eor.w	r3, r1, r3
 800a16a:	2d36      	cmp	r5, #54	; 0x36
 800a16c:	bf88      	it	hi
 800a16e:	bd30      	pophi	{r4, r5, pc}
 800a170:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800a174:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800a178:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800a17c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800a180:	d002      	beq.n	800a188 <__adddf3+0x70>
 800a182:	4240      	negs	r0, r0
 800a184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a188:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800a18c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800a190:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800a194:	d002      	beq.n	800a19c <__adddf3+0x84>
 800a196:	4252      	negs	r2, r2
 800a198:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800a19c:	ea94 0f05 	teq	r4, r5
 800a1a0:	f000 80a7 	beq.w	800a2f2 <__adddf3+0x1da>
 800a1a4:	f1a4 0401 	sub.w	r4, r4, #1
 800a1a8:	f1d5 0e20 	rsbs	lr, r5, #32
 800a1ac:	db0d      	blt.n	800a1ca <__adddf3+0xb2>
 800a1ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 800a1b2:	fa22 f205 	lsr.w	r2, r2, r5
 800a1b6:	1880      	adds	r0, r0, r2
 800a1b8:	f141 0100 	adc.w	r1, r1, #0
 800a1bc:	fa03 f20e 	lsl.w	r2, r3, lr
 800a1c0:	1880      	adds	r0, r0, r2
 800a1c2:	fa43 f305 	asr.w	r3, r3, r5
 800a1c6:	4159      	adcs	r1, r3
 800a1c8:	e00e      	b.n	800a1e8 <__adddf3+0xd0>
 800a1ca:	f1a5 0520 	sub.w	r5, r5, #32
 800a1ce:	f10e 0e20 	add.w	lr, lr, #32
 800a1d2:	2a01      	cmp	r2, #1
 800a1d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 800a1d8:	bf28      	it	cs
 800a1da:	f04c 0c02 	orrcs.w	ip, ip, #2
 800a1de:	fa43 f305 	asr.w	r3, r3, r5
 800a1e2:	18c0      	adds	r0, r0, r3
 800a1e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800a1e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800a1ec:	d507      	bpl.n	800a1fe <__adddf3+0xe6>
 800a1ee:	f04f 0e00 	mov.w	lr, #0
 800a1f2:	f1dc 0c00 	rsbs	ip, ip, #0
 800a1f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 800a1fa:	eb6e 0101 	sbc.w	r1, lr, r1
 800a1fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a202:	d31b      	bcc.n	800a23c <__adddf3+0x124>
 800a204:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a208:	d30c      	bcc.n	800a224 <__adddf3+0x10c>
 800a20a:	0849      	lsrs	r1, r1, #1
 800a20c:	ea5f 0030 	movs.w	r0, r0, rrx
 800a210:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800a214:	f104 0401 	add.w	r4, r4, #1
 800a218:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800a21c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800a220:	f080 809a 	bcs.w	800a358 <__adddf3+0x240>
 800a224:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800a228:	bf08      	it	eq
 800a22a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800a22e:	f150 0000 	adcs.w	r0, r0, #0
 800a232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800a236:	ea41 0105 	orr.w	r1, r1, r5
 800a23a:	bd30      	pop	{r4, r5, pc}
 800a23c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800a240:	4140      	adcs	r0, r0
 800a242:	eb41 0101 	adc.w	r1, r1, r1
 800a246:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800a24a:	f1a4 0401 	sub.w	r4, r4, #1
 800a24e:	d1e9      	bne.n	800a224 <__adddf3+0x10c>
 800a250:	f091 0f00 	teq	r1, #0
 800a254:	bf04      	itt	eq
 800a256:	4601      	moveq	r1, r0
 800a258:	2000      	moveq	r0, #0
 800a25a:	fab1 f381 	clz	r3, r1
 800a25e:	bf08      	it	eq
 800a260:	3320      	addeq	r3, #32
 800a262:	f1a3 030b 	sub.w	r3, r3, #11
 800a266:	f1b3 0220 	subs.w	r2, r3, #32
 800a26a:	da0c      	bge.n	800a286 <__adddf3+0x16e>
 800a26c:	320c      	adds	r2, #12
 800a26e:	dd08      	ble.n	800a282 <__adddf3+0x16a>
 800a270:	f102 0c14 	add.w	ip, r2, #20
 800a274:	f1c2 020c 	rsb	r2, r2, #12
 800a278:	fa01 f00c 	lsl.w	r0, r1, ip
 800a27c:	fa21 f102 	lsr.w	r1, r1, r2
 800a280:	e00c      	b.n	800a29c <__adddf3+0x184>
 800a282:	f102 0214 	add.w	r2, r2, #20
 800a286:	bfd8      	it	le
 800a288:	f1c2 0c20 	rsble	ip, r2, #32
 800a28c:	fa01 f102 	lsl.w	r1, r1, r2
 800a290:	fa20 fc0c 	lsr.w	ip, r0, ip
 800a294:	bfdc      	itt	le
 800a296:	ea41 010c 	orrle.w	r1, r1, ip
 800a29a:	4090      	lslle	r0, r2
 800a29c:	1ae4      	subs	r4, r4, r3
 800a29e:	bfa2      	ittt	ge
 800a2a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800a2a4:	4329      	orrge	r1, r5
 800a2a6:	bd30      	popge	{r4, r5, pc}
 800a2a8:	ea6f 0404 	mvn.w	r4, r4
 800a2ac:	3c1f      	subs	r4, #31
 800a2ae:	da1c      	bge.n	800a2ea <__adddf3+0x1d2>
 800a2b0:	340c      	adds	r4, #12
 800a2b2:	dc0e      	bgt.n	800a2d2 <__adddf3+0x1ba>
 800a2b4:	f104 0414 	add.w	r4, r4, #20
 800a2b8:	f1c4 0220 	rsb	r2, r4, #32
 800a2bc:	fa20 f004 	lsr.w	r0, r0, r4
 800a2c0:	fa01 f302 	lsl.w	r3, r1, r2
 800a2c4:	ea40 0003 	orr.w	r0, r0, r3
 800a2c8:	fa21 f304 	lsr.w	r3, r1, r4
 800a2cc:	ea45 0103 	orr.w	r1, r5, r3
 800a2d0:	bd30      	pop	{r4, r5, pc}
 800a2d2:	f1c4 040c 	rsb	r4, r4, #12
 800a2d6:	f1c4 0220 	rsb	r2, r4, #32
 800a2da:	fa20 f002 	lsr.w	r0, r0, r2
 800a2de:	fa01 f304 	lsl.w	r3, r1, r4
 800a2e2:	ea40 0003 	orr.w	r0, r0, r3
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	bd30      	pop	{r4, r5, pc}
 800a2ea:	fa21 f004 	lsr.w	r0, r1, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	bd30      	pop	{r4, r5, pc}
 800a2f2:	f094 0f00 	teq	r4, #0
 800a2f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800a2fa:	bf06      	itte	eq
 800a2fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800a300:	3401      	addeq	r4, #1
 800a302:	3d01      	subne	r5, #1
 800a304:	e74e      	b.n	800a1a4 <__adddf3+0x8c>
 800a306:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800a30a:	bf18      	it	ne
 800a30c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800a310:	d029      	beq.n	800a366 <__adddf3+0x24e>
 800a312:	ea94 0f05 	teq	r4, r5
 800a316:	bf08      	it	eq
 800a318:	ea90 0f02 	teqeq	r0, r2
 800a31c:	d005      	beq.n	800a32a <__adddf3+0x212>
 800a31e:	ea54 0c00 	orrs.w	ip, r4, r0
 800a322:	bf04      	itt	eq
 800a324:	4619      	moveq	r1, r3
 800a326:	4610      	moveq	r0, r2
 800a328:	bd30      	pop	{r4, r5, pc}
 800a32a:	ea91 0f03 	teq	r1, r3
 800a32e:	bf1e      	ittt	ne
 800a330:	2100      	movne	r1, #0
 800a332:	2000      	movne	r0, #0
 800a334:	bd30      	popne	{r4, r5, pc}
 800a336:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800a33a:	d105      	bne.n	800a348 <__adddf3+0x230>
 800a33c:	0040      	lsls	r0, r0, #1
 800a33e:	4149      	adcs	r1, r1
 800a340:	bf28      	it	cs
 800a342:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800a346:	bd30      	pop	{r4, r5, pc}
 800a348:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800a34c:	bf3c      	itt	cc
 800a34e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800a352:	bd30      	popcc	{r4, r5, pc}
 800a354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800a358:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800a35c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a360:	f04f 0000 	mov.w	r0, #0
 800a364:	bd30      	pop	{r4, r5, pc}
 800a366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800a36a:	bf1a      	itte	ne
 800a36c:	4619      	movne	r1, r3
 800a36e:	4610      	movne	r0, r2
 800a370:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800a374:	bf1c      	itt	ne
 800a376:	460b      	movne	r3, r1
 800a378:	4602      	movne	r2, r0
 800a37a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800a37e:	bf06      	itte	eq
 800a380:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800a384:	ea91 0f03 	teqeq	r1, r3
 800a388:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800a38c:	bd30      	pop	{r4, r5, pc}
 800a38e:	bf00      	nop

0800a390 <__aeabi_ui2d>:
 800a390:	f090 0f00 	teq	r0, #0
 800a394:	bf04      	itt	eq
 800a396:	2100      	moveq	r1, #0
 800a398:	4770      	bxeq	lr
 800a39a:	b530      	push	{r4, r5, lr}
 800a39c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800a3a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800a3a4:	f04f 0500 	mov.w	r5, #0
 800a3a8:	f04f 0100 	mov.w	r1, #0
 800a3ac:	e750      	b.n	800a250 <__adddf3+0x138>
 800a3ae:	bf00      	nop

0800a3b0 <__aeabi_i2d>:
 800a3b0:	f090 0f00 	teq	r0, #0
 800a3b4:	bf04      	itt	eq
 800a3b6:	2100      	moveq	r1, #0
 800a3b8:	4770      	bxeq	lr
 800a3ba:	b530      	push	{r4, r5, lr}
 800a3bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800a3c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800a3c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800a3c8:	bf48      	it	mi
 800a3ca:	4240      	negmi	r0, r0
 800a3cc:	f04f 0100 	mov.w	r1, #0
 800a3d0:	e73e      	b.n	800a250 <__adddf3+0x138>
 800a3d2:	bf00      	nop

0800a3d4 <__aeabi_f2d>:
 800a3d4:	0042      	lsls	r2, r0, #1
 800a3d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800a3da:	ea4f 0131 	mov.w	r1, r1, rrx
 800a3de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800a3e2:	bf1f      	itttt	ne
 800a3e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800a3e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800a3ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800a3f0:	4770      	bxne	lr
 800a3f2:	f092 0f00 	teq	r2, #0
 800a3f6:	bf14      	ite	ne
 800a3f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800a3fc:	4770      	bxeq	lr
 800a3fe:	b530      	push	{r4, r5, lr}
 800a400:	f44f 7460 	mov.w	r4, #896	; 0x380
 800a404:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800a408:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a40c:	e720      	b.n	800a250 <__adddf3+0x138>
 800a40e:	bf00      	nop

0800a410 <__aeabi_ul2d>:
 800a410:	ea50 0201 	orrs.w	r2, r0, r1
 800a414:	bf08      	it	eq
 800a416:	4770      	bxeq	lr
 800a418:	b530      	push	{r4, r5, lr}
 800a41a:	f04f 0500 	mov.w	r5, #0
 800a41e:	e00a      	b.n	800a436 <__aeabi_l2d+0x16>

0800a420 <__aeabi_l2d>:
 800a420:	ea50 0201 	orrs.w	r2, r0, r1
 800a424:	bf08      	it	eq
 800a426:	4770      	bxeq	lr
 800a428:	b530      	push	{r4, r5, lr}
 800a42a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800a42e:	d502      	bpl.n	800a436 <__aeabi_l2d+0x16>
 800a430:	4240      	negs	r0, r0
 800a432:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a436:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800a43a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800a43e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800a442:	f43f aedc 	beq.w	800a1fe <__adddf3+0xe6>
 800a446:	f04f 0203 	mov.w	r2, #3
 800a44a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a44e:	bf18      	it	ne
 800a450:	3203      	addne	r2, #3
 800a452:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a456:	bf18      	it	ne
 800a458:	3203      	addne	r2, #3
 800a45a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800a45e:	f1c2 0320 	rsb	r3, r2, #32
 800a462:	fa00 fc03 	lsl.w	ip, r0, r3
 800a466:	fa20 f002 	lsr.w	r0, r0, r2
 800a46a:	fa01 fe03 	lsl.w	lr, r1, r3
 800a46e:	ea40 000e 	orr.w	r0, r0, lr
 800a472:	fa21 f102 	lsr.w	r1, r1, r2
 800a476:	4414      	add	r4, r2
 800a478:	e6c1      	b.n	800a1fe <__adddf3+0xe6>
 800a47a:	bf00      	nop

0800a47c <__aeabi_dmul>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800a482:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800a486:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800a48a:	bf1d      	ittte	ne
 800a48c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800a490:	ea94 0f0c 	teqne	r4, ip
 800a494:	ea95 0f0c 	teqne	r5, ip
 800a498:	f000 f8de 	bleq	800a658 <__aeabi_dmul+0x1dc>
 800a49c:	442c      	add	r4, r5
 800a49e:	ea81 0603 	eor.w	r6, r1, r3
 800a4a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800a4a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800a4aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800a4ae:	bf18      	it	ne
 800a4b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800a4b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a4b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4bc:	d038      	beq.n	800a530 <__aeabi_dmul+0xb4>
 800a4be:	fba0 ce02 	umull	ip, lr, r0, r2
 800a4c2:	f04f 0500 	mov.w	r5, #0
 800a4c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 800a4ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800a4ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 800a4d2:	f04f 0600 	mov.w	r6, #0
 800a4d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 800a4da:	f09c 0f00 	teq	ip, #0
 800a4de:	bf18      	it	ne
 800a4e0:	f04e 0e01 	orrne.w	lr, lr, #1
 800a4e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800a4e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800a4ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800a4f0:	d204      	bcs.n	800a4fc <__aeabi_dmul+0x80>
 800a4f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800a4f6:	416d      	adcs	r5, r5
 800a4f8:	eb46 0606 	adc.w	r6, r6, r6
 800a4fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800a500:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800a504:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800a508:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800a50c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800a510:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800a514:	bf88      	it	hi
 800a516:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800a51a:	d81e      	bhi.n	800a55a <__aeabi_dmul+0xde>
 800a51c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800a520:	bf08      	it	eq
 800a522:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800a526:	f150 0000 	adcs.w	r0, r0, #0
 800a52a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800a534:	ea46 0101 	orr.w	r1, r6, r1
 800a538:	ea40 0002 	orr.w	r0, r0, r2
 800a53c:	ea81 0103 	eor.w	r1, r1, r3
 800a540:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800a544:	bfc2      	ittt	gt
 800a546:	ebd4 050c 	rsbsgt	r5, r4, ip
 800a54a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800a54e:	bd70      	popgt	{r4, r5, r6, pc}
 800a550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a554:	f04f 0e00 	mov.w	lr, #0
 800a558:	3c01      	subs	r4, #1
 800a55a:	f300 80ab 	bgt.w	800a6b4 <__aeabi_dmul+0x238>
 800a55e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800a562:	bfde      	ittt	le
 800a564:	2000      	movle	r0, #0
 800a566:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800a56a:	bd70      	pople	{r4, r5, r6, pc}
 800a56c:	f1c4 0400 	rsb	r4, r4, #0
 800a570:	3c20      	subs	r4, #32
 800a572:	da35      	bge.n	800a5e0 <__aeabi_dmul+0x164>
 800a574:	340c      	adds	r4, #12
 800a576:	dc1b      	bgt.n	800a5b0 <__aeabi_dmul+0x134>
 800a578:	f104 0414 	add.w	r4, r4, #20
 800a57c:	f1c4 0520 	rsb	r5, r4, #32
 800a580:	fa00 f305 	lsl.w	r3, r0, r5
 800a584:	fa20 f004 	lsr.w	r0, r0, r4
 800a588:	fa01 f205 	lsl.w	r2, r1, r5
 800a58c:	ea40 0002 	orr.w	r0, r0, r2
 800a590:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800a594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a598:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800a59c:	fa21 f604 	lsr.w	r6, r1, r4
 800a5a0:	eb42 0106 	adc.w	r1, r2, r6
 800a5a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800a5a8:	bf08      	it	eq
 800a5aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	f1c4 040c 	rsb	r4, r4, #12
 800a5b4:	f1c4 0520 	rsb	r5, r4, #32
 800a5b8:	fa00 f304 	lsl.w	r3, r0, r4
 800a5bc:	fa20 f005 	lsr.w	r0, r0, r5
 800a5c0:	fa01 f204 	lsl.w	r2, r1, r4
 800a5c4:	ea40 0002 	orr.w	r0, r0, r2
 800a5c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800a5cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800a5d0:	f141 0100 	adc.w	r1, r1, #0
 800a5d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800a5d8:	bf08      	it	eq
 800a5da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	f1c4 0520 	rsb	r5, r4, #32
 800a5e4:	fa00 f205 	lsl.w	r2, r0, r5
 800a5e8:	ea4e 0e02 	orr.w	lr, lr, r2
 800a5ec:	fa20 f304 	lsr.w	r3, r0, r4
 800a5f0:	fa01 f205 	lsl.w	r2, r1, r5
 800a5f4:	ea43 0302 	orr.w	r3, r3, r2
 800a5f8:	fa21 f004 	lsr.w	r0, r1, r4
 800a5fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800a600:	fa21 f204 	lsr.w	r2, r1, r4
 800a604:	ea20 0002 	bic.w	r0, r0, r2
 800a608:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800a60c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800a610:	bf08      	it	eq
 800a612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800a616:	bd70      	pop	{r4, r5, r6, pc}
 800a618:	f094 0f00 	teq	r4, #0
 800a61c:	d10f      	bne.n	800a63e <__aeabi_dmul+0x1c2>
 800a61e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800a622:	0040      	lsls	r0, r0, #1
 800a624:	eb41 0101 	adc.w	r1, r1, r1
 800a628:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800a62c:	bf08      	it	eq
 800a62e:	3c01      	subeq	r4, #1
 800a630:	d0f7      	beq.n	800a622 <__aeabi_dmul+0x1a6>
 800a632:	ea41 0106 	orr.w	r1, r1, r6
 800a636:	f095 0f00 	teq	r5, #0
 800a63a:	bf18      	it	ne
 800a63c:	4770      	bxne	lr
 800a63e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800a642:	0052      	lsls	r2, r2, #1
 800a644:	eb43 0303 	adc.w	r3, r3, r3
 800a648:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800a64c:	bf08      	it	eq
 800a64e:	3d01      	subeq	r5, #1
 800a650:	d0f7      	beq.n	800a642 <__aeabi_dmul+0x1c6>
 800a652:	ea43 0306 	orr.w	r3, r3, r6
 800a656:	4770      	bx	lr
 800a658:	ea94 0f0c 	teq	r4, ip
 800a65c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800a660:	bf18      	it	ne
 800a662:	ea95 0f0c 	teqne	r5, ip
 800a666:	d00c      	beq.n	800a682 <__aeabi_dmul+0x206>
 800a668:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800a66c:	bf18      	it	ne
 800a66e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800a672:	d1d1      	bne.n	800a618 <__aeabi_dmul+0x19c>
 800a674:	ea81 0103 	eor.w	r1, r1, r3
 800a678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800a67c:	f04f 0000 	mov.w	r0, #0
 800a680:	bd70      	pop	{r4, r5, r6, pc}
 800a682:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800a686:	bf06      	itte	eq
 800a688:	4610      	moveq	r0, r2
 800a68a:	4619      	moveq	r1, r3
 800a68c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800a690:	d019      	beq.n	800a6c6 <__aeabi_dmul+0x24a>
 800a692:	ea94 0f0c 	teq	r4, ip
 800a696:	d102      	bne.n	800a69e <__aeabi_dmul+0x222>
 800a698:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800a69c:	d113      	bne.n	800a6c6 <__aeabi_dmul+0x24a>
 800a69e:	ea95 0f0c 	teq	r5, ip
 800a6a2:	d105      	bne.n	800a6b0 <__aeabi_dmul+0x234>
 800a6a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800a6a8:	bf1c      	itt	ne
 800a6aa:	4610      	movne	r0, r2
 800a6ac:	4619      	movne	r1, r3
 800a6ae:	d10a      	bne.n	800a6c6 <__aeabi_dmul+0x24a>
 800a6b0:	ea81 0103 	eor.w	r1, r1, r3
 800a6b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800a6b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800a6bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6c0:	f04f 0000 	mov.w	r0, #0
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
 800a6c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800a6ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}

0800a6d0 <__aeabi_ddiv>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800a6d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800a6da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800a6de:	bf1d      	ittte	ne
 800a6e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800a6e4:	ea94 0f0c 	teqne	r4, ip
 800a6e8:	ea95 0f0c 	teqne	r5, ip
 800a6ec:	f000 f8a7 	bleq	800a83e <__aeabi_ddiv+0x16e>
 800a6f0:	eba4 0405 	sub.w	r4, r4, r5
 800a6f4:	ea81 0e03 	eor.w	lr, r1, r3
 800a6f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800a6fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800a700:	f000 8088 	beq.w	800a814 <__aeabi_ddiv+0x144>
 800a704:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800a708:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800a70c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800a710:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800a714:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800a718:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800a71c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800a720:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800a724:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800a728:	429d      	cmp	r5, r3
 800a72a:	bf08      	it	eq
 800a72c:	4296      	cmpeq	r6, r2
 800a72e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800a732:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800a736:	d202      	bcs.n	800a73e <__aeabi_ddiv+0x6e>
 800a738:	085b      	lsrs	r3, r3, #1
 800a73a:	ea4f 0232 	mov.w	r2, r2, rrx
 800a73e:	1ab6      	subs	r6, r6, r2
 800a740:	eb65 0503 	sbc.w	r5, r5, r3
 800a744:	085b      	lsrs	r3, r3, #1
 800a746:	ea4f 0232 	mov.w	r2, r2, rrx
 800a74a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a74e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800a752:	ebb6 0e02 	subs.w	lr, r6, r2
 800a756:	eb75 0e03 	sbcs.w	lr, r5, r3
 800a75a:	bf22      	ittt	cs
 800a75c:	1ab6      	subcs	r6, r6, r2
 800a75e:	4675      	movcs	r5, lr
 800a760:	ea40 000c 	orrcs.w	r0, r0, ip
 800a764:	085b      	lsrs	r3, r3, #1
 800a766:	ea4f 0232 	mov.w	r2, r2, rrx
 800a76a:	ebb6 0e02 	subs.w	lr, r6, r2
 800a76e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800a772:	bf22      	ittt	cs
 800a774:	1ab6      	subcs	r6, r6, r2
 800a776:	4675      	movcs	r5, lr
 800a778:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800a77c:	085b      	lsrs	r3, r3, #1
 800a77e:	ea4f 0232 	mov.w	r2, r2, rrx
 800a782:	ebb6 0e02 	subs.w	lr, r6, r2
 800a786:	eb75 0e03 	sbcs.w	lr, r5, r3
 800a78a:	bf22      	ittt	cs
 800a78c:	1ab6      	subcs	r6, r6, r2
 800a78e:	4675      	movcs	r5, lr
 800a790:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800a794:	085b      	lsrs	r3, r3, #1
 800a796:	ea4f 0232 	mov.w	r2, r2, rrx
 800a79a:	ebb6 0e02 	subs.w	lr, r6, r2
 800a79e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800a7a2:	bf22      	ittt	cs
 800a7a4:	1ab6      	subcs	r6, r6, r2
 800a7a6:	4675      	movcs	r5, lr
 800a7a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800a7ac:	ea55 0e06 	orrs.w	lr, r5, r6
 800a7b0:	d018      	beq.n	800a7e4 <__aeabi_ddiv+0x114>
 800a7b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800a7b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800a7ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800a7be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a7c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800a7c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800a7ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800a7ce:	d1c0      	bne.n	800a752 <__aeabi_ddiv+0x82>
 800a7d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800a7d4:	d10b      	bne.n	800a7ee <__aeabi_ddiv+0x11e>
 800a7d6:	ea41 0100 	orr.w	r1, r1, r0
 800a7da:	f04f 0000 	mov.w	r0, #0
 800a7de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a7e2:	e7b6      	b.n	800a752 <__aeabi_ddiv+0x82>
 800a7e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800a7e8:	bf04      	itt	eq
 800a7ea:	4301      	orreq	r1, r0
 800a7ec:	2000      	moveq	r0, #0
 800a7ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800a7f2:	bf88      	it	hi
 800a7f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800a7f8:	f63f aeaf 	bhi.w	800a55a <__aeabi_dmul+0xde>
 800a7fc:	ebb5 0c03 	subs.w	ip, r5, r3
 800a800:	bf04      	itt	eq
 800a802:	ebb6 0c02 	subseq.w	ip, r6, r2
 800a806:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800a80a:	f150 0000 	adcs.w	r0, r0, #0
 800a80e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800a818:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800a81c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800a820:	bfc2      	ittt	gt
 800a822:	ebd4 050c 	rsbsgt	r5, r4, ip
 800a826:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800a82a:	bd70      	popgt	{r4, r5, r6, pc}
 800a82c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a830:	f04f 0e00 	mov.w	lr, #0
 800a834:	3c01      	subs	r4, #1
 800a836:	e690      	b.n	800a55a <__aeabi_dmul+0xde>
 800a838:	ea45 0e06 	orr.w	lr, r5, r6
 800a83c:	e68d      	b.n	800a55a <__aeabi_dmul+0xde>
 800a83e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800a842:	ea94 0f0c 	teq	r4, ip
 800a846:	bf08      	it	eq
 800a848:	ea95 0f0c 	teqeq	r5, ip
 800a84c:	f43f af3b 	beq.w	800a6c6 <__aeabi_dmul+0x24a>
 800a850:	ea94 0f0c 	teq	r4, ip
 800a854:	d10a      	bne.n	800a86c <__aeabi_ddiv+0x19c>
 800a856:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800a85a:	f47f af34 	bne.w	800a6c6 <__aeabi_dmul+0x24a>
 800a85e:	ea95 0f0c 	teq	r5, ip
 800a862:	f47f af25 	bne.w	800a6b0 <__aeabi_dmul+0x234>
 800a866:	4610      	mov	r0, r2
 800a868:	4619      	mov	r1, r3
 800a86a:	e72c      	b.n	800a6c6 <__aeabi_dmul+0x24a>
 800a86c:	ea95 0f0c 	teq	r5, ip
 800a870:	d106      	bne.n	800a880 <__aeabi_ddiv+0x1b0>
 800a872:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800a876:	f43f aefd 	beq.w	800a674 <__aeabi_dmul+0x1f8>
 800a87a:	4610      	mov	r0, r2
 800a87c:	4619      	mov	r1, r3
 800a87e:	e722      	b.n	800a6c6 <__aeabi_dmul+0x24a>
 800a880:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800a884:	bf18      	it	ne
 800a886:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800a88a:	f47f aec5 	bne.w	800a618 <__aeabi_dmul+0x19c>
 800a88e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800a892:	f47f af0d 	bne.w	800a6b0 <__aeabi_dmul+0x234>
 800a896:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800a89a:	f47f aeeb 	bne.w	800a674 <__aeabi_dmul+0x1f8>
 800a89e:	e712      	b.n	800a6c6 <__aeabi_dmul+0x24a>

0800a8a0 <__aeabi_d2uiz>:
 800a8a0:	004a      	lsls	r2, r1, #1
 800a8a2:	d211      	bcs.n	800a8c8 <__aeabi_d2uiz+0x28>
 800a8a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800a8a8:	d211      	bcs.n	800a8ce <__aeabi_d2uiz+0x2e>
 800a8aa:	d50d      	bpl.n	800a8c8 <__aeabi_d2uiz+0x28>
 800a8ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800a8b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800a8b4:	d40e      	bmi.n	800a8d4 <__aeabi_d2uiz+0x34>
 800a8b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800a8ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800a8c2:	fa23 f002 	lsr.w	r0, r3, r2
 800a8c6:	4770      	bx	lr
 800a8c8:	f04f 0000 	mov.w	r0, #0
 800a8cc:	4770      	bx	lr
 800a8ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800a8d2:	d102      	bne.n	800a8da <__aeabi_d2uiz+0x3a>
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8d8:	4770      	bx	lr
 800a8da:	f04f 0000 	mov.w	r0, #0
 800a8de:	4770      	bx	lr

0800a8e0 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 800a8e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a8e2:	f000 b804 	b.w	800a8ee <LoopCopyDataInit>

0800a8e6 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a8e6:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
 800a8e8:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a8ea:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a8ec:	3104      	adds	r1, #4

0800a8ee <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 800a8ee:	480b      	ldr	r0, [pc, #44]	; (800a91c <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
 800a8f0:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
 800a8f2:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a8f4:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a8f6:	f4ff aff6 	bcc.w	800a8e6 <CopyDataInit>
	ldr	r2, =_sbss
 800a8fa:	4a0a      	ldr	r2, [pc, #40]	; (800a924 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
 800a8fc:	f000 b803 	b.w	800a906 <LoopFillZerobss>

0800a900 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 800a900:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a902:	f842 3b04 	str.w	r3, [r2], #4

0800a906 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 800a906:	4b08      	ldr	r3, [pc, #32]	; (800a928 <LoopFillZerobss+0x22>)
	cmp	r2, r3
 800a908:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a90a:	f4ff aff9 	bcc.w	800a900 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 800a90e:	f003 f999 	bl	800dc44 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 800a912:	f001 fdd3 	bl	800c4bc <main>
	bx	lr    
 800a916:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800a918:	080144a0 	.word	0x080144a0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 800a91c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a920:	20000738 	.word	0x20000738
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800a924:	20000738 	.word	0x20000738
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
 800a928:	200013ec 	.word	0x200013ec

0800a92c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a92c:	f7ff bffe 	b.w	800a92c <ADC1_2_IRQHandler>

0800a930 <setup>:

#define FORWARD_BACK_MULTIPLIER  (1.5)
#define TURNING_MULTIPLIER       (1.5)

void setup()
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
	pinMode(LEFT_PWM, OUTPUT);
 800a934:	f04f 0011 	mov.w	r0, #17
 800a938:	f04f 0100 	mov.w	r1, #0
 800a93c:	f002 fe1a 	bl	800d574 <pinMode>
	pinMode(RIGHT_PWM, OUTPUT);
 800a940:	f04f 0001 	mov.w	r0, #1
 800a944:	f04f 0100 	mov.w	r1, #0
 800a948:	f002 fe14 	bl	800d574 <pinMode>
	pinMode(LEFT_BACK, OUTPUT);
 800a94c:	f04f 0004 	mov.w	r0, #4
 800a950:	f04f 0100 	mov.w	r1, #0
 800a954:	f002 fe0e 	bl	800d574 <pinMode>
	pinMode(RIGHT_BACK, OUTPUT);
 800a958:	f04f 0003 	mov.w	r0, #3
 800a95c:	f04f 0100 	mov.w	r1, #0
 800a960:	f002 fe08 	bl	800d574 <pinMode>
}
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop

0800a968 <loop>:

void loop()
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
}
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bc80      	pop	{r7}
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop

0800a974 <drive>:

void drive(const char *command)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
	long val = strtol(command + 3, NULL, 10);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f103 0303 	add.w	r3, r3, #3
 800a982:	4618      	mov	r0, r3
 800a984:	f04f 0100 	mov.w	r1, #0
 800a988:	f04f 020a 	mov.w	r2, #10
 800a98c:	f009 fc2e 	bl	80141ec <strtol>
 800a990:	60f8      	str	r0, [r7, #12]
	if (0 == strncmp(command, "fd", 2))
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f244 2108 	movw	r1, #16904	; 0x4208
 800a998:	f6c0 0101 	movt	r1, #2049	; 0x801
 800a99c:	f04f 0202 	mov.w	r2, #2
 800a9a0:	f009 fa76 	bl	8013e90 <strncmp>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d131      	bne.n	800aa0e <drive+0x9a>
	{
		digitalWrite(LEFT_PWM, HIGH);
 800a9aa:	f04f 0011 	mov.w	r0, #17
 800a9ae:	f04f 0101 	mov.w	r1, #1
 800a9b2:	f002 feb9 	bl	800d728 <digitalWrite>
		digitalWrite(RIGHT_PWM, HIGH);
 800a9b6:	f04f 0001 	mov.w	r0, #1
 800a9ba:	f04f 0101 	mov.w	r1, #1
 800a9be:	f002 feb3 	bl	800d728 <digitalWrite>
		digitalWrite(LEFT_BACK, LOW);
 800a9c2:	f04f 0004 	mov.w	r0, #4
 800a9c6:	f04f 0100 	mov.w	r1, #0
 800a9ca:	f002 fead 	bl	800d728 <digitalWrite>
		digitalWrite(RIGHT_BACK, LOW);
 800a9ce:	f04f 0003 	mov.w	r0, #3
 800a9d2:	f04f 0100 	mov.w	r1, #0
 800a9d6:	f002 fea7 	bl	800d728 <digitalWrite>
		delay(val * FORWARD_BACK_MULTIPLIER);
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f7ff fce8 	bl	800a3b0 <__aeabi_i2d>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	f04f 0200 	mov.w	r2, #0
 800a9ec:	f04f 0300 	mov.w	r3, #0
 800a9f0:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800a9f4:	f7ff fd42 	bl	800a47c <__aeabi_dmul>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4619      	mov	r1, r3
 800aa00:	f7ff ff4e 	bl	800a8a0 <__aeabi_d2uiz>
 800aa04:	4603      	mov	r3, r0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f002 ff30 	bl	800d86c <delay>
 800aa0c:	e0b8      	b.n	800ab80 <drive+0x20c>
	}
	else if (0 == strncmp(command, "bk", 2))
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f244 210c 	movw	r1, #16908	; 0x420c
 800aa14:	f6c0 0101 	movt	r1, #2049	; 0x801
 800aa18:	f04f 0202 	mov.w	r2, #2
 800aa1c:	f009 fa38 	bl	8013e90 <strncmp>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d131      	bne.n	800aa8a <drive+0x116>
	{
		digitalWrite(LEFT_PWM, HIGH);
 800aa26:	f04f 0011 	mov.w	r0, #17
 800aa2a:	f04f 0101 	mov.w	r1, #1
 800aa2e:	f002 fe7b 	bl	800d728 <digitalWrite>
		digitalWrite(RIGHT_PWM, HIGH);
 800aa32:	f04f 0001 	mov.w	r0, #1
 800aa36:	f04f 0101 	mov.w	r1, #1
 800aa3a:	f002 fe75 	bl	800d728 <digitalWrite>
		digitalWrite(LEFT_BACK, HIGH);
 800aa3e:	f04f 0004 	mov.w	r0, #4
 800aa42:	f04f 0101 	mov.w	r1, #1
 800aa46:	f002 fe6f 	bl	800d728 <digitalWrite>
		digitalWrite(RIGHT_BACK, HIGH);
 800aa4a:	f04f 0003 	mov.w	r0, #3
 800aa4e:	f04f 0101 	mov.w	r1, #1
 800aa52:	f002 fe69 	bl	800d728 <digitalWrite>
		delay(val * FORWARD_BACK_MULTIPLIER);
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7ff fcaa 	bl	800a3b0 <__aeabi_i2d>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	460b      	mov	r3, r1
 800aa60:	4610      	mov	r0, r2
 800aa62:	4619      	mov	r1, r3
 800aa64:	f04f 0200 	mov.w	r2, #0
 800aa68:	f04f 0300 	mov.w	r3, #0
 800aa6c:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800aa70:	f7ff fd04 	bl	800a47c <__aeabi_dmul>
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4610      	mov	r0, r2
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	f7ff ff10 	bl	800a8a0 <__aeabi_d2uiz>
 800aa80:	4603      	mov	r3, r0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f002 fef2 	bl	800d86c <delay>
 800aa88:	e07a      	b.n	800ab80 <drive+0x20c>
	}
	else if (0 == strncmp(command, "rt", 2))
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f244 2110 	movw	r1, #16912	; 0x4210
 800aa90:	f6c0 0101 	movt	r1, #2049	; 0x801
 800aa94:	f04f 0202 	mov.w	r2, #2
 800aa98:	f009 f9fa 	bl	8013e90 <strncmp>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d131      	bne.n	800ab06 <drive+0x192>
	{
		digitalWrite(LEFT_PWM, HIGH);
 800aaa2:	f04f 0011 	mov.w	r0, #17
 800aaa6:	f04f 0101 	mov.w	r1, #1
 800aaaa:	f002 fe3d 	bl	800d728 <digitalWrite>
		digitalWrite(RIGHT_PWM, LOW);
 800aaae:	f04f 0001 	mov.w	r0, #1
 800aab2:	f04f 0100 	mov.w	r1, #0
 800aab6:	f002 fe37 	bl	800d728 <digitalWrite>
		digitalWrite(LEFT_BACK, LOW);
 800aaba:	f04f 0004 	mov.w	r0, #4
 800aabe:	f04f 0100 	mov.w	r1, #0
 800aac2:	f002 fe31 	bl	800d728 <digitalWrite>
		digitalWrite(RIGHT_BACK, LOW);
 800aac6:	f04f 0003 	mov.w	r0, #3
 800aaca:	f04f 0100 	mov.w	r1, #0
 800aace:	f002 fe2b 	bl	800d728 <digitalWrite>
		delay(val * TURNING_MULTIPLIER);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff fc6c 	bl	800a3b0 <__aeabi_i2d>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4610      	mov	r0, r2
 800aade:	4619      	mov	r1, r3
 800aae0:	f04f 0200 	mov.w	r2, #0
 800aae4:	f04f 0300 	mov.w	r3, #0
 800aae8:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800aaec:	f7ff fcc6 	bl	800a47c <__aeabi_dmul>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	f7ff fed2 	bl	800a8a0 <__aeabi_d2uiz>
 800aafc:	4603      	mov	r3, r0
 800aafe:	4618      	mov	r0, r3
 800ab00:	f002 feb4 	bl	800d86c <delay>
 800ab04:	e03c      	b.n	800ab80 <drive+0x20c>
	}
	else if (0 == strncmp(command, "lt", 2))
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f244 2114 	movw	r1, #16916	; 0x4214
 800ab0c:	f6c0 0101 	movt	r1, #2049	; 0x801
 800ab10:	f04f 0202 	mov.w	r2, #2
 800ab14:	f009 f9bc 	bl	8013e90 <strncmp>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d130      	bne.n	800ab80 <drive+0x20c>
	{
		digitalWrite(LEFT_PWM, LOW);
 800ab1e:	f04f 0011 	mov.w	r0, #17
 800ab22:	f04f 0100 	mov.w	r1, #0
 800ab26:	f002 fdff 	bl	800d728 <digitalWrite>
		digitalWrite(RIGHT_PWM, HIGH);
 800ab2a:	f04f 0001 	mov.w	r0, #1
 800ab2e:	f04f 0101 	mov.w	r1, #1
 800ab32:	f002 fdf9 	bl	800d728 <digitalWrite>
		digitalWrite(LEFT_BACK, LOW);
 800ab36:	f04f 0004 	mov.w	r0, #4
 800ab3a:	f04f 0100 	mov.w	r1, #0
 800ab3e:	f002 fdf3 	bl	800d728 <digitalWrite>
		digitalWrite(RIGHT_BACK, LOW);
 800ab42:	f04f 0003 	mov.w	r0, #3
 800ab46:	f04f 0100 	mov.w	r1, #0
 800ab4a:	f002 fded 	bl	800d728 <digitalWrite>
		delay(val * TURNING_MULTIPLIER);
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fc2e 	bl	800a3b0 <__aeabi_i2d>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	f04f 0200 	mov.w	r2, #0
 800ab60:	f04f 0300 	mov.w	r3, #0
 800ab64:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800ab68:	f7ff fc88 	bl	800a47c <__aeabi_dmul>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4610      	mov	r0, r2
 800ab72:	4619      	mov	r1, r3
 800ab74:	f7ff fe94 	bl	800a8a0 <__aeabi_d2uiz>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f002 fe76 	bl	800d86c <delay>
	}
	digitalWrite(LEFT_PWM, LOW);
 800ab80:	f04f 0011 	mov.w	r0, #17
 800ab84:	f04f 0100 	mov.w	r1, #0
 800ab88:	f002 fdce 	bl	800d728 <digitalWrite>
	digitalWrite(RIGHT_PWM, LOW);
 800ab8c:	f04f 0001 	mov.w	r0, #1
 800ab90:	f04f 0100 	mov.w	r1, #0
 800ab94:	f002 fdc8 	bl	800d728 <digitalWrite>
	digitalWrite(LEFT_BACK, LOW);
 800ab98:	f04f 0004 	mov.w	r0, #4
 800ab9c:	f04f 0100 	mov.w	r1, #0
 800aba0:	f002 fdc2 	bl	800d728 <digitalWrite>
	digitalWrite(RIGHT_BACK, LOW);
 800aba4:	f04f 0003 	mov.w	r0, #3
 800aba8:	f04f 0100 	mov.w	r1, #0
 800abac:	f002 fdbc 	bl	800d728 <digitalWrite>
}
 800abb0:	f107 0710 	add.w	r7, r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <userFunction>:

char userFunction(char *message)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
	char command[7] = "\0\0\0\0\0\0";
 800abc0:	f244 2218 	movw	r2, #16920	; 0x4218
 800abc4:	f6c0 0201 	movt	r2, #2049	; 0x801
 800abc8:	f107 0308 	add.w	r3, r7, #8
 800abcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800abd0:	6018      	str	r0, [r3, #0]
 800abd2:	f103 0304 	add.w	r3, r3, #4
 800abd6:	8019      	strh	r1, [r3, #0]
 800abd8:	f103 0302 	add.w	r3, r3, #2
 800abdc:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800abe0:	701a      	strb	r2, [r3, #0]
	size_t length;
	char *comma = strchr(message, ',');
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f04f 012c 	mov.w	r1, #44	; 0x2c
 800abe8:	f008 ffb6 	bl	8013b58 <strchr>
 800abec:	6178      	str	r0, [r7, #20]
	while (NULL != comma)
 800abee:	e020      	b.n	800ac32 <userFunction+0x7a>
	{
		length = comma - message;
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	613b      	str	r3, [r7, #16]
		strncpy(command, message, length);
 800abf8:	f107 0308 	add.w	r3, r7, #8
 800abfc:	4618      	mov	r0, r3
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	f009 f9d5 	bl	8013fb0 <strncpy>
		command[length] = '\0';
 800ac06:	f107 0208 	add.w	r2, r7, #8
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	18d3      	adds	r3, r2, r3
 800ac0e:	f04f 0200 	mov.w	r2, #0
 800ac12:	701a      	strb	r2, [r3, #0]
		drive(command);
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff feab 	bl	800a974 <drive>
		message = comma + 1;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f103 0301 	add.w	r3, r3, #1
 800ac24:	607b      	str	r3, [r7, #4]
		comma = strchr(message, ',');
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f04f 012c 	mov.w	r1, #44	; 0x2c
 800ac2c:	f008 ff94 	bl	8013b58 <strchr>
 800ac30:	6178      	str	r0, [r7, #20]
char userFunction(char *message)
{
	char command[7] = "\0\0\0\0\0\0";
	size_t length;
	char *comma = strchr(message, ',');
	while (NULL != comma)
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1db      	bne.n	800abf0 <userFunction+0x38>
		command[length] = '\0';
		drive(command);
		message = comma + 1;
		comma = strchr(message, ',');
	}
	strncpy(command, message, 6);
 800ac38:	f107 0308 	add.w	r3, r7, #8
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	f04f 0206 	mov.w	r2, #6
 800ac44:	f009 f9b4 	bl	8013fb0 <strncpy>
	drive(command);
 800ac48:	f107 0308 	add.w	r3, r7, #8
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff fe91 	bl	800a974 <drive>
	return 0;
 800ac52:	f04f 0300 	mov.w	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	f107 0718 	add.w	r7, r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <SysCtlDelay>:
 * @brief  The functions delay for a number of MCU clk period
 * @param  The number of MCU clk period to delay for
 * @retval None
 */
inline void SysCtlDelay(unsigned long ulDelay)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
	/* Decrement nCount value */
	while (ulDelay != 0)
 800ac68:	e003      	b.n	800ac72 <SysCtlDelay+0x12>
	{
		ulDelay--;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ac70:	607b      	str	r3, [r7, #4]
 * @retval None
 */
inline void SysCtlDelay(unsigned long ulDelay)
{
	/* Decrement nCount value */
	while (ulDelay != 0)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1f8      	bne.n	800ac6a <SysCtlDelay+0xa>
	{
		ulDelay--;
	}
}
 800ac78:	f107 070c 	add.w	r7, r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop

0800ac84 <SpiOpen>:

/****************************************************************************
 CC3000 SPI Protocol API
 ****************************************************************************/
void SpiOpen(gcSpiHandleRx pfRxHandler)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
	sSpiInformation.ulSpiState = eSPI_STATE_POWERUP;
 800ac8c:	f240 736c 	movw	r3, #1900	; 0x76c
 800ac90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ac94:	f04f 0200 	mov.w	r2, #0
 800ac98:	609a      	str	r2, [r3, #8]

	sSpiInformation.SPIRxHandler = pfRxHandler;
 800ac9a:	f240 736c 	movw	r3, #1900	; 0x76c
 800ac9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
	sSpiInformation.pRxPacket = wlan_rx_buffer;
 800aca6:	f240 736c 	movw	r3, #1900	; 0x76c
 800acaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acae:	f640 3280 	movw	r2, #2944	; 0xb80
 800acb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800acb6:	611a      	str	r2, [r3, #16]
	sSpiInformation.usRxPacketLength = 0;
 800acb8:	f240 736c 	movw	r3, #1900	; 0x76c
 800acbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acc0:	f04f 0200 	mov.w	r2, #0
 800acc4:	80da      	strh	r2, [r3, #6]
	sSpiInformation.pTxPacket = NULL;
 800acc6:	f240 736c 	movw	r3, #1900	; 0x76c
 800acca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acce:	f04f 0200 	mov.w	r2, #0
 800acd2:	60da      	str	r2, [r3, #12]
	sSpiInformation.usTxPacketLength = 0;
 800acd4:	f240 736c 	movw	r3, #1900	; 0x76c
 800acd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	809a      	strh	r2, [r3, #4]

	/* Enable Interrupt */
	tSLInformation.WlanInterruptEnable();
 800ace2:	f241 3398 	movw	r3, #5016	; 0x1398
 800ace6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acea:	6a1b      	ldr	r3, [r3, #32]
 800acec:	4798      	blx	r3
}
 800acee:	f107 0708 	add.w	r7, r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop

0800acf8 <SpiResumeSpi>:
	/* Disable Interrupt */
	tSLInformation.WlanInterruptDisable();
}

void SpiResumeSpi(void)
{
 800acf8:	b480      	push	{r7}
 800acfa:	af00      	add	r7, sp, #0
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 800acfc:	b662      	cpsie	i
	//
	//Enable IRQ Interrupts
	//
	__enable_irq();
}
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bc80      	pop	{r7}
 800ad02:	4770      	bx	lr

0800ad04 <SpiPauseSpi>:

void SpiPauseSpi(void)
{
 800ad04:	b480      	push	{r7}
 800ad06:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800ad08:	b672      	cpsid	i
	//
	//Disable IRQ Interrupts
	//
	__disable_irq();
}
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bc80      	pop	{r7}
 800ad0e:	4770      	bx	lr

0800ad10 <SpiTriggerRxProcessing>:
 to process the received data
 * @param  None
 * @retval None
 */
void SpiTriggerRxProcessing(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
	SpiPauseSpi();
 800ad14:	f7ff fff6 	bl	800ad04 <SpiPauseSpi>

	//
	// Trigger Rx processing
	//
	DEASSERT_CS();
 800ad18:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ad1c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ad20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad24:	f006 f95c 	bl	8010fe0 <GPIO_SetBits>
	sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
 800ad28:	f240 736c 	movw	r3, #1900	; 0x76c
 800ad2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad30:	f04f 0202 	mov.w	r2, #2
 800ad34:	609a      	str	r2, [r3, #8]
	sSpiInformation.SPIRxHandler(sSpiInformation.pRxPacket + SPI_HEADER_SIZE);
 800ad36:	f240 736c 	movw	r3, #1900	; 0x76c
 800ad3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	f240 736c 	movw	r3, #1900	; 0x76c
 800ad44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f103 0305 	add.w	r3, r3, #5
 800ad4e:	4618      	mov	r0, r3
 800ad50:	4790      	blx	r2
}
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <SpiReadData>:
 * @param  The pointer to data buffer
 * @param  This size of data
 * @retval None
 */
void SpiReadData(unsigned char *data, unsigned short size)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	807b      	strh	r3, [r7, #2]
	SpiReadWriteStringInt(TRUE, data, size);
 800ad60:	887b      	ldrh	r3, [r7, #2]
 800ad62:	f04f 0001 	mov.w	r0, #1
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	f000 f817 	bl	800ad9c <SpiReadWriteStringInt>
}
 800ad6e:	f107 0708 	add.w	r7, r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop

0800ad78 <SpiWriteAsync>:
 * @brief  This sends data over the SPI transport layer with
 * @param  None
 * @retval None
 */
void SpiWriteAsync(const unsigned char *data, unsigned short size)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	807b      	strh	r3, [r7, #2]
	//
	// The DMA TX/RX channel must be disabled.
	//
	SpiReadWriteString(FALSE, data, size);
 800ad84:	887b      	ldrh	r3, [r7, #2]
 800ad86:	f04f 0000 	mov.w	r0, #0
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f000 f883 	bl	800ae98 <SpiReadWriteString>
}
 800ad92:	f107 0708 	add.w	r7, r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop

0800ad9c <SpiReadWriteStringInt>:
 * @param  ptrData Pointer to data to be written
 * @param  ulDataSize The size of the data to be written or read
 * @retval None
 */
void SpiReadWriteStringInt(uint32_t ulTrueFalse, const uint8_t *ptrData, uint32_t ulDataSize)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
	/* Delay for at lest 50 us at the start of every transfer */
	SysCtlDelay(FIFTY_US_DELAY);
 800ada8:	f240 13f4 	movw	r3, #500	; 0x1f4
 800adac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	f64d 6383 	movw	r3, #56963	; 0xde83
 800adb6:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800adba:	fba3 1302 	umull	r1, r3, r3, r2
 800adbe:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800adc2:	f04f 0232 	mov.w	r2, #50	; 0x32
 800adc6:	fb02 f303 	mul.w	r3, r2, r3
 800adca:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff ff46 	bl	800ac60 <SysCtlDelay>

	/* Disable DMA Channels */
	CC3000_SPI_DMA_Channels(DISABLE);
 800add4:	f04f 0000 	mov.w	r0, #0
 800add8:	f001 f850 	bl	800be7c <CC3000_SPI_DMA_Channels>

	if (ulTrueFalse == TRUE)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d113      	bne.n	800ae0a <SpiReadWriteStringInt+0x6e>
	{
		CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) ptrData, ulDataSize);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f04f 0001 	mov.w	r0, #1
 800adea:	68b9      	ldr	r1, [r7, #8]
 800adec:	461a      	mov	r2, r3
 800adee:	f000 ff83 	bl	800bcf8 <CC3000_DMA_Config>
		CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) tSpiReadHeader, ulDataSize);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	f04f 0000 	mov.w	r0, #0
 800adfa:	f240 0100 	movw	r1, #0
 800adfe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ae02:	461a      	mov	r2, r3
 800ae04:	f000 ff78 	bl	800bcf8 <CC3000_DMA_Config>
 800ae08:	e014      	b.n	800ae34 <SpiReadWriteStringInt+0x98>
	}
	else
	{
		CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) sSpiInformation.pRxPacket, ulDataSize);
 800ae0a:	f240 736c 	movw	r3, #1900	; 0x76c
 800ae0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ae12:	691a      	ldr	r2, [r3, #16]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	f04f 0001 	mov.w	r0, #1
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f000 ff6a 	bl	800bcf8 <CC3000_DMA_Config>
		CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) ptrData, ulDataSize);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	f04f 0000 	mov.w	r0, #0
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f000 ff62 	bl	800bcf8 <CC3000_DMA_Config>
	}

	/* Enable DMA SPI Interrupt */
	DMA_ITConfig(CC3000_SPI_TX_DMA_CHANNEL, DMA_IT_TC, ENABLE);
 800ae34:	f04f 0058 	mov.w	r0, #88	; 0x58
 800ae38:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ae3c:	f04f 0102 	mov.w	r1, #2
 800ae40:	f04f 0201 	mov.w	r2, #1
 800ae44:	f005 fd6c 	bl	8010920 <DMA_ITConfig>

	/* Enable DMA Channels */
	CC3000_SPI_DMA_Channels(ENABLE);
 800ae48:	f04f 0001 	mov.w	r0, #1
 800ae4c:	f001 f816 	bl	800be7c <CC3000_SPI_DMA_Channels>

	/* Wait until DMA Transfer Completes */
	while(DMA_GetCurrDataCounter(CC3000_SPI_TX_DMA_CHANNEL))
 800ae50:	bf00      	nop
 800ae52:	f04f 0058 	mov.w	r0, #88	; 0x58
 800ae56:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ae5a:	f005 fd7f 	bl	801095c <DMA_GetCurrDataCounter>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1f6      	bne.n	800ae52 <SpiReadWriteStringInt+0xb6>
	{
	}

	while(DMA_GetCurrDataCounter(CC3000_SPI_RX_DMA_CHANNEL))
 800ae64:	bf00      	nop
 800ae66:	f04f 0044 	mov.w	r0, #68	; 0x44
 800ae6a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800ae6e:	f005 fd75 	bl	801095c <DMA_GetCurrDataCounter>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1f6      	bne.n	800ae66 <SpiReadWriteStringInt+0xca>
	{
	}

	/* Loop until SPI busy */
	while (SPI_I2S_GetFlagStatus(CC3000_SPI, SPI_I2S_FLAG_BSY ) != RESET)
 800ae78:	bf00      	nop
 800ae7a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800ae7e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800ae82:	f04f 0180 	mov.w	r1, #128	; 0x80
 800ae86:	f006 fbbf 	bl	8011608 <SPI_I2S_GetFlagStatus>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1f4      	bne.n	800ae7a <SpiReadWriteStringInt+0xde>
	{
	}
}
 800ae90:	f107 0710 	add.w	r7, r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SpiReadWriteString>:
 * @param  ptrData Pointer to data to be written
 * @param  ulDataSize The size of the data to be written or read
 * @retval None
 */
void SpiReadWriteString(uint32_t ulTrueFalse, const uint8_t *ptrData, uint32_t ulDataSize)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
	SysCtlDelay(FIFTY_US_DELAY);
 800aea4:	f240 13f4 	movw	r3, #500	; 0x1f4
 800aea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	f64d 6383 	movw	r3, #56963	; 0xde83
 800aeb2:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800aeb6:	fba3 1302 	umull	r1, r3, r3, r2
 800aeba:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800aebe:	f04f 0232 	mov.w	r2, #50	; 0x32
 800aec2:	fb02 f303 	mul.w	r3, r2, r3
 800aec6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7ff fec8 	bl	800ac60 <SysCtlDelay>

	/* Disable DMA RX Channels */
	CC3000_SPI_DMA_Channels(DISABLE);
 800aed0:	f04f 0000 	mov.w	r0, #0
 800aed4:	f000 ffd2 	bl	800be7c <CC3000_SPI_DMA_Channels>

	/* Specify the DMA Read/Write buffer and size */
	if (ulTrueFalse == TRUE)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d113      	bne.n	800af06 <SpiReadWriteString+0x6e>
	{
		CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) ptrData, ulDataSize);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f04f 0001 	mov.w	r0, #1
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	461a      	mov	r2, r3
 800aeea:	f000 ff05 	bl	800bcf8 <CC3000_DMA_Config>
		CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) tSpiReadHeader, ulDataSize);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	f04f 0000 	mov.w	r0, #0
 800aef6:	f240 0100 	movw	r1, #0
 800aefa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800aefe:	461a      	mov	r2, r3
 800af00:	f000 fefa 	bl	800bcf8 <CC3000_DMA_Config>
 800af04:	e014      	b.n	800af30 <SpiReadWriteString+0x98>
	}
	else
	{
		CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) sSpiInformation.pRxPacket, ulDataSize);
 800af06:	f240 736c 	movw	r3, #1900	; 0x76c
 800af0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800af0e:	691a      	ldr	r2, [r3, #16]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	b29b      	uxth	r3, r3
 800af14:	f04f 0001 	mov.w	r0, #1
 800af18:	4611      	mov	r1, r2
 800af1a:	461a      	mov	r2, r3
 800af1c:	f000 feec 	bl	800bcf8 <CC3000_DMA_Config>
		CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) ptrData, ulDataSize);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	b29b      	uxth	r3, r3
 800af24:	f04f 0000 	mov.w	r0, #0
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	461a      	mov	r2, r3
 800af2c:	f000 fee4 	bl	800bcf8 <CC3000_DMA_Config>
	}

	/* Enable DMA Channels */
	CC3000_SPI_DMA_Channels(ENABLE);
 800af30:	f04f 0001 	mov.w	r0, #1
 800af34:	f000 ffa2 	bl	800be7c <CC3000_SPI_DMA_Channels>

	/* Wait until DMA Transfer Completes */
	while(DMA_GetCurrDataCounter(CC3000_SPI_TX_DMA_CHANNEL))
 800af38:	bf00      	nop
 800af3a:	f04f 0058 	mov.w	r0, #88	; 0x58
 800af3e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800af42:	f005 fd0b 	bl	801095c <DMA_GetCurrDataCounter>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1f6      	bne.n	800af3a <SpiReadWriteString+0xa2>
	{
	}

	while(DMA_GetCurrDataCounter(CC3000_SPI_RX_DMA_CHANNEL))
 800af4c:	bf00      	nop
 800af4e:	f04f 0044 	mov.w	r0, #68	; 0x44
 800af52:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800af56:	f005 fd01 	bl	801095c <DMA_GetCurrDataCounter>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1f6      	bne.n	800af4e <SpiReadWriteString+0xb6>
	{
	}

	/* Loop until SPI busy */
	while (SPI_I2S_GetFlagStatus(CC3000_SPI, SPI_I2S_FLAG_BSY ) != RESET)
 800af60:	bf00      	nop
 800af62:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800af66:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800af6a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800af6e:	f006 fb4b 	bl	8011608 <SPI_I2S_GetFlagStatus>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1f4      	bne.n	800af62 <SpiReadWriteString+0xca>
	{
	}
}
 800af78:	f107 0710 	add.w	r7, r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <SpiFirstWrite>:
 * @brief  Sends header information to CC3000
 * @param  None
 * @retval None
 */
long SpiFirstWrite(unsigned char *ucBuf, unsigned short usLength)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	807b      	strh	r3, [r7, #2]
	//
	// workaround for first transaction
	//
	ASSERT_CS();
 800af8c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800af90:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800af94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800af98:	f006 f830 	bl	8010ffc <GPIO_ResetBits>

	//SPI writes first 4 bytes of data
	SpiReadWriteString(FALSE, ucBuf, 4);
 800af9c:	f04f 0000 	mov.w	r0, #0
 800afa0:	6879      	ldr	r1, [r7, #4]
 800afa2:	f04f 0204 	mov.w	r2, #4
 800afa6:	f7ff ff77 	bl	800ae98 <SpiReadWriteString>
	//SPI writes next 4 bytes of data
	SpiReadWriteString(FALSE, ucBuf + 4, usLength - 4);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f103 0204 	add.w	r2, r3, #4
 800afb0:	887b      	ldrh	r3, [r7, #2]
 800afb2:	f1a3 0304 	sub.w	r3, r3, #4
 800afb6:	f04f 0000 	mov.w	r0, #0
 800afba:	4611      	mov	r1, r2
 800afbc:	461a      	mov	r2, r3
 800afbe:	f7ff ff6b 	bl	800ae98 <SpiReadWriteString>

	// From this point on - operate in a regular way
	sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
 800afc2:	f240 736c 	movw	r3, #1900	; 0x76c
 800afc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800afca:	f04f 0202 	mov.w	r2, #2
 800afce:	609a      	str	r2, [r3, #8]

	DEASSERT_CS();
 800afd0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800afd4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800afd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800afdc:	f006 f800 	bl	8010fe0 <GPIO_SetBits>
	return (0);
 800afe0:	f04f 0300 	mov.w	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	f107 0708 	add.w	r7, r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop

0800aff0 <SpiWrite>:
 * @param  pUserBuffer: pointer to data
 * @param usLength: length of data that will be sent to CC3000
 * @retval None
 */
long SpiWrite(unsigned char *pUserBuffer, unsigned short usLength)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	807b      	strh	r3, [r7, #2]
	unsigned char ucPad = 0;
 800affc:	f04f 0300 	mov.w	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
	//
	// Figure out the total length of the packet in order to figure out if there is padding or not
	//
	if (!(usLength & 0x0001))
 800b002:	887b      	ldrh	r3, [r7, #2]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d103      	bne.n	800b014 <SpiWrite+0x24>
	{
		ucPad++;
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	f103 0301 	add.w	r3, r3, #1
 800b012:	73fb      	strb	r3, [r7, #15]
	}

	pUserBuffer[0] = WRITE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f04f 0201 	mov.w	r2, #1
 800b01a:	701a      	strb	r2, [r3, #0]
	pUserBuffer[1] = HI(usLength + ucPad);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f103 0301 	add.w	r3, r3, #1
 800b022:	8879      	ldrh	r1, [r7, #2]
 800b024:	7bfa      	ldrb	r2, [r7, #15]
 800b026:	188a      	adds	r2, r1, r2
 800b028:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800b02c:	ea4f 2222 	mov.w	r2, r2, asr #8
 800b030:	b2d2      	uxtb	r2, r2
 800b032:	701a      	strb	r2, [r3, #0]
	pUserBuffer[2] = LO(usLength + ucPad);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f103 0302 	add.w	r3, r3, #2
 800b03a:	887a      	ldrh	r2, [r7, #2]
 800b03c:	b2d1      	uxtb	r1, r2
 800b03e:	7bfa      	ldrb	r2, [r7, #15]
 800b040:	188a      	adds	r2, r1, r2
 800b042:	b2d2      	uxtb	r2, r2
 800b044:	701a      	strb	r2, [r3, #0]
	pUserBuffer[3] = 0;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f103 0303 	add.w	r3, r3, #3
 800b04c:	f04f 0200 	mov.w	r2, #0
 800b050:	701a      	strb	r2, [r3, #0]
	pUserBuffer[4] = 0;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f103 0304 	add.w	r3, r3, #4
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	701a      	strb	r2, [r3, #0]

	usLength += (SPI_HEADER_SIZE + ucPad);
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	b29a      	uxth	r2, r3
 800b062:	887b      	ldrh	r3, [r7, #2]
 800b064:	18d3      	adds	r3, r2, r3
 800b066:	b29b      	uxth	r3, r3
 800b068:	f103 0305 	add.w	r3, r3, #5
 800b06c:	807b      	strh	r3, [r7, #2]

	if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
 800b06e:	f240 736c 	movw	r3, #1900	; 0x76c
 800b072:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d107      	bne.n	800b08c <SpiWrite+0x9c>
	{
		while (sSpiInformation.ulSpiState != eSPI_STATE_INITIALIZED)
 800b07c:	bf00      	nop
 800b07e:	f240 736c 	movw	r3, #1900	; 0x76c
 800b082:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d1f8      	bne.n	800b07e <SpiWrite+0x8e>
		{
		}
	}
	if (sSpiInformation.ulSpiState == eSPI_STATE_INITIALIZED)
 800b08c:	f240 736c 	movw	r3, #1900	; 0x76c
 800b090:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d10d      	bne.n	800b0b6 <SpiWrite+0xc6>
	{

		//
		// This is time for first TX/RX transactions over SPI: the IRQ is down - so need to send read buffer size command
		//
		SpiFirstWrite(pUserBuffer, usLength);
 800b09a:	887b      	ldrh	r3, [r7, #2]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f7ff ff6e 	bl	800af80 <SpiFirstWrite>

		//
		// Due to the fact that we are currently implementing a blocking situation
		// here we will wait till end of transaction
		//
		while (eSPI_STATE_IDLE != sSpiInformation.ulSpiState)
 800b0a4:	bf00      	nop
 800b0a6:	f240 736c 	movw	r3, #1900	; 0x76c
 800b0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d1f8      	bne.n	800b0a6 <SpiWrite+0xb6>
 800b0b4:	e04a      	b.n	800b14c <SpiWrite+0x15c>

		//
		// We need to prevent here race that can occur in case 2 back to back packets are sent to the
		// device, so the state will move to IDLE and once again to not IDLE due to IRQ
		//
		while (sSpiInformation.ulSpiState != eSPI_STATE_IDLE)
 800b0b6:	bf00      	nop
 800b0b8:	f240 736c 	movw	r3, #1900	; 0x76c
 800b0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d1f8      	bne.n	800b0b8 <SpiWrite+0xc8>
		{
		}

		/* Loop until SPI busy */
		while (SPI_I2S_GetFlagStatus(CC3000_SPI, SPI_I2S_FLAG_BSY ) != RESET)
 800b0c6:	bf00      	nop
 800b0c8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800b0cc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b0d0:	f04f 0180 	mov.w	r1, #128	; 0x80
 800b0d4:	f006 fa98 	bl	8011608 <SPI_I2S_GetFlagStatus>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1f4      	bne.n	800b0c8 <SpiWrite+0xd8>
		{
		}

		//SysCtlDelay(9000000);

		while (!tSLInformation.ReadWlanInterruptPin())
 800b0de:	bf00      	nop
 800b0e0:	f241 3398 	movw	r3, #5016	; 0x1398
 800b0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0e8:	69db      	ldr	r3, [r3, #28]
 800b0ea:	4798      	blx	r3
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0f6      	beq.n	800b0e0 <SpiWrite+0xf0>
		{
		}

		sSpiInformation.ulSpiState = eSPI_STATE_WRITE_IRQ;
 800b0f2:	f240 736c 	movw	r3, #1900	; 0x76c
 800b0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b0fa:	f04f 0203 	mov.w	r2, #3
 800b0fe:	609a      	str	r2, [r3, #8]
		sSpiInformation.pTxPacket = pUserBuffer;
 800b100:	f240 736c 	movw	r3, #1900	; 0x76c
 800b104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	60da      	str	r2, [r3, #12]
		sSpiInformation.usTxPacketLength = usLength;
 800b10c:	f240 736c 	movw	r3, #1900	; 0x76c
 800b110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b114:	887a      	ldrh	r2, [r7, #2]
 800b116:	809a      	strh	r2, [r3, #4]

		//
		// Assert the CS line and wait till IRQ line is active and then initialize write operation
		//
		ASSERT_CS();
 800b118:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b11c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b124:	f005 ff6a 	bl	8010ffc <GPIO_ResetBits>

		//SysCtlDelay(90000);

		while (!tSLInformation.ReadWlanInterruptPin())
 800b128:	bf00      	nop
 800b12a:	f241 3398 	movw	r3, #5016	; 0x1398
 800b12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	4798      	blx	r3
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d0f6      	beq.n	800b12a <SpiWrite+0x13a>

		//
		// Due to the fact that we are currently implementing a blocking situation
		// here we will wait till end of transaction
		//
		while (eSPI_STATE_IDLE != sSpiInformation.ulSpiState)
 800b13c:	bf00      	nop
 800b13e:	f240 736c 	movw	r3, #1900	; 0x76c
 800b142:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d1f8      	bne.n	800b13e <SpiWrite+0x14e>
		{
		}
	}
	return (0);
 800b14c:	f04f 0300 	mov.w	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	f107 0710 	add.w	r7, r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop

0800b15c <SpiReadDataCont>:

 * @param  None
 * @retval None
 */
long SpiReadDataCont(void)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
	unsigned char *evnt_buff, type;

	//
	//determine what type of packet we have
	//
	evnt_buff = sSpiInformation.pRxPacket;
 800b162:	f240 736c 	movw	r3, #1900	; 0x76c
 800b166:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	60bb      	str	r3, [r7, #8]
	data_to_recv = 0;
 800b16e:	f04f 0300 	mov.w	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]
	STREAM_TO_UINT8((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_PACKET_TYPE_OFFSET, type);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f103 0305 	add.w	r3, r3, #5
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	71fb      	strb	r3, [r7, #7]

	switch (type)
 800b17e:	79fb      	ldrb	r3, [r7, #7]
 800b180:	2b02      	cmp	r3, #2
 800b182:	d002      	beq.n	800b18a <SpiReadDataCont+0x2e>
 800b184:	2b04      	cmp	r3, #4
 800b186:	d03f      	beq.n	800b208 <SpiReadDataCont+0xac>
 800b188:	e064      	b.n	800b254 <SpiReadDataCont+0xf8>
	{
		case HCI_TYPE_DATA:
		{
			STREAM_TO_UINT16((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_DATA_LENGTH_OFFSET, data_to_recv);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	f103 0305 	add.w	r3, r3, #5
 800b190:	4618      	mov	r0, r3
 800b192:	f04f 0103 	mov.w	r1, #3
 800b196:	f006 fd33 	bl	8011c00 <STREAM_TO_UINT16_f>
 800b19a:	4603      	mov	r3, r0
 800b19c:	60fb      	str	r3, [r7, #12]

			if (data_to_recv >= SPI_WINDOW_SIZE)
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	dd12      	ble.n	800b1ce <SpiReadDataCont+0x72>
			{
				data_to_recv = eSPI_STATE_READ_FIRST_PORTION;
 800b1a8:	f04f 0307 	mov.w	r3, #7
 800b1ac:	60fb      	str	r3, [r7, #12]
				SpiReadData(evnt_buff + 10, SPI_WINDOW_SIZE);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f103 030a 	add.w	r3, r3, #10
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b1ba:	f7ff fdcb 	bl	800ad54 <SpiReadData>
				sSpiInformation.ulSpiState = eSPI_STATE_READ_FIRST_PORTION;
 800b1be:	f240 736c 	movw	r3, #1900	; 0x76c
 800b1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b1c6:	f04f 0207 	mov.w	r2, #7
 800b1ca:	609a      	str	r2, [r3, #8]
					SpiReadData(evnt_buff + 10, data_to_recv);
				}

				sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
			}
			break;
 800b1cc:	e042      	b.n	800b254 <SpiReadDataCont+0xf8>
			else
			{
				//
				// We need to read the rest of data..
				//
				if (!((HEADERS_SIZE_EVNT + data_to_recv) & 1))
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d103      	bne.n	800b1e0 <SpiReadDataCont+0x84>
				{
					data_to_recv++;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f103 0301 	add.w	r3, r3, #1
 800b1de:	60fb      	str	r3, [r7, #12]
				}

				if (data_to_recv)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d008      	beq.n	800b1f8 <SpiReadDataCont+0x9c>
				{
					SpiReadData(evnt_buff + 10, data_to_recv);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f103 020a 	add.w	r2, r3, #10
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	f7ff fdae 	bl	800ad54 <SpiReadData>
				}

				sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
 800b1f8:	f240 736c 	movw	r3, #1900	; 0x76c
 800b1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b200:	f04f 0208 	mov.w	r2, #8
 800b204:	609a      	str	r2, [r3, #8]
			}
			break;
 800b206:	e025      	b.n	800b254 <SpiReadDataCont+0xf8>
		case HCI_TYPE_EVNT:
		{
			//
			// Calculate the rest length of the data
			//
			STREAM_TO_UINT8((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_EVENT_LENGTH_OFFSET, data_to_recv);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f103 0308 	add.w	r3, r3, #8
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	60fb      	str	r3, [r7, #12]
			data_to_recv -= 1;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b218:	60fb      	str	r3, [r7, #12]

			//
			// Add padding byte if needed
			//
			if ((HEADERS_SIZE_EVNT + data_to_recv) & 1)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f003 0301 	and.w	r3, r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <SpiReadDataCont+0xd0>
			{

				data_to_recv++;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f103 0301 	add.w	r3, r3, #1
 800b22a:	60fb      	str	r3, [r7, #12]
			}

			if (data_to_recv)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d008      	beq.n	800b244 <SpiReadDataCont+0xe8>
			{
				SpiReadData(evnt_buff + 10, data_to_recv);
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	f103 020a 	add.w	r2, r3, #10
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	4610      	mov	r0, r2
 800b23e:	4619      	mov	r1, r3
 800b240:	f7ff fd88 	bl	800ad54 <SpiReadData>
			}

			sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
 800b244:	f240 736c 	movw	r3, #1900	; 0x76c
 800b248:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b24c:	f04f 0208 	mov.w	r2, #8
 800b250:	609a      	str	r2, [r3, #8]
			break;
 800b252:	bf00      	nop
		}
	}

	return (data_to_recv);
 800b254:	68fb      	ldr	r3, [r7, #12]
}
 800b256:	4618      	mov	r0, r3
 800b258:	f107 0710 	add.w	r7, r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <SpiReadHeader>:

 * @param  None
 * @retval None
 */
void SpiReadHeader(void)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	af00      	add	r7, sp, #0
	SpiReadWriteStringInt(TRUE, sSpiInformation.pRxPacket, 10);
 800b264:	f240 736c 	movw	r3, #1900	; 0x76c
 800b268:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	f04f 0001 	mov.w	r0, #1
 800b272:	4619      	mov	r1, r3
 800b274:	f04f 020a 	mov.w	r2, #10
 800b278:	f7ff fd90 	bl	800ad9c <SpiReadWriteStringInt>
}
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop

0800b280 <SpiContReadOperation>:
 * @brief  Determine if all data was read if so end the data exchange
 * @param  None
 * @retval None
 */
void SpiContReadOperation(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	af00      	add	r7, sp, #0
	//
	// The header was read - continue with  the payload read
	//
	if (!SpiReadDataCont())
 800b284:	f7ff ff6a 	bl	800b15c <SpiReadDataCont>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <SpiContReadOperation+0x12>
	{
		//
		// All the data was read - finalize handling by switching to teh task
		//	and calling from task Event Handler
		//
		SpiTriggerRxProcessing();
 800b28e:	f7ff fd3f 	bl	800ad10 <SpiTriggerRxProcessing>
	}
}
 800b292:	bd80      	pop	{r7, pc}

0800b294 <SPI_DMA_IntHandler>:
 transfer.
 * @param  None
 * @retval None
 */
void SPI_DMA_IntHandler(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
	unsigned long ucTxFinished, ucRxFinished;
	unsigned short data_to_recv;
	unsigned char *evnt_buff;

	evnt_buff = sSpiInformation.pRxPacket;
 800b29a:	f240 736c 	movw	r3, #1900	; 0x76c
 800b29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	60bb      	str	r3, [r7, #8]
	data_to_recv = 0;
 800b2a6:	f04f 0300 	mov.w	r3, #0
 800b2aa:	81fb      	strh	r3, [r7, #14]

	ucTxFinished = DMA_GetFlagStatus(CC3000_SPI_TX_DMA_TCFLAG );
 800b2ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b2b0:	f005 fb62 	bl	8010978 <DMA_GetFlagStatus>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	607b      	str	r3, [r7, #4]
	ucRxFinished = DMA_GetFlagStatus(CC3000_SPI_RX_DMA_TCFLAG );
 800b2b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b2bc:	f005 fb5c 	bl	8010978 <DMA_GetFlagStatus>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	603b      	str	r3, [r7, #0]

	if (sSpiInformation.ulSpiState == eSPI_STATE_READ_IRQ)
 800b2c4:	f240 736c 	movw	r3, #1900	; 0x76c
 800b2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	2b06      	cmp	r3, #6
 800b2d0:	d10e      	bne.n	800b2f0 <SPI_DMA_IntHandler+0x5c>
	{
		//
		// If one of DMA's still did not finished its operation - we need to stay
		// and wait till it will finish
		//
		if (ucTxFinished && ucRxFinished)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 80a4 	beq.w	800b422 <SPI_DMA_IntHandler+0x18e>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 80a0 	beq.w	800b422 <SPI_DMA_IntHandler+0x18e>
		{
			/* Clear SPI_DMA Interrupt Pending Flags */
			DMA_ClearFlag(CC3000_SPI_TX_DMA_TCFLAG | CC3000_SPI_RX_DMA_TCFLAG);
 800b2e2:	f44f 3008 	mov.w	r0, #139264	; 0x22000
 800b2e6:	f005 fb77 	bl	80109d8 <DMA_ClearFlag>

			SpiContReadOperation();
 800b2ea:	f7ff ffc9 	bl	800b280 <SpiContReadOperation>
 800b2ee:	e098      	b.n	800b422 <SPI_DMA_IntHandler+0x18e>
		}
	}
	else if (sSpiInformation.ulSpiState == eSPI_STATE_READ_FIRST_PORTION)
 800b2f0:	f240 736c 	movw	r3, #1900	; 0x76c
 800b2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	2b07      	cmp	r3, #7
 800b2fc:	d132      	bne.n	800b364 <SPI_DMA_IntHandler+0xd0>
	{
		if (ucRxFinished)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 808e 	beq.w	800b422 <SPI_DMA_IntHandler+0x18e>
		{
			/* Clear SPI_DMA Interrupt Pending Flags */
			DMA_ClearFlag(CC3000_SPI_TX_DMA_TCFLAG | CC3000_SPI_RX_DMA_TCFLAG);
 800b306:	f44f 3008 	mov.w	r0, #139264	; 0x22000
 800b30a:	f005 fb65 	bl	80109d8 <DMA_ClearFlag>

			STREAM_TO_UINT16((char *)(evnt_buff + SPI_HEADER_SIZE), HCI_DATA_LENGTH_OFFSET, data_to_recv);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f103 0305 	add.w	r3, r3, #5
 800b314:	4618      	mov	r0, r3
 800b316:	f04f 0103 	mov.w	r1, #3
 800b31a:	f006 fc71 	bl	8011c00 <STREAM_TO_UINT16_f>
 800b31e:	4603      	mov	r3, r0
 800b320:	81fb      	strh	r3, [r7, #14]
			// Read the last portion of data
			//
			//
			// We need to read the rest of data..
			//
			data_to_recv -= SPI_WINDOW_SIZE;
 800b322:	89fb      	ldrh	r3, [r7, #14]
 800b324:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b328:	81fb      	strh	r3, [r7, #14]

			if (!((HEADERS_SIZE_EVNT + data_to_recv) & 1))
 800b32a:	89fb      	ldrh	r3, [r7, #14]
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	2b00      	cmp	r3, #0
 800b332:	d103      	bne.n	800b33c <SPI_DMA_IntHandler+0xa8>
			{
				data_to_recv++;
 800b334:	89fb      	ldrh	r3, [r7, #14]
 800b336:	f103 0301 	add.w	r3, r3, #1
 800b33a:	81fb      	strh	r3, [r7, #14]
			}

			SpiReadData(sSpiInformation.pRxPacket + 10 + SPI_WINDOW_SIZE, data_to_recv);
 800b33c:	f240 736c 	movw	r3, #1900	; 0x76c
 800b340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	f203 420a 	addw	r2, r3, #1034	; 0x40a
 800b34a:	89fb      	ldrh	r3, [r7, #14]
 800b34c:	4610      	mov	r0, r2
 800b34e:	4619      	mov	r1, r3
 800b350:	f7ff fd00 	bl	800ad54 <SpiReadData>

			sSpiInformation.ulSpiState = eSPI_STATE_READ_EOT;
 800b354:	f240 736c 	movw	r3, #1900	; 0x76c
 800b358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b35c:	f04f 0208 	mov.w	r2, #8
 800b360:	609a      	str	r2, [r3, #8]
 800b362:	e05e      	b.n	800b422 <SPI_DMA_IntHandler+0x18e>
		}
	}
	else if (sSpiInformation.ulSpiState == eSPI_STATE_READ_EOT)
 800b364:	f240 736c 	movw	r3, #1900	; 0x76c
 800b368:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	2b08      	cmp	r3, #8
 800b370:	d109      	bne.n	800b386 <SPI_DMA_IntHandler+0xf2>
	{
		//
		// All the data was read - finalize handling by switching to the task
		// and calling from task Event Handler
		//
		if (ucRxFinished)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d054      	beq.n	800b422 <SPI_DMA_IntHandler+0x18e>
		{
			/* Clear SPI_DMA Interrupt Pending Flags */
			DMA_ClearFlag(CC3000_SPI_TX_DMA_TCFLAG | CC3000_SPI_RX_DMA_TCFLAG);
 800b378:	f44f 3008 	mov.w	r0, #139264	; 0x22000
 800b37c:	f005 fb2c 	bl	80109d8 <DMA_ClearFlag>

			SpiTriggerRxProcessing();
 800b380:	f7ff fcc6 	bl	800ad10 <SpiTriggerRxProcessing>
 800b384:	e04d      	b.n	800b422 <SPI_DMA_IntHandler+0x18e>
		}
	}
	else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_EOT)
 800b386:	f240 736c 	movw	r3, #1900	; 0x76c
 800b38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	2b05      	cmp	r3, #5
 800b392:	d122      	bne.n	800b3da <SPI_DMA_IntHandler+0x146>
	{
		if (ucTxFinished)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d043      	beq.n	800b422 <SPI_DMA_IntHandler+0x18e>
		{
			/* Loop until SPI busy */
			while (SPI_I2S_GetFlagStatus(CC3000_SPI, SPI_I2S_FLAG_BSY ) != RESET)
 800b39a:	bf00      	nop
 800b39c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800b3a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800b3a4:	f04f 0180 	mov.w	r1, #128	; 0x80
 800b3a8:	f006 f92e 	bl	8011608 <SPI_I2S_GetFlagStatus>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1f4      	bne.n	800b39c <SPI_DMA_IntHandler+0x108>
			{
			}

			/* Clear SPI_DMA Interrupt Pending Flags */
			DMA_ClearFlag(CC3000_SPI_TX_DMA_TCFLAG | CC3000_SPI_RX_DMA_TCFLAG);
 800b3b2:	f44f 3008 	mov.w	r0, #139264	; 0x22000
 800b3b6:	f005 fb0f 	bl	80109d8 <DMA_ClearFlag>

			DEASSERT_CS();
 800b3ba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b3be:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b3c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b3c6:	f005 fe0b 	bl	8010fe0 <GPIO_SetBits>

			sSpiInformation.ulSpiState = eSPI_STATE_IDLE;
 800b3ca:	f240 736c 	movw	r3, #1900	; 0x76c
 800b3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3d2:	f04f 0202 	mov.w	r2, #2
 800b3d6:	609a      	str	r2, [r3, #8]
 800b3d8:	e023      	b.n	800b422 <SPI_DMA_IntHandler+0x18e>
		}
	}
	else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_FIRST_PORTION)
 800b3da:	f240 736c 	movw	r3, #1900	; 0x76c
 800b3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d11c      	bne.n	800b422 <SPI_DMA_IntHandler+0x18e>
	{
		if (ucTxFinished)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d019      	beq.n	800b422 <SPI_DMA_IntHandler+0x18e>
		{
			sSpiInformation.ulSpiState = eSPI_STATE_WRITE_EOT;
 800b3ee:	f240 736c 	movw	r3, #1900	; 0x76c
 800b3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b3f6:	f04f 0205 	mov.w	r2, #5
 800b3fa:	609a      	str	r2, [r3, #8]
			SpiWriteAsync(sSpiInformation.pTxPacket + SPI_WINDOW_SIZE, sSpiInformation.usTxPacketLength - SPI_WINDOW_SIZE);
 800b3fc:	f240 736c 	movw	r3, #1900	; 0x76c
 800b400:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800b40a:	f240 736c 	movw	r3, #1900	; 0x76c
 800b40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b412:	889b      	ldrh	r3, [r3, #4]
 800b414:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b418:	b29b      	uxth	r3, r3
 800b41a:	4610      	mov	r0, r2
 800b41c:	4619      	mov	r1, r3
 800b41e:	f7ff fcab 	bl	800ad78 <SpiWriteAsync>
		}
	}
}
 800b422:	f107 0710 	add.w	r7, r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop

0800b42c <SPI_EXTI_IntHandler>:
 IRQ line low.
 * @param  None
 * @retval None
 */
void SPI_EXTI_IntHandler(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
	//Flag is cleared in first ISR handler
	if (!tSLInformation.ReadWlanInterruptPin())
 800b430:	f241 3398 	movw	r3, #5016	; 0x1398
 800b434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	4798      	blx	r3
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d15f      	bne.n	800b502 <SPI_EXTI_IntHandler+0xd6>
	{
		if (sSpiInformation.ulSpiState == eSPI_STATE_POWERUP)
 800b442:	f240 736c 	movw	r3, #1900	; 0x76c
 800b446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d107      	bne.n	800b460 <SPI_EXTI_IntHandler+0x34>
		{
			/* This means IRQ line was low call a callback of HCI Layer to inform on event */
			sSpiInformation.ulSpiState = eSPI_STATE_INITIALIZED;
 800b450:	f240 736c 	movw	r3, #1900	; 0x76c
 800b454:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b458:	f04f 0201 	mov.w	r2, #1
 800b45c:	609a      	str	r2, [r3, #8]
 800b45e:	e050      	b.n	800b502 <SPI_EXTI_IntHandler+0xd6>
		}
		else if (sSpiInformation.ulSpiState == eSPI_STATE_IDLE)
 800b460:	f240 736c 	movw	r3, #1900	; 0x76c
 800b464:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d111      	bne.n	800b492 <SPI_EXTI_IntHandler+0x66>
		{
			sSpiInformation.ulSpiState = eSPI_STATE_READ_IRQ;
 800b46e:	f240 736c 	movw	r3, #1900	; 0x76c
 800b472:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b476:	f04f 0206 	mov.w	r2, #6
 800b47a:	609a      	str	r2, [r3, #8]

			/* IRQ line goes down - we are starting reception */

			ASSERT_CS();
 800b47c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b480:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800b484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b488:	f005 fdb8 	bl	8010ffc <GPIO_ResetBits>

			//
			// Wait for TX/RX Complete which will come as DMA interrupt
			//
			SpiReadHeader();
 800b48c:	f7ff fee8 	bl	800b260 <SpiReadHeader>
 800b490:	e037      	b.n	800b502 <SPI_EXTI_IntHandler+0xd6>
		}
		else if (sSpiInformation.ulSpiState == eSPI_STATE_WRITE_IRQ)
 800b492:	f240 736c 	movw	r3, #1900	; 0x76c
 800b496:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	2b03      	cmp	r3, #3
 800b49e:	d130      	bne.n	800b502 <SPI_EXTI_IntHandler+0xd6>
		{
			if (sSpiInformation.usTxPacketLength <= SPI_WINDOW_SIZE)
 800b4a0:	f240 736c 	movw	r3, #1900	; 0x76c
 800b4a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4a8:	889b      	ldrh	r3, [r3, #4]
 800b4aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4ae:	d817      	bhi.n	800b4e0 <SPI_EXTI_IntHandler+0xb4>
			{
				//
				// Send the data over SPI and wait for complete interrupt
				//
				sSpiInformation.ulSpiState = eSPI_STATE_WRITE_EOT;
 800b4b0:	f240 736c 	movw	r3, #1900	; 0x76c
 800b4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4b8:	f04f 0205 	mov.w	r2, #5
 800b4bc:	609a      	str	r2, [r3, #8]

				SpiReadWriteStringInt(FALSE, sSpiInformation.pTxPacket, sSpiInformation.usTxPacketLength);
 800b4be:	f240 736c 	movw	r3, #1900	; 0x76c
 800b4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	f240 736c 	movw	r3, #1900	; 0x76c
 800b4cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4d0:	889b      	ldrh	r3, [r3, #4]
 800b4d2:	f04f 0000 	mov.w	r0, #0
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	461a      	mov	r2, r3
 800b4da:	f7ff fc5f 	bl	800ad9c <SpiReadWriteStringInt>
 800b4de:	e010      	b.n	800b502 <SPI_EXTI_IntHandler+0xd6>
			else
			{
				//
				// Send the data over SPI and wait for complete interrupt to transfer the rest
				//
				sSpiInformation.ulSpiState = eSPI_STATE_WRITE_FIRST_PORTION;
 800b4e0:	f240 736c 	movw	r3, #1900	; 0x76c
 800b4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4e8:	f04f 0204 	mov.w	r2, #4
 800b4ec:	609a      	str	r2, [r3, #8]

				//
				// Start the DMA and change state
				//
				SpiWriteAsync(sSpiInformation.pTxPacket, SPI_WINDOW_SIZE);
 800b4ee:	f240 736c 	movw	r3, #1900	; 0x76c
 800b4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b4fe:	f7ff fc3b 	bl	800ad78 <SpiWriteAsync>
			}
		}
	}
}
 800b502:	bd80      	pop	{r7, pc}

0800b504 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 800b508:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b50c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b516:	ea4f 2313 	mov.w	r3, r3, lsr #8
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop

0800b524 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	6039      	str	r1, [r7, #0]
 800b52e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800b530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b534:	2b00      	cmp	r3, #0
 800b536:	da10      	bge.n	800b55a <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800b538:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b53c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b540:	79fa      	ldrb	r2, [r7, #7]
 800b542:	f002 020f 	and.w	r2, r2, #15
 800b546:	f1a2 0104 	sub.w	r1, r2, #4
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	185b      	adds	r3, r3, r1
 800b556:	761a      	strb	r2, [r3, #24]
 800b558:	e00d      	b.n	800b576 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800b55a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800b55e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b562:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	b2d2      	uxtb	r2, r2
 800b56a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800b56e:	b2d2      	uxtb	r2, r2
 800b570:	185b      	adds	r3, r3, r1
 800b572:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b576:	f107 070c 	add.w	r7, r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bc80      	pop	{r7}
 800b57e:	4770      	bx	lr

0800b580 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b580:	b480      	push	{r7}
 800b582:	b089      	sub	sp, #36	; 0x24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f003 0307 	and.w	r3, r3, #7
 800b592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	f1c3 0307 	rsb	r3, r3, #7
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	bf28      	it	cs
 800b59e:	2304      	movcs	r3, #4
 800b5a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	f103 0304 	add.w	r3, r3, #4
 800b5a8:	2b06      	cmp	r3, #6
 800b5aa:	d903      	bls.n	800b5b4 <NVIC_EncodePriority+0x34>
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	f1a3 0303 	sub.w	r3, r3, #3
 800b5b2:	e001      	b.n	800b5b8 <NVIC_EncodePriority+0x38>
 800b5b4:	f04f 0300 	mov.w	r3, #0
 800b5b8:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	f04f 0201 	mov.w	r2, #1
 800b5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	401a      	ands	r2, r3
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	fa02 f203 	lsl.w	r2, r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f04f 0101 	mov.w	r1, #1
 800b5da:	fa01 f303 	lsl.w	r3, r1, r3
 800b5de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 800b5e8:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bc80      	pop	{r7}
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop

0800b5f8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800b606:	429a      	cmp	r2, r3
 800b608:	d902      	bls.n	800b610 <SysTick_Config+0x18>
 800b60a:	f04f 0301 	mov.w	r3, #1
 800b60e:	e01f      	b.n	800b650 <SysTick_Config+0x58>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800b610:	f24e 0310 	movw	r3, #57360	; 0xe010
 800b614:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b61e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b622:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800b624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b628:	f04f 010f 	mov.w	r1, #15
 800b62c:	f7ff ff7a 	bl	800b524 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800b630:	f24e 0310 	movw	r3, #57360	; 0xe010
 800b634:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b638:	f04f 0200 	mov.w	r2, #0
 800b63c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b63e:	f24e 0310 	movw	r3, #57360	; 0xe010
 800b642:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b646:	f04f 0207 	mov.w	r2, #7
 800b64a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800b64c:	f04f 0300 	mov.w	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	f107 0708 	add.w	r7, r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop

0800b65c <Set_System>:
 * @brief  Configures Main system clocks & power.
 * @param  None
 * @retval None
 */
void Set_System(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
	 To reconfigure the default setting of SystemInit() function, refer to
	 system_stm32f10x.c file
	 */

	/* Enable PWR and BKP clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 800b662:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 800b666:	f04f 0101 	mov.w	r1, #1
 800b66a:	f005 ff1b 	bl	80114a4 <RCC_APB1PeriphClockCmd>

	/* Enable write access to Backup domain */
	PWR_BackupAccessCmd(ENABLE);
 800b66e:	f04f 0001 	mov.w	r0, #1
 800b672:	f005 fdb9 	bl	80111e8 <PWR_BackupAccessCmd>

	/* NVIC configuration */
	NVIC_Configuration();
 800b676:	f000 f861 	bl	800b73c <NVIC_Configuration>

    /* Enable AFIO clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 800b67a:	f04f 0001 	mov.w	r0, #1
 800b67e:	f04f 0101 	mov.w	r1, #1
 800b682:	f005 fee5 	bl	8011450 <RCC_APB2PeriphClockCmd>

#ifdef SWD_JTAG_DISABLE
    /* Disable the Serial Wire JTAG Debug Port SWJ-DP */
    GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
 800b686:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b68a:	f2c0 0030 	movt	r0, #48	; 0x30
 800b68e:	f04f 0101 	mov.w	r1, #1
 800b692:	f005 fcc1 	bl	8011018 <GPIO_PinRemapConfig>
#endif

	/* Configure DIOs */
	int Dx;
	for(Dx = 0; Dx < Dn; ++Dx)
 800b696:	f04f 0300 	mov.w	r3, #0
 800b69a:	607b      	str	r3, [r7, #4]
 800b69c:	e008      	b.n	800b6b0 <Set_System+0x54>
	{
		DIO_Init(Dx);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 f858 	bl	800b758 <DIO_Init>
    GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
#endif

	/* Configure DIOs */
	int Dx;
	for(Dx = 0; Dx < Dn; ++Dx)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f103 0301 	add.w	r3, r3, #1
 800b6ae:	607b      	str	r3, [r7, #4]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b07      	cmp	r3, #7
 800b6b4:	ddf3      	ble.n	800b69e <Set_System+0x42>
		DIO_Init(Dx);
	}

	/* Configure the LEDs and set the default states */
	int LEDx;
	for(LEDx = 0; LEDx < LEDn; ++LEDx)
 800b6b6:	f04f 0300 	mov.w	r3, #0
 800b6ba:	603b      	str	r3, [r7, #0]
 800b6bc:	e00d      	b.n	800b6da <Set_System+0x7e>
	{
	    LED_Init(LEDx);
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 f8ba 	bl	800b83c <LED_Init>
	    LED_Off(LEDx);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 f8ff 	bl	800b8d0 <LED_Off>
		DIO_Init(Dx);
	}

	/* Configure the LEDs and set the default states */
	int LEDx;
	for(LEDx = 0; LEDx < LEDn; ++LEDx)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	f103 0301 	add.w	r3, r3, #1
 800b6d8:	603b      	str	r3, [r7, #0]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	ddee      	ble.n	800b6be <Set_System+0x62>
	    LED_Init(LEDx);
	    LED_Off(LEDx);
	}

    /* Configure the Button */
    BUTTON_Init(BUTTON1, BUTTON_MODE_EXTI);
 800b6e0:	f04f 0000 	mov.w	r0, #0
 800b6e4:	f04f 0101 	mov.w	r1, #1
 800b6e8:	f000 f92e 	bl	800b948 <BUTTON_Init>

	/* Setup SysTick Timer for 1 msec interrupts */
	if (SysTick_Config(SystemCoreClock / 1000))
 800b6ec:	f240 13f4 	movw	r3, #500	; 0x1f4
 800b6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800b6fa:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800b6fe:	fba3 1302 	umull	r1, r3, r3, r2
 800b702:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800b706:	4618      	mov	r0, r3
 800b708:	f7ff ff76 	bl	800b5f8 <SysTick_Config>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d000      	beq.n	800b714 <Set_System+0xb8>
	{
		/* Capture error */
		while (1)
		{
		}
 800b712:	e7fe      	b.n	800b712 <Set_System+0xb6>
	}
	/* Configure the SysTick Handler Priority: Preemption priority and subpriority */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0x03, 0x00));
 800b714:	f7ff fef6 	bl	800b504 <NVIC_GetPriorityGrouping>
 800b718:	4603      	mov	r3, r0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f04f 0103 	mov.w	r1, #3
 800b720:	f04f 0200 	mov.w	r2, #0
 800b724:	f7ff ff2c 	bl	800b580 <NVIC_EncodePriority>
 800b728:	4603      	mov	r3, r0
 800b72a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b72e:	4619      	mov	r1, r3
 800b730:	f7ff fef8 	bl	800b524 <NVIC_SetPriority>
}
 800b734:	f107 0708 	add.w	r7, r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <NVIC_Configuration>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NVIC_Configuration(void)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	af00      	add	r7, sp, #0
#ifdef DFU_BUILD_ENABLE
	/* Set the Vector Table(VT) base location at 0xA000 */
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0xA000);
 800b740:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800b744:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800b748:	f004 ff68 	bl	801061c <NVIC_SetVectorTable>
	/* 4 bits for pre-emption priority(0-15 PreemptionPriority) and 0 bits for subpriority(0 SubPriority) */
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);

	/* Configure the Priority Group to 2 bits */
	/* 2 bits for pre-emption priority(0-3 PreemptionPriority) and 2 bits for subpriority(0-3 SubPriority) */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 800b74c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b750:	f004 fedc 	bl	801050c <NVIC_PriorityGroupConfig>
}
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop

0800b758 <DIO_Init>:
  * @brief  Configures Dx GPIO.
  * @param  Dx: Specifies the Dx to be configured.
  * @retval None
  */
void DIO_Init(DIO_TypeDef Dx)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable the GPIO_Dx Clock */
    RCC_APB2PeriphClockCmd(DIO_CLK[Dx], ENABLE);
 800b762:	79fa      	ldrb	r2, [r7, #7]
 800b764:	f244 2330 	movw	r3, #16944	; 0x4230
 800b768:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b770:	4618      	mov	r0, r3
 800b772:	f04f 0101 	mov.w	r1, #1
 800b776:	f005 fe6b 	bl	8011450 <RCC_APB2PeriphClockCmd>

    /* Configure the GPIO_Dx pin */
    GPIO_InitStructure.GPIO_Pin = DIO_PIN[Dx];
 800b77a:	79fa      	ldrb	r2, [r7, #7]
 800b77c:	f244 2320 	movw	r3, #16928	; 0x4220
 800b780:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b784:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b788:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800b78a:	f04f 0310 	mov.w	r3, #16
 800b78e:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800b790:	f04f 0303 	mov.w	r3, #3
 800b794:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(DIO_PORT[Dx], &GPIO_InitStructure);
 800b796:	79fa      	ldrb	r2, [r7, #7]
 800b798:	f240 0308 	movw	r3, #8
 800b79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7a4:	f107 030c 	add.w	r3, r7, #12
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	f005 fb22 	bl	8010df4 <GPIO_Init>

    /* Set to Off State */
    DIO_SetState(Dx, LOW);
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f04f 0100 	mov.w	r1, #0
 800b7b8:	f000 f804 	bl	800b7c4 <DIO_SetState>
}
 800b7bc:	f107 0710 	add.w	r7, r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <DIO_SetState>:
  * @param  Dx: Specifies the Dx.
  * @param  State: Set On or Off.
  * @retval None
  */
DIO_Error_TypeDef DIO_SetState(DIO_TypeDef Dx, DIO_State_TypeDef State)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	71fa      	strb	r2, [r7, #7]
 800b7d0:	71bb      	strb	r3, [r7, #6]
	if(Dx < 0 || Dx > Dn)
 800b7d2:	79fb      	ldrb	r3, [r7, #7]
 800b7d4:	2b08      	cmp	r3, #8
 800b7d6:	d902      	bls.n	800b7de <DIO_SetState+0x1a>
		return FAIL;
 800b7d8:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800b7dc:	e026      	b.n	800b82c <DIO_SetState+0x68>
	else if(State == HIGH)
 800b7de:	79bb      	ldrb	r3, [r7, #6]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d10f      	bne.n	800b804 <DIO_SetState+0x40>
		DIO_PORT[Dx]->BSRR = DIO_PIN[Dx];
 800b7e4:	79fa      	ldrb	r2, [r7, #7]
 800b7e6:	f240 0308 	movw	r3, #8
 800b7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b7ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b7f2:	79f9      	ldrb	r1, [r7, #7]
 800b7f4:	f244 2320 	movw	r3, #16928	; 0x4220
 800b7f8:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b7fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b800:	6113      	str	r3, [r2, #16]
 800b802:	e011      	b.n	800b828 <DIO_SetState+0x64>
	else if(State == LOW)
 800b804:	79bb      	ldrb	r3, [r7, #6]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10e      	bne.n	800b828 <DIO_SetState+0x64>
		DIO_PORT[Dx]->BRR = DIO_PIN[Dx];
 800b80a:	79fa      	ldrb	r2, [r7, #7]
 800b80c:	f240 0308 	movw	r3, #8
 800b810:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b814:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b818:	79f9      	ldrb	r1, [r7, #7]
 800b81a:	f244 2320 	movw	r3, #16928	; 0x4220
 800b81e:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b822:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b826:	6153      	str	r3, [r2, #20]

	return OK;
 800b828:	f04f 0300 	mov.w	r3, #0
 800b82c:	b25b      	sxtb	r3, r3
}
 800b82e:	4618      	mov	r0, r3
 800b830:	f107 070c 	add.w	r7, r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	bc80      	pop	{r7}
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop

0800b83c <LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_Init(Led_TypeDef Led)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	4603      	mov	r3, r0
 800b844:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef  GPIO_InitStructure;

    /* Enable the GPIO_LED Clock */
    RCC_APB2PeriphClockCmd(LED_CLK[Led], ENABLE);
 800b846:	79fa      	ldrb	r2, [r7, #7]
 800b848:	f244 2354 	movw	r3, #16980	; 0x4254
 800b84c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b854:	4618      	mov	r0, r3
 800b856:	f04f 0101 	mov.w	r1, #1
 800b85a:	f005 fdf9 	bl	8011450 <RCC_APB2PeriphClockCmd>

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
 800b85e:	79fa      	ldrb	r2, [r7, #7]
 800b860:	f244 2350 	movw	r3, #16976	; 0x4250
 800b864:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b868:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b86c:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800b86e:	f04f 0310 	mov.w	r3, #16
 800b872:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800b874:	f04f 0303 	mov.w	r3, #3
 800b878:	73bb      	strb	r3, [r7, #14]

    GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 800b87a:	79fa      	ldrb	r2, [r7, #7]
 800b87c:	f240 0328 	movw	r3, #40	; 0x28
 800b880:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b884:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b888:	f107 030c 	add.w	r3, r7, #12
 800b88c:	4610      	mov	r0, r2
 800b88e:	4619      	mov	r1, r3
 800b890:	f005 fab0 	bl	8010df4 <GPIO_Init>
}
 800b894:	f107 0710 	add.w	r7, r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_On(Led_TypeDef Led)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	71fb      	strb	r3, [r7, #7]
    LED_PORT[Led]->BSRR = LED_PIN[Led];
 800b8a6:	79fa      	ldrb	r2, [r7, #7]
 800b8a8:	f240 0328 	movw	r3, #40	; 0x28
 800b8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8b4:	79f9      	ldrb	r1, [r7, #7]
 800b8b6:	f244 2350 	movw	r3, #16976	; 0x4250
 800b8ba:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b8be:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b8c2:	6113      	str	r3, [r2, #16]
}
 800b8c4:	f107 070c 	add.w	r7, r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bc80      	pop	{r7}
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop

0800b8d0 <LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_Off(Led_TypeDef Led)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	71fb      	strb	r3, [r7, #7]
    LED_PORT[Led]->BRR = LED_PIN[Led];
 800b8da:	79fa      	ldrb	r2, [r7, #7]
 800b8dc:	f240 0328 	movw	r3, #40	; 0x28
 800b8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b8e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8e8:	79f9      	ldrb	r1, [r7, #7]
 800b8ea:	f244 2350 	movw	r3, #16976	; 0x4250
 800b8ee:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b8f2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b8f6:	6153      	str	r3, [r2, #20]
}
 800b8f8:	f107 070c 	add.w	r7, r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bc80      	pop	{r7}
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop

0800b904 <LED_Toggle>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void LED_Toggle(Led_TypeDef Led)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	71fb      	strb	r3, [r7, #7]
    LED_PORT[Led]->ODR ^= LED_PIN[Led];
 800b90e:	79fa      	ldrb	r2, [r7, #7]
 800b910:	f240 0328 	movw	r3, #40	; 0x28
 800b914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b918:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b91c:	79f9      	ldrb	r1, [r7, #7]
 800b91e:	f240 0328 	movw	r3, #40	; 0x28
 800b922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b926:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b92a:	68d9      	ldr	r1, [r3, #12]
 800b92c:	79f8      	ldrb	r0, [r7, #7]
 800b92e:	f244 2350 	movw	r3, #16976	; 0x4250
 800b932:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b936:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800b93a:	404b      	eors	r3, r1
 800b93c:	60d3      	str	r3, [r2, #12]
}
 800b93e:	f107 070c 	add.w	r7, r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	bc80      	pop	{r7}
 800b946:	4770      	bx	lr

0800b948 <BUTTON_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability
  * @retval None
  */
void BUTTON_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b088      	sub	sp, #32
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	71fa      	strb	r2, [r7, #7]
 800b954:	71bb      	strb	r3, [r7, #6]
    GPIO_InitTypeDef GPIO_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

    /* Enable the BUTTON Clock */
    RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 800b956:	79fa      	ldrb	r2, [r7, #7]
 800b958:	f244 2360 	movw	r3, #16992	; 0x4260
 800b95c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b964:	f043 0301 	orr.w	r3, r3, #1
 800b968:	4618      	mov	r0, r3
 800b96a:	f04f 0101 	mov.w	r1, #1
 800b96e:	f005 fd6f 	bl	8011450 <RCC_APB2PeriphClockCmd>

    /* Configure Button pin as input floating */
    GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 800b972:	79fa      	ldrb	r2, [r7, #7]
 800b974:	f240 0338 	movw	r3, #56	; 0x38
 800b978:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b97c:	5c9b      	ldrb	r3, [r3, r2]
 800b97e:	76fb      	strb	r3, [r7, #27]
    GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800b980:	79fa      	ldrb	r2, [r7, #7]
 800b982:	f244 235c 	movw	r3, #16988	; 0x425c
 800b986:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b98a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b98e:	833b      	strh	r3, [r7, #24]
    GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800b990:	79fa      	ldrb	r2, [r7, #7]
 800b992:	f240 0330 	movw	r3, #48	; 0x30
 800b996:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b99a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b99e:	f107 0318 	add.w	r3, r7, #24
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	f005 fa25 	bl	8010df4 <GPIO_Init>

    if (Button_Mode == BUTTON_MODE_EXTI)
 800b9aa:	79bb      	ldrb	r3, [r7, #6]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	f040 8082 	bne.w	800bab6 <BUTTON_Init+0x16e>
    {
        /* Enable TIM clock */
    	DEBOUNCE_TIMER_CLK_CMD(DEBOUNCE_TIMER_CLK, ENABLE);
 800b9b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b9b6:	f04f 0101 	mov.w	r1, #1
 800b9ba:	f005 fd49 	bl	8011450 <RCC_APB2PeriphClockCmd>

        /* TIM Update Frequency = 72000000/7200/100 = 100Hz = 10ms */
        /* TIM_Prescaler: 7199 */
        /* TIM_Autoreload: 99 -> 100Hz = 10ms */
        uint16_t TIM_Prescaler = (SystemCoreClock / 10000) - 1;
 800b9be:	f240 13f4 	movw	r3, #500	; 0x1f4
 800b9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	f241 7359 	movw	r3, #5977	; 0x1759
 800b9cc:	f2cd 13b7 	movt	r3, #53687	; 0xd1b7
 800b9d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b9d4:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b9de:	83fb      	strh	r3, [r7, #30]
        uint16_t TIM_Autoreload = (10000 / DEBOUNCE_FREQ) - 1;
 800b9e0:	f04f 0363 	mov.w	r3, #99	; 0x63
 800b9e4:	83bb      	strh	r3, [r7, #28]

        /* Time Base Configuration */
    	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800b9e6:	f107 0308 	add.w	r3, r7, #8
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f005 feba 	bl	8011764 <TIM_TimeBaseStructInit>
    	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
 800b9f0:	8bfb      	ldrh	r3, [r7, #30]
 800b9f2:	813b      	strh	r3, [r7, #8]
    	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
 800b9f4:	8bbb      	ldrh	r3, [r7, #28]
 800b9f6:	81bb      	strh	r3, [r7, #12]
    	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 800b9f8:	f04f 0300 	mov.w	r3, #0
 800b9fc:	81fb      	strh	r3, [r7, #14]
    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800b9fe:	f04f 0300 	mov.w	r3, #0
 800ba02:	817b      	strh	r3, [r7, #10]
    	TIM_TimeBaseInit(DEBOUNCE_TIMER, &TIM_TimeBaseStructure);
 800ba04:	f107 0308 	add.w	r3, r7, #8
 800ba08:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800ba0c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ba10:	4619      	mov	r1, r3
 800ba12:	f005 fe19 	bl	8011648 <TIM_TimeBaseInit>
        /* TIM Configuration */
        //TIM_PrescalerConfig(DEBOUNCE_TIMER, TIM_Prescaler, TIM_PSCReloadMode_Update);
        //TIM_SetAutoreload(DEBOUNCE_TIMER, TIM_Autoreload);

        /* One Pulse Mode selection */
        TIM_SelectOnePulseMode(DEBOUNCE_TIMER, TIM_OPMode_Single);
 800ba16:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800ba1a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ba1e:	f04f 0108 	mov.w	r1, #8
 800ba22:	f005 ff01 	bl	8011828 <TIM_SelectOnePulseMode>

        TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);
 800ba26:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800ba2a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ba2e:	f04f 0101 	mov.w	r1, #1
 800ba32:	f005 ff45 	bl	80118c0 <TIM_ClearITPendingBit>

        /* TIM IT Enable */
        TIM_ITConfig(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG, ENABLE);
 800ba36:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800ba3a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800ba3e:	f04f 0101 	mov.w	r1, #1
 800ba42:	f04f 0201 	mov.w	r2, #1
 800ba46:	f005 fecb 	bl	80117e0 <TIM_ITConfig>

        /* Enable the TIM Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = DEBOUNCE_TIMER_IRQn;
 800ba4a:	f04f 0319 	mov.w	r3, #25
 800ba4e:	753b      	strb	r3, [r7, #20]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 800ba50:	f04f 0302 	mov.w	r3, #2
 800ba54:	757b      	strb	r3, [r7, #21]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 800ba56:	f04f 0300 	mov.w	r3, #0
 800ba5a:	75bb      	strb	r3, [r7, #22]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800ba5c:	f04f 0301 	mov.w	r3, #1
 800ba60:	75fb      	strb	r3, [r7, #23]

        NVIC_Init(&NVIC_InitStructure);
 800ba62:	f107 0314 	add.w	r3, r7, #20
 800ba66:	4618      	mov	r0, r3
 800ba68:	f004 fd64 	bl	8010534 <NVIC_Init>

        /* Enable the Button EXTI Interrupt */
        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800ba6c:	79fa      	ldrb	r2, [r7, #7]
 800ba6e:	f244 2374 	movw	r3, #17012	; 0x4274
 800ba72:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ba76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	753b      	strb	r3, [r7, #20]
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 800ba7e:	f04f 0302 	mov.w	r3, #2
 800ba82:	757b      	strb	r3, [r7, #21]
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 800ba84:	f04f 0301 	mov.w	r3, #1
 800ba88:	75bb      	strb	r3, [r7, #22]
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800ba8a:	f04f 0301 	mov.w	r3, #1
 800ba8e:	75fb      	strb	r3, [r7, #23]

        NVIC_Init(&NVIC_InitStructure);
 800ba90:	f107 0314 	add.w	r3, r7, #20
 800ba94:	4618      	mov	r0, r3
 800ba96:	f004 fd4d 	bl	8010534 <NVIC_Init>

        BUTTON_DEBOUNCED[Button] = 0x00;
 800ba9a:	79fa      	ldrb	r2, [r7, #7]
 800ba9c:	f240 7338 	movw	r3, #1848	; 0x738
 800baa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800baa4:	f04f 0100 	mov.w	r1, #0
 800baa8:	5499      	strb	r1, [r3, r2]

        BUTTON_EXTI_Config(Button, ENABLE);
 800baaa:	79fb      	ldrb	r3, [r7, #7]
 800baac:	4618      	mov	r0, r3
 800baae:	f04f 0101 	mov.w	r1, #1
 800bab2:	f000 f805 	bl	800bac0 <BUTTON_EXTI_Config>
    }
}
 800bab6:	f107 0720 	add.w	r7, r7, #32
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop

0800bac0 <BUTTON_EXTI_Config>:

void BUTTON_EXTI_Config(Button_TypeDef Button, FunctionalState NewState)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	71fa      	strb	r2, [r7, #7]
 800bacc:	71bb      	strb	r3, [r7, #6]
    EXTI_InitTypeDef EXTI_InitStructure;

	/* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800bace:	79fa      	ldrb	r2, [r7, #7]
 800bad0:	f244 236c 	movw	r3, #17004	; 0x426c
 800bad4:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bad8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800badc:	b2da      	uxtb	r2, r3
 800bade:	79f9      	ldrb	r1, [r7, #7]
 800bae0:	f244 2370 	movw	r3, #17008	; 0x4270
 800bae4:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bae8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	4610      	mov	r0, r2
 800baf0:	4619      	mov	r1, r3
 800baf2:	f005 fb21 	bl	8011138 <GPIO_EXTILineConfig>

	/* Clear the EXTI line pending flag */
	EXTI_ClearFlag(BUTTON_EXTI_LINE[Button]);
 800baf6:	79fa      	ldrb	r2, [r7, #7]
 800baf8:	f244 2368 	movw	r3, #17000	; 0x4268
 800bafc:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bb00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f005 f81f 	bl	8010b48 <EXTI_ClearFlag>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800bb0a:	79fa      	ldrb	r2, [r7, #7]
 800bb0c:	f244 2368 	movw	r3, #17000	; 0x4268
 800bb10:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bb14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800bb18:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800bb1a:	f04f 0300 	mov.w	r3, #0
 800bb1e:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = BUTTON_EXTI_TRIGGER[Button];
 800bb20:	79fa      	ldrb	r2, [r7, #7]
 800bb22:	f240 033c 	movw	r3, #60	; 0x3c
 800bb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb2a:	5c9b      	ldrb	r3, [r3, r2]
 800bb2c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = NewState;
 800bb2e:	79bb      	ldrb	r3, [r7, #6]
 800bb30:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
 800bb32:	f107 0308 	add.w	r3, r7, #8
 800bb36:	4618      	mov	r0, r3
 800bb38:	f004 ff6a 	bl	8010a10 <EXTI_Init>
}
 800bb3c:	f107 0710 	add.w	r7, r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <BUTTON_GetState>:
  *     @arg BUTTON1: Button1
  *     @arg BUTTON2: Button2
  * @retval Actual Button Pressed state.
  */
uint8_t BUTTON_GetState(Button_TypeDef Button)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	71fb      	strb	r3, [r7, #7]
    return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800bb4e:	79fa      	ldrb	r2, [r7, #7]
 800bb50:	f240 0330 	movw	r3, #48	; 0x30
 800bb54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb5c:	79f9      	ldrb	r1, [r7, #7]
 800bb5e:	f244 235c 	movw	r3, #16988	; 0x425c
 800bb62:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bb66:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f005 fa19 	bl	8010fa4 <GPIO_ReadInputDataBit>
 800bb72:	4603      	mov	r3, r0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	f107 0708 	add.w	r7, r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop

0800bb80 <BUTTON_GetDebouncedState>:
  *     @arg BUTTON1: Button1
  *     @arg BUTTON2: Button2
  * @retval Button Debounced state.
  */
uint8_t BUTTON_GetDebouncedState(Button_TypeDef Button)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	71fb      	strb	r3, [r7, #7]
	if(BUTTON_DEBOUNCED[BUTTON1] != 0x00)
 800bb8a:	f240 7338 	movw	r3, #1848	; 0x738
 800bb8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d009      	beq.n	800bbae <BUTTON_GetDebouncedState+0x2e>
	{
		BUTTON_DEBOUNCED[BUTTON1] = 0x00;
 800bb9a:	f240 7338 	movw	r3, #1848	; 0x738
 800bb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bba2:	f04f 0200 	mov.w	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800bba8:	f04f 0301 	mov.w	r3, #1
 800bbac:	e001      	b.n	800bbb2 <BUTTON_GetDebouncedState+0x32>
	}
	return 0x00;
 800bbae:	f04f 0300 	mov.w	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f107 070c 	add.w	r7, r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bc80      	pop	{r7}
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop

0800bbc0 <CC3000_WIFI_Init>:
 * @brief  Initialize the CC3000 - CS and ENABLE lines.
 * @param  None
 * @retval None
 */
void CC3000_WIFI_Init(void)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* CC3000_WIFI_CS_GPIO and CC3000_WIFI_EN_GPIO Peripheral clock enable */
	RCC_APB2PeriphClockCmd(CC3000_WIFI_CS_GPIO_CLK | CC3000_WIFI_EN_GPIO_CLK, ENABLE);
 800bbc6:	f04f 0008 	mov.w	r0, #8
 800bbca:	f04f 0101 	mov.w	r1, #1
 800bbce:	f005 fc3f 	bl	8011450 <RCC_APB2PeriphClockCmd>

	/* Configure CC3000_WIFI pins: CS */
	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_CS_PIN;
 800bbd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbd6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800bbd8:	f04f 0303 	mov.w	r3, #3
 800bbdc:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800bbde:	f04f 0310 	mov.w	r3, #16
 800bbe2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(CC3000_WIFI_CS_GPIO_PORT, &GPIO_InitStructure);
 800bbe4:	f107 0304 	add.w	r3, r7, #4
 800bbe8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bbec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	f005 f8ff 	bl	8010df4 <GPIO_Init>

	/* Deselect CC3000 */
	CC3000_CS_HIGH();
 800bbf6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bbfa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bbfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc02:	f005 f9ed 	bl	8010fe0 <GPIO_SetBits>

	/* Configure CC3000_WIFI pins: Enable */
	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_EN_PIN;
 800bc06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc0a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(CC3000_WIFI_EN_GPIO_PORT, &GPIO_InitStructure);
 800bc0c:	f107 0304 	add.w	r3, r7, #4
 800bc10:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bc14:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bc18:	4619      	mov	r1, r3
 800bc1a:	f005 f8eb 	bl	8010df4 <GPIO_Init>

	/* Disable CC3000 */
	CC3000_Write_Enable_Pin(WLAN_DISABLE);
 800bc1e:	f04f 0000 	mov.w	r0, #0
 800bc22:	f000 f9b9 	bl	800bf98 <CC3000_Write_Enable_Pin>
}
 800bc26:	f107 0708 	add.w	r7, r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop

0800bc30 <CC3000_SPI_Init>:
 * @brief  Initialize and configure the SPI peripheral used by CC3000.
 * @param  None
 * @retval None
 */
void CC3000_SPI_Init(void)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	SPI_InitTypeDef SPI_InitStructure;

	/* CC3000_SPI_SCK_GPIO, CC3000_SPI_MOSI_GPIO and CC3000_SPI_MISO_GPIO Peripheral clock enable */
	RCC_APB2PeriphClockCmd(CC3000_SPI_SCK_GPIO_CLK | CC3000_SPI_MOSI_GPIO_CLK | CC3000_SPI_MISO_GPIO_CLK, ENABLE);
 800bc36:	f04f 0008 	mov.w	r0, #8
 800bc3a:	f04f 0101 	mov.w	r1, #1
 800bc3e:	f005 fc07 	bl	8011450 <RCC_APB2PeriphClockCmd>

	/* CC3000_SPI Peripheral clock enable */
	CC3000_SPI_CLK_CMD(CC3000_SPI_CLK, ENABLE);
 800bc42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bc46:	f04f 0101 	mov.w	r1, #1
 800bc4a:	f005 fc2b 	bl	80114a4 <RCC_APB1PeriphClockCmd>

	/* Configure CC3000_SPI pins: SCK */
	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_SCK_PIN;
 800bc4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc52:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800bc54:	f04f 0301 	mov.w	r3, #1
 800bc58:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800bc5a:	f04f 0318 	mov.w	r3, #24
 800bc5e:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(CC3000_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 800bc60:	f107 0314 	add.w	r3, r7, #20
 800bc64:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bc68:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	f005 f8c1 	bl	8010df4 <GPIO_Init>

	/* Configure CC3000_SPI pins: MOSI */
	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_MOSI_PIN;
 800bc72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc76:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(CC3000_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 800bc78:	f107 0314 	add.w	r3, r7, #20
 800bc7c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bc80:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bc84:	4619      	mov	r1, r3
 800bc86:	f005 f8b5 	bl	8010df4 <GPIO_Init>

	/* Configure CC3000_SPI pins: MISO */
	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_MISO_PIN;
 800bc8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc8e:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800bc90:	f04f 0304 	mov.w	r3, #4
 800bc94:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(CC3000_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 800bc96:	f107 0314 	add.w	r3, r7, #20
 800bc9a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bc9e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bca2:	4619      	mov	r1, r3
 800bca4:	f005 f8a6 	bl	8010df4 <GPIO_Init>

	/* CC3000_SPI Config */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800bca8:	f04f 0300 	mov.w	r3, #0
 800bcac:	803b      	strh	r3, [r7, #0]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800bcae:	f44f 7382 	mov.w	r3, #260	; 0x104
 800bcb2:	807b      	strh	r3, [r7, #2]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800bcb4:	f04f 0300 	mov.w	r3, #0
 800bcb8:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800bcba:	f04f 0300 	mov.w	r3, #0
 800bcbe:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 800bcc0:	f04f 0301 	mov.w	r3, #1
 800bcc4:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800bcc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcca:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_BaudRatePrescaler = CC3000_SPI_BAUDRATE_PRESCALER;
 800bccc:	f04f 0320 	mov.w	r3, #32
 800bcd0:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800bcd2:	f04f 0300 	mov.w	r3, #0
 800bcd6:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800bcd8:	f04f 0307 	mov.w	r3, #7
 800bcdc:	823b      	strh	r3, [r7, #16]
	SPI_Init(CC3000_SPI, &SPI_InitStructure);
 800bcde:	463b      	mov	r3, r7
 800bce0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800bce4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800bce8:	4619      	mov	r1, r3
 800bcea:	f005 fc05 	bl	80114f8 <SPI_Init>
}
 800bcee:	f107 0718 	add.w	r7, r7, #24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop

0800bcf8 <CC3000_DMA_Config>:
 * @brief  Configure the DMA Peripheral used to handle CC3000 communication via SPI.
 * @param  None
 * @retval None
 */
void CC3000_DMA_Config(CC3000_DMADirection_TypeDef Direction, uint8_t* buffer, uint16_t NumData)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b08e      	sub	sp, #56	; 0x38
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6039      	str	r1, [r7, #0]
 800bd00:	4613      	mov	r3, r2
 800bd02:	4602      	mov	r2, r0
 800bd04:	71fa      	strb	r2, [r7, #7]
 800bd06:	80bb      	strh	r3, [r7, #4]
	DMA_InitTypeDef DMA_InitStructure;

	RCC_AHBPeriphClockCmd(CC3000_SPI_DMA_CLK, ENABLE);
 800bd08:	f04f 0001 	mov.w	r0, #1
 800bd0c:	f04f 0101 	mov.w	r1, #1
 800bd10:	f005 fb74 	bl	80113fc <RCC_AHBPeriphClockCmd>

	DMA_InitStructure.DMA_PeripheralBaseAddr = CC3000_SPI_DR_BASE;
 800bd14:	f643 030c 	movw	r3, #14348	; 0x380c
 800bd18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bd1c:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) buffer;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800bd22:	f04f 0300 	mov.w	r3, #0
 800bd26:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800bd28:	f04f 0380 	mov.w	r3, #128	; 0x80
 800bd2c:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800bd2e:	f04f 0300 	mov.w	r3, #0
 800bd32:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800bd34:	f04f 0300 	mov.w	r3, #0
 800bd38:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800bd3a:	f04f 0300 	mov.w	r3, #0
 800bd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800bd40:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800bd44:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 800bd46:	f04f 0300 	mov.w	r3, #0
 800bd4a:	637b      	str	r3, [r7, #52]	; 0x34

	/* DMA used for Reception */
	if (Direction == CC3000_DMA_RX)
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d114      	bne.n	800bd7c <CC3000_DMA_Config+0x84>
	{
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800bd52:	f04f 0300 	mov.w	r3, #0
 800bd56:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_BufferSize = NumData;
 800bd58:	88bb      	ldrh	r3, [r7, #4]
 800bd5a:	61bb      	str	r3, [r7, #24]
		DMA_DeInit(CC3000_SPI_RX_DMA_CHANNEL );
 800bd5c:	f04f 0044 	mov.w	r0, #68	; 0x44
 800bd60:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800bd64:	f004 fc70 	bl	8010648 <DMA_DeInit>
		DMA_Init(CC3000_SPI_RX_DMA_CHANNEL, &DMA_InitStructure);
 800bd68:	f107 030c 	add.w	r3, r7, #12
 800bd6c:	f04f 0044 	mov.w	r0, #68	; 0x44
 800bd70:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800bd74:	4619      	mov	r1, r3
 800bd76:	f004 fd77 	bl	8010868 <DMA_Init>
 800bd7a:	e016      	b.n	800bdaa <CC3000_DMA_Config+0xb2>
	}
	/* DMA used for Transmission */
	else if (Direction == CC3000_DMA_TX)
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d113      	bne.n	800bdaa <CC3000_DMA_Config+0xb2>
	{
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 800bd82:	f04f 0310 	mov.w	r3, #16
 800bd86:	617b      	str	r3, [r7, #20]
		DMA_InitStructure.DMA_BufferSize = NumData;
 800bd88:	88bb      	ldrh	r3, [r7, #4]
 800bd8a:	61bb      	str	r3, [r7, #24]
		DMA_DeInit(CC3000_SPI_TX_DMA_CHANNEL );
 800bd8c:	f04f 0058 	mov.w	r0, #88	; 0x58
 800bd90:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800bd94:	f004 fc58 	bl	8010648 <DMA_DeInit>
		DMA_Init(CC3000_SPI_TX_DMA_CHANNEL, &DMA_InitStructure);
 800bd98:	f107 030c 	add.w	r3, r7, #12
 800bd9c:	f04f 0058 	mov.w	r0, #88	; 0x58
 800bda0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800bda4:	4619      	mov	r1, r3
 800bda6:	f004 fd5f 	bl	8010868 <DMA_Init>
	}
}
 800bdaa:	f107 0738 	add.w	r7, r7, #56	; 0x38
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop

0800bdb4 <CC3000_SPI_DMA_Init>:

void CC3000_SPI_DMA_Init(void)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Configure and enable SPI DMA TX Channel interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = CC3000_SPI_TX_DMA_IRQn;
 800bdba:	f04f 030f 	mov.w	r3, #15
 800bdbe:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 800bdc0:	f04f 0300 	mov.w	r3, #0
 800bdc4:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 800bdc6:	f04f 0300 	mov.w	r3, #0
 800bdca:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800bdcc:	f04f 0301 	mov.w	r3, #1
 800bdd0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800bdd2:	f107 0304 	add.w	r3, r7, #4
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f004 fbac 	bl	8010534 <NVIC_Init>

	CC3000_SPI_Init();
 800bddc:	f7ff ff28 	bl	800bc30 <CC3000_SPI_Init>

	/* Configure DMA Peripheral but don't send data*/
	CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) wlan_rx_buffer, 0);
 800bde0:	f04f 0001 	mov.w	r0, #1
 800bde4:	f640 3180 	movw	r1, #2944	; 0xb80
 800bde8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800bdec:	f04f 0200 	mov.w	r2, #0
 800bdf0:	f7ff ff82 	bl	800bcf8 <CC3000_DMA_Config>
	CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) wlan_tx_buffer, 0);
 800bdf4:	f04f 0000 	mov.w	r0, #0
 800bdf8:	f240 7180 	movw	r1, #1920	; 0x780
 800bdfc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800be00:	f04f 0200 	mov.w	r2, #0
 800be04:	f7ff ff78 	bl	800bcf8 <CC3000_DMA_Config>

	/* Enable SPI DMA TX Channel Transfer Complete Interrupt */
	DMA_ITConfig(CC3000_SPI_TX_DMA_CHANNEL, DMA_IT_TC, ENABLE);
 800be08:	f04f 0058 	mov.w	r0, #88	; 0x58
 800be0c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800be10:	f04f 0102 	mov.w	r1, #2
 800be14:	f04f 0201 	mov.w	r2, #1
 800be18:	f004 fd82 	bl	8010920 <DMA_ITConfig>

	/* Enable SPI DMA request */
	SPI_I2S_DMACmd(CC3000_SPI, SPI_I2S_DMAReq_Rx, ENABLE);
 800be1c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800be20:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800be24:	f04f 0101 	mov.w	r1, #1
 800be28:	f04f 0201 	mov.w	r2, #1
 800be2c:	f005 fbc8 	bl	80115c0 <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd(CC3000_SPI, SPI_I2S_DMAReq_Tx, ENABLE);
 800be30:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800be34:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800be38:	f04f 0102 	mov.w	r1, #2
 800be3c:	f04f 0201 	mov.w	r2, #1
 800be40:	f005 fbbe 	bl	80115c0 <SPI_I2S_DMACmd>

	/* Enable CC3000_SPI */
	SPI_Cmd(CC3000_SPI, ENABLE);
 800be44:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800be48:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800be4c:	f04f 0101 	mov.w	r1, #1
 800be50:	f005 fb96 	bl	8011580 <SPI_Cmd>

	/* Enable DMA RX Channel */
	DMA_Cmd(CC3000_SPI_RX_DMA_CHANNEL, ENABLE);
 800be54:	f04f 0044 	mov.w	r0, #68	; 0x44
 800be58:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800be5c:	f04f 0101 	mov.w	r1, #1
 800be60:	f004 fd42 	bl	80108e8 <DMA_Cmd>
	/* Enable DMA TX Channel */
	DMA_Cmd(CC3000_SPI_TX_DMA_CHANNEL, ENABLE);
 800be64:	f04f 0058 	mov.w	r0, #88	; 0x58
 800be68:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800be6c:	f04f 0101 	mov.w	r1, #1
 800be70:	f004 fd3a 	bl	80108e8 <DMA_Cmd>
}
 800be74:	f107 0708 	add.w	r7, r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <CC3000_SPI_DMA_Channels>:

void CC3000_SPI_DMA_Channels(FunctionalState NewState)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	4603      	mov	r3, r0
 800be84:	71fb      	strb	r3, [r7, #7]
	/* Enable/Disable DMA RX Channel */
	DMA_Cmd(CC3000_SPI_RX_DMA_CHANNEL, NewState);
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	f04f 0044 	mov.w	r0, #68	; 0x44
 800be8c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800be90:	4619      	mov	r1, r3
 800be92:	f004 fd29 	bl	80108e8 <DMA_Cmd>
	/* Enable/Disable DMA TX Channel */
	DMA_Cmd(CC3000_SPI_TX_DMA_CHANNEL, NewState);
 800be96:	79fb      	ldrb	r3, [r7, #7]
 800be98:	f04f 0058 	mov.w	r0, #88	; 0x58
 800be9c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800bea0:	4619      	mov	r1, r3
 800bea2:	f004 fd21 	bl	80108e8 <DMA_Cmd>
}
 800bea6:	f107 0708 	add.w	r7, r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop

0800beb0 <CC3000_Read_Interrupt_Pin>:

/* CC3000 Hardware related callbacks passed to wlan_init */
long CC3000_Read_Interrupt_Pin(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	af00      	add	r7, sp, #0
	return GPIO_ReadInputDataBit(CC3000_WIFI_INT_GPIO_PORT, CC3000_WIFI_INT_PIN );
 800beb4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800beb8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bec0:	f005 f870 	bl	8010fa4 <GPIO_ReadInputDataBit>
 800bec4:	4603      	mov	r3, r0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop

0800becc <CC3000_Interrupt_Enable>:

void CC3000_Interrupt_Enable(void)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* CC3000_WIFI_INT_GPIO and AFIO Peripheral clock enable */
	RCC_APB2PeriphClockCmd(CC3000_WIFI_INT_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);
 800bed2:	f04f 0009 	mov.w	r0, #9
 800bed6:	f04f 0101 	mov.w	r1, #1
 800beda:	f005 fab9 	bl	8011450 <RCC_APB2PeriphClockCmd>

	/* Configure CC3000_WIFI pins: Interrupt */
	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_INT_PIN;
 800bede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bee2:	81bb      	strh	r3, [r7, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800bee4:	f04f 0348 	mov.w	r3, #72	; 0x48
 800bee8:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(CC3000_WIFI_INT_GPIO_PORT, &GPIO_InitStructure);
 800beea:	f107 030c 	add.w	r3, r7, #12
 800beee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bef2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bef6:	4619      	mov	r1, r3
 800bef8:	f004 ff7c 	bl	8010df4 <GPIO_Init>

	/* Select the CC3000_WIFI_INT GPIO pin used as EXTI Line */
	GPIO_EXTILineConfig(CC3000_WIFI_INT_EXTI_PORT_SOURCE, CC3000_WIFI_INT_EXTI_PIN_SOURCE );
 800befc:	f04f 0001 	mov.w	r0, #1
 800bf00:	f04f 010b 	mov.w	r1, #11
 800bf04:	f005 f918 	bl	8011138 <GPIO_EXTILineConfig>

	/* Clear the EXTI line pending flag */
	EXTI_ClearFlag(CC3000_WIFI_INT_EXTI_LINE );
 800bf08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bf0c:	f004 fe1c 	bl	8010b48 <EXTI_ClearFlag>

	/* Configure and Enable CC3000_WIFI_INT EXTI line */
	EXTI_InitStructure.EXTI_Line = CC3000_WIFI_INT_EXTI_LINE;
 800bf10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf14:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800bf16:	f04f 0300 	mov.w	r3, #0
 800bf1a:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 800bf1c:	f04f 030c 	mov.w	r3, #12
 800bf20:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800bf22:	f04f 0301 	mov.w	r3, #1
 800bf26:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStructure);
 800bf28:	f107 0304 	add.w	r3, r7, #4
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f004 fd6f 	bl	8010a10 <EXTI_Init>

	/* Enable and set CC3000_WIFI_INT EXTI Interrupt to the lowest priority */
	NVIC_InitStructure.NVIC_IRQChannel = CC3000_WIFI_INT_EXTI_IRQn;
 800bf32:	f04f 0328 	mov.w	r3, #40	; 0x28
 800bf36:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 800bf38:	f04f 0300 	mov.w	r3, #0
 800bf3c:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 800bf3e:	f04f 0301 	mov.w	r3, #1
 800bf42:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800bf44:	f04f 0301 	mov.w	r3, #1
 800bf48:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 800bf4a:	463b      	mov	r3, r7
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f004 faf1 	bl	8010534 <NVIC_Init>
}
 800bf52:	f107 0710 	add.w	r7, r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop

0800bf5c <CC3000_Interrupt_Disable>:

void CC3000_Interrupt_Disable(void)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Disable CC3000_WIFI_INT EXTI Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = CC3000_WIFI_INT_EXTI_IRQn;
 800bf62:	f04f 0328 	mov.w	r3, #40	; 0x28
 800bf66:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 800bf68:	f04f 0300 	mov.w	r3, #0
 800bf6c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800bf6e:	f107 0304 	add.w	r3, r7, #4
 800bf72:	4618      	mov	r0, r3
 800bf74:	f004 fade 	bl	8010534 <NVIC_Init>

	/* Disable CC3000_WIFI_INT EXTI line */
	EXTI_InitStructure.EXTI_Line = CC3000_WIFI_INT_EXTI_LINE;
 800bf78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf7c:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 800bf7e:	f04f 0300 	mov.w	r3, #0
 800bf82:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 800bf84:	f107 0308 	add.w	r3, r7, #8
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f004 fd41 	bl	8010a10 <EXTI_Init>
}
 800bf8e:	f107 0710 	add.w	r7, r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop

0800bf98 <CC3000_Write_Enable_Pin>:

void CC3000_Write_Enable_Pin(unsigned char val)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	71fb      	strb	r3, [r7, #7]
	/* Set WLAN Enable/Disable */
	if (val != WLAN_DISABLE)
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d008      	beq.n	800bfba <CC3000_Write_Enable_Pin+0x22>
	{
		GPIO_SetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 800bfa8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bfac:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bfb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bfb4:	f005 f814 	bl	8010fe0 <GPIO_SetBits>
 800bfb8:	e007      	b.n	800bfca <CC3000_Write_Enable_Pin+0x32>
	}
	else
	{
		GPIO_ResetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 800bfba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bfbe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800bfc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bfc6:	f005 f819 	bl	8010ffc <GPIO_ResetBits>
	}
}
 800bfca:	f107 0708 	add.w	r7, r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop

0800bfd4 <USB_Disconnect_Config>:
* Description    : Disconnect pin configuration
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Disconnect_Config(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable USB_DISCONNECT GPIO clock */
	RCC_APB2PeriphClockCmd(USB_DISCONNECT_GPIO_CLK, ENABLE);
 800bfda:	f04f 0008 	mov.w	r0, #8
 800bfde:	f04f 0101 	mov.w	r1, #1
 800bfe2:	f005 fa35 	bl	8011450 <RCC_APB2PeriphClockCmd>

	/* USB_DISCONNECT_PIN used as USB pull-up */
	GPIO_InitStructure.GPIO_Pin = USB_DISCONNECT_PIN;
 800bfe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfea:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800bfec:	f04f 0303 	mov.w	r3, #3
 800bff0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800bff2:	f04f 0314 	mov.w	r3, #20
 800bff6:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(USB_DISCONNECT_GPIO_PORT, &GPIO_InitStructure);
 800bff8:	f107 0304 	add.w	r3, r7, #4
 800bffc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800c000:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800c004:	4619      	mov	r1, r3
 800c006:	f004 fef5 	bl	8010df4 <GPIO_Init>
}
 800c00a:	f107 0708 	add.w	r7, r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop

0800c014 <Set_USBClock>:
* Description    : Configures USB Clock input (48MHz)
* Input          : None.
* Return         : None.
*******************************************************************************/
void Set_USBClock(void)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
	/* Select USBCLK source */
	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800c018:	f04f 0000 	mov.w	r0, #0
 800c01c:	f005 f8f4 	bl	8011208 <RCC_USBCLKConfig>

	/* Enable the USB clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 800c020:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800c024:	f04f 0101 	mov.w	r1, #1
 800c028:	f005 fa3c 	bl	80114a4 <RCC_APB1PeriphClockCmd>
}
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop

0800c030 <USB_Interrupts_Config>:
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable the USB interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
 800c036:	f04f 0314 	mov.w	r3, #20
 800c03a:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 800c03c:	f04f 0301 	mov.w	r3, #1
 800c040:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 800c042:	f04f 0300 	mov.w	r3, #0
 800c046:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800c048:	f04f 0301 	mov.w	r3, #1
 800c04c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800c04e:	f107 0304 	add.w	r3, r7, #4
 800c052:	4618      	mov	r0, r3
 800c054:	f004 fa6e 	bl	8010534 <NVIC_Init>
}
 800c058:	f107 0708 	add.w	r7, r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USB_Cable_Config>:
* Description    : Software Connection/Disconnection of USB Cable
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (FunctionalState NewState)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	71fb      	strb	r3, [r7, #7]
	if (NewState != DISABLE)
 800c06a:	79fb      	ldrb	r3, [r7, #7]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d008      	beq.n	800c082 <USB_Cable_Config+0x22>
	{
		GPIO_ResetBits(USB_DISCONNECT_GPIO_PORT, USB_DISCONNECT_PIN);
 800c070:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800c074:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800c078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c07c:	f004 ffbe 	bl	8010ffc <GPIO_ResetBits>
 800c080:	e007      	b.n	800c092 <USB_Cable_Config+0x32>
	}
	else
	{
		GPIO_SetBits(USB_DISCONNECT_GPIO_PORT, USB_DISCONNECT_PIN);
 800c082:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800c086:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800c08a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c08e:	f004 ffa7 	bl	8010fe0 <GPIO_SetBits>
	}
}
 800c092:	f107 0708 	add.w	r7, r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop

0800c09c <USB_USART_Init>:
* Description    : Start USB-USART protocol.
* Input          : baudRate.
* Return         : None.
*******************************************************************************/
void USB_USART_Init(uint32_t baudRate)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
	linecoding.bitrate = baudRate;
 800c0a4:	f240 235c 	movw	r3, #604	; 0x25c
 800c0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	601a      	str	r2, [r3, #0]
	USB_Disconnect_Config();
 800c0b0:	f7ff ff90 	bl	800bfd4 <USB_Disconnect_Config>
	Set_USBClock();
 800c0b4:	f7ff ffae 	bl	800c014 <Set_USBClock>
	USB_Interrupts_Config();
 800c0b8:	f7ff ffba 	bl	800c030 <USB_Interrupts_Config>
	USB_Init();
 800c0bc:	f003 fc86 	bl	800f9cc <USB_Init>
}
 800c0c0:	f107 0708 	add.w	r7, r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USB_USART_Available_Data>:
* Description    : Return the length of available data received from USB.
* Input          : None.
* Return         : Length.
*******************************************************************************/
uint8_t USB_USART_Available_Data(void)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	af00      	add	r7, sp, #0
	if(bDeviceState == CONFIGURED)
 800c0cc:	f240 7364 	movw	r3, #1892	; 0x764
 800c0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b05      	cmp	r3, #5
 800c0d8:	d115      	bne.n	800c106 <USB_USART_Available_Data+0x3e>
	{
		if(USB_Rx_State == 1)
 800c0da:	f240 734d 	movw	r3, #1869	; 0x74d
 800c0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d10e      	bne.n	800c106 <USB_USART_Available_Data+0x3e>
		{
			return (USB_Rx_length - USB_Rx_ptr);
 800c0e8:	f240 7348 	movw	r3, #1864	; 0x748
 800c0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0f0:	881b      	ldrh	r3, [r3, #0]
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	f240 734a 	movw	r3, #1866	; 0x74a
 800c0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	b2db      	uxtb	r3, r3
 800c104:	e001      	b.n	800c10a <USB_USART_Available_Data+0x42>
		}
	}

	return 0;
 800c106:	f04f 0300 	mov.w	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop

0800c114 <USB_USART_Receive_Data>:
* Description    : Return data sent by USB Host.
* Input          : None
* Return         : Data.
*******************************************************************************/
int32_t USB_USART_Receive_Data(void)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	af00      	add	r7, sp, #0
	if(bDeviceState == CONFIGURED)
 800c118:	f240 7364 	movw	r3, #1892	; 0x764
 800c11c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b05      	cmp	r3, #5
 800c124:	d134      	bne.n	800c190 <USB_USART_Receive_Data+0x7c>
	{
		if(USB_Rx_State == 1)
 800c126:	f240 734d 	movw	r3, #1869	; 0x74d
 800c12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d12d      	bne.n	800c190 <USB_USART_Receive_Data+0x7c>
		{
			if((USB_Rx_length - USB_Rx_ptr) == 1)
 800c134:	f240 7348 	movw	r3, #1864	; 0x748
 800c138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	f240 734a 	movw	r3, #1866	; 0x74a
 800c144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c148:	881b      	ldrh	r3, [r3, #0]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d10a      	bne.n	800c166 <USB_USART_Receive_Data+0x52>
			{
				USB_Rx_State = 0;
 800c150:	f240 734d 	movw	r3, #1869	; 0x74d
 800c154:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c158:	f04f 0200 	mov.w	r2, #0
 800c15c:	701a      	strb	r2, [r3, #0]

				/* Enable the receive of data on EP3 */
				SetEPRxValid(ENDP3);
 800c15e:	f04f 0003 	mov.w	r0, #3
 800c162:	f003 ffc9 	bl	80100f8 <SetEPRxValid>
			}

			return USB_Rx_Buffer[USB_Rx_ptr++];
 800c166:	f240 734a 	movw	r3, #1866	; 0x74a
 800c16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c16e:	8819      	ldrh	r1, [r3, #0]
 800c170:	460a      	mov	r2, r1
 800c172:	f640 7380 	movw	r3, #3968	; 0xf80
 800c176:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c17a:	5c9b      	ldrb	r3, [r3, r2]
 800c17c:	461a      	mov	r2, r3
 800c17e:	f101 0301 	add.w	r3, r1, #1
 800c182:	b299      	uxth	r1, r3
 800c184:	f240 734a 	movw	r3, #1866	; 0x74a
 800c188:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c18c:	8019      	strh	r1, [r3, #0]
 800c18e:	e001      	b.n	800c194 <USB_USART_Receive_Data+0x80>
		}
	}

	return -1;
 800c190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c194:	4613      	mov	r3, r2
}
 800c196:	4618      	mov	r0, r3
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop

0800c19c <USB_USART_Send_Data>:
* Description    : Send Data from USB_USART to USB Host.
* Input          : Data.
* Return         : None.
*******************************************************************************/
void USB_USART_Send_Data(uint8_t Data)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	71fb      	strb	r3, [r7, #7]
	if(bDeviceState == CONFIGURED)
 800c1a6:	f240 7364 	movw	r3, #1892	; 0x764
 800c1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b05      	cmp	r3, #5
 800c1b2:	d125      	bne.n	800c200 <USB_USART_Send_Data+0x64>
	{
		USART_Rx_Buffer[USART_Rx_ptr_in] = Data;
 800c1b4:	f240 733c 	movw	r3, #1852	; 0x73c
 800c1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	f640 73c0 	movw	r3, #4032	; 0xfc0
 800c1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1c6:	79f9      	ldrb	r1, [r7, #7]
 800c1c8:	5499      	strb	r1, [r3, r2]

		USART_Rx_ptr_in++;
 800c1ca:	f240 733c 	movw	r3, #1852	; 0x73c
 800c1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f103 0201 	add.w	r2, r3, #1
 800c1d8:	f240 733c 	movw	r3, #1852	; 0x73c
 800c1dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1e0:	601a      	str	r2, [r3, #0]

		/* To avoid buffer overflow */
		if(USART_Rx_ptr_in == USART_RX_DATA_SIZE)
 800c1e2:	f240 733c 	movw	r3, #1852	; 0x73c
 800c1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f0:	d106      	bne.n	800c200 <USB_USART_Send_Data+0x64>
		{
			USART_Rx_ptr_in = 0;
 800c1f2:	f240 733c 	movw	r3, #1852	; 0x73c
 800c1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1fa:	f04f 0200 	mov.w	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]
		}
	}
}
 800c200:	f107 070c 	add.w	r7, r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	bc80      	pop	{r7}
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop

0800c20c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : None.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0

  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1)
 800c212:	f240 734c 	movw	r3, #1868	; 0x74c
 800c216:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	f000 80b6 	beq.w	800c38e <Handle_USBAsynchXfer+0x182>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 800c222:	f240 7340 	movw	r3, #1856	; 0x740
 800c226:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c230:	d106      	bne.n	800c240 <Handle_USBAsynchXfer+0x34>
    {
      USART_Rx_ptr_out = 0;
 800c232:	f240 7340 	movw	r3, #1856	; 0x740
 800c236:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c23a:	f04f 0200 	mov.w	r2, #0
 800c23e:	601a      	str	r2, [r3, #0]
    }

    if(USART_Rx_ptr_out == USART_Rx_ptr_in)
 800c240:	f240 7340 	movw	r3, #1856	; 0x740
 800c244:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	f240 733c 	movw	r3, #1852	; 0x73c
 800c24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	429a      	cmp	r2, r3
 800c256:	d107      	bne.n	800c268 <Handle_USBAsynchXfer+0x5c>
    {
      USB_Tx_State = 0;
 800c258:	f240 734c 	movw	r3, #1868	; 0x74c
 800c25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c260:	f04f 0200 	mov.w	r2, #0
 800c264:	701a      	strb	r2, [r3, #0]
      return;
 800c266:	e092      	b.n	800c38e <Handle_USBAsynchXfer+0x182>
    }

    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 800c268:	f240 7340 	movw	r3, #1856	; 0x740
 800c26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	f240 733c 	movw	r3, #1852	; 0x73c
 800c276:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d90c      	bls.n	800c29a <Handle_USBAsynchXfer+0x8e>
    {
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800c280:	f240 7340 	movw	r3, #1856	; 0x740
 800c284:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 800c28e:	f240 7344 	movw	r3, #1860	; 0x744
 800c292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	e00f      	b.n	800c2ba <Handle_USBAsynchXfer+0xae>
    }
    else
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 800c29a:	f240 733c 	movw	r3, #1852	; 0x73c
 800c29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	f240 7340 	movw	r3, #1856	; 0x740
 800c2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	1ad2      	subs	r2, r2, r3
 800c2b0:	f240 7344 	movw	r3, #1860	; 0x744
 800c2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2b8:	601a      	str	r2, [r3, #0]
    }

    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800c2ba:	f240 7344 	movw	r3, #1860	; 0x744
 800c2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b40      	cmp	r3, #64	; 0x40
 800c2c6:	d921      	bls.n	800c30c <Handle_USBAsynchXfer+0x100>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 800c2c8:	f240 7340 	movw	r3, #1856	; 0x740
 800c2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800c2d4:	f04f 0340 	mov.w	r3, #64	; 0x40
 800c2d8:	80bb      	strh	r3, [r7, #4]

      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800c2da:	f240 7340 	movw	r3, #1856	; 0x740
 800c2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800c2e8:	f240 7340 	movw	r3, #1856	; 0x740
 800c2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2f0:	601a      	str	r2, [r3, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;
 800c2f2:	f240 7344 	movw	r3, #1860	; 0x744
 800c2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800c300:	f240 7344 	movw	r3, #1860	; 0x744
 800c304:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	e022      	b.n	800c352 <Handle_USBAsynchXfer+0x146>
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
 800c30c:	f240 7340 	movw	r3, #1856	; 0x740
 800c310:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = USART_Rx_length;
 800c318:	f240 7344 	movw	r3, #1860	; 0x744
 800c31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	80bb      	strh	r3, [r7, #4]

      USART_Rx_ptr_out += USART_Rx_length;
 800c324:	f240 7340 	movw	r3, #1856	; 0x740
 800c328:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	f240 7344 	movw	r3, #1860	; 0x744
 800c332:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	18d2      	adds	r2, r2, r3
 800c33a:	f240 7340 	movw	r3, #1856	; 0x740
 800c33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c342:	601a      	str	r2, [r3, #0]
      USART_Rx_length = 0;
 800c344:	f240 7344 	movw	r3, #1860	; 0x744
 800c348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c34c:	f04f 0200 	mov.w	r2, #0
 800c350:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 800c352:	f240 734c 	movw	r3, #1868	; 0x74c
 800c356:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c35a:	f04f 0201 	mov.w	r2, #1
 800c35e:	701a      	strb	r2, [r3, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800c360:	88fa      	ldrh	r2, [r7, #6]
 800c362:	f640 73c0 	movw	r3, #4032	; 0xfc0
 800c366:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c36a:	18d2      	adds	r2, r2, r3
 800c36c:	88bb      	ldrh	r3, [r7, #4]
 800c36e:	4610      	mov	r0, r2
 800c370:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800c374:	461a      	mov	r2, r3
 800c376:	f003 fd6b 	bl	800fe50 <UserToPMABufferCopy>
    SetEPTxCount(ENDP1, USB_Tx_length);
 800c37a:	88bb      	ldrh	r3, [r7, #4]
 800c37c:	f04f 0001 	mov.w	r0, #1
 800c380:	4619      	mov	r1, r3
 800c382:	f003 fff9 	bl	8010378 <SetEPTxCount>
    SetEPTxValid(ENDP1);
 800c386:	f04f 0001 	mov.w	r0, #1
 800c38a:	f003 fe89 	bl	80100a0 <SetEPTxValid>
  }

}
 800c38e:	f107 0708 	add.w	r7, r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop

0800c398 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800c39e:	f24f 73e8 	movw	r3, #63464	; 0xf7e8
 800c3a2:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	60fb      	str	r3, [r7, #12]
  Device_Serial1 = *(uint32_t*)ID2;
 800c3aa:	f24f 73ec 	movw	r3, #63468	; 0xf7ec
 800c3ae:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	60bb      	str	r3, [r7, #8]
  Device_Serial2 = *(uint32_t*)ID3;
 800c3b6:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
 800c3ba:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	607b      	str	r3, [r7, #4]

  Device_Serial0 += Device_Serial2;
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	18d3      	adds	r3, r2, r3
 800c3c8:	60fb      	str	r3, [r7, #12]

  if (Device_Serial0 != 0)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00b      	beq.n	800c3e8 <Get_SerialNum+0x50>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	4907      	ldr	r1, [pc, #28]	; (800c3f0 <Get_SerialNum+0x58>)
 800c3d4:	f04f 0208 	mov.w	r2, #8
 800c3d8:	f000 f80e 	bl	800c3f8 <IntToUnicode>
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 800c3dc:	68b8      	ldr	r0, [r7, #8]
 800c3de:	4905      	ldr	r1, [pc, #20]	; (800c3f4 <Get_SerialNum+0x5c>)
 800c3e0:	f04f 0204 	mov.w	r2, #4
 800c3e4:	f000 f808 	bl	800c3f8 <IntToUnicode>
  }
}
 800c3e8:	f107 0710 	add.w	r7, r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	2000020a 	.word	0x2000020a
 800c3f4:	2000021a 	.word	0x2000021a

0800c3f8 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	4613      	mov	r3, r2
 800c404:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c406:	f04f 0300 	mov.w	r3, #0
 800c40a:	75fb      	strb	r3, [r7, #23]

  for( idx = 0 ; idx < len ; idx ++)
 800c40c:	f04f 0300 	mov.w	r3, #0
 800c410:	75fb      	strb	r3, [r7, #23]
 800c412:	e031      	b.n	800c478 <IntToUnicode+0x80>
  {
    if( ((value >> 28)) < 0xA )
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800c41a:	2b09      	cmp	r3, #9
 800c41c:	d80d      	bhi.n	800c43a <IntToUnicode+0x42>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	18d3      	adds	r3, r2, r3
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	ea4f 7212 	mov.w	r2, r2, lsr #28
 800c42e:	b2d2      	uxtb	r2, r2
 800c430:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800c434:	b2d2      	uxtb	r2, r2
 800c436:	701a      	strb	r2, [r3, #0]
 800c438:	e00c      	b.n	800c454 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10;
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	18d3      	adds	r3, r2, r3
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	ea4f 7212 	mov.w	r2, r2, lsr #28
 800c44a:	b2d2      	uxtb	r2, r2
 800c44c:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800c450:	b2d2      	uxtb	r2, r2
 800c452:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c45a:	60fb      	str	r3, [r7, #12]

    pbuf[ 2* idx + 1] = 0;
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c462:	f103 0301 	add.w	r3, r3, #1
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	18d3      	adds	r3, r2, r3
 800c46a:	f04f 0200 	mov.w	r2, #0
 800c46e:	701a      	strb	r2, [r3, #0]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;

  for( idx = 0 ; idx < len ; idx ++)
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	f103 0301 	add.w	r3, r3, #1
 800c476:	75fb      	strb	r3, [r7, #23]
 800c478:	7dfa      	ldrb	r2, [r7, #23]
 800c47a:	79fb      	ldrb	r3, [r7, #7]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d3c9      	bcc.n	800c414 <IntToUnicode+0x1c>

    value = value << 4;

    pbuf[ 2* idx + 1] = 0;
  }
}
 800c480:	f107 071c 	add.w	r7, r7, #28
 800c484:	46bd      	mov	sp, r7
 800c486:	bc80      	pop	{r7}
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop

0800c48c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 800c490:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 800c494:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800c498:	f2ce 0200 	movt	r2, #57344	; 0xe000
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c49c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800c4a0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
 800c4aa:	f04f 0304 	mov.w	r3, #4
 800c4ae:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
 800c4b2:	430b      	orrs	r3, r1
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 800c4b4:	60d3      	str	r3, [r2, #12]
 800c4b6:	f3bf 8f4f 	dsb	sy
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
 800c4ba:	e7fe      	b.n	800c4ba <NVIC_SystemReset+0x2e>

0800c4bc <main>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
int main(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af04      	add	r7, sp, #16
	Set_System();
 800c4c2:	f7ff f8cb 	bl	800b65c <Set_System>

#ifdef SPARK_WIRING_ENABLE
	if(NULL != setup)
 800c4c6:	f64a 1331 	movw	r3, #43313	; 0xa931
 800c4ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <main+0x1a>
	{
		setup();
 800c4d2:	f7fe fa2d 	bl	800a930 <setup>
#endif

#ifdef SPARK_WLAN_ENABLE

	/* Initialize CC3000's CS, EN and INT pins to their default states */
	CC3000_WIFI_Init();
 800c4d6:	f7ff fb73 	bl	800bbc0 <CC3000_WIFI_Init>
#endif

	//
	// Configure & initialize CC3000 SPI_DMA Interface
	//
	CC3000_SPI_DMA_Init();
 800c4da:	f7ff fc6b 	bl	800bdb4 <CC3000_SPI_DMA_Init>

	//
	// WLAN On API Implementation
	//
	wlan_init(WLAN_Async_Callback, WLAN_Firmware_Patch, WLAN_Driver_Patch, WLAN_BootLoader_Patch,
 800c4de:	f64b 63b1 	movw	r3, #48817	; 0xbeb1
 800c4e2:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	f64b 63cd 	movw	r3, #48845	; 0xbecd
 800c4ec:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	f64b 735d 	movw	r3, #48989	; 0xbf5d
 800c4f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c4fa:	9302      	str	r3, [sp, #8]
 800c4fc:	f64b 7399 	movw	r3, #49049	; 0xbf99
 800c500:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c504:	9303      	str	r3, [sp, #12]
 800c506:	f64c 20fd 	movw	r0, #51965	; 0xcafd
 800c50a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800c50e:	f64c 31e9 	movw	r1, #52201	; 0xcbe9
 800c512:	f6c0 0100 	movt	r1, #2048	; 0x800
 800c516:	f64c 4209 	movw	r2, #52233	; 0xcc09
 800c51a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800c51e:	f64c 4329 	movw	r3, #52265	; 0xcc29
 800c522:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c526:	f006 ff1d 	bl	8013364 <wlan_init>
				CC3000_Read_Interrupt_Pin, CC3000_Interrupt_Enable, CC3000_Interrupt_Disable, CC3000_Write_Enable_Pin);

	//
	// Trigger a WLAN device
	//
	wlan_start(0);
 800c52a:	f04f 0000 	mov.w	r0, #0
 800c52e:	f006 ff75 	bl	801341c <wlan_start>

	//
	// Mask out all non-required events from CC3000
	//
	wlan_set_event_mask(HCI_EVNT_WLAN_KEEPALIVE | HCI_EVNT_WLAN_UNSOL_INIT | HCI_EVNT_WLAN_ASYNC_PING_REPORT);
 800c532:	f248 2044 	movw	r0, #33348	; 0x8244
 800c536:	f007 f941 	bl	80137bc <wlan_set_event_mask>

#ifdef DFU_BUILD_ENABLE
	Load_SystemFlags();
 800c53a:	f000 f9d7 	bl	800c8ec <Load_SystemFlags>
#endif

#ifdef DFU_BUILD_ENABLE
    if(NetApp_Timeout_SysFlag != 0xAAAA)
 800c53e:	f240 0346 	movw	r3, #70	; 0x46
 800c542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c546:	881a      	ldrh	r2, [r3, #0]
 800c548:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d001      	beq.n	800c554 <main+0x98>
#else
    if(BKP_ReadBackupRegister(BKP_DR1) != 0xAAAA)
#endif
    {
    	Set_NetApp_Timeout();
 800c550:	f000 fa38 	bl	800c9c4 <Set_NetApp_Timeout>
    }

	if(!WLAN_MANUAL_CONNECT)
 800c554:	f240 0344 	movw	r3, #68	; 0x44
 800c558:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10f      	bne.n	800c582 <main+0xc6>
	{
#ifdef DFU_BUILD_ENABLE
		if(Smart_Config_SysFlag != 0xBBBB)
 800c562:	f240 0348 	movw	r3, #72	; 0x48
 800c566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c56a:	881a      	ldrh	r2, [r3, #0]
 800c56c:	f64b 33bb 	movw	r3, #48059	; 0xbbbb
 800c570:	429a      	cmp	r2, r3
 800c572:	d006      	beq.n	800c582 <main+0xc6>
#else
		if(BKP_ReadBackupRegister(BKP_DR2) != 0xBBBB)
#endif
		{
			WLAN_SMART_CONFIG_START = 1;
 800c574:	f241 03c2 	movw	r3, #4290	; 0x10c2
 800c578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c57c:	f04f 0201 	mov.w	r2, #1
 800c580:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	nvmem_read_sp_version(patchVer);
 800c582:	f241 00c4 	movw	r0, #4292	; 0x10c4
 800c586:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c58a:	f006 fb7f 	bl	8012c8c <nvmem_read_sp_version>
 800c58e:	e000      	b.n	800c592 <main+0xd6>
			}
#ifdef SPARK_WLAN_ENABLE
		}
#endif
#endif
	}
 800c590:	bf00      	nop

	/* Main loop */
	while (1)
	{
#ifdef SPARK_WLAN_ENABLE
		if(WLAN_SMART_CONFIG_START)
 800c592:	f241 03c2 	movw	r3, #4290	; 0x10c2
 800c596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d002      	beq.n	800c5a6 <main+0xea>
		{
			//
			// Start CC3000 first time configuration
			//
			Start_Smart_Config();
 800c5a0:	f000 fa3e 	bl	800ca20 <Start_Smart_Config>
 800c5a4:	e030      	b.n	800c608 <main+0x14c>
		}
		else if (WLAN_MANUAL_CONNECT && !WLAN_DHCP)
 800c5a6:	f240 0344 	movw	r3, #68	; 0x44
 800c5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d029      	beq.n	800c608 <main+0x14c>
 800c5b4:	f241 03e0 	movw	r3, #4320	; 0x10e0
 800c5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d122      	bne.n	800c608 <main+0x14c>
		{
		    wlan_ioctl_set_connection_policy(DISABLE, DISABLE, DISABLE);
 800c5c2:	f04f 0000 	mov.w	r0, #0
 800c5c6:	f04f 0100 	mov.w	r1, #0
 800c5ca:	f04f 0200 	mov.w	r2, #0
 800c5ce:	f007 f895 	bl	80136fc <wlan_ioctl_set_connection_policy>
		    wlan_connect(WLAN_SEC_WPA2, "COCO-MPLS", 9, NULL, "coco1234", 8);
 800c5d2:	f244 2384 	movw	r3, #17028	; 0x4284
 800c5d6:	f6c0 0301 	movt	r3, #2049	; 0x801
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	f04f 0308 	mov.w	r3, #8
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	f04f 0003 	mov.w	r0, #3
 800c5e6:	f244 2178 	movw	r1, #17016	; 0x4278
 800c5ea:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c5ee:	f04f 0209 	mov.w	r2, #9
 800c5f2:	f04f 0300 	mov.w	r3, #0
 800c5f6:	f006 ffb7 	bl	8013568 <wlan_connect>
		    WLAN_MANUAL_CONNECT = 0;
 800c5fa:	f240 0344 	movw	r3, #68	; 0x44
 800c5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c602:	f04f 0200 	mov.w	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
		}

		if(WLAN_DHCP && !SPARK_SOCKET_CONNECTED)
 800c608:	f241 03e0 	movw	r3, #4320	; 0x10e0
 800c60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d01b      	beq.n	800c64e <main+0x192>
 800c616:	f241 03c6 	movw	r3, #4294	; 0x10c6
 800c61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d113      	bne.n	800c64e <main+0x192>
//			netapp_ipconfig(&ipconfig);
//
//			if(ipconfig.aucIP[0] == 0x00)
//				continue;

			if(Spark_Connect() < 0)
 800c626:	f000 fb0f 	bl	800cc48 <Spark_Connect>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	da07      	bge.n	800c640 <main+0x184>
				SPARK_SOCKET_CONNECTED = 0;
 800c630:	f241 03c6 	movw	r3, #4294	; 0x10c6
 800c634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c638:	f04f 0200 	mov.w	r2, #0
 800c63c:	701a      	strb	r2, [r3, #0]
 800c63e:	e006      	b.n	800c64e <main+0x192>
			else
				SPARK_SOCKET_CONNECTED = 1;
 800c640:	f241 03c6 	movw	r3, #4294	; 0x10c6
 800c644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c648:	f04f 0201 	mov.w	r2, #1
 800c64c:	701a      	strb	r2, [r3, #0]
		}
#endif

#ifdef SPARK_WIRING_ENABLE
#ifdef SPARK_WLAN_ENABLE
		if(SPARK_SOCKET_CONNECTED && SPARK_DEVICE_ACKED)
 800c64e:	f241 03c6 	movw	r3, #4294	; 0x10c6
 800c652:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d098      	beq.n	800c590 <main+0xd4>
 800c65e:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800c662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d090      	beq.n	800c590 <main+0xd4>
		{
#endif
			if(NULL != loop)
 800c66e:	f64a 1369 	movw	r3, #43369	; 0xa969
 800c672:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <main+0x1c2>
			{
				loop();
 800c67a:	f7fe f975 	bl	800a968 <loop>
			}

			if(NULL != pUserFunction)
 800c67e:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800c682:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d081      	beq.n	800c590 <main+0xd4>
			{
				pUserFunction();
 800c68c:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800c690:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4798      	blx	r3
			}
#ifdef SPARK_WLAN_ENABLE
		}
#endif
#endif
	}
 800c698:	e77a      	b.n	800c590 <main+0xd4>
 800c69a:	bf00      	nop

0800c69c <Delay>:
* Input          : nTime: specifies the delay time length, in milliseconds.
* Output         : None
* Return         : None
*******************************************************************************/
void Delay(uint32_t nTime)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
    TimingDelay = nTime;
 800c6a4:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800c6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	601a      	str	r2, [r3, #0]

    // /* Enable the SysTick Counter */
    // SysTick->CTRL |= SysTick_CTRL_ENABLE;

    while(TimingDelay != 0);
 800c6b0:	bf00      	nop
 800c6b2:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800c6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1f8      	bne.n	800c6b2 <Delay+0x16>
    // /* Disable the SysTick Counter */
    // SysTick->CTRL &= ~SysTick_CTRL_ENABLE;

    // /* Clear the SysTick Counter */
    // SysTick->VAL = (uint32_t)0x00;
}
 800c6c0:	f107 070c 	add.w	r7, r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bc80      	pop	{r7}
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop

0800c6cc <Timing_Decrement>:
* Input          : None
* Output         : Timing
* Return         : None
*******************************************************************************/
void Timing_Decrement(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
	TimingMillis++;
 800c6d0:	f241 03ec 	movw	r3, #4332	; 0x10ec
 800c6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f103 0201 	add.w	r2, r3, #1
 800c6de:	f241 03ec 	movw	r3, #4332	; 0x10ec
 800c6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6e6:	601a      	str	r2, [r3, #0]

    if (TimingDelay != 0x00)
 800c6e8:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800c6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00b      	beq.n	800c70e <Timing_Decrement+0x42>
    {
        TimingDelay--;
 800c6f6:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800c6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c704:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800c708:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c70c:	601a      	str	r2, [r3, #0]
    }

    if (TimingLED1 != 0x00)
 800c70e:	f241 03c8 	movw	r3, #4296	; 0x10c8
 800c712:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00c      	beq.n	800c736 <Timing_Decrement+0x6a>
    {
        TimingLED1--;
 800c71c:	f241 03c8 	movw	r3, #4296	; 0x10c8
 800c720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c72a:	f241 03c8 	movw	r3, #4296	; 0x10c8
 800c72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c732:	601a      	str	r2, [r3, #0]
 800c734:	e026      	b.n	800c784 <Timing_Decrement+0xb8>
    }
    else if(!SPARK_DEVICE_ACKED)
 800c736:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800c73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10b      	bne.n	800c75e <Timing_Decrement+0x92>
    {
    	LED_Toggle(LED1);
 800c746:	f04f 0000 	mov.w	r0, #0
 800c74a:	f7ff f8db 	bl	800b904 <LED_Toggle>
    	TimingLED1 = 100;	//100ms
 800c74e:	f241 03c8 	movw	r3, #4296	; 0x10c8
 800c752:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c756:	f04f 0264 	mov.w	r2, #100	; 0x64
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	e012      	b.n	800c784 <Timing_Decrement+0xb8>
    }
    else
    {
    	static __IO uint8_t SparkDeviceAckedLedOn = 0;
    	if(!SparkDeviceAckedLedOn)
 800c75e:	f240 7350 	movw	r3, #1872	; 0x750
 800c762:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10a      	bne.n	800c784 <Timing_Decrement+0xb8>
    	{
    		LED_On(LED1);//SPARK_DEVICE_ACKED
 800c76e:	f04f 0000 	mov.w	r0, #0
 800c772:	f7ff f893 	bl	800b89c <LED_On>
    		SparkDeviceAckedLedOn = 1;
 800c776:	f240 7350 	movw	r3, #1872	; 0x750
 800c77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c77e:	f04f 0201 	mov.w	r2, #1
 800c782:	701a      	strb	r2, [r3, #0]
    	}
    }

    if (TimingLED2 != 0x00)
 800c784:	f241 03e4 	movw	r3, #4324	; 0x10e4
 800c788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00b      	beq.n	800c7aa <Timing_Decrement+0xde>
    {
        TimingLED2--;
 800c792:	f241 03e4 	movw	r3, #4324	; 0x10e4
 800c796:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c7a0:	f241 03e4 	movw	r3, #4324	; 0x10e4
 800c7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7a8:	601a      	str	r2, [r3, #0]
    }

    if (TimingBUTTON1 != 0x00)
 800c7aa:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800c7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00b      	beq.n	800c7d0 <Timing_Decrement+0x104>
    {
    	TimingBUTTON1--;
 800c7b8:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800c7bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c7c6:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800c7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7ce:	601a      	str	r2, [r3, #0]
    }

    if(BUTTON_GetDebouncedState(BUTTON1) != 0x00)
 800c7d0:	f04f 0000 	mov.w	r0, #0
 800c7d4:	f7ff f9d4 	bl	800bb80 <BUTTON_GetDebouncedState>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00a      	beq.n	800c7f4 <Timing_Decrement+0x128>
    {
    	//Enter First Time Config On Next System Reset
    	//Since socket connect() is currently blocking
#ifdef DFU_BUILD_ENABLE
		Smart_Config_SysFlag = 0xFFFF;
 800c7de:	f240 0348 	movw	r3, #72	; 0x48
 800c7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7ea:	801a      	strh	r2, [r3, #0]
		Save_SystemFlags();
 800c7ec:	f000 f8a4 	bl	800c938 <Save_SystemFlags>
#else
		BKP_WriteBackupRegister(BKP_DR2, 0xFFFF);
#endif
    	NVIC_SystemReset();
 800c7f0:	f7ff fe4c 	bl	800c48c <NVIC_SystemReset>
    }

#ifdef SPARK_WLAN_ENABLE
	if (SPARK_SOCKET_CONNECTED)
 800c7f4:	f241 03c6 	movw	r3, #4294	; 0x10c6
 800c7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b00      	cmp	r3, #0
 800c802:	d071      	beq.n	800c8e8 <Timing_Decrement+0x21c>
	{
		SPARK_SOCKET_ALIVE = 1;
 800c804:	f241 03d9 	movw	r3, #4313	; 0x10d9
 800c808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c80c:	f04f 0201 	mov.w	r2, #1
 800c810:	701a      	strb	r2, [r3, #0]

		if (TimingSparkProcessAPI >= TIMING_SPARK_PROCESS_API)
 800c812:	f241 03e8 	movw	r3, #4328	; 0x10e8
 800c816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2bc7      	cmp	r3, #199	; 0xc7
 800c81e:	d913      	bls.n	800c848 <Timing_Decrement+0x17c>
		{
			TimingSparkProcessAPI = 0;
 800c820:	f241 03e8 	movw	r3, #4328	; 0x10e8
 800c824:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c828:	f04f 0200 	mov.w	r2, #0
 800c82c:	601a      	str	r2, [r3, #0]

			if(Spark_Process_API_Response() < 0)
 800c82e:	f000 fd07 	bl	800d240 <Spark_Process_API_Response>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	da13      	bge.n	800c860 <Timing_Decrement+0x194>
				SPARK_SOCKET_ALIVE = 0;
 800c838:	f241 03d9 	movw	r3, #4313	; 0x10d9
 800c83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c840:	f04f 0200 	mov.w	r2, #0
 800c844:	701a      	strb	r2, [r3, #0]
 800c846:	e00b      	b.n	800c860 <Timing_Decrement+0x194>
		}
		else
		{
			TimingSparkProcessAPI++;
 800c848:	f241 03e8 	movw	r3, #4328	; 0x10e8
 800c84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f103 0201 	add.w	r2, r3, #1
 800c856:	f241 03e8 	movw	r3, #4328	; 0x10e8
 800c85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c85e:	601a      	str	r2, [r3, #0]
		}

		if (SPARK_DEVICE_ACKED)
 800c860:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800c864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d023      	beq.n	800c8b8 <Timing_Decrement+0x1ec>
		{
			if (TimingSparkAliveTimeout >= TIMING_SPARK_ALIVE_TIMEOUT)
 800c870:	f241 03dc 	movw	r3, #4316	; 0x10dc
 800c874:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	f643 2397 	movw	r3, #14999	; 0x3a97
 800c87e:	429a      	cmp	r2, r3
 800c880:	d90e      	bls.n	800c8a0 <Timing_Decrement+0x1d4>
			{
				TimingSparkAliveTimeout = 0;
 800c882:	f241 03dc 	movw	r3, #4316	; 0x10dc
 800c886:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c88a:	f04f 0200 	mov.w	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]

				SPARK_SOCKET_ALIVE = 0;
 800c890:	f241 03d9 	movw	r3, #4313	; 0x10d9
 800c894:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c898:	f04f 0200 	mov.w	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	e00b      	b.n	800c8b8 <Timing_Decrement+0x1ec>
			}
			else
			{
				TimingSparkAliveTimeout++;
 800c8a0:	f241 03dc 	movw	r3, #4316	; 0x10dc
 800c8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f103 0201 	add.w	r2, r3, #1
 800c8ae:	f241 03dc 	movw	r3, #4316	; 0x10dc
 800c8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8b6:	601a      	str	r2, [r3, #0]
			}
		}

		if(SPARK_SOCKET_ALIVE != 1)
 800c8b8:	f241 03d9 	movw	r3, #4313	; 0x10d9
 800c8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d00f      	beq.n	800c8e8 <Timing_Decrement+0x21c>
		{
			Spark_Disconnect();
 800c8c8:	f000 fa3a 	bl	800cd40 <Spark_Disconnect>

			SPARK_SOCKET_CONNECTED = 0;
 800c8cc:	f241 03c6 	movw	r3, #4294	; 0x10c6
 800c8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8d4:	f04f 0200 	mov.w	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
			SPARK_DEVICE_ACKED = 0;
 800c8da:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800c8de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8e2:	f04f 0200 	mov.w	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop

0800c8ec <Load_SystemFlags>:

void Load_SystemFlags(void)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
#ifdef DFU_BUILD_ENABLE
	uint32_t Address = SYSTEM_FLAGS_ADDRESS;
 800c8f2:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800c8f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c8fa:	607b      	str	r3, [r7, #4]

	NetApp_Timeout_SysFlag = (*(__IO uint16_t*) Address);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	b29a      	uxth	r2, r3
 800c902:	f240 0346 	movw	r3, #70	; 0x46
 800c906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c90a:	801a      	strh	r2, [r3, #0]
	Address += 2;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f103 0302 	add.w	r3, r3, #2
 800c912:	607b      	str	r3, [r7, #4]

	Smart_Config_SysFlag = (*(__IO uint16_t*) Address);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	b29a      	uxth	r2, r3
 800c91a:	f240 0348 	movw	r3, #72	; 0x48
 800c91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c922:	801a      	strh	r2, [r3, #0]
	Address += 2;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f103 0302 	add.w	r3, r3, #2
 800c92a:	607b      	str	r3, [r7, #4]
#endif
}
 800c92c:	f107 070c 	add.w	r7, r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	bc80      	pop	{r7}
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop

0800c938 <Save_SystemFlags>:

void Save_SystemFlags(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
#ifdef DFU_BUILD_ENABLE
	uint32_t Address = SYSTEM_FLAGS_ADDRESS;
 800c93e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800c942:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c946:	607b      	str	r3, [r7, #4]
	FLASH_Status FLASHStatus = FLASH_COMPLETE;
 800c948:	f04f 0304 	mov.w	r3, #4
 800c94c:	70fb      	strb	r3, [r7, #3]

	/* Unlock the Flash Program Erase Controller */
	FLASH_Unlock();
 800c94e:	f004 f937 	bl	8010bc0 <FLASH_Unlock>

	/* Clear All pending flags */
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
 800c952:	f04f 0034 	mov.w	r0, #52	; 0x34
 800c956:	f004 f9df 	bl	8010d18 <FLASH_ClearFlag>

	/* Erase the Internal Flash pages */
	FLASHStatus = FLASH_ErasePage(SYSTEM_FLAGS_ADDRESS);
 800c95a:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 800c95e:	f6c0 0000 	movt	r0, #2048	; 0x800
 800c962:	f004 f957 	bl	8010c14 <FLASH_ErasePage>
 800c966:	4603      	mov	r3, r0
 800c968:	70fb      	strb	r3, [r7, #3]
	while(FLASHStatus != FLASH_COMPLETE);
 800c96a:	78fb      	ldrb	r3, [r7, #3]
 800c96c:	2b04      	cmp	r3, #4
 800c96e:	d1fc      	bne.n	800c96a <Save_SystemFlags+0x32>

	/* Program NetApp_Timeout_SysFlag */
	FLASHStatus = FLASH_ProgramHalfWord(Address, NetApp_Timeout_SysFlag);
 800c970:	f240 0346 	movw	r3, #70	; 0x46
 800c974:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	4619      	mov	r1, r3
 800c97e:	f004 f991 	bl	8010ca4 <FLASH_ProgramHalfWord>
 800c982:	4603      	mov	r3, r0
 800c984:	70fb      	strb	r3, [r7, #3]
	while(FLASHStatus != FLASH_COMPLETE);
 800c986:	78fb      	ldrb	r3, [r7, #3]
 800c988:	2b04      	cmp	r3, #4
 800c98a:	d1fc      	bne.n	800c986 <Save_SystemFlags+0x4e>
	Address += 2;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f103 0302 	add.w	r3, r3, #2
 800c992:	607b      	str	r3, [r7, #4]

	/* Program Smart_Config_SysFlag */
	FLASHStatus = FLASH_ProgramHalfWord(Address, Smart_Config_SysFlag);
 800c994:	f240 0348 	movw	r3, #72	; 0x48
 800c998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	f004 f97f 	bl	8010ca4 <FLASH_ProgramHalfWord>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	70fb      	strb	r3, [r7, #3]
	while(FLASHStatus != FLASH_COMPLETE);
 800c9aa:	78fb      	ldrb	r3, [r7, #3]
 800c9ac:	2b04      	cmp	r3, #4
 800c9ae:	d1fc      	bne.n	800c9aa <Save_SystemFlags+0x72>
	Address += 2;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f103 0302 	add.w	r3, r3, #2
 800c9b6:	607b      	str	r3, [r7, #4]

	/* Locks the FLASH Program Erase Controller */
	FLASH_Lock();
 800c9b8:	f004 f91a 	bl	8010bf0 <FLASH_Lock>
#endif
}
 800c9bc:	f107 0708 	add.w	r7, r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <Set_NetApp_Timeout>:

void Set_NetApp_Timeout(void)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
	unsigned long aucDHCP = 14400;
 800c9ca:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 800c9ce:	60fb      	str	r3, [r7, #12]
	unsigned long aucARP = 3600;
 800c9d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c9d4:	60bb      	str	r3, [r7, #8]
	unsigned long aucKeepalive = 10;
 800c9d6:	f04f 030a 	mov.w	r3, #10
 800c9da:	607b      	str	r3, [r7, #4]
	unsigned long aucInactivity = 60;
 800c9dc:	f04f 033c 	mov.w	r3, #60	; 0x3c
 800c9e0:	603b      	str	r3, [r7, #0]

#ifdef DFU_BUILD_ENABLE
	NetApp_Timeout_SysFlag = 0xFFFF;
 800c9e2:	f240 0346 	movw	r3, #70	; 0x46
 800c9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c9ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9ee:	801a      	strh	r2, [r3, #0]
	Save_SystemFlags();
 800c9f0:	f7ff ffa2 	bl	800c938 <Save_SystemFlags>
#else
	BKP_WriteBackupRegister(BKP_DR1, 0xFFFF);
#endif

	netapp_timeout_values(&aucDHCP, &aucARP, &aucKeepalive, &aucInactivity);
 800c9f4:	f107 000c 	add.w	r0, r7, #12
 800c9f8:	f107 0108 	add.w	r1, r7, #8
 800c9fc:	f107 0204 	add.w	r2, r7, #4
 800ca00:	463b      	mov	r3, r7
 800ca02:	f006 f8cd 	bl	8012ba0 <netapp_timeout_values>

#ifdef DFU_BUILD_ENABLE
	NetApp_Timeout_SysFlag = 0xAAAA;
 800ca06:	f240 0346 	movw	r3, #70	; 0x46
 800ca0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca0e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ca12:	801a      	strh	r2, [r3, #0]
	Save_SystemFlags();
 800ca14:	f7ff ff90 	bl	800c938 <Save_SystemFlags>
#else
	BKP_WriteBackupRegister(BKP_DR1, 0xAAAA);
#endif
}
 800ca18:	f107 0710 	add.w	r7, r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <Start_Smart_Config>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Start_Smart_Config(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
	WLAN_SMART_CONFIG_DONE = 0;
 800ca24:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800ca28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca2c:	f04f 0200 	mov.w	r2, #0
 800ca30:	701a      	strb	r2, [r3, #0]
	WLAN_CONNECTED = 0;
 800ca32:	f241 03c1 	movw	r3, #4289	; 0x10c1
 800ca36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca3a:	f04f 0200 	mov.w	r2, #0
 800ca3e:	701a      	strb	r2, [r3, #0]
	WLAN_DHCP = 0;
 800ca40:	f241 03e0 	movw	r3, #4320	; 0x10e0
 800ca44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca48:	f04f 0200 	mov.w	r2, #0
 800ca4c:	701a      	strb	r2, [r3, #0]
	WLAN_CAN_SHUTDOWN = 0;
 800ca4e:	f241 03c0 	movw	r3, #4288	; 0x10c0
 800ca52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca56:	f04f 0200 	mov.w	r2, #0
 800ca5a:	701a      	strb	r2, [r3, #0]

#ifdef DFU_BUILD_ENABLE
	Smart_Config_SysFlag = 0xFFFF;
 800ca5c:	f240 0348 	movw	r3, #72	; 0x48
 800ca60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca68:	801a      	strh	r2, [r3, #0]
	Save_SystemFlags();
 800ca6a:	f7ff ff65 	bl	800c938 <Save_SystemFlags>
#endif

	//
	// Reset all the previous configuration
	//
	wlan_ioctl_set_connection_policy(DISABLE, DISABLE, DISABLE);
 800ca6e:	f04f 0000 	mov.w	r0, #0
 800ca72:	f04f 0100 	mov.w	r1, #0
 800ca76:	f04f 0200 	mov.w	r2, #0
 800ca7a:	f006 fe3f 	bl	80136fc <wlan_ioctl_set_connection_policy>
	wlan_ioctl_del_profile(255);
 800ca7e:	f04f 00ff 	mov.w	r0, #255	; 0xff
 800ca82:	f006 fe71 	bl	8013768 <wlan_ioctl_del_profile>

	//Wait until CC3000 is disconnected
	while (WLAN_CONNECTED == 1)
 800ca86:	e005      	b.n	800ca94 <Start_Smart_Config+0x74>
	{
		//Delay 100ms
		Delay(100);
 800ca88:	f04f 0064 	mov.w	r0, #100	; 0x64
 800ca8c:	f7ff fe06 	bl	800c69c <Delay>
		hci_unsolicited_event_handler();
 800ca90:	f005 fe34 	bl	80126fc <hci_unsolicited_event_handler>
	//
	wlan_ioctl_set_connection_policy(DISABLE, DISABLE, DISABLE);
	wlan_ioctl_del_profile(255);

	//Wait until CC3000 is disconnected
	while (WLAN_CONNECTED == 1)
 800ca94:	f241 03c1 	movw	r3, #4289	; 0x10c1
 800ca98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d0f2      	beq.n	800ca88 <Start_Smart_Config+0x68>
	}

	//
	// Start the SmartConfig start process
	//
	wlan_smart_config_start(1);
 800caa2:	f04f 0001 	mov.w	r0, #1
 800caa6:	f006 fedf 	bl	8013868 <wlan_smart_config_start>

	//
	// Wait for First Time config finished
	//
	while (WLAN_SMART_CONFIG_DONE == 0)
 800caaa:	e007      	b.n	800cabc <Start_Smart_Config+0x9c>
	{
		/* Toggle the LED2 every 100ms */
		LED_Toggle(LED2);
 800caac:	f04f 0001 	mov.w	r0, #1
 800cab0:	f7fe ff28 	bl	800b904 <LED_Toggle>
		Delay(100);
 800cab4:	f04f 0064 	mov.w	r0, #100	; 0x64
 800cab8:	f7ff fdf0 	bl	800c69c <Delay>
	wlan_smart_config_start(1);

	//
	// Wait for First Time config finished
	//
	while (WLAN_SMART_CONFIG_DONE == 0)
 800cabc:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800cac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d0f0      	beq.n	800caac <Start_Smart_Config+0x8c>
		/* Toggle the LED2 every 100ms */
		LED_Toggle(LED2);
		Delay(100);
	}

	LED_Off(LED2);
 800caca:	f04f 0001 	mov.w	r0, #1
 800cace:	f7fe feff 	bl	800b8d0 <LED_Off>

	//
	// Configure to connect automatically to the AP retrieved in the
	// First Time config process
	//
	wlan_ioctl_set_connection_policy(DISABLE, DISABLE, ENABLE);
 800cad2:	f04f 0000 	mov.w	r0, #0
 800cad6:	f04f 0100 	mov.w	r1, #0
 800cada:	f04f 0201 	mov.w	r2, #1
 800cade:	f006 fe0d 	bl	80136fc <wlan_ioctl_set_connection_policy>

#ifdef DFU_BUILD_ENABLE
	Smart_Config_SysFlag = 0xBBBB;
 800cae2:	f240 0348 	movw	r3, #72	; 0x48
 800cae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800caea:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 800caee:	801a      	strh	r2, [r3, #0]
	Save_SystemFlags();
 800caf0:	f7ff ff22 	bl	800c938 <Save_SystemFlags>
#else
	BKP_WriteBackupRegister(BKP_DR2, 0xBBBB);
#endif

	NVIC_SystemReset();
 800caf4:	f7ff fcca 	bl	800c48c <NVIC_SystemReset>
	//
	// Mask out all non-required events
	//
	wlan_set_event_mask(HCI_EVNT_WLAN_KEEPALIVE | HCI_EVNT_WLAN_UNSOL_INIT | HCI_EVNT_WLAN_ASYNC_PING_REPORT);
*/
}
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop

0800cafc <WLAN_Async_Callback>:

/* WLAN Application related callbacks passed to wlan_init */
void WLAN_Async_Callback(long lEventType, char *data, unsigned char length)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	4613      	mov	r3, r2
 800cb08:	71fb      	strb	r3, [r7, #7]
	switch (lEventType)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f248 0202 	movw	r2, #32770	; 0x8002
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d029      	beq.n	800cb68 <WLAN_Async_Callback+0x6c>
 800cb14:	f248 0202 	movw	r2, #32770	; 0x8002
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	dc06      	bgt.n	800cb2a <WLAN_Async_Callback+0x2e>
 800cb1c:	2b99      	cmp	r3, #153	; 0x99
 800cb1e:	d057      	beq.n	800cbd0 <WLAN_Async_Callback+0xd4>
 800cb20:	f248 0201 	movw	r2, #32769	; 0x8001
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d017      	beq.n	800cb58 <WLAN_Async_Callback+0x5c>
 800cb28:	e05a      	b.n	800cbe0 <WLAN_Async_Callback+0xe4>
 800cb2a:	f248 0210 	movw	r2, #32784	; 0x8010
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d042      	beq.n	800cbb8 <WLAN_Async_Callback+0xbc>
 800cb32:	f248 0280 	movw	r2, #32896	; 0x8080
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d152      	bne.n	800cbe0 <WLAN_Async_Callback+0xe4>
	{
		case HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE:
			WLAN_SMART_CONFIG_DONE = 1;
 800cb3a:	f241 03cc 	movw	r3, #4300	; 0x10cc
 800cb3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb42:	f04f 0201 	mov.w	r2, #1
 800cb46:	701a      	strb	r2, [r3, #0]
			WLAN_MANUAL_CONNECT = 0;
 800cb48:	f240 0344 	movw	r3, #68	; 0x44
 800cb4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb50:	f04f 0200 	mov.w	r2, #0
 800cb54:	701a      	strb	r2, [r3, #0]
			break;
 800cb56:	e043      	b.n	800cbe0 <WLAN_Async_Callback+0xe4>

		case HCI_EVNT_WLAN_UNSOL_CONNECT:
			WLAN_CONNECTED = 1;
 800cb58:	f241 03c1 	movw	r3, #4289	; 0x10c1
 800cb5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb60:	f04f 0201 	mov.w	r2, #1
 800cb64:	701a      	strb	r2, [r3, #0]
			break;
 800cb66:	e03b      	b.n	800cbe0 <WLAN_Async_Callback+0xe4>

		case HCI_EVNT_WLAN_UNSOL_DISCONNECT:
			WLAN_CONNECTED = 0;
 800cb68:	f241 03c1 	movw	r3, #4289	; 0x10c1
 800cb6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb70:	f04f 0200 	mov.w	r2, #0
 800cb74:	701a      	strb	r2, [r3, #0]
			WLAN_DHCP = 0;
 800cb76:	f241 03e0 	movw	r3, #4320	; 0x10e0
 800cb7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb7e:	f04f 0200 	mov.w	r2, #0
 800cb82:	701a      	strb	r2, [r3, #0]
			SPARK_SOCKET_CONNECTED = 0;
 800cb84:	f241 03c6 	movw	r3, #4294	; 0x10c6
 800cb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb8c:	f04f 0200 	mov.w	r2, #0
 800cb90:	701a      	strb	r2, [r3, #0]
			SPARK_SOCKET_ALIVE = 0;
 800cb92:	f241 03d9 	movw	r3, #4313	; 0x10d9
 800cb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cb9a:	f04f 0200 	mov.w	r2, #0
 800cb9e:	701a      	strb	r2, [r3, #0]
			SPARK_DEVICE_ACKED = 0;
 800cba0:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800cba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cba8:	f04f 0200 	mov.w	r2, #0
 800cbac:	701a      	strb	r2, [r3, #0]
			LED_Off(LED2);
 800cbae:	f04f 0001 	mov.w	r0, #1
 800cbb2:	f7fe fe8d 	bl	800b8d0 <LED_Off>
			break;
 800cbb6:	e013      	b.n	800cbe0 <WLAN_Async_Callback+0xe4>

		case HCI_EVNT_WLAN_UNSOL_DHCP:
			WLAN_DHCP = 1;
 800cbb8:	f241 03e0 	movw	r3, #4320	; 0x10e0
 800cbbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbc0:	f04f 0201 	mov.w	r2, #1
 800cbc4:	701a      	strb	r2, [r3, #0]
			LED_On(LED2);
 800cbc6:	f04f 0001 	mov.w	r0, #1
 800cbca:	f7fe fe67 	bl	800b89c <LED_On>
			break;
 800cbce:	e007      	b.n	800cbe0 <WLAN_Async_Callback+0xe4>

		case HCI_EVENT_CC3000_CAN_SHUT_DOWN:
			WLAN_CAN_SHUTDOWN = 1;
 800cbd0:	f241 03c0 	movw	r3, #4288	; 0x10c0
 800cbd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cbd8:	f04f 0201 	mov.w	r2, #1
 800cbdc:	701a      	strb	r2, [r3, #0]
			break;
 800cbde:	bf00      	nop
	}
}
 800cbe0:	f107 0710 	add.w	r7, r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <WLAN_Firmware_Patch>:

char *WLAN_Firmware_Patch(unsigned long *length)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
	*length = 0;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	601a      	str	r2, [r3, #0]
	return NULL;
 800cbf8:	f04f 0300 	mov.w	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f107 070c 	add.w	r7, r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bc80      	pop	{r7}
 800cc06:	4770      	bx	lr

0800cc08 <WLAN_Driver_Patch>:

char *WLAN_Driver_Patch(unsigned long *length)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	*length = 0;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f04f 0200 	mov.w	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]
	return NULL;
 800cc18:	f04f 0300 	mov.w	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f107 070c 	add.w	r7, r7, #12
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bc80      	pop	{r7}
 800cc26:	4770      	bx	lr

0800cc28 <WLAN_BootLoader_Patch>:

char *WLAN_BootLoader_Patch(unsigned long *length)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
	*length = 0;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f04f 0200 	mov.w	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]
	return NULL;
 800cc38:	f04f 0300 	mov.w	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f107 070c 	add.w	r7, r7, #12
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bc80      	pop	{r7}
 800cc46:	4770      	bx	lr

0800cc48 <Spark_Connect>:
static int str_len(char str[]);
static void sub_str(char dest[], char src[], int offset, int len);
*/

int Spark_Connect(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
	int retVal = 0;
 800cc4e:	f04f 0300 	mov.w	r3, #0
 800cc52:	607b      	str	r3, [r7, #4]

    sparkSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 800cc54:	f04f 0002 	mov.w	r0, #2
 800cc58:	f04f 0101 	mov.w	r1, #1
 800cc5c:	f04f 0206 	mov.w	r2, #6
 800cc60:	f006 f880 	bl	8012d64 <socket>
 800cc64:	4602      	mov	r2, r0
 800cc66:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cc6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc6e:	601a      	str	r2, [r3, #0]

    if (sparkSocket < 0)
 800cc70:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	da02      	bge.n	800cc84 <Spark_Connect+0x3c>
    {
        //wlan_stop();
        return -1;
 800cc7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc82:	e057      	b.n	800cd34 <Spark_Connect+0xec>
    }

	// the family is always AF_INET
    tSocketAddr.sa_family = AF_INET;
 800cc84:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800cc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc8c:	f04f 0202 	mov.w	r2, #2
 800cc90:	801a      	strh	r2, [r3, #0]

	// the destination port
    tSocketAddr.sa_data[0] = (SPARK_SERVER_PORT & 0xFF00) >> 8;
 800cc92:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800cc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cc9a:	f04f 0223 	mov.w	r2, #35	; 0x23
 800cc9e:	709a      	strb	r2, [r3, #2]
    tSocketAddr.sa_data[1] = (SPARK_SERVER_PORT & 0x00FF);
 800cca0:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800cca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cca8:	f04f 021d 	mov.w	r2, #29
 800ccac:	70da      	strb	r2, [r3, #3]

	// the destination IP address
	tSocketAddr.sa_data[2] = 54;	// First Octet of destination IP
 800ccae:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800ccb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccb6:	f04f 0236 	mov.w	r2, #54	; 0x36
 800ccba:	711a      	strb	r2, [r3, #4]
	tSocketAddr.sa_data[3] = 235;	// Second Octet of destination IP
 800ccbc:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800ccc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccc4:	f04f 02eb 	mov.w	r2, #235	; 0xeb
 800ccc8:	715a      	strb	r2, [r3, #5]
	tSocketAddr.sa_data[4] = 79; 	// Third Octet of destination IP
 800ccca:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800ccce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccd2:	f04f 024f 	mov.w	r2, #79	; 0x4f
 800ccd6:	719a      	strb	r2, [r3, #6]
	tSocketAddr.sa_data[5] = 249;	// Fourth Octet of destination IP
 800ccd8:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800ccdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cce0:	f04f 02f9 	mov.w	r2, #249	; 0xf9
 800cce4:	71da      	strb	r2, [r3, #7]

	retVal = connect(sparkSocket, &tSocketAddr, sizeof(tSocketAddr));
 800cce6:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800ccea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f241 11fc 	movw	r1, #4604	; 0x11fc
 800ccf6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ccfa:	f04f 0210 	mov.w	r2, #16
 800ccfe:	f006 f8ab 	bl	8012e58 <connect>
 800cd02:	6078      	str	r0, [r7, #4]

	if (retVal < 0)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	da02      	bge.n	800cd10 <Spark_Connect+0xc8>
	{
		// Unable to connect
		return -1;
 800cd0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd0e:	e011      	b.n	800cd34 <Spark_Connect+0xec>
	}
	else
	{
		retVal = Spark_Send_Device_Message(sparkSocket, (char *)Device_Secret, NULL, NULL);
 800cd10:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f244 2190 	movw	r1, #17040	; 0x4290
 800cd20:	f6c0 0101 	movt	r1, #2049	; 0x801
 800cd24:	f04f 0200 	mov.w	r2, #0
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	f000 fad8 	bl	800d2e0 <Spark_Send_Device_Message>
 800cd30:	6078      	str	r0, [r7, #4]
	}

    return retVal;
 800cd32:	687b      	ldr	r3, [r7, #4]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	f107 0708 	add.w	r7, r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop

0800cd40 <Spark_Disconnect>:

int Spark_Disconnect(void)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
    int retVal = 0;
 800cd46:	f04f 0300 	mov.w	r3, #0
 800cd4a:	607b      	str	r3, [r7, #4]

    retVal = closesocket(sparkSocket);
 800cd4c:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f006 f848 	bl	8012dec <closesocket>
 800cd5c:	6078      	str	r0, [r7, #4]

    if(retVal == 0)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d106      	bne.n	800cd72 <Spark_Disconnect+0x32>
    	sparkSocket = 0xFFFFFFFF;
 800cd64:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd70:	601a      	str	r2, [r3, #0]

    return retVal;
 800cd72:	687b      	ldr	r3, [r7, #4]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	f107 0708 	add.w	r7, r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop

0800cd80 <receive_line>:
// called repeatedly from an interrupt handler, so DO NOT BLOCK
// returns: -1 on error, signifying socket disconnected
//          0 if we have not yet received a full line
//          the number of bytes received when we have received a full line
int receive_line()
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b08a      	sub	sp, #40	; 0x28
 800cd84:	af02      	add	r7, sp, #8
	if (0 == total_bytes_received)
 800cd86:	f240 7354 	movw	r3, #1876	; 0x754
 800cd8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d109      	bne.n	800cda8 <receive_line+0x28>
	{
		memset(recvBuff, 0, SPARK_BUF_LEN);
 800cd94:	f241 00fc 	movw	r0, #4348	; 0x10fc
 800cd98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cd9c:	f04f 0100 	mov.w	r1, #0
 800cda0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cda4:	f006 fe42 	bl	8013a2c <memset>
	}

    // reset the fd_set structure
    FD_ZERO(&readSet);
 800cda8:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800cdac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdb0:	617b      	str	r3, [r7, #20]
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	61fb      	str	r3, [r7, #28]
 800cdb8:	e009      	b.n	800cdce <receive_line+0x4e>
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	69fa      	ldr	r2, [r7, #28]
 800cdbe:	f04f 0100 	mov.w	r1, #0
 800cdc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	f103 0301 	add.w	r3, r3, #1
 800cdcc:	61fb      	str	r3, [r7, #28]
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d0f2      	beq.n	800cdba <receive_line+0x3a>
    FD_SET(sparkSocket, &readSet);
 800cdd4:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	ea4f 1253 	mov.w	r2, r3, lsr #5
 800cde2:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800cde6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdee:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cdf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f003 031f 	and.w	r3, r3, #31
 800cdfc:	f04f 0001 	mov.w	r0, #1
 800ce00:	fa00 f303 	lsl.w	r3, r0, r3
 800ce04:	4319      	orrs	r1, r3
 800ce06:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800ce0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    int buffer_bytes_available = SPARK_BUF_LEN - 1 - total_bytes_received;
 800ce12:	f240 7354 	movw	r3, #1876	; 0x754
 800ce16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ce20:	613b      	str	r3, [r7, #16]
    char *newline = NULL;
 800ce22:	f04f 0300 	mov.w	r3, #0
 800ce26:	61bb      	str	r3, [r7, #24]

    // tell select to timeout after 500 microseconds
    timeout.tv_sec = 0;
 800ce28:	f241 230c 	movw	r3, #4620	; 0x120c
 800ce2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce30:	f04f 0200 	mov.w	r2, #0
 800ce34:	601a      	str	r2, [r3, #0]
    timeout.tv_usec = 500;
 800ce36:	f241 230c 	movw	r3, #4620	; 0x120c
 800ce3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ce42:	605a      	str	r2, [r3, #4]

	int num_fds_ready = select(sparkSocket+1, &readSet, NULL, NULL, &timeout);
 800ce44:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800ce48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f103 0201 	add.w	r2, r3, #1
 800ce52:	f241 230c 	movw	r3, #4620	; 0x120c
 800ce56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f241 01f0 	movw	r1, #4336	; 0x10f0
 800ce62:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800ce66:	f04f 0200 	mov.w	r2, #0
 800ce6a:	f04f 0300 	mov.w	r3, #0
 800ce6e:	f006 f849 	bl	8012f04 <select>
 800ce72:	60f8      	str	r0, [r7, #12]

	if (0 < num_fds_ready)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	dd4c      	ble.n	800cf14 <receive_line+0x194>
	{
		if (FD_ISSET(sparkSocket, &readSet))
 800ce7a:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800ce7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	ea4f 1253 	mov.w	r2, r3, lsr #5
 800ce88:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800ce8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ce94:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800ce98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	fa42 f303 	asr.w	r3, r2, r3
 800cea6:	f003 0301 	and.w	r3, r3, #1
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d032      	beq.n	800cf14 <receive_line+0x194>
		{
			char *buffer_ptr = recvBuff + total_bytes_received;
 800ceae:	f240 7354 	movw	r3, #1876	; 0x754
 800ceb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	f241 03fc 	movw	r3, #4348	; 0x10fc
 800cebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cec2:	18d3      	adds	r3, r2, r3
 800cec4:	60bb      	str	r3, [r7, #8]

			int bytes_received_once = recv(sparkSocket, buffer_ptr, buffer_bytes_available, 0);
 800cec6:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800ceca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4618      	mov	r0, r3
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	f04f 0300 	mov.w	r3, #0
 800ceda:	f006 f923 	bl	8013124 <recv>
 800cede:	6078      	str	r0, [r7, #4]

			if (0 > bytes_received_once)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	da01      	bge.n	800ceea <receive_line+0x16a>
				return bytes_received_once;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	e02b      	b.n	800cf42 <receive_line+0x1c2>

			total_bytes_received += bytes_received_once;
 800ceea:	f240 7354 	movw	r3, #1876	; 0x754
 800ceee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	18d2      	adds	r2, r2, r3
 800cef8:	f240 7354 	movw	r3, #1876	; 0x754
 800cefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf00:	601a      	str	r2, [r3, #0]
			newline = strchr(recvBuff, '\n');
 800cf02:	f241 00fc 	movw	r0, #4348	; 0x10fc
 800cf06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cf0a:	f04f 010a 	mov.w	r1, #10
 800cf0e:	f006 fe23 	bl	8013b58 <strchr>
 800cf12:	61b8      	str	r0, [r7, #24]
		}
	}

    if (NULL == newline && 0 < buffer_bytes_available)
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d105      	bne.n	800cf26 <receive_line+0x1a6>
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	dd02      	ble.n	800cf26 <receive_line+0x1a6>
    {
    	return 0;
 800cf20:	f04f 0300 	mov.w	r3, #0
 800cf24:	e00d      	b.n	800cf42 <receive_line+0x1c2>
    }
    else
    {
    	int retVal = total_bytes_received;
 800cf26:	f240 7354 	movw	r3, #1876	; 0x754
 800cf2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	603b      	str	r3, [r7, #0]
    	total_bytes_received = 0;
 800cf32:	f240 7354 	movw	r3, #1876	; 0x754
 800cf36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf3a:	f04f 0200 	mov.w	r2, #0
 800cf3e:	601a      	str	r2, [r3, #0]
    	return retVal;
 800cf40:	683b      	ldr	r3, [r7, #0]
    }
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	f107 0720 	add.w	r7, r7, #32
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <process_command>:

// process the contents of recvBuff
// returns number of bytes transmitted or -1 on error
int process_command()
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
	int bytes_sent = 0;
 800cf52:	f04f 0300 	mov.w	r3, #0
 800cf56:	60fb      	str	r3, [r7, #12]

	// who
	if (0 == strncmp(recvBuff, API_Who, strlen(API_Who)))
 800cf58:	f241 00fc 	movw	r0, #4348	; 0x10fc
 800cf5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cf60:	f244 21c0 	movw	r1, #17088	; 0x42c0
 800cf64:	f6c0 0101 	movt	r1, #2049	; 0x801
 800cf68:	f04f 0203 	mov.w	r2, #3
 800cf6c:	f006 ff90 	bl	8013e90 <strncmp>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d111      	bne.n	800cf9a <process_command+0x4e>
	{
		bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Name, NULL, NULL);
 800cf76:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cf7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f244 2198 	movw	r1, #17048	; 0x4298
 800cf86:	f6c0 0101 	movt	r1, #2049	; 0x801
 800cf8a:	f04f 0200 	mov.w	r2, #0
 800cf8e:	f04f 0300 	mov.w	r3, #0
 800cf92:	f000 f9a5 	bl	800d2e0 <Spark_Send_Device_Message>
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	e149      	b.n	800d22e <process_command+0x2e2>
	}

	// API alive signal received and acknowledged by core, reset alive timeout
	else if (0 == strncmp(recvBuff, API_Alive, strlen(API_Alive)))
 800cf9a:	f241 00fc 	movw	r0, #4348	; 0x10fc
 800cf9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800cfa2:	f244 21b8 	movw	r1, #17080	; 0x42b8
 800cfa6:	f6c0 0101 	movt	r1, #2049	; 0x801
 800cfaa:	f04f 0205 	mov.w	r2, #5
 800cfae:	f006 ff6f 	bl	8013e90 <strncmp>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d127      	bne.n	800d008 <process_command+0xbc>
	{
		if(!SPARK_DEVICE_ACKED)
 800cfb8:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800cfbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d106      	bne.n	800cfd6 <process_command+0x8a>
		{
			SPARK_DEVICE_ACKED = 1;//First alive received by Core means Server received Device ID
 800cfc8:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800cfcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cfd0:	f04f 0201 	mov.w	r2, #1
 800cfd4:	701a      	strb	r2, [r3, #0]
		}
		TimingSparkAliveTimeout = 0;
 800cfd6:	f241 03dc 	movw	r3, #4316	; 0x10dc
 800cfda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cfde:	f04f 0200 	mov.w	r2, #0
 800cfe2:	601a      	str	r2, [r3, #0]
		bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)API_Alive, NULL, NULL);
 800cfe4:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800cfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f244 21b8 	movw	r1, #17080	; 0x42b8
 800cff4:	f6c0 0101 	movt	r1, #2049	; 0x801
 800cff8:	f04f 0200 	mov.w	r2, #0
 800cffc:	f04f 0300 	mov.w	r3, #0
 800d000:	f000 f96e 	bl	800d2e0 <Spark_Send_Device_Message>
 800d004:	60f8      	str	r0, [r7, #12]
 800d006:	e112      	b.n	800d22e <process_command+0x2e2>
	}

	// command to set a pin high
	else if (0 == strncmp(recvBuff, High_Dx, 6))
 800d008:	f241 00fc 	movw	r0, #4348	; 0x10fc
 800d00c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d010:	f240 014c 	movw	r1, #76	; 0x4c
 800d014:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800d018:	f04f 0206 	mov.w	r2, #6
 800d01c:	f006 ff38 	bl	8013e90 <strncmp>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d142      	bne.n	800d0ac <process_command+0x160>
	{
		High_Dx[6] = recvBuff[6];
 800d026:	f241 03fc 	movw	r3, #4348	; 0x10fc
 800d02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d02e:	799a      	ldrb	r2, [r3, #6]
 800d030:	f240 034c 	movw	r3, #76	; 0x4c
 800d034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d038:	719a      	strb	r2, [r3, #6]

		if (OK == DIO_SetState(atoc(High_Dx[6]), HIGH))
 800d03a:	f240 034c 	movw	r3, #76	; 0x4c
 800d03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d042:	799b      	ldrb	r3, [r3, #6]
 800d044:	4618      	mov	r0, r3
 800d046:	f000 fa55 	bl	800d4f4 <atoc>
 800d04a:	4603      	mov	r3, r0
 800d04c:	4618      	mov	r0, r3
 800d04e:	f04f 0101 	mov.w	r1, #1
 800d052:	f7fe fbb7 	bl	800b7c4 <DIO_SetState>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d113      	bne.n	800d084 <process_command+0x138>
			bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Ok, (char *)High_Dx, NULL);
 800d05c:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800d060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4618      	mov	r0, r3
 800d068:	f244 21a8 	movw	r1, #17064	; 0x42a8
 800d06c:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d070:	f240 024c 	movw	r2, #76	; 0x4c
 800d074:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d078:	f04f 0300 	mov.w	r3, #0
 800d07c:	f000 f930 	bl	800d2e0 <Spark_Send_Device_Message>
 800d080:	60f8      	str	r0, [r7, #12]
 800d082:	e0d4      	b.n	800d22e <process_command+0x2e2>
		else
			bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Fail, (char *)High_Dx, NULL);
 800d084:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800d088:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4618      	mov	r0, r3
 800d090:	f244 21ac 	movw	r1, #17068	; 0x42ac
 800d094:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d098:	f240 024c 	movw	r2, #76	; 0x4c
 800d09c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d0a0:	f04f 0300 	mov.w	r3, #0
 800d0a4:	f000 f91c 	bl	800d2e0 <Spark_Send_Device_Message>
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	e0c0      	b.n	800d22e <process_command+0x2e2>
	}

	// command to set a pin low
	else if (0 == strncmp(recvBuff, Low_Dx, 5))
 800d0ac:	f241 00fc 	movw	r0, #4348	; 0x10fc
 800d0b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d0b4:	f240 0154 	movw	r1, #84	; 0x54
 800d0b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800d0bc:	f04f 0205 	mov.w	r2, #5
 800d0c0:	f006 fee6 	bl	8013e90 <strncmp>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d142      	bne.n	800d150 <process_command+0x204>
	{
		Low_Dx[5] = recvBuff[5];
 800d0ca:	f241 03fc 	movw	r3, #4348	; 0x10fc
 800d0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0d2:	795a      	ldrb	r2, [r3, #5]
 800d0d4:	f240 0354 	movw	r3, #84	; 0x54
 800d0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0dc:	715a      	strb	r2, [r3, #5]

		if (OK == DIO_SetState(atoc(Low_Dx[5]), LOW))
 800d0de:	f240 0354 	movw	r3, #84	; 0x54
 800d0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d0e6:	795b      	ldrb	r3, [r3, #5]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 fa03 	bl	800d4f4 <atoc>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f04f 0100 	mov.w	r1, #0
 800d0f6:	f7fe fb65 	bl	800b7c4 <DIO_SetState>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d113      	bne.n	800d128 <process_command+0x1dc>
			bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Ok, (char *)Low_Dx, NULL);
 800d100:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800d104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f244 21a8 	movw	r1, #17064	; 0x42a8
 800d110:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d114:	f240 0254 	movw	r2, #84	; 0x54
 800d118:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d11c:	f04f 0300 	mov.w	r3, #0
 800d120:	f000 f8de 	bl	800d2e0 <Spark_Send_Device_Message>
 800d124:	60f8      	str	r0, [r7, #12]
 800d126:	e082      	b.n	800d22e <process_command+0x2e2>
		else
			bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Fail, (char *)Low_Dx, NULL);
 800d128:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800d12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4618      	mov	r0, r3
 800d134:	f244 21ac 	movw	r1, #17068	; 0x42ac
 800d138:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d13c:	f240 0254 	movw	r2, #84	; 0x54
 800d140:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d144:	f04f 0300 	mov.w	r3, #0
 800d148:	f000 f8ca 	bl	800d2e0 <Spark_Send_Device_Message>
 800d14c:	60f8      	str	r0, [r7, #12]
 800d14e:	e06e      	b.n	800d22e <process_command+0x2e2>
	}

	// command to call the user-defined function
	else if (0 == strncmp(recvBuff, API_UserFunc, strlen(API_UserFunc)))
 800d150:	f241 00fc 	movw	r0, #4348	; 0x10fc
 800d154:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d158:	f244 21c4 	movw	r1, #17092	; 0x42c4
 800d15c:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d160:	f04f 0209 	mov.w	r2, #9
 800d164:	f006 fe94 	bl	8013e90 <strncmp>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d13b      	bne.n	800d1e6 <process_command+0x29a>
	{
		char *user_arg = &recvBuff[strlen(API_UserFunc)];
 800d16e:	4b33      	ldr	r3, [pc, #204]	; (800d23c <process_command+0x2f0>)
 800d170:	607b      	str	r3, [r7, #4]
		char *newline = strchr(user_arg, '\n');
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f04f 010a 	mov.w	r1, #10
 800d178:	f006 fcee 	bl	8013b58 <strchr>
 800d17c:	60b8      	str	r0, [r7, #8]
		if (NULL != newline)
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00d      	beq.n	800d1a0 <process_command+0x254>
		{
			if ('\r' == *(newline - 1))
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	2b0d      	cmp	r3, #13
 800d18e:	d103      	bne.n	800d198 <process_command+0x24c>
				newline--;
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d196:	60bb      	str	r3, [r7, #8]
			*newline = '\0';
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	f04f 0200 	mov.w	r2, #0
 800d19e:	701a      	strb	r2, [r3, #0]
		}

	    memset(userBuff, 0, SPARK_BUF_LEN);
 800d1a0:	f241 2014 	movw	r0, #4628	; 0x1214
 800d1a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d1a8:	f04f 0100 	mov.w	r1, #0
 800d1ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1b0:	f006 fc3c 	bl	8013a2c <memset>
	    if(NULL != user_arg)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00b      	beq.n	800d1d2 <process_command+0x286>
	    {
	    	memcpy(userBuff, user_arg, strlen(user_arg));
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f006 fe38 	bl	8013e30 <strlen>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	f241 2014 	movw	r0, #4628	; 0x1214
 800d1c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d1ca:	6879      	ldr	r1, [r7, #4]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	f006 fb7f 	bl	80138d0 <memcpy>
	    }
		pUserFunction = user_function;
 800d1d2:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800d1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d1da:	f24d 2265 	movw	r2, #53861	; 0xd265
 800d1de:	f6c0 0200 	movt	r2, #2048	; 0x800
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	e023      	b.n	800d22e <process_command+0x2e2>
	}

	// Do nothing for new line returned
	else if(strcmp(recvBuff, Device_CRLF) == 0)
 800d1e6:	f241 00fc 	movw	r0, #4348	; 0x10fc
 800d1ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d1ee:	f244 21b4 	movw	r1, #17076	; 0x42b4
 800d1f2:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d1f6:	f006 fd2d 	bl	8013c54 <strcmp>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d103      	bne.n	800d208 <process_command+0x2bc>
	{
		bytes_sent = 0;
 800d200:	f04f 0300 	mov.w	r3, #0
 800d204:	60fb      	str	r3, [r7, #12]
 800d206:	e012      	b.n	800d22e <process_command+0x2e2>
	}

	else
	{
		bytes_sent = Spark_Send_Device_Message(sparkSocket, (char *)Device_Fail, (char *)recvBuff, NULL);
 800d208:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800d20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4618      	mov	r0, r3
 800d214:	f244 21ac 	movw	r1, #17068	; 0x42ac
 800d218:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d21c:	f241 02fc 	movw	r2, #4348	; 0x10fc
 800d220:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800d224:	f04f 0300 	mov.w	r3, #0
 800d228:	f000 f85a 	bl	800d2e0 <Spark_Send_Device_Message>
 800d22c:	60f8      	str	r0, [r7, #12]
	}

	return bytes_sent;
 800d22e:	68fb      	ldr	r3, [r7, #12]
}
 800d230:	4618      	mov	r0, r3
 800d232:	f107 0710 	add.w	r7, r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	20001105 	.word	0x20001105

0800d240 <Spark_Process_API_Response>:

int Spark_Process_API_Response(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
	int retVal = receive_line();
 800d246:	f7ff fd9b 	bl	800cd80 <receive_line>
 800d24a:	6078      	str	r0, [r7, #4]

	if (0 < retVal)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	dd02      	ble.n	800d258 <Spark_Process_API_Response+0x18>
		retVal = process_command();
 800d252:	f7ff fe7b 	bl	800cf4c <process_command>
 800d256:	6078      	str	r0, [r7, #4]

	return retVal;
 800d258:	687b      	ldr	r3, [r7, #4]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	f107 0708 	add.w	r7, r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <user_function>:
	lenStr[len] = '\0';
	Spark_Send_Device_Message(sparkSocket, (char *)API_Callback, (char *)callback_name, (char *)lenStr);
}

static void user_function(void)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
	if (NULL != userFunction)
 800d26a:	f64a 33b9 	movw	r3, #43961	; 0xabb9
 800d26e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d272:	2b00      	cmp	r3, #0
 800d274:	d02f      	beq.n	800d2d6 <user_function+0x72>
	{
		pUserFunction = NULL;
 800d276:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800d27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d27e:	f04f 0200 	mov.w	r2, #0
 800d282:	601a      	str	r2, [r3, #0]
		char retStr[11];
		int userResult = userFunction(userBuff);
 800d284:	f241 2014 	movw	r0, #4628	; 0x1214
 800d288:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800d28c:	f7fd fc94 	bl	800abb8 <userFunction>
 800d290:	4603      	mov	r3, r0
 800d292:	617b      	str	r3, [r7, #20]
		int retLen = itoa(userResult, retStr);
 800d294:	f107 0304 	add.w	r3, r7, #4
 800d298:	6978      	ldr	r0, [r7, #20]
 800d29a:	4619      	mov	r1, r3
 800d29c:	f000 f8c2 	bl	800d424 <itoa>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	613b      	str	r3, [r7, #16]
		retStr[retLen] = '\0';
 800d2a4:	f107 0204 	add.w	r2, r7, #4
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	18d3      	adds	r3, r2, r3
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	701a      	strb	r2, [r3, #0]
		Spark_Send_Device_Message(sparkSocket, (char *)Device_Ok, (char *)API_UserFunc, (char *)retStr);
 800d2b2:	f241 03f4 	movw	r3, #4340	; 0x10f4
 800d2b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	f107 0304 	add.w	r3, r7, #4
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f244 21a8 	movw	r1, #17064	; 0x42a8
 800d2c6:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d2ca:	f244 22c4 	movw	r2, #17092	; 0x42c4
 800d2ce:	f6c0 0201 	movt	r2, #2049	; 0x801
 800d2d2:	f000 f805 	bl	800d2e0 <Spark_Send_Device_Message>
	}
}
 800d2d6:	f107 0718 	add.w	r7, r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop

0800d2e0 <Spark_Send_Device_Message>:

// returns number of bytes transmitted or -1 on error
static int Spark_Send_Device_Message(long socket, char * cmd, char * cmdparam, char * cmdvalue)
{
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b0c7      	sub	sp, #284	; 0x11c
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	f107 040c 	add.w	r4, r7, #12
 800d2ea:	6020      	str	r0, [r4, #0]
 800d2ec:	f107 0008 	add.w	r0, r7, #8
 800d2f0:	6001      	str	r1, [r0, #0]
 800d2f2:	f107 0104 	add.w	r1, r7, #4
 800d2f6:	600a      	str	r2, [r1, #0]
 800d2f8:	463a      	mov	r2, r7
 800d2fa:	6013      	str	r3, [r2, #0]
    char cmdBuf[SPARK_BUF_LEN];
    int sendLen = 0;
 800d2fc:	f04f 0300 	mov.w	r3, #0
 800d300:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    int retVal = 0;
 800d304:	f04f 0300 	mov.w	r3, #0
 800d308:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    memset(cmdBuf, 0, SPARK_BUF_LEN);
 800d30c:	f107 0310 	add.w	r3, r7, #16
 800d310:	4618      	mov	r0, r3
 800d312:	f04f 0100 	mov.w	r1, #0
 800d316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d31a:	f006 fb87 	bl	8013a2c <memset>

    if(cmd != NULL)
 800d31e:	f107 0308 	add.w	r3, r7, #8
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d016      	beq.n	800d356 <Spark_Send_Device_Message+0x76>
    {
        sendLen = strlen(cmd);
 800d328:	f107 0308 	add.w	r3, r7, #8
 800d32c:	6818      	ldr	r0, [r3, #0]
 800d32e:	f006 fd7f 	bl	8013e30 <strlen>
 800d332:	4603      	mov	r3, r0
 800d334:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        memcpy(cmdBuf, cmd, strlen(cmd));
 800d338:	f107 0308 	add.w	r3, r7, #8
 800d33c:	6818      	ldr	r0, [r3, #0]
 800d33e:	f006 fd77 	bl	8013e30 <strlen>
 800d342:	4603      	mov	r3, r0
 800d344:	f107 0110 	add.w	r1, r7, #16
 800d348:	f107 0208 	add.w	r2, r7, #8
 800d34c:	4608      	mov	r0, r1
 800d34e:	6811      	ldr	r1, [r2, #0]
 800d350:	461a      	mov	r2, r3
 800d352:	f006 fabd 	bl	80138d0 <memcpy>
    }

    if(cmdparam != NULL)
 800d356:	f107 0304 	add.w	r3, r7, #4
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d01c      	beq.n	800d39a <Spark_Send_Device_Message+0xba>
    {
        memcpy(&cmdBuf[sendLen], cmdparam, strlen(cmdparam));
 800d360:	f107 0210 	add.w	r2, r7, #16
 800d364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d368:	18d4      	adds	r4, r2, r3
 800d36a:	f107 0304 	add.w	r3, r7, #4
 800d36e:	6818      	ldr	r0, [r3, #0]
 800d370:	f006 fd5e 	bl	8013e30 <strlen>
 800d374:	4603      	mov	r3, r0
 800d376:	f107 0204 	add.w	r2, r7, #4
 800d37a:	4620      	mov	r0, r4
 800d37c:	6811      	ldr	r1, [r2, #0]
 800d37e:	461a      	mov	r2, r3
 800d380:	f006 faa6 	bl	80138d0 <memcpy>
        sendLen += strlen(cmdparam);
 800d384:	f107 0304 	add.w	r3, r7, #4
 800d388:	6818      	ldr	r0, [r3, #0]
 800d38a:	f006 fd51 	bl	8013e30 <strlen>
 800d38e:	4602      	mov	r2, r0
 800d390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d394:	18d3      	adds	r3, r2, r3
 800d396:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    }

    if(cmdvalue != NULL)
 800d39a:	463b      	mov	r3, r7
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d019      	beq.n	800d3d6 <Spark_Send_Device_Message+0xf6>
    {
        memcpy(&cmdBuf[sendLen], cmdvalue, strlen(cmdvalue));
 800d3a2:	f107 0210 	add.w	r2, r7, #16
 800d3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3aa:	18d4      	adds	r4, r2, r3
 800d3ac:	463b      	mov	r3, r7
 800d3ae:	6818      	ldr	r0, [r3, #0]
 800d3b0:	f006 fd3e 	bl	8013e30 <strlen>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	463a      	mov	r2, r7
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	6811      	ldr	r1, [r2, #0]
 800d3bc:	461a      	mov	r2, r3
 800d3be:	f006 fa87 	bl	80138d0 <memcpy>
        sendLen += strlen(cmdvalue);
 800d3c2:	463b      	mov	r3, r7
 800d3c4:	6818      	ldr	r0, [r3, #0]
 800d3c6:	f006 fd33 	bl	8013e30 <strlen>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3d0:	18d3      	adds	r3, r2, r3
 800d3d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    }

    memcpy(&cmdBuf[sendLen], Device_CRLF, strlen(Device_CRLF));
 800d3d6:	f107 0210 	add.w	r2, r7, #16
 800d3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3de:	18d2      	adds	r2, r2, r3
 800d3e0:	f244 23b4 	movw	r3, #17076	; 0x42b4
 800d3e4:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	7013      	strb	r3, [r2, #0]
    sendLen += strlen(Device_CRLF);
 800d3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3f0:	f103 0301 	add.w	r3, r3, #1
 800d3f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    retVal = send(socket, cmdBuf, sendLen, 0);
 800d3f8:	f107 020c 	add.w	r2, r7, #12
 800d3fc:	f107 0310 	add.w	r3, r7, #16
 800d400:	6810      	ldr	r0, [r2, #0]
 800d402:	4619      	mov	r1, r3
 800d404:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800d408:	f04f 0300 	mov.w	r3, #0
 800d40c:	f005 ff60 	bl	80132d0 <send>
 800d410:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    return retVal;
 800d414:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800d418:	4618      	mov	r0, r3
 800d41a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd90      	pop	{r4, r7, pc}
 800d422:	bf00      	nop

0800d424 <itoa>:

// brief  Convert integer to ASCII in decimal base
static unsigned char itoa(int cNum, char *cString)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
    char* ptr;
    int uTemp = cNum;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	613b      	str	r3, [r7, #16]
    unsigned char length;

    // value 0 is a special case
    if (cNum == 0)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d108      	bne.n	800d44a <itoa+0x26>
    {
        length = 1;
 800d438:	f04f 0301 	mov.w	r3, #1
 800d43c:	73fb      	strb	r3, [r7, #15]
        *cString = '0';
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	f04f 0230 	mov.w	r2, #48	; 0x30
 800d444:	701a      	strb	r2, [r3, #0]

        return length;
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	e04d      	b.n	800d4e6 <itoa+0xc2>
    }

    // Find out the length of the number, in decimal base
    length = 0;
 800d44a:	f04f 0300 	mov.w	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]
    while (uTemp > 0)
 800d450:	e010      	b.n	800d474 <itoa+0x50>
    {
        uTemp /= 10;
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	f246 6367 	movw	r3, #26215	; 0x6667
 800d458:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800d45c:	fb83 1302 	smull	r1, r3, r3, r2
 800d460:	ea4f 01a3 	mov.w	r1, r3, asr #2
 800d464:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d468:	1acb      	subs	r3, r1, r3
 800d46a:	613b      	str	r3, [r7, #16]
        length++;
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
 800d46e:	f103 0301 	add.w	r3, r3, #1
 800d472:	73fb      	strb	r3, [r7, #15]
        return length;
    }

    // Find out the length of the number, in decimal base
    length = 0;
    while (uTemp > 0)
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	2b00      	cmp	r3, #0
 800d478:	dceb      	bgt.n	800d452 <itoa+0x2e>
        uTemp /= 10;
        length++;
    }

    // Do the actual formatting, right to left
    uTemp = cNum;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	613b      	str	r3, [r7, #16]
    ptr = cString + length;
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	683a      	ldr	r2, [r7, #0]
 800d482:	18d3      	adds	r3, r2, r3
 800d484:	617b      	str	r3, [r7, #20]
    while (uTemp > 0)
 800d486:	e02a      	b.n	800d4de <itoa+0xba>
    {
        --ptr;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d48e:	617b      	str	r3, [r7, #20]
        *ptr = digits[uTemp % 10];
 800d490:	6939      	ldr	r1, [r7, #16]
 800d492:	f246 6367 	movw	r3, #26215	; 0x6667
 800d496:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800d49a:	fb83 2301 	smull	r2, r3, r3, r1
 800d49e:	ea4f 02a3 	mov.w	r2, r3, asr #2
 800d4a2:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800d4a6:	1ad2      	subs	r2, r2, r3
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d4ae:	189b      	adds	r3, r3, r2
 800d4b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d4b4:	1aca      	subs	r2, r1, r3
 800d4b6:	f240 035c 	movw	r3, #92	; 0x5c
 800d4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d4be:	5c9a      	ldrb	r2, [r3, r2]
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	701a      	strb	r2, [r3, #0]
        uTemp /= 10;
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	f246 6367 	movw	r3, #26215	; 0x6667
 800d4ca:	f2c6 6366 	movt	r3, #26214	; 0x6666
 800d4ce:	fb83 1302 	smull	r1, r3, r3, r2
 800d4d2:	ea4f 01a3 	mov.w	r1, r3, asr #2
 800d4d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d4da:	1acb      	subs	r3, r1, r3
 800d4dc:	613b      	str	r3, [r7, #16]
    }

    // Do the actual formatting, right to left
    uTemp = cNum;
    ptr = cString + length;
    while (uTemp > 0)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	dcd1      	bgt.n	800d488 <itoa+0x64>
        --ptr;
        *ptr = digits[uTemp % 10];
        uTemp /= 10;
    }

    return length;
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f107 071c 	add.w	r7, r7, #28
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bc80      	pop	{r7}
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop

0800d4f4 <atoc>:

//Convert nibble to hexdecimal from ASCII
static uint8_t atoc(char data)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	71fb      	strb	r3, [r7, #7]
	unsigned char ucRes;

	if ((data >= 0x30) && (data <= 0x39))
 800d4fe:	79fb      	ldrb	r3, [r7, #7]
 800d500:	2b2f      	cmp	r3, #47	; 0x2f
 800d502:	d907      	bls.n	800d514 <atoc+0x20>
 800d504:	79fb      	ldrb	r3, [r7, #7]
 800d506:	2b39      	cmp	r3, #57	; 0x39
 800d508:	d804      	bhi.n	800d514 <atoc+0x20>
	{
		ucRes = data - 0x30;
 800d50a:	79fb      	ldrb	r3, [r7, #7]
 800d50c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 800d510:	73fb      	strb	r3, [r7, #15]
 800d512:	e028      	b.n	800d566 <atoc+0x72>
	}
	else
	{
		if (data == 'a')
 800d514:	79fb      	ldrb	r3, [r7, #7]
 800d516:	2b61      	cmp	r3, #97	; 0x61
 800d518:	d103      	bne.n	800d522 <atoc+0x2e>
		{
			ucRes = 0x0a;;
 800d51a:	f04f 030a 	mov.w	r3, #10
 800d51e:	73fb      	strb	r3, [r7, #15]
 800d520:	e021      	b.n	800d566 <atoc+0x72>
		}
		else if (data == 'b')
 800d522:	79fb      	ldrb	r3, [r7, #7]
 800d524:	2b62      	cmp	r3, #98	; 0x62
 800d526:	d103      	bne.n	800d530 <atoc+0x3c>
		{
			ucRes = 0x0b;
 800d528:	f04f 030b 	mov.w	r3, #11
 800d52c:	73fb      	strb	r3, [r7, #15]
 800d52e:	e01a      	b.n	800d566 <atoc+0x72>
		}
		else if (data == 'c')
 800d530:	79fb      	ldrb	r3, [r7, #7]
 800d532:	2b63      	cmp	r3, #99	; 0x63
 800d534:	d103      	bne.n	800d53e <atoc+0x4a>
		{
			ucRes = 0x0c;
 800d536:	f04f 030c 	mov.w	r3, #12
 800d53a:	73fb      	strb	r3, [r7, #15]
 800d53c:	e013      	b.n	800d566 <atoc+0x72>
		}
		else if (data == 'd')
 800d53e:	79fb      	ldrb	r3, [r7, #7]
 800d540:	2b64      	cmp	r3, #100	; 0x64
 800d542:	d103      	bne.n	800d54c <atoc+0x58>
		{
			ucRes = 0x0d;
 800d544:	f04f 030d 	mov.w	r3, #13
 800d548:	73fb      	strb	r3, [r7, #15]
 800d54a:	e00c      	b.n	800d566 <atoc+0x72>
		}
		else if (data == 'e')
 800d54c:	79fb      	ldrb	r3, [r7, #7]
 800d54e:	2b65      	cmp	r3, #101	; 0x65
 800d550:	d103      	bne.n	800d55a <atoc+0x66>
		{
			ucRes = 0x0e;
 800d552:	f04f 030e 	mov.w	r3, #14
 800d556:	73fb      	strb	r3, [r7, #15]
 800d558:	e005      	b.n	800d566 <atoc+0x72>
		}
		else if (data == 'f')
 800d55a:	79fb      	ldrb	r3, [r7, #7]
 800d55c:	2b66      	cmp	r3, #102	; 0x66
 800d55e:	d102      	bne.n	800d566 <atoc+0x72>
		{
			ucRes = 0x0f;
 800d560:	f04f 030f 	mov.w	r3, #15
 800d564:	73fb      	strb	r3, [r7, #15]
		}
	}
	return ucRes;
 800d566:	7bfb      	ldrb	r3, [r7, #15]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	f107 0714 	add.w	r7, r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	bc80      	pop	{r7}
 800d572:	4770      	bx	lr

0800d574 <pinMode>:

/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP, or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	af00      	add	r7, sp, #0
 800d57a:	4602      	mov	r2, r0
 800d57c:	460b      	mov	r3, r1
 800d57e:	80fa      	strh	r2, [r7, #6]
 800d580:	717b      	strb	r3, [r7, #5]

	if (pin >= TOTAL_PINS || setMode == NONE )
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	2b14      	cmp	r3, #20
 800d586:	f200 80ca 	bhi.w	800d71e <pinMode+0x1aa>
 800d58a:	797b      	ldrb	r3, [r7, #5]
 800d58c:	2bff      	cmp	r3, #255	; 0xff
 800d58e:	f000 80c6 	beq.w	800d71e <pinMode+0x1aa>
	{
		return;
	}

	// Serial1 safety check
	if (serial1_enabled == true && (pin == RX || pin == TX))
 800d592:	f240 7358 	movw	r3, #1880	; 0x758
 800d596:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d107      	bne.n	800d5b0 <pinMode+0x3c>
 800d5a0:	88fb      	ldrh	r3, [r7, #6]
 800d5a2:	2b12      	cmp	r3, #18
 800d5a4:	f000 80bb 	beq.w	800d71e <pinMode+0x1aa>
 800d5a8:	88fb      	ldrh	r3, [r7, #6]
 800d5aa:	2b13      	cmp	r3, #19
 800d5ac:	f000 80b7 	beq.w	800d71e <pinMode+0x1aa>
	{
		return;
	}

	GPIO_TypeDef *gpio_port = PIN_MAP[pin].gpio_peripheral;
 800d5b0:	88fa      	ldrh	r2, [r7, #6]
 800d5b2:	f240 036c 	movw	r3, #108	; 0x6c
 800d5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5ba:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d5be:	189b      	adds	r3, r3, r2
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	617b      	str	r3, [r7, #20]
	uint16_t gpio_pin = PIN_MAP[pin].gpio_pin;
 800d5c4:	88fa      	ldrh	r2, [r7, #6]
 800d5c6:	f240 036c 	movw	r3, #108	; 0x6c
 800d5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d5ce:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d5d2:	189b      	adds	r3, r3, r2
 800d5d4:	889b      	ldrh	r3, [r3, #4]
 800d5d6:	827b      	strh	r3, [r7, #18]

	GPIO_InitTypeDef GPIO_InitStructure;

	if (gpio_port == GPIOA )
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d106      	bne.n	800d5f4 <pinMode+0x80>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800d5e6:	f04f 0004 	mov.w	r0, #4
 800d5ea:	f04f 0101 	mov.w	r1, #1
 800d5ee:	f003 ff2f 	bl	8011450 <RCC_APB2PeriphClockCmd>
 800d5f2:	e00c      	b.n	800d60e <pinMode+0x9a>
	}
	else if (gpio_port == GPIOB )
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d5fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d105      	bne.n	800d60e <pinMode+0x9a>
	{
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800d602:	f04f 0008 	mov.w	r0, #8
 800d606:	f04f 0101 	mov.w	r1, #1
 800d60a:	f003 ff21 	bl	8011450 <RCC_APB2PeriphClockCmd>
	}

	GPIO_InitStructure.GPIO_Pin = gpio_pin;
 800d60e:	8a7b      	ldrh	r3, [r7, #18]
 800d610:	81bb      	strh	r3, [r7, #12]

	switch (setMode)
 800d612:	797b      	ldrb	r3, [r7, #5]
 800d614:	2b05      	cmp	r3, #5
 800d616:	d87b      	bhi.n	800d710 <pinMode+0x19c>
 800d618:	a201      	add	r2, pc, #4	; (adr r2, 800d620 <pinMode+0xac>)
 800d61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61e:	bf00      	nop
 800d620:	0800d639 	.word	0x0800d639
 800d624:	0800d661 	.word	0x0800d661
 800d628:	0800d683 	.word	0x0800d683
 800d62c:	0800d6a5 	.word	0x0800d6a5
 800d630:	0800d6c7 	.word	0x0800d6c7
 800d634:	0800d6ef 	.word	0x0800d6ef
	{

	case OUTPUT:
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800d638:	f04f 0310 	mov.w	r3, #16
 800d63c:	73fb      	strb	r3, [r7, #15]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800d63e:	f04f 0303 	mov.w	r3, #3
 800d642:	73bb      	strb	r3, [r7, #14]
		PIN_MAP[pin].pin_mode = OUTPUT;
 800d644:	88fa      	ldrh	r2, [r7, #6]
 800d646:	f240 036c 	movw	r3, #108	; 0x6c
 800d64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d64e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d652:	189b      	adds	r3, r3, r2
 800d654:	f103 0308 	add.w	r3, r3, #8
 800d658:	f04f 0200 	mov.w	r2, #0
 800d65c:	719a      	strb	r2, [r3, #6]
		break;
 800d65e:	e058      	b.n	800d712 <pinMode+0x19e>

	case INPUT:
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800d660:	f04f 0304 	mov.w	r3, #4
 800d664:	73fb      	strb	r3, [r7, #15]
		PIN_MAP[pin].pin_mode = INPUT;
 800d666:	88fa      	ldrh	r2, [r7, #6]
 800d668:	f240 036c 	movw	r3, #108	; 0x6c
 800d66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d670:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d674:	189b      	adds	r3, r3, r2
 800d676:	f103 0308 	add.w	r3, r3, #8
 800d67a:	f04f 0201 	mov.w	r2, #1
 800d67e:	719a      	strb	r2, [r3, #6]
		break;
 800d680:	e047      	b.n	800d712 <pinMode+0x19e>

	case INPUT_PULLUP:
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800d682:	f04f 0348 	mov.w	r3, #72	; 0x48
 800d686:	73fb      	strb	r3, [r7, #15]
		PIN_MAP[pin].pin_mode = INPUT_PULLUP;
 800d688:	88fa      	ldrh	r2, [r7, #6]
 800d68a:	f240 036c 	movw	r3, #108	; 0x6c
 800d68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d692:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d696:	189b      	adds	r3, r3, r2
 800d698:	f103 0308 	add.w	r3, r3, #8
 800d69c:	f04f 0202 	mov.w	r2, #2
 800d6a0:	719a      	strb	r2, [r3, #6]
		break;
 800d6a2:	e036      	b.n	800d712 <pinMode+0x19e>

	case INPUT_PULLDOWN:
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 800d6a4:	f04f 0328 	mov.w	r3, #40	; 0x28
 800d6a8:	73fb      	strb	r3, [r7, #15]
		PIN_MAP[pin].pin_mode = INPUT_PULLDOWN;
 800d6aa:	88fa      	ldrh	r2, [r7, #6]
 800d6ac:	f240 036c 	movw	r3, #108	; 0x6c
 800d6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d6b8:	189b      	adds	r3, r3, r2
 800d6ba:	f103 0308 	add.w	r3, r3, #8
 800d6be:	f04f 0203 	mov.w	r2, #3
 800d6c2:	719a      	strb	r2, [r3, #6]
		break;
 800d6c4:	e025      	b.n	800d712 <pinMode+0x19e>

	case AF_OUTPUT:	//Used internally for Alternate Function Output(TIM, UART, SPI etc)
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800d6c6:	f04f 0318 	mov.w	r3, #24
 800d6ca:	73fb      	strb	r3, [r7, #15]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800d6cc:	f04f 0303 	mov.w	r3, #3
 800d6d0:	73bb      	strb	r3, [r7, #14]
		PIN_MAP[pin].pin_mode = AF_OUTPUT;
 800d6d2:	88fa      	ldrh	r2, [r7, #6]
 800d6d4:	f240 036c 	movw	r3, #108	; 0x6c
 800d6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d6e0:	189b      	adds	r3, r3, r2
 800d6e2:	f103 0308 	add.w	r3, r3, #8
 800d6e6:	f04f 0204 	mov.w	r2, #4
 800d6ea:	719a      	strb	r2, [r3, #6]
		break;
 800d6ec:	e011      	b.n	800d712 <pinMode+0x19e>

	case AN_INPUT:	//Used internally for ADC Input
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 800d6ee:	f04f 0300 	mov.w	r3, #0
 800d6f2:	73fb      	strb	r3, [r7, #15]
		PIN_MAP[pin].pin_mode = AN_INPUT;
 800d6f4:	88fa      	ldrh	r2, [r7, #6]
 800d6f6:	f240 036c 	movw	r3, #108	; 0x6c
 800d6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d6fe:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d702:	189b      	adds	r3, r3, r2
 800d704:	f103 0308 	add.w	r3, r3, #8
 800d708:	f04f 0205 	mov.w	r2, #5
 800d70c:	719a      	strb	r2, [r3, #6]
		break;
 800d70e:	e000      	b.n	800d712 <pinMode+0x19e>

	default:
		break;
 800d710:	bf00      	nop
	}

	GPIO_Init(gpio_port, &GPIO_InitStructure);
 800d712:	f107 030c 	add.w	r3, r7, #12
 800d716:	6978      	ldr	r0, [r7, #20]
 800d718:	4619      	mov	r1, r3
 800d71a:	f003 fb6b 	bl	8010df4 <GPIO_Init>
}
 800d71e:	f107 0718 	add.w	r7, r7, #24
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop

0800d728 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(uint16_t pin, uint8_t value)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	80fa      	strh	r2, [r7, #6]
 800d734:	717b      	strb	r3, [r7, #5]
	if (pin >= TOTAL_PINS || PIN_MAP[pin].pin_mode == INPUT
 800d736:	88fb      	ldrh	r3, [r7, #6]
 800d738:	2b14      	cmp	r3, #20
 800d73a:	f200 8090 	bhi.w	800d85e <digitalWrite+0x136>
 800d73e:	88fa      	ldrh	r2, [r7, #6]
 800d740:	f240 036c 	movw	r3, #108	; 0x6c
 800d744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d748:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d74c:	189b      	adds	r3, r3, r2
 800d74e:	f103 0308 	add.w	r3, r3, #8
 800d752:	799b      	ldrb	r3, [r3, #6]
 800d754:	2b01      	cmp	r3, #1
 800d756:	f000 8082 	beq.w	800d85e <digitalWrite+0x136>
	|| PIN_MAP[pin].pin_mode == INPUT_PULLUP|| PIN_MAP[pin].pin_mode == INPUT_PULLDOWN
 800d75a:	88fa      	ldrh	r2, [r7, #6]
 800d75c:	f240 036c 	movw	r3, #108	; 0x6c
 800d760:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d764:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d768:	189b      	adds	r3, r3, r2
 800d76a:	f103 0308 	add.w	r3, r3, #8
 800d76e:	799b      	ldrb	r3, [r3, #6]
 800d770:	2b02      	cmp	r3, #2
 800d772:	d074      	beq.n	800d85e <digitalWrite+0x136>
 800d774:	88fa      	ldrh	r2, [r7, #6]
 800d776:	f240 036c 	movw	r3, #108	; 0x6c
 800d77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d77e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d782:	189b      	adds	r3, r3, r2
 800d784:	f103 0308 	add.w	r3, r3, #8
 800d788:	799b      	ldrb	r3, [r3, #6]
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	d067      	beq.n	800d85e <digitalWrite+0x136>
	|| PIN_MAP[pin].pin_mode == AN_INPUT || PIN_MAP[pin].pin_mode == NONE)
 800d78e:	88fa      	ldrh	r2, [r7, #6]
 800d790:	f240 036c 	movw	r3, #108	; 0x6c
 800d794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d798:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d79c:	189b      	adds	r3, r3, r2
 800d79e:	f103 0308 	add.w	r3, r3, #8
 800d7a2:	799b      	ldrb	r3, [r3, #6]
 800d7a4:	2b05      	cmp	r3, #5
 800d7a6:	d05a      	beq.n	800d85e <digitalWrite+0x136>
 800d7a8:	88fa      	ldrh	r2, [r7, #6]
 800d7aa:	f240 036c 	movw	r3, #108	; 0x6c
 800d7ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7b2:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d7b6:	189b      	adds	r3, r3, r2
 800d7b8:	f103 0308 	add.w	r3, r3, #8
 800d7bc:	799b      	ldrb	r3, [r3, #6]
 800d7be:	2bff      	cmp	r3, #255	; 0xff
 800d7c0:	d04d      	beq.n	800d85e <digitalWrite+0x136>
	{
		return;
	}

	// Serial1 safety check
	if (serial1_enabled == true && (pin == RX || pin == TX))
 800d7c2:	f240 7358 	movw	r3, #1880	; 0x758
 800d7c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d105      	bne.n	800d7dc <digitalWrite+0xb4>
 800d7d0:	88fb      	ldrh	r3, [r7, #6]
 800d7d2:	2b12      	cmp	r3, #18
 800d7d4:	d045      	beq.n	800d862 <digitalWrite+0x13a>
 800d7d6:	88fb      	ldrh	r3, [r7, #6]
 800d7d8:	2b13      	cmp	r3, #19
 800d7da:	d042      	beq.n	800d862 <digitalWrite+0x13a>
	{
		return;
	}

	//If the pin is used by analogWrite, we need to change the mode
	if(PIN_MAP[pin].pin_mode == AF_OUTPUT)
 800d7dc:	88fa      	ldrh	r2, [r7, #6]
 800d7de:	f240 036c 	movw	r3, #108	; 0x6c
 800d7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d7e6:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d7ea:	189b      	adds	r3, r3, r2
 800d7ec:	f103 0308 	add.w	r3, r3, #8
 800d7f0:	799b      	ldrb	r3, [r3, #6]
 800d7f2:	2b04      	cmp	r3, #4
 800d7f4:	d105      	bne.n	800d802 <digitalWrite+0xda>
	{
		pinMode(pin, OUTPUT);
 800d7f6:	88fb      	ldrh	r3, [r7, #6]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f04f 0100 	mov.w	r1, #0
 800d7fe:	f7ff feb9 	bl	800d574 <pinMode>
	}

	if (value == HIGH)
 800d802:	797b      	ldrb	r3, [r7, #5]
 800d804:	2b01      	cmp	r3, #1
 800d806:	d113      	bne.n	800d830 <digitalWrite+0x108>
	{
		PIN_MAP[pin].gpio_peripheral->BSRR = PIN_MAP[pin].gpio_pin;
 800d808:	88fa      	ldrh	r2, [r7, #6]
 800d80a:	f240 036c 	movw	r3, #108	; 0x6c
 800d80e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d812:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d816:	189b      	adds	r3, r3, r2
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	88f9      	ldrh	r1, [r7, #6]
 800d81c:	f240 036c 	movw	r3, #108	; 0x6c
 800d820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d824:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800d828:	185b      	adds	r3, r3, r1
 800d82a:	889b      	ldrh	r3, [r3, #4]
 800d82c:	6113      	str	r3, [r2, #16]
 800d82e:	e019      	b.n	800d864 <digitalWrite+0x13c>
	}
	else if (value == LOW)
 800d830:	797b      	ldrb	r3, [r7, #5]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d116      	bne.n	800d864 <digitalWrite+0x13c>
	{
		PIN_MAP[pin].gpio_peripheral->BRR = PIN_MAP[pin].gpio_pin;
 800d836:	88fa      	ldrh	r2, [r7, #6]
 800d838:	f240 036c 	movw	r3, #108	; 0x6c
 800d83c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d840:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d844:	189b      	adds	r3, r3, r2
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	88f9      	ldrh	r1, [r7, #6]
 800d84a:	f240 036c 	movw	r3, #108	; 0x6c
 800d84e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d852:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800d856:	185b      	adds	r3, r3, r1
 800d858:	889b      	ldrh	r3, [r3, #4]
 800d85a:	6153      	str	r3, [r2, #20]
 800d85c:	e002      	b.n	800d864 <digitalWrite+0x13c>
{
	if (pin >= TOTAL_PINS || PIN_MAP[pin].pin_mode == INPUT
	|| PIN_MAP[pin].pin_mode == INPUT_PULLUP|| PIN_MAP[pin].pin_mode == INPUT_PULLDOWN
	|| PIN_MAP[pin].pin_mode == AN_INPUT || PIN_MAP[pin].pin_mode == NONE)
	{
		return;
 800d85e:	bf00      	nop
 800d860:	e000      	b.n	800d864 <digitalWrite+0x13c>
	}

	// Serial1 safety check
	if (serial1_enabled == true && (pin == RX || pin == TX))
	{
		return;
 800d862:	bf00      	nop
	}
	else if (value == LOW)
	{
		PIN_MAP[pin].gpio_peripheral->BRR = PIN_MAP[pin].gpio_pin;
	}
}
 800d864:	f107 0708 	add.w	r7, r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <delay>:
 * @brief This should block for a certain number of milliseconds.
 *        There are a number of ways to implement this, but I borrowed the one that Wiring/Arduino uses;
 *        Using the millis() function to check if a certain amount of time has passed.
 */
void delay(uint32_t ms)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
	//uint32_t start = millis();
	//while(millis() - start < ms);
	//OR
	//Use the Delay() from main.c
	Delay(ms);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7fe ff11 	bl	800c69c <Delay>
}
 800d87a:	f107 0708 	add.w	r7, r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop

0800d884 <serial_begin>:
	 : "r0");
	 */
}

void serial_begin(uint32_t baudRate)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
	USB_USART_Init(baudRate);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7fe fc05 	bl	800c09c <USB_USART_Init>
}
 800d892:	f107 0708 	add.w	r7, r7, #8
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop

0800d89c <serial_end>:

void serial_end(void)
{
 800d89c:	b480      	push	{r7}
 800d89e:	af00      	add	r7, sp, #0
	//To Do
}
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bc80      	pop	{r7}
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop

0800d8a8 <serial_available>:

uint8_t serial_available(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0
	return USB_USART_Available_Data();
 800d8ac:	f7fe fc0c 	bl	800c0c8 <USB_USART_Available_Data>
 800d8b0:	4603      	mov	r3, r0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop

0800d8b8 <serial_read>:

int32_t serial_read(void)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	af00      	add	r7, sp, #0
	return USB_USART_Receive_Data();
 800d8bc:	f7fe fc2a 	bl	800c114 <USB_USART_Receive_Data>
 800d8c0:	4603      	mov	r3, r0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop

0800d8c8 <serial_write>:

void serial_write(uint8_t Data)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	71fb      	strb	r3, [r7, #7]
	USB_USART_Send_Data(Data);
 800d8d2:	79fb      	ldrb	r3, [r7, #7]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fe fc61 	bl	800c19c <USB_USART_Send_Data>
}
 800d8da:	f107 0708 	add.w	r7, r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop

0800d8e4 <serial_print>:

void serial_print(const char * str)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
	while (*str)
 800d8ec:	e008      	b.n	800d900 <serial_print+0x1c>
	{
		serial_write(*str++);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	f102 0201 	add.w	r2, r2, #1
 800d8f8:	607a      	str	r2, [r7, #4]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7ff ffe4 	bl	800d8c8 <serial_write>
	USB_USART_Send_Data(Data);
}

void serial_print(const char * str)
{
	while (*str)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1f2      	bne.n	800d8ee <serial_print+0xa>
	{
		serial_write(*str++);
	}
}
 800d908:	f107 0708 	add.w	r7, r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <serial_println>:

void serial_println(const char * str)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
	serial_print(str);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ffe3 	bl	800d8e4 <serial_print>
	serial_print("\r\n");
 800d91e:	f244 20dc 	movw	r0, #17116	; 0x42dc
 800d922:	f6c0 0001 	movt	r0, #2049	; 0x801
 800d926:	f7ff ffdd 	bl	800d8e4 <serial_print>
}
 800d92a:	f107 0708 	add.w	r7, r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop

0800d934 <serial1_begin>:

void serial1_begin(uint32_t baudRate)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
	USART_InitTypeDef USART_InitStructure;

	// AFIO clock enable
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 800d93c:	f04f 0001 	mov.w	r0, #1
 800d940:	f04f 0101 	mov.w	r1, #1
 800d944:	f003 fd84 	bl	8011450 <RCC_APB2PeriphClockCmd>

	// Enable USART Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800d948:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d94c:	f04f 0101 	mov.w	r1, #1
 800d950:	f003 fda8 	bl	80114a4 <RCC_APB1PeriphClockCmd>

	// Configure USART Rx as input floating
	pinMode(RX, INPUT);
 800d954:	f04f 0012 	mov.w	r0, #18
 800d958:	f04f 0101 	mov.w	r1, #1
 800d95c:	f7ff fe0a 	bl	800d574 <pinMode>

	// Configure USART Tx as alternate function push-pull
	pinMode(TX, AF_OUTPUT);
 800d960:	f04f 0013 	mov.w	r0, #19
 800d964:	f04f 0104 	mov.w	r1, #4
 800d968:	f7ff fe04 	bl	800d574 <pinMode>
	// - Word Length = 8 Bits
	// - One Stop Bit
	// - No parity
	// - Hardware flow control disabled (RTS and CTS signals)
	// - Receive and transmit enabled
	USART_InitStructure.USART_BaudRate = baudRate;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800d970:	f04f 0300 	mov.w	r3, #0
 800d974:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800d976:	f04f 0300 	mov.w	r3, #0
 800d97a:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 800d97c:	f04f 0300 	mov.w	r3, #0
 800d980:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800d982:	f04f 0300 	mov.w	r3, #0
 800d986:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800d988:	f04f 030c 	mov.w	r3, #12
 800d98c:	827b      	strh	r3, [r7, #18]

	// Configure USART
	USART_Init(USART2, &USART_InitStructure);
 800d98e:	f107 0308 	add.w	r3, r7, #8
 800d992:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800d996:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800d99a:	4619      	mov	r1, r3
 800d99c:	f003 ffa2 	bl	80118e4 <USART_Init>

	// Enable the USART
	USART_Cmd(USART2, ENABLE);
 800d9a0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800d9a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800d9a8:	f04f 0101 	mov.w	r1, #1
 800d9ac:	f004 f870 	bl	8011a90 <USART_Cmd>

	serial1_enabled = true;
 800d9b0:	f240 7358 	movw	r3, #1880	; 0x758
 800d9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9b8:	f04f 0201 	mov.w	r2, #1
 800d9bc:	701a      	strb	r2, [r3, #0]
}
 800d9be:	f107 0718 	add.w	r7, r7, #24
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop

0800d9c8 <serial1_end>:

void serial1_end(void)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	af00      	add	r7, sp, #0
	// Disable the USART
	USART_Cmd(USART2, DISABLE);
 800d9cc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800d9d0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800d9d4:	f04f 0100 	mov.w	r1, #0
 800d9d8:	f004 f85a 	bl	8011a90 <USART_Cmd>

	serial1_enabled = false;
 800d9dc:	f240 7358 	movw	r3, #1880	; 0x758
 800d9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d9e4:	f04f 0200 	mov.w	r2, #0
 800d9e8:	701a      	strb	r2, [r3, #0]
}
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <serial1_available>:

uint8_t serial1_available(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	af00      	add	r7, sp, #0
	// Check if the USART Receive Data Register is not empty
	if(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) != RESET)
 800d9f0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800d9f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800d9f8:	f04f 0120 	mov.w	r1, #32
 800d9fc:	f004 f88e 	bl	8011b1c <USART_GetFlagStatus>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d002      	beq.n	800da0c <serial1_available+0x20>
		return 1;
 800da06:	f04f 0301 	mov.w	r3, #1
 800da0a:	e001      	b.n	800da10 <serial1_available+0x24>
	else
		return 0;
 800da0c:	f04f 0300 	mov.w	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	bd80      	pop	{r7, pc}

0800da14 <serial1_read>:

int32_t serial1_read(void)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	af00      	add	r7, sp, #0
	// Return the received byte
	return USART_ReceiveData(USART2);
 800da18:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800da1c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800da20:	f004 f86a 	bl	8011af8 <USART_ReceiveData>
 800da24:	4603      	mov	r3, r0
}
 800da26:	4618      	mov	r0, r3
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop

0800da2c <serial1_write>:

void serial1_write(uint8_t Data)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	71fb      	strb	r3, [r7, #7]
	// Send one byte from USART
	USART_SendData(USART2, Data);
 800da36:	79fb      	ldrb	r3, [r7, #7]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800da3e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800da42:	4619      	mov	r1, r3
 800da44:	f004 f844 	bl	8011ad0 <USART_SendData>

	// Loop until USART DR register is empty
	while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 800da48:	bf00      	nop
 800da4a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800da4e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800da52:	f04f 0180 	mov.w	r1, #128	; 0x80
 800da56:	f004 f861 	bl	8011b1c <USART_GetFlagStatus>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d0f4      	beq.n	800da4a <serial1_write+0x1e>
	{
	}
}
 800da60:	f107 0708 	add.w	r7, r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <serial1_print>:

void serial1_print(const char * str)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
	while (*str)
 800da70:	e008      	b.n	800da84 <serial1_print+0x1c>
	{
		serial1_write(*str++);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	f102 0201 	add.w	r2, r2, #1
 800da7c:	607a      	str	r2, [r7, #4]
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff ffd4 	bl	800da2c <serial1_write>
	}
}

void serial1_print(const char * str)
{
	while (*str)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1f2      	bne.n	800da72 <serial1_print+0xa>
	{
		serial1_write(*str++);
	}
}
 800da8c:	f107 0708 	add.w	r7, r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <serial1_println>:

void serial1_println(const char * str)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
	serial1_print(str);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ffe3 	bl	800da68 <serial1_print>
	serial1_print("\r\n");
 800daa2:	f244 20dc 	movw	r0, #17116	; 0x42dc
 800daa6:	f6c0 0001 	movt	r0, #2049	; 0x801
 800daaa:	f7ff ffdd 	bl	800da68 <serial1_print>
}
 800daae:	f107 0708 	add.w	r7, r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop

0800dab8 <NMI_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NMI_Handler(void)
{
 800dab8:	b480      	push	{r7}
 800daba:	af00      	add	r7, sp, #0
}
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bc80      	pop	{r7}
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop

0800dac4 <HardFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(void)
{
 800dac4:	b480      	push	{r7}
 800dac6:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
	{
	}
 800dac8:	e7fe      	b.n	800dac8 <HardFault_Handler+0x4>
 800daca:	bf00      	nop

0800dacc <MemManage_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void MemManage_Handler(void)
{
 800dacc:	b480      	push	{r7}
 800dace:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
	{
	}
 800dad0:	e7fe      	b.n	800dad0 <MemManage_Handler+0x4>
 800dad2:	bf00      	nop

0800dad4 <BusFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void BusFault_Handler(void)
{
 800dad4:	b480      	push	{r7}
 800dad6:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
	{
	}
 800dad8:	e7fe      	b.n	800dad8 <BusFault_Handler+0x4>
 800dada:	bf00      	nop

0800dadc <UsageFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void UsageFault_Handler(void)
{
 800dadc:	b480      	push	{r7}
 800dade:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
	{
	}
 800dae0:	e7fe      	b.n	800dae0 <UsageFault_Handler+0x4>
 800dae2:	bf00      	nop

0800dae4 <SVC_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SVC_Handler(void)
{
 800dae4:	b480      	push	{r7}
 800dae6:	af00      	add	r7, sp, #0
}
 800dae8:	46bd      	mov	sp, r7
 800daea:	bc80      	pop	{r7}
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop

0800daf0 <DebugMon_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DebugMon_Handler(void)
{
 800daf0:	b480      	push	{r7}
 800daf2:	af00      	add	r7, sp, #0
}
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bc80      	pop	{r7}
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop

0800dafc <PendSV_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PendSV_Handler(void)
{
 800dafc:	b480      	push	{r7}
 800dafe:	af00      	add	r7, sp, #0
}
 800db00:	46bd      	mov	sp, r7
 800db02:	bc80      	pop	{r7}
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop

0800db08 <SysTick_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SysTick_Handler(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
	Timing_Decrement();
 800db0c:	f7fe fdde 	bl	800c6cc <Timing_Decrement>
}
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop

0800db14 <DMA1_Channel3_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	af00      	add	r7, sp, #0
	SPI_DMA_IntHandler();
 800db18:	f7fd fbbc 	bl	800b294 <SPI_DMA_IntHandler>
}
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop

0800db20 <DMA1_Channel5_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	af00      	add	r7, sp, #0
	SPI_DMA_IntHandler();
 800db24:	f7fd fbb6 	bl	800b294 <SPI_DMA_IntHandler>
}
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop

0800db2c <EXTI0_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI0_IRQHandler(void)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(CC3000_WIFI_INT_EXTI_LINE ) != RESET)
 800db30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800db34:	f003 f818 	bl	8010b68 <EXTI_GetITStatus>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d005      	beq.n	800db4a <EXTI0_IRQHandler+0x1e>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(CC3000_WIFI_INT_EXTI_LINE );
 800db3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800db42:	f003 f801 	bl	8010b48 <EXTI_ClearFlag>

		SPI_EXTI_IntHandler();
 800db46:	f7fd fc71 	bl	800b42c <SPI_EXTI_IntHandler>
	}

	if (EXTI_GetITStatus(BUTTON1_EXTI_LINE ) != RESET)
 800db4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800db4e:	f003 f80b 	bl	8010b68 <EXTI_GetITStatus>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d011      	beq.n	800db7c <EXTI0_IRQHandler+0x50>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(BUTTON1_EXTI_LINE );
 800db58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800db5c:	f002 fff4 	bl	8010b48 <EXTI_ClearFlag>

		/* Disable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, DISABLE);
 800db60:	f04f 0000 	mov.w	r0, #0
 800db64:	f04f 0100 	mov.w	r1, #0
 800db68:	f7fd ffaa 	bl	800bac0 <BUTTON_EXTI_Config>

	    /* DEBOUNCE_TIMER Enable Counter */
	    TIM_Cmd(DEBOUNCE_TIMER, ENABLE);
 800db6c:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800db70:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800db74:	f04f 0101 	mov.w	r1, #1
 800db78:	f003 fe12 	bl	80117a0 <TIM_Cmd>
	}
}
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop

0800db80 <EXTI15_10_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(CC3000_WIFI_INT_EXTI_LINE ) != RESET)
 800db84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800db88:	f002 ffee 	bl	8010b68 <EXTI_GetITStatus>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d005      	beq.n	800db9e <EXTI15_10_IRQHandler+0x1e>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(CC3000_WIFI_INT_EXTI_LINE );
 800db92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800db96:	f002 ffd7 	bl	8010b48 <EXTI_ClearFlag>

		SPI_EXTI_IntHandler();
 800db9a:	f7fd fc47 	bl	800b42c <SPI_EXTI_IntHandler>
	}

	if (EXTI_GetITStatus(BUTTON1_EXTI_LINE ) != RESET)
 800db9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800dba2:	f002 ffe1 	bl	8010b68 <EXTI_GetITStatus>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d011      	beq.n	800dbd0 <EXTI15_10_IRQHandler+0x50>
	{
		/* Clear the EXTI line pending flag */
		EXTI_ClearFlag(BUTTON1_EXTI_LINE );
 800dbac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800dbb0:	f002 ffca 	bl	8010b48 <EXTI_ClearFlag>

		/* Disable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, DISABLE);
 800dbb4:	f04f 0000 	mov.w	r0, #0
 800dbb8:	f04f 0100 	mov.w	r1, #0
 800dbbc:	f7fd ff80 	bl	800bac0 <BUTTON_EXTI_Config>

	    /* DEBOUNCE_TIMER Enable Counter */
	    TIM_Cmd(DEBOUNCE_TIMER, ENABLE);
 800dbc0:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800dbc4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800dbc8:	f04f 0101 	mov.w	r1, #1
 800dbcc:	f003 fde8 	bl	80117a0 <TIM_Cmd>
	}
}
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop

0800dbd4 <TIM1_UP_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG) != RESET)
 800dbd8:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800dbdc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800dbe0:	f04f 0101 	mov.w	r1, #1
 800dbe4:	f003 fe3c 	bl	8011860 <TIM_GetITStatus>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d023      	beq.n	800dc36 <TIM1_UP_IRQHandler+0x62>
	{
		TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);
 800dbee:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 800dbf2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800dbf6:	f04f 0101 	mov.w	r1, #1
 800dbfa:	f003 fe61 	bl	80118c0 <TIM_ClearITPendingBit>

		if (BUTTON_GetState(BUTTON1) == BUTTON1_PRESSED)
 800dbfe:	f04f 0000 	mov.w	r0, #0
 800dc02:	f7fd ff9f 	bl	800bb44 <BUTTON_GetState>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d107      	bne.n	800dc1c <TIM1_UP_IRQHandler+0x48>
			BUTTON_DEBOUNCED[BUTTON1] = 0x01;
 800dc0c:	f240 7338 	movw	r3, #1848	; 0x738
 800dc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc14:	f04f 0201 	mov.w	r2, #1
 800dc18:	701a      	strb	r2, [r3, #0]
 800dc1a:	e006      	b.n	800dc2a <TIM1_UP_IRQHandler+0x56>
		else
			BUTTON_DEBOUNCED[BUTTON1] = 0x00;
 800dc1c:	f240 7338 	movw	r3, #1848	; 0x738
 800dc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc24:	f04f 0200 	mov.w	r2, #0
 800dc28:	701a      	strb	r2, [r3, #0]

		/* Enable BUTTON1 Interrupts */
		BUTTON_EXTI_Config(BUTTON1, ENABLE);
 800dc2a:	f04f 0000 	mov.w	r0, #0
 800dc2e:	f04f 0101 	mov.w	r1, #1
 800dc32:	f7fd ff45 	bl	800bac0 <BUTTON_EXTI_Config>
	}
}
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USB_LP_CAN1_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
	USB_Istr();
 800dc3c:	f000 fa02 	bl	800e044 <USB_Istr>
}
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop

0800dc44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800dc48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dc50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dc58:	6812      	ldr	r2, [r2, #0]
 800dc5a:	f042 0201 	orr.w	r2, r2, #1
 800dc5e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800dc60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dc68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dc70:	6859      	ldr	r1, [r3, #4]
 800dc72:	f04f 0300 	mov.w	r3, #0
 800dc76:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 800dc7a:	400b      	ands	r3, r1
 800dc7c:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800dc7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dc86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dc8e:	6812      	ldr	r2, [r2, #0]
 800dc90:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800dc94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dc98:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800dc9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dca2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dca6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dcaa:	6812      	ldr	r2, [r2, #0]
 800dcac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dcb0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800dcb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dcba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dcbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dcc2:	6852      	ldr	r2, [r2, #4]
 800dcc4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800dcc8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800dcca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dcd2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800dcd6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800dcd8:	f000 f808 	bl	800dcec <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800dcdc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800dce0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800dce4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dce8:	609a      	str	r2, [r3, #8]
#endif 
}
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800dcf0:	f000 f802 	bl	800dcf8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop

0800dcf8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800dcfe:	f04f 0300 	mov.w	r3, #0
 800dd02:	607b      	str	r3, [r7, #4]
 800dd04:	f04f 0300 	mov.w	r3, #0
 800dd08:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800dd0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dd12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dd16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dd1a:	6812      	ldr	r2, [r2, #0]
 800dd1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dd20:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800dd22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd30:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f103 0301 	add.w	r3, r3, #1
 800dd38:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d103      	bne.n	800dd48 <SetSysClockTo72+0x50>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800dd46:	d1ec      	bne.n	800dd22 <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800dd48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800dd5a:	f04f 0301 	mov.w	r3, #1
 800dd5e:	603b      	str	r3, [r7, #0]
 800dd60:	e002      	b.n	800dd68 <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800dd62:	f04f 0300 	mov.w	r3, #0
 800dd66:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	f040 8094 	bne.w	800de98 <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800dd70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dd78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dd7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dd80:	6812      	ldr	r2, [r2, #0]
 800dd82:	f042 0210 	orr.w	r2, r2, #16
 800dd86:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800dd88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dd90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800dd94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dd98:	6812      	ldr	r2, [r2, #0]
 800dd9a:	f022 0203 	bic.w	r2, r2, #3
 800dd9e:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800dda0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dda4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dda8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ddac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ddb0:	6812      	ldr	r2, [r2, #0]
 800ddb2:	f042 0202 	orr.w	r2, r2, #2
 800ddb6:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800ddb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ddc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ddc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ddc8:	6852      	ldr	r2, [r2, #4]
 800ddca:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800ddcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ddd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ddd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800dddc:	6852      	ldr	r2, [r2, #4]
 800ddde:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800dde0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dde4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800dde8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ddec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ddf0:	6852      	ldr	r2, [r2, #4]
 800ddf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ddf6:	605a      	str	r2, [r3, #4]

    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800ddf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800de00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800de04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800de08:	6852      	ldr	r2, [r2, #4]
 800de0a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800de0e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800de10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800de18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800de1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800de20:	6852      	ldr	r2, [r2, #4]
 800de22:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800de26:	605a      	str	r2, [r3, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800de28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800de30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800de34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800de38:	6812      	ldr	r2, [r2, #0]
 800de3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800de3e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800de40:	bf00      	nop
 800de42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de50:	2b00      	cmp	r3, #0
 800de52:	d0f6      	beq.n	800de42 <SetSysClockTo72+0x14a>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800de54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800de5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800de60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800de64:	6852      	ldr	r2, [r2, #4]
 800de66:	f022 0203 	bic.w	r2, r2, #3
 800de6a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800de6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800de74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800de78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800de7c:	6852      	ldr	r2, [r2, #4]
 800de7e:	f042 0202 	orr.w	r2, r2, #2
 800de82:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800de84:	bf00      	nop
 800de86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	f003 030c 	and.w	r3, r3, #12
 800de94:	2b08      	cmp	r3, #8
 800de96:	d1f6      	bne.n	800de86 <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800de98:	f107 070c 	add.w	r7, r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bc80      	pop	{r7}
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop

0800dea4 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 800deaa:	f240 734c 	movw	r3, #1868	; 0x74c
 800deae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d171      	bne.n	800df9c <EP1_IN_Callback+0xf8>
  {
    if (USART_Rx_length == 0) 
 800deb8:	f240 7344 	movw	r3, #1860	; 0x744
 800debc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d107      	bne.n	800ded6 <EP1_IN_Callback+0x32>
    {
      USB_Tx_State = 0;
 800dec6:	f240 734c 	movw	r3, #1868	; 0x74c
 800deca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dece:	f04f 0200 	mov.w	r2, #0
 800ded2:	701a      	strb	r2, [r3, #0]
 800ded4:	e062      	b.n	800df9c <EP1_IN_Callback+0xf8>
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 800ded6:	f240 7344 	movw	r3, #1860	; 0x744
 800deda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b40      	cmp	r3, #64	; 0x40
 800dee2:	d921      	bls.n	800df28 <EP1_IN_Callback+0x84>
        USB_Tx_ptr = USART_Rx_ptr_out;
 800dee4:	f240 7340 	movw	r3, #1856	; 0x740
 800dee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	80fb      	strh	r3, [r7, #6]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 800def0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800def4:	80bb      	strh	r3, [r7, #4]
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 800def6:	f240 7340 	movw	r3, #1856	; 0x740
 800defa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800df04:	f240 7340 	movw	r3, #1856	; 0x740
 800df08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df0c:	601a      	str	r2, [r3, #0]
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 800df0e:	f240 7344 	movw	r3, #1860	; 0x744
 800df12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800df1c:	f240 7344 	movw	r3, #1860	; 0x744
 800df20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	e022      	b.n	800df6e <EP1_IN_Callback+0xca>
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 800df28:	f240 7340 	movw	r3, #1856	; 0x740
 800df2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	80fb      	strh	r3, [r7, #6]
        USB_Tx_length = USART_Rx_length;
 800df34:	f240 7344 	movw	r3, #1860	; 0x744
 800df38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	80bb      	strh	r3, [r7, #4]
        
        USART_Rx_ptr_out += USART_Rx_length;
 800df40:	f240 7340 	movw	r3, #1856	; 0x740
 800df44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	f240 7344 	movw	r3, #1860	; 0x744
 800df4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	18d2      	adds	r2, r2, r3
 800df56:	f240 7340 	movw	r3, #1856	; 0x740
 800df5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df5e:	601a      	str	r2, [r3, #0]
        USART_Rx_length = 0;
 800df60:	f240 7344 	movw	r3, #1860	; 0x744
 800df64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df68:	f04f 0200 	mov.w	r2, #0
 800df6c:	601a      	str	r2, [r3, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800df6e:	88fa      	ldrh	r2, [r7, #6]
 800df70:	f640 73c0 	movw	r3, #4032	; 0xfc0
 800df74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800df78:	18d2      	adds	r2, r2, r3
 800df7a:	88bb      	ldrh	r3, [r7, #4]
 800df7c:	4610      	mov	r0, r2
 800df7e:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800df82:	461a      	mov	r2, r3
 800df84:	f001 ff64 	bl	800fe50 <UserToPMABufferCopy>
      SetEPTxCount(ENDP1, USB_Tx_length);
 800df88:	88bb      	ldrh	r3, [r7, #4]
 800df8a:	f04f 0001 	mov.w	r0, #1
 800df8e:	4619      	mov	r1, r3
 800df90:	f002 f9f2 	bl	8010378 <SetEPTxCount>
      SetEPTxValid(ENDP1); 
 800df94:	f04f 0001 	mov.w	r0, #1
 800df98:	f002 f882 	bl	80100a0 <SetEPTxValid>
    }
  }
}
 800df9c:	f107 0708 	add.w	r7, r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0
  USB_Rx_State = 1;
 800dfa8:	f240 734d 	movw	r3, #1869	; 0x74d
 800dfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfb0:	f04f 0201 	mov.w	r2, #1
 800dfb4:	701a      	strb	r2, [r3, #0]

  USB_Rx_ptr = 0;
 800dfb6:	f240 734a 	movw	r3, #1866	; 0x74a
 800dfba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfbe:	f04f 0200 	mov.w	r2, #0
 800dfc2:	801a      	strh	r2, [r3, #0]

  /* Get the number of received data on the selected Endpoint */
  USB_Rx_length = GetEPRxCount(ENDP3);
 800dfc4:	f04f 0003 	mov.w	r0, #3
 800dfc8:	f002 fa42 	bl	8010450 <GetEPRxCount>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	461a      	mov	r2, r3
 800dfd0:	f240 7348 	movw	r3, #1864	; 0x748
 800dfd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfd8:	801a      	strh	r2, [r3, #0]

  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(USB_Rx_Buffer, ENDP3_RXADDR, USB_Rx_length);
 800dfda:	f240 7348 	movw	r3, #1864	; 0x748
 800dfde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dfe2:	881b      	ldrh	r3, [r3, #0]
 800dfe4:	f640 7080 	movw	r0, #3968	; 0xf80
 800dfe8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800dfec:	f44f 7188 	mov.w	r1, #272	; 0x110
 800dff0:	461a      	mov	r2, r3
 800dff2:	f001 ff71 	bl	800fed8 <PMAToUserBufferCopy>

  /* USB data should be immediately processed, this allow next USB traffic being
  NAKed till the end of the processing */
}
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	af00      	add	r7, sp, #0
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 800dffc:	f240 7364 	movw	r3, #1892	; 0x764
 800e000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b05      	cmp	r3, #5
 800e008:	d11b      	bne.n	800e042 <SOF_Callback+0x4a>
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 800e00a:	f240 735c 	movw	r3, #1884	; 0x75c
 800e00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b05      	cmp	r3, #5
 800e016:	bf14      	ite	ne
 800e018:	2200      	movne	r2, #0
 800e01a:	2201      	moveq	r2, #1
 800e01c:	b2d2      	uxtb	r2, r2
 800e01e:	f103 0101 	add.w	r1, r3, #1
 800e022:	f240 735c 	movw	r3, #1884	; 0x75c
 800e026:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e02a:	6019      	str	r1, [r3, #0]
 800e02c:	2a00      	cmp	r2, #0
 800e02e:	d008      	beq.n	800e042 <SOF_Callback+0x4a>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 800e030:	f240 735c 	movw	r3, #1884	; 0x75c
 800e034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e038:	f04f 0200 	mov.w	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 800e03e:	f7fe f8e5 	bl	800c20c <Handle_USBAsynchXfer>
    }
  }  
}
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USB_Istr>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	af00      	add	r7, sp, #0

  wIstr = _GetISTR();
 800e048:	f645 4344 	movw	r3, #23620	; 0x5c44
 800e04c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	b29a      	uxth	r2, r3
 800e054:	f241 3314 	movw	r3, #4884	; 0x1314
 800e058:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e05c:	801a      	strh	r2, [r3, #0]

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800e05e:	f241 3314 	movw	r3, #4884	; 0x1314
 800e062:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e066:	881b      	ldrh	r3, [r3, #0]
 800e068:	b29b      	uxth	r3, r3
 800e06a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800e06e:	f241 334c 	movw	r3, #4940	; 0x134c
 800e072:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	4013      	ands	r3, r2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d016      	beq.n	800e0ac <USB_Istr+0x68>
  {
    _SetISTR((uint16_t)CLR_SOF);
 800e07e:	f645 4344 	movw	r3, #23620	; 0x5c44
 800e082:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e086:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800e08a:	601a      	str	r2, [r3, #0]
    bIntPackSOF++;
 800e08c:	f240 7360 	movw	r3, #1888	; 0x760
 800e090:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	b2db      	uxtb	r3, r3
 800e098:	f103 0301 	add.w	r3, r3, #1
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	f240 7360 	movw	r3, #1888	; 0x760
 800e0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0a6:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 800e0a8:	f7ff ffa6 	bl	800dff8 <SOF_Callback>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800e0ac:	f241 3314 	movw	r3, #4884	; 0x1314
 800e0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0b4:	881b      	ldrh	r3, [r3, #0]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800e0bc:	f241 334c 	movw	r3, #4940	; 0x134c
 800e0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d001      	beq.n	800e0d0 <USB_Istr+0x8c>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800e0cc:	f001 fcac 	bl	800fa28 <CTR_LP>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800e0d0:	f241 3314 	movw	r3, #4884	; 0x1314
 800e0d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800e0e0:	f241 334c 	movw	r3, #4940	; 0x134c
 800e0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	4013      	ands	r3, r2
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00c      	beq.n	800e10a <USB_Istr+0xc6>
  {
    _SetISTR((uint16_t)CLR_RESET);
 800e0f0:	f645 4344 	movw	r3, #23620	; 0x5c44
 800e0f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e0f8:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800e0fc:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 800e0fe:	f240 2368 	movw	r3, #616	; 0x268
 800e102:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <Virtual_Com_Port_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	af00      	add	r7, sp, #0

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800e110:	f7fe f942 	bl	800c398 <Get_SerialNum>

  pInformation->Current_Configuration = 0;
 800e114:	f241 3348 	movw	r3, #4936	; 0x1348
 800e118:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f04f 0200 	mov.w	r2, #0
 800e122:	729a      	strb	r2, [r3, #10]

  /* Connect the device */
  PowerOn();
 800e124:	f000 fa0c 	bl	800e540 <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 800e128:	f002 f9d0 	bl	80104cc <USB_SIL_Init>

  bDeviceState = UNCONNECTED;
 800e12c:	f240 7364 	movw	r3, #1892	; 0x764
 800e130:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e134:	f04f 0200 	mov.w	r2, #0
 800e138:	601a      	str	r2, [r3, #0]
}
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <Virtual_Com_Port_Reset>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	af00      	add	r7, sp, #0
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800e140:	f241 3348 	movw	r3, #4936	; 0x1348
 800e144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f04f 0200 	mov.w	r2, #0
 800e14e:	729a      	strb	r2, [r3, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800e150:	f241 3348 	movw	r3, #4936	; 0x1348
 800e154:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	f244 23f4 	movw	r3, #17140	; 0x42f4
 800e15e:	f6c0 0301 	movt	r3, #2049	; 0x801
 800e162:	79db      	ldrb	r3, [r3, #7]
 800e164:	7253      	strb	r3, [r2, #9]

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 800e166:	f241 3348 	movw	r3, #4936	; 0x1348
 800e16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f04f 0200 	mov.w	r2, #0
 800e174:	72da      	strb	r2, [r3, #11]

  SetBTABLE(BTABLE_ADDRESS);
 800e176:	f04f 0000 	mov.w	r0, #0
 800e17a:	f001 fee3 	bl	800ff44 <SetBTABLE>

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800e17e:	f04f 0000 	mov.w	r0, #0
 800e182:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e186:	f001 fef1 	bl	800ff6c <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800e18a:	f04f 0000 	mov.w	r0, #0
 800e18e:	f04f 0110 	mov.w	r1, #16
 800e192:	f001 ff11 	bl	800ffb8 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800e196:	f04f 0000 	mov.w	r0, #0
 800e19a:	f04f 0140 	mov.w	r1, #64	; 0x40
 800e19e:	f002 f887 	bl	80102b0 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800e1a2:	f04f 0000 	mov.w	r0, #0
 800e1a6:	f04f 0180 	mov.w	r1, #128	; 0x80
 800e1aa:	f002 f85d 	bl	8010268 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800e1ae:	f04f 0000 	mov.w	r0, #0
 800e1b2:	f001 ffcd 	bl	8010150 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800e1b6:	f240 2368 	movw	r3, #616	; 0x268
 800e1ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e1be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e1c2:	f04f 0000 	mov.w	r0, #0
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	f002 f8f6 	bl	80103b8 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800e1cc:	f04f 0000 	mov.w	r0, #0
 800e1d0:	f001 ff92 	bl	80100f8 <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 800e1d4:	f04f 0001 	mov.w	r0, #1
 800e1d8:	f04f 0100 	mov.w	r1, #0
 800e1dc:	f001 fec6 	bl	800ff6c <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800e1e0:	f04f 0001 	mov.w	r0, #1
 800e1e4:	f04f 01c0 	mov.w	r1, #192	; 0xc0
 800e1e8:	f002 f83e 	bl	8010268 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800e1ec:	f04f 0001 	mov.w	r0, #1
 800e1f0:	f04f 0120 	mov.w	r1, #32
 800e1f4:	f001 fee0 	bl	800ffb8 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800e1f8:	f04f 0001 	mov.w	r0, #1
 800e1fc:	f04f 0100 	mov.w	r1, #0
 800e200:	f001 ff14 	bl	801002c <SetEPRxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 800e204:	f04f 0002 	mov.w	r0, #2
 800e208:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e20c:	f001 feae 	bl	800ff6c <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800e210:	f04f 0002 	mov.w	r0, #2
 800e214:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e218:	f002 f826 	bl	8010268 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800e21c:	f04f 0002 	mov.w	r0, #2
 800e220:	f04f 0100 	mov.w	r1, #0
 800e224:	f001 ff02 	bl	801002c <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800e228:	f04f 0002 	mov.w	r0, #2
 800e22c:	f04f 0120 	mov.w	r1, #32
 800e230:	f001 fec2 	bl	800ffb8 <SetEPTxStatus>

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 800e234:	f04f 0003 	mov.w	r0, #3
 800e238:	f04f 0100 	mov.w	r1, #0
 800e23c:	f001 fe96 	bl	800ff6c <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800e240:	f04f 0003 	mov.w	r0, #3
 800e244:	f44f 7188 	mov.w	r1, #272	; 0x110
 800e248:	f002 f832 	bl	80102b0 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800e24c:	f04f 0003 	mov.w	r0, #3
 800e250:	f04f 0140 	mov.w	r1, #64	; 0x40
 800e254:	f002 f8b0 	bl	80103b8 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800e258:	f04f 0003 	mov.w	r0, #3
 800e25c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800e260:	f001 fee4 	bl	801002c <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800e264:	f04f 0003 	mov.w	r0, #3
 800e268:	f04f 0100 	mov.w	r1, #0
 800e26c:	f001 fea4 	bl	800ffb8 <SetEPTxStatus>

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 800e270:	f04f 0000 	mov.w	r0, #0
 800e274:	f001 fb60 	bl	800f938 <SetDeviceAddress>
  
  bDeviceState = ATTACHED;
 800e278:	f240 7364 	movw	r3, #1892	; 0x764
 800e27c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e280:	f04f 0201 	mov.w	r2, #1
 800e284:	601a      	str	r2, [r3, #0]
}
 800e286:	bd80      	pop	{r7, pc}

0800e288 <Virtual_Com_Port_SetConfiguration>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
  DEVICE_INFO *pInfo = &Device_Info;
 800e28e:	f241 3328 	movw	r3, #4904	; 0x1328
 800e292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e296:	607b      	str	r3, [r7, #4]

  if (pInfo->Current_Configuration != 0)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	7a9b      	ldrb	r3, [r3, #10]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d006      	beq.n	800e2ae <Virtual_Com_Port_SetConfiguration+0x26>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800e2a0:	f240 7364 	movw	r3, #1892	; 0x764
 800e2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2a8:	f04f 0205 	mov.w	r2, #5
 800e2ac:	601a      	str	r2, [r3, #0]
  }
}
 800e2ae:	f107 070c 	add.w	r7, r7, #12
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bc80      	pop	{r7}
 800e2b6:	4770      	bx	lr

0800e2b8 <Virtual_Com_Port_SetDeviceAddress>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	af00      	add	r7, sp, #0
  bDeviceState = ADDRESSED;
 800e2bc:	f240 7364 	movw	r3, #1892	; 0x764
 800e2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2c4:	f04f 0204 	mov.w	r2, #4
 800e2c8:	601a      	str	r2, [r3, #0]
}
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bc80      	pop	{r7}
 800e2ce:	4770      	bx	lr

0800e2d0 <Virtual_Com_Port_Status_In>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	af00      	add	r7, sp, #0
  if (Request == SET_LINE_CODING)
 800e2d4:	f240 7361 	movw	r3, #1889	; 0x761
 800e2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	2b20      	cmp	r3, #32
 800e2e0:	d106      	bne.n	800e2f0 <Virtual_Com_Port_Status_In+0x20>
  {
    //Set Usart BaudRate here
    Request = 0;
 800e2e2:	f240 7361 	movw	r3, #1889	; 0x761
 800e2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e2ea:	f04f 0200 	mov.w	r2, #0
 800e2ee:	701a      	strb	r2, [r3, #0]
  }
}
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bc80      	pop	{r7}
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop

0800e2f8 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800e2f8:	b480      	push	{r7}
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bc80      	pop	{r7}
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop

0800e304 <Virtual_Com_Port_Data_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	4603      	mov	r3, r0
 800e30c:	71fb      	strb	r3, [r7, #7]
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;
 800e30e:	f04f 0300 	mov.w	r3, #0
 800e312:	60fb      	str	r3, [r7, #12]

  if (RequestNo == GET_LINE_CODING)
 800e314:	79fb      	ldrb	r3, [r7, #7]
 800e316:	2b21      	cmp	r3, #33	; 0x21
 800e318:	d10f      	bne.n	800e33a <Virtual_Com_Port_Data_Setup+0x36>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800e31a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e32a:	2b21      	cmp	r3, #33	; 0x21
 800e32c:	d11e      	bne.n	800e36c <Virtual_Com_Port_Data_Setup+0x68>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800e32e:	f24e 43c9 	movw	r3, #58569	; 0xe4c9
 800e332:	f6c0 0300 	movt	r3, #2048	; 0x800
 800e336:	60fb      	str	r3, [r7, #12]
 800e338:	e018      	b.n	800e36c <Virtual_Com_Port_Data_Setup+0x68>
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800e33a:	79fb      	ldrb	r3, [r7, #7]
 800e33c:	2b20      	cmp	r3, #32
 800e33e:	d115      	bne.n	800e36c <Virtual_Com_Port_Data_Setup+0x68>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800e340:	f241 3348 	movw	r3, #4936	; 0x1348
 800e344:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e350:	2b21      	cmp	r3, #33	; 0x21
 800e352:	d104      	bne.n	800e35e <Virtual_Com_Port_Data_Setup+0x5a>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800e354:	f24e 5305 	movw	r3, #58629	; 0xe505
 800e358:	f6c0 0300 	movt	r3, #2048	; 0x800
 800e35c:	60fb      	str	r3, [r7, #12]
    }
    Request = SET_LINE_CODING;
 800e35e:	f240 7361 	movw	r3, #1889	; 0x761
 800e362:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e366:	f04f 0220 	mov.w	r2, #32
 800e36a:	701a      	strb	r2, [r3, #0]
  }

  if (CopyRoutine == NULL)
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d102      	bne.n	800e378 <Virtual_Com_Port_Data_Setup+0x74>
  {
    return USB_UNSUPPORT;
 800e372:	f04f 0302 	mov.w	r3, #2
 800e376:	e014      	b.n	800e3a2 <Virtual_Com_Port_Data_Setup+0x9e>
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800e378:	f241 3348 	movw	r3, #4936	; 0x1348
 800e37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	619a      	str	r2, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800e386:	f241 3348 	movw	r3, #4936	; 0x1348
 800e38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f04f 0200 	mov.w	r2, #0
 800e394:	825a      	strh	r2, [r3, #18]
  (*CopyRoutine)(0);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f04f 0000 	mov.w	r0, #0
 800e39c:	4798      	blx	r3
  return USB_SUCCESS;
 800e39e:	f04f 0300 	mov.w	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f107 0710 	add.w	r7, r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <Virtual_Com_Port_NoData_Setup>:
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	71fb      	strb	r3, [r7, #7]

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800e3b6:	f241 3348 	movw	r3, #4936	; 0x1348
 800e3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3c6:	2b21      	cmp	r3, #33	; 0x21
 800e3c8:	d10b      	bne.n	800e3e2 <Virtual_Com_Port_NoData_Setup+0x36>
  {
    if (RequestNo == SET_COMM_FEATURE)
 800e3ca:	79fb      	ldrb	r3, [r7, #7]
 800e3cc:	2b02      	cmp	r3, #2
 800e3ce:	d102      	bne.n	800e3d6 <Virtual_Com_Port_NoData_Setup+0x2a>
    {
      return USB_SUCCESS;
 800e3d0:	f04f 0300 	mov.w	r3, #0
 800e3d4:	e007      	b.n	800e3e6 <Virtual_Com_Port_NoData_Setup+0x3a>
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	2b22      	cmp	r3, #34	; 0x22
 800e3da:	d102      	bne.n	800e3e2 <Virtual_Com_Port_NoData_Setup+0x36>
    {
      return USB_SUCCESS;
 800e3dc:	f04f 0300 	mov.w	r3, #0
 800e3e0:	e001      	b.n	800e3e6 <Virtual_Com_Port_NoData_Setup+0x3a>
    }
  }

  return USB_UNSUPPORT;
 800e3e2:	f04f 0302 	mov.w	r3, #2
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f107 070c 	add.w	r7, r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bc80      	pop	{r7}
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop

0800e3f4 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	80fb      	strh	r3, [r7, #6]
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800e3fe:	88fb      	ldrh	r3, [r7, #6]
 800e400:	4618      	mov	r0, r3
 800e402:	f240 21bc 	movw	r1, #700	; 0x2bc
 800e406:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800e40a:	f000 fc79 	bl	800ed00 <Standard_GetDescriptorData>
 800e40e:	4603      	mov	r3, r0
}
 800e410:	4618      	mov	r0, r3
 800e412:	f107 0708 	add.w	r7, r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop

0800e41c <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	4603      	mov	r3, r0
 800e424:	80fb      	strh	r3, [r7, #6]
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800e426:	88fb      	ldrh	r3, [r7, #6]
 800e428:	4618      	mov	r0, r3
 800e42a:	f240 21c4 	movw	r1, #708	; 0x2c4
 800e42e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800e432:	f000 fc65 	bl	800ed00 <Standard_GetDescriptorData>
 800e436:	4603      	mov	r3, r0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	f107 0708 	add.w	r7, r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop

0800e444 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	4603      	mov	r3, r0
 800e44c:	80fb      	strh	r3, [r7, #6]
  uint8_t wValue0 = pInformation->USBwValue0;
 800e44e:	f241 3348 	movw	r3, #4936	; 0x1348
 800e452:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	78db      	ldrb	r3, [r3, #3]
 800e45a:	73fb      	strb	r3, [r7, #15]
  if (wValue0 > 4)
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
 800e45e:	2b04      	cmp	r3, #4
 800e460:	d902      	bls.n	800e468 <Virtual_Com_Port_GetStringDescriptor+0x24>
  {
    return NULL;
 800e462:	f04f 0300 	mov.w	r3, #0
 800e466:	e00d      	b.n	800e484 <Virtual_Com_Port_GetStringDescriptor+0x40>
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800e468:	7bfb      	ldrb	r3, [r7, #15]
 800e46a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 800e46e:	f240 23cc 	movw	r3, #716	; 0x2cc
 800e472:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e476:	18d3      	adds	r3, r2, r3
 800e478:	88fa      	ldrh	r2, [r7, #6]
 800e47a:	4610      	mov	r0, r2
 800e47c:	4619      	mov	r1, r3
 800e47e:	f000 fc3f 	bl	800ed00 <Standard_GetDescriptorData>
 800e482:	4603      	mov	r3, r0
  }
}
 800e484:	4618      	mov	r0, r3
 800e486:	f107 0710 	add.w	r7, r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop

0800e490 <Virtual_Com_Port_Get_Interface_Setting>:
* Input2         : uint8_t: AlternateSetting : Alternate Setting number.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	71fa      	strb	r2, [r7, #7]
 800e49c:	71bb      	strb	r3, [r7, #6]
  if (AlternateSetting > 0)
 800e49e:	79bb      	ldrb	r3, [r7, #6]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d002      	beq.n	800e4aa <Virtual_Com_Port_Get_Interface_Setting+0x1a>
  {
    return USB_UNSUPPORT;
 800e4a4:	f04f 0302 	mov.w	r3, #2
 800e4a8:	e007      	b.n	800e4ba <Virtual_Com_Port_Get_Interface_Setting+0x2a>
  }
  else if (Interface > 1)
 800e4aa:	79fb      	ldrb	r3, [r7, #7]
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d902      	bls.n	800e4b6 <Virtual_Com_Port_Get_Interface_Setting+0x26>
  {
    return USB_UNSUPPORT;
 800e4b0:	f04f 0302 	mov.w	r3, #2
 800e4b4:	e001      	b.n	800e4ba <Virtual_Com_Port_Get_Interface_Setting+0x2a>
  }
  return USB_SUCCESS;
 800e4b6:	f04f 0300 	mov.w	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f107 070c 	add.w	r7, r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bc80      	pop	{r7}
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop

0800e4c8 <Virtual_Com_Port_GetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800e4d2:	88fb      	ldrh	r3, [r7, #6]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10a      	bne.n	800e4ee <Virtual_Com_Port_GetLineCoding+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800e4d8:	f241 3348 	movw	r3, #4936	; 0x1348
 800e4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f04f 0208 	mov.w	r2, #8
 800e4e6:	821a      	strh	r2, [r3, #16]
    return NULL;
 800e4e8:	f04f 0300 	mov.w	r3, #0
 800e4ec:	e003      	b.n	800e4f6 <Virtual_Com_Port_GetLineCoding+0x2e>
  }
  return(uint8_t *)&linecoding;
 800e4ee:	f240 235c 	movw	r3, #604	; 0x25c
 800e4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f107 070c 	add.w	r7, r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bc80      	pop	{r7}
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop

0800e504 <Virtual_Com_Port_SetLineCoding>:
* Input          : Length.
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	4603      	mov	r3, r0
 800e50c:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800e50e:	88fb      	ldrh	r3, [r7, #6]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10a      	bne.n	800e52a <Virtual_Com_Port_SetLineCoding+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800e514:	f241 3348 	movw	r3, #4936	; 0x1348
 800e518:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f04f 0208 	mov.w	r2, #8
 800e522:	821a      	strh	r2, [r3, #16]
    return NULL;
 800e524:	f04f 0300 	mov.w	r3, #0
 800e528:	e003      	b.n	800e532 <Virtual_Com_Port_SetLineCoding+0x2e>
  }
  return(uint8_t *)&linecoding;
 800e52a:	f240 235c 	movw	r3, #604	; 0x25c
 800e52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800e532:	4618      	mov	r0, r3
 800e534:	f107 070c 	add.w	r7, r7, #12
 800e538:	46bd      	mov	sp, r7
 800e53a:	bc80      	pop	{r7}
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop

0800e540 <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800e546:	f04f 0001 	mov.w	r0, #1
 800e54a:	f7fd fd89 	bl	800c060 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
 800e54e:	f04f 0301 	mov.w	r3, #1
 800e552:	80fb      	strh	r3, [r7, #6]
  _SetCNTR(wRegVal);
 800e554:	f645 4340 	movw	r3, #23616	; 0x5c40
 800e558:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e55c:	88fa      	ldrh	r2, [r7, #6]
 800e55e:	601a      	str	r2, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
 800e560:	f241 334c 	movw	r3, #4940	; 0x134c
 800e564:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e568:	f04f 0200 	mov.w	r2, #0
 800e56c:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800e56e:	f645 4340 	movw	r3, #23616	; 0x5c40
 800e572:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e576:	f241 324c 	movw	r2, #4940	; 0x134c
 800e57a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e57e:	8812      	ldrh	r2, [r2, #0]
 800e580:	601a      	str	r2, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800e582:	f645 4344 	movw	r3, #23620	; 0x5c44
 800e586:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e58a:	f04f 0200 	mov.w	r2, #0
 800e58e:	601a      	str	r2, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800e590:	f241 334c 	movw	r3, #4940	; 0x134c
 800e594:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e598:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800e59c:	801a      	strh	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800e59e:	f645 4340 	movw	r3, #23616	; 0x5c40
 800e5a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e5a6:	f241 324c 	movw	r2, #4940	; 0x134c
 800e5aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e5ae:	8812      	ldrh	r2, [r2, #0]
 800e5b0:	601a      	str	r2, [r3, #0]

  return USB_SUCCESS;
 800e5b2:	f04f 0300 	mov.w	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f107 0708 	add.w	r7, r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800e5ca:	88fb      	ldrh	r3, [r7, #6]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10a      	bne.n	800e5e6 <Standard_GetConfiguration+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800e5d0:	f241 3348 	movw	r3, #4936	; 0x1348
 800e5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f04f 0201 	mov.w	r2, #1
 800e5de:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 800e5e0:	f04f 0300 	mov.w	r3, #0
 800e5e4:	e00d      	b.n	800e602 <Standard_GetConfiguration+0x42>
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800e5e6:	f241 3344 	movw	r3, #4932	; 0x1344
 800e5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800e5f4:	f241 3348 	movw	r3, #4936	; 0x1348
 800e5f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f103 030a 	add.w	r3, r3, #10
}
 800e602:	4618      	mov	r0, r3
 800e604:	f107 0708 	add.w	r7, r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	af00      	add	r7, sp, #0

  if ((pInformation->USBwValue0 <=
 800e610:	f241 3348 	movw	r3, #4936	; 0x1348
 800e614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	78da      	ldrb	r2, [r3, #3]
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800e61c:	f240 2364 	movw	r3, #612	; 0x264
 800e620:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e624:	785b      	ldrb	r3, [r3, #1]
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 800e626:	429a      	cmp	r2, r3
 800e628:	d825      	bhi.n	800e676 <Standard_SetConfiguration+0x6a>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800e62a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e62e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	789b      	ldrb	r3, [r3, #2]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d11d      	bne.n	800e676 <Standard_SetConfiguration+0x6a>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800e63a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	889b      	ldrh	r3, [r3, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d115      	bne.n	800e676 <Standard_SetConfiguration+0x6a>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800e64a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	f241 3348 	movw	r3, #4936	; 0x1348
 800e658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	78db      	ldrb	r3, [r3, #3]
 800e660:	7293      	strb	r3, [r2, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800e662:	f241 3344 	movw	r3, #4932	; 0x1344
 800e666:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	4798      	blx	r3
    return USB_SUCCESS;
 800e670:	f04f 0300 	mov.w	r3, #0
 800e674:	e001      	b.n	800e67a <Standard_SetConfiguration+0x6e>
  }
  else
  {
    return USB_UNSUPPORT;
 800e676:	f04f 0302 	mov.w	r3, #2
  }
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop

0800e680 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800e68a:	88fb      	ldrh	r3, [r7, #6]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d10a      	bne.n	800e6a6 <Standard_GetInterface+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800e690:	f241 3348 	movw	r3, #4936	; 0x1348
 800e694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f04f 0201 	mov.w	r2, #1
 800e69e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800e6a0:	f04f 0300 	mov.w	r3, #0
 800e6a4:	e00d      	b.n	800e6c2 <Standard_GetInterface+0x42>
  }
  pUser_Standard_Requests->User_GetInterface();
 800e6a6:	f241 3344 	movw	r3, #4932	; 0x1344
 800e6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800e6b4:	f241 3348 	movw	r3, #4936	; 0x1348
 800e6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f103 030c 	add.w	r3, r3, #12
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f107 0708 	add.w	r7, r7, #8
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800e6d2:	f241 3320 	movw	r3, #4896	; 0x1320
 800e6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	699a      	ldr	r2, [r3, #24]
 800e6de:	f241 3348 	movw	r3, #4936	; 0x1348
 800e6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	7959      	ldrb	r1, [r3, #5]
 800e6ea:	f241 3348 	movw	r3, #4936	; 0x1348
 800e6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	78db      	ldrb	r3, [r3, #3]
 800e6f6:	4608      	mov	r0, r1
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4790      	blx	r2
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	71fb      	strb	r3, [r7, #7]

  if (pInformation->Current_Configuration != 0)
 800e700:	f241 3348 	movw	r3, #4936	; 0x1348
 800e704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	7a9b      	ldrb	r3, [r3, #10]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d03a      	beq.n	800e786 <Standard_SetInterface+0xba>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800e710:	79fb      	ldrb	r3, [r7, #7]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10f      	bne.n	800e736 <Standard_SetInterface+0x6a>
 800e716:	f241 3348 	movw	r3, #4936	; 0x1348
 800e71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	791b      	ldrb	r3, [r3, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d107      	bne.n	800e736 <Standard_SetInterface+0x6a>
        || (pInformation->USBwValue1 != 0))
 800e726:	f241 3348 	movw	r3, #4936	; 0x1348
 800e72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	789b      	ldrb	r3, [r3, #2]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d002      	beq.n	800e73c <Standard_SetInterface+0x70>
    {
      return  USB_UNSUPPORT;
 800e736:	f04f 0302 	mov.w	r3, #2
 800e73a:	e026      	b.n	800e78a <Standard_SetInterface+0xbe>
    }
    else if (Re == USB_SUCCESS)
 800e73c:	79fb      	ldrb	r3, [r7, #7]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d121      	bne.n	800e786 <Standard_SetInterface+0xba>
    {
      pUser_Standard_Requests->User_SetInterface();
 800e742:	f241 3344 	movw	r3, #4932	; 0x1344
 800e746:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800e750:	f241 3348 	movw	r3, #4936	; 0x1348
 800e754:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	795b      	ldrb	r3, [r3, #5]
 800e766:	72d3      	strb	r3, [r2, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800e768:	f241 3348 	movw	r3, #4936	; 0x1348
 800e76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	f241 3348 	movw	r3, #4936	; 0x1348
 800e776:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	78db      	ldrb	r3, [r3, #3]
 800e77e:	7313      	strb	r3, [r2, #12]
      return USB_SUCCESS;
 800e780:	f04f 0300 	mov.w	r3, #0
 800e784:	e001      	b.n	800e78a <Standard_SetInterface+0xbe>
    }

  }

  return USB_UNSUPPORT;
 800e786:	f04f 0302 	mov.w	r3, #2
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	f107 0708 	add.w	r7, r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	4603      	mov	r3, r0
 800e79c:	80fb      	strh	r3, [r7, #6]
  if (Length == 0)
 800e79e:	88fb      	ldrh	r3, [r7, #6]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10a      	bne.n	800e7ba <Standard_GetStatus+0x26>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800e7a4:	f241 3348 	movw	r3, #4936	; 0x1348
 800e7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f04f 0202 	mov.w	r2, #2
 800e7b2:	821a      	strh	r2, [r3, #16]
    return 0;
 800e7b4:	f04f 0300 	mov.w	r3, #0
 800e7b8:	e0c5      	b.n	800e946 <Standard_GetStatus+0x1b2>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800e7ba:	f241 3318 	movw	r3, #4888	; 0x1318
 800e7be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7c2:	f04f 0200 	mov.w	r2, #0
 800e7c6:	801a      	strh	r2, [r3, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800e7c8:	f241 3348 	movw	r3, #4936	; 0x1348
 800e7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d147      	bne.n	800e86c <Standard_GetStatus+0xd8>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800e7dc:	f241 3348 	movw	r3, #4936	; 0x1348
 800e7e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	7a5b      	ldrb	r3, [r3, #9]
 800e7e8:	73fb      	strb	r3, [r7, #15]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
 800e7ec:	f003 0320 	and.w	r3, r3, #32
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00d      	beq.n	800e810 <Standard_GetStatus+0x7c>
    {
      SetBit(StatusInfo0, 1);
 800e7f4:	f241 3318 	movw	r3, #4888	; 0x1318
 800e7f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	f043 0302 	orr.w	r3, r3, #2
 800e802:	b2da      	uxtb	r2, r3
 800e804:	f241 3318 	movw	r3, #4888	; 0x1318
 800e808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e80c:	701a      	strb	r2, [r3, #0]
 800e80e:	e00c      	b.n	800e82a <Standard_GetStatus+0x96>
    }
    else
    {
      ClrBit(StatusInfo0, 1);
 800e810:	f241 3318 	movw	r3, #4888	; 0x1318
 800e814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	f023 0302 	bic.w	r3, r3, #2
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	f241 3318 	movw	r3, #4888	; 0x1318
 800e824:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e828:	701a      	strb	r2, [r3, #0]
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00d      	beq.n	800e850 <Standard_GetStatus+0xbc>
    {
      SetBit(StatusInfo0, 0);
 800e834:	f241 3318 	movw	r3, #4888	; 0x1318
 800e838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	f043 0301 	orr.w	r3, r3, #1
 800e842:	b2da      	uxtb	r2, r3
 800e844:	f241 3318 	movw	r3, #4888	; 0x1318
 800e848:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e84c:	701a      	strb	r2, [r3, #0]
 800e84e:	e06f      	b.n	800e930 <Standard_GetStatus+0x19c>
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 800e850:	f241 3318 	movw	r3, #4888	; 0x1318
 800e854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	f023 0301 	bic.w	r3, r3, #1
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	f241 3318 	movw	r3, #4888	; 0x1318
 800e864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	e061      	b.n	800e930 <Standard_GetStatus+0x19c>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800e86c:	f241 3348 	movw	r3, #4936	; 0x1348
 800e870:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d104      	bne.n	800e88a <Standard_GetStatus+0xf6>
  {
    return (uint8_t *)&StatusInfo;
 800e880:	f241 3318 	movw	r3, #4888	; 0x1318
 800e884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e888:	e05d      	b.n	800e946 <Standard_GetStatus+0x1b2>
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800e88a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	d145      	bne.n	800e92a <Standard_GetStatus+0x196>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800e89e:	f241 3348 	movw	r3, #4936	; 0x1348
 800e8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	795b      	ldrb	r3, [r3, #5]
 800e8aa:	73bb      	strb	r3, [r7, #14]

    Related_Endpoint = (wIndex0 & 0x0f);
 800e8ac:	7bbb      	ldrb	r3, [r7, #14]
 800e8ae:	f003 030f 	and.w	r3, r3, #15
 800e8b2:	737b      	strb	r3, [r7, #13]
    if (ValBit(wIndex0, 7))
 800e8b4:	7bbb      	ldrb	r3, [r7, #14]
 800e8b6:	b25b      	sxtb	r3, r3
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	da1a      	bge.n	800e8f2 <Standard_GetStatus+0x15e>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800e8bc:	7b7b      	ldrb	r3, [r7, #13]
 800e8be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e8c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e8c6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e8d2:	2b10      	cmp	r3, #16
 800e8d4:	d12c      	bne.n	800e930 <Standard_GetStatus+0x19c>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800e8d6:	f241 3318 	movw	r3, #4888	; 0x1318
 800e8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	f043 0301 	orr.w	r3, r3, #1
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	f241 3318 	movw	r3, #4888	; 0x1318
 800e8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e8ee:	701a      	strb	r2, [r3, #0]
 800e8f0:	e01e      	b.n	800e930 <Standard_GetStatus+0x19c>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800e8f2:	7b7b      	ldrb	r3, [r7, #13]
 800e8f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e8f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e8fc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	b29b      	uxth	r3, r3
 800e904:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e90c:	d110      	bne.n	800e930 <Standard_GetStatus+0x19c>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800e90e:	f241 3318 	movw	r3, #4888	; 0x1318
 800e912:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	f043 0301 	orr.w	r3, r3, #1
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	f241 3318 	movw	r3, #4888	; 0x1318
 800e922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e926:	701a      	strb	r2, [r3, #0]
 800e928:	e002      	b.n	800e930 <Standard_GetStatus+0x19c>
    }

  }
  else
  {
    return NULL;
 800e92a:	f04f 0300 	mov.w	r3, #0
 800e92e:	e00a      	b.n	800e946 <Standard_GetStatus+0x1b2>
  }
  pUser_Standard_Requests->User_GetStatus();
 800e930:	f241 3344 	movw	r3, #4932	; 0x1344
 800e934:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800e93e:	f241 3318 	movw	r3, #4888	; 0x1318
 800e942:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800e946:	4618      	mov	r0, r3
 800e948:	f107 0710 	add.w	r7, r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800e950:	b590      	push	{r4, r7, lr}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
  uint32_t     Type_Rec = Type_Recipient;
 800e956:	f241 3348 	movw	r3, #4936	; 0x1348
 800e95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e966:	613b      	str	r3, [r7, #16]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d111      	bne.n	800e992 <Standard_ClearFeature+0x42>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800e96e:	f241 3348 	movw	r3, #4936	; 0x1348
 800e972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	f241 3348 	movw	r3, #4936	; 0x1348
 800e97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	7a5b      	ldrb	r3, [r3, #9]
 800e984:	f023 0320 	bic.w	r3, r3, #32
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	7253      	strb	r3, [r2, #9]
    return USB_SUCCESS;
 800e98c:	f04f 0300 	mov.w	r3, #0
 800e990:	e0f1      	b.n	800eb76 <Standard_ClearFeature+0x226>
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	2b02      	cmp	r3, #2
 800e996:	f040 80ec 	bne.w	800eb72 <Standard_ClearFeature+0x222>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800e99a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	885b      	ldrh	r3, [r3, #2]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d107      	bne.n	800e9ba <Standard_ClearFeature+0x6a>
        || (pInformation->USBwIndex1 != 0))
 800e9aa:	f241 3348 	movw	r3, #4936	; 0x1348
 800e9ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	791b      	ldrb	r3, [r3, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d002      	beq.n	800e9c0 <Standard_ClearFeature+0x70>
    {
      return USB_UNSUPPORT;
 800e9ba:	f04f 0302 	mov.w	r3, #2
 800e9be:	e0da      	b.n	800eb76 <Standard_ClearFeature+0x226>
    }

    pDev = &Device_Table;
 800e9c0:	f240 2364 	movw	r3, #612	; 0x264
 800e9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9c8:	60fb      	str	r3, [r7, #12]
    wIndex0 = pInformation->USBwIndex0;
 800e9ca:	f241 3348 	movw	r3, #4936	; 0x1348
 800e9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	795b      	ldrb	r3, [r3, #5]
 800e9d6:	60bb      	str	r3, [r7, #8]
    rEP = wIndex0 & ~0x80;
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9de:	607b      	str	r3, [r7, #4]
    Related_Endpoint = ENDP0 + rEP;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	603b      	str	r3, [r7, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
 800e9e4:	f241 3348 	movw	r3, #4936	; 0x1348
 800e9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	795b      	ldrb	r3, [r3, #5]
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	b25b      	sxtb	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	da0c      	bge.n	800ea12 <Standard_ClearFeature+0xc2>
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e9fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea02:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ea0e:	617b      	str	r3, [r7, #20]
 800ea10:	e00b      	b.n	800ea2a <Standard_ClearFeature+0xda>
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ea18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea1c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ea28:	617b      	str	r3, [r7, #20]
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d90a      	bls.n	800ea4c <Standard_ClearFeature+0xfc>
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d007      	beq.n	800ea4c <Standard_ClearFeature+0xfc>
        || (pInformation->Current_Configuration == 0))
 800ea3c:	f241 3348 	movw	r3, #4936	; 0x1348
 800ea40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	7a9b      	ldrb	r3, [r3, #10]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d102      	bne.n	800ea52 <Standard_ClearFeature+0x102>
    {
      return USB_UNSUPPORT;
 800ea4c:	f04f 0302 	mov.w	r3, #2
 800ea50:	e091      	b.n	800eb76 <Standard_ClearFeature+0x226>
    }


    if (wIndex0 & 0x80)
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d019      	beq.n	800ea90 <Standard_ClearFeature+0x140>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ea62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea66:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ea72:	2b10      	cmp	r3, #16
 800ea74:	d173      	bne.n	800eb5e <Standard_ClearFeature+0x20e>
      {
        ClearDTOG_TX(Related_Endpoint);
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f001 fbc4 	bl	8010208 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	4618      	mov	r0, r3
 800ea86:	f04f 0130 	mov.w	r1, #48	; 0x30
 800ea8a:	f001 fa95 	bl	800ffb8 <SetEPTxStatus>
 800ea8e:	e066      	b.n	800eb5e <Standard_ClearFeature+0x20e>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ea96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea9a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800eaa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaaa:	d158      	bne.n	800eb5e <Standard_ClearFeature+0x20e>
      {
        if (Related_Endpoint == ENDP0)
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d12e      	bne.n	800eb10 <Standard_ClearFeature+0x1c0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	b2da      	uxtb	r2, r3
 800eab6:	f240 2368 	movw	r3, #616	; 0x268
 800eaba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eabe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eac2:	4610      	mov	r0, r2
 800eac4:	4619      	mov	r1, r3
 800eac6:	f001 fc77 	bl	80103b8 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ead0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ead4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	b29b      	uxth	r3, r3
 800eadc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eae4:	b29c      	uxth	r4, r3
 800eae6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800eaea:	b29c      	uxth	r4, r3
 800eaec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800eaf0:	b29c      	uxth	r4, r3
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eaf8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800eafc:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800eb00:	f248 0380 	movw	r3, #32896	; 0x8080
 800eb04:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800eb08:	4323      	orrs	r3, r4
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	6013      	str	r3, [r2, #0]
 800eb0e:	e026      	b.n	800eb5e <Standard_ClearFeature+0x20e>
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	4618      	mov	r0, r3
 800eb16:	f001 fb47 	bl	80101a8 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eb20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eb24:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb34:	b29c      	uxth	r4, r3
 800eb36:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800eb3a:	b29c      	uxth	r4, r3
 800eb3c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800eb40:	b29c      	uxth	r4, r3
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eb48:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800eb4c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800eb50:	f248 0380 	movw	r3, #32896	; 0x8080
 800eb54:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800eb58:	4323      	orrs	r3, r4
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	6013      	str	r3, [r2, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800eb5e:	f241 3344 	movw	r3, #4932	; 0x1344
 800eb62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	695b      	ldr	r3, [r3, #20]
 800eb6a:	4798      	blx	r3
    return USB_SUCCESS;
 800eb6c:	f04f 0300 	mov.w	r3, #0
 800eb70:	e001      	b.n	800eb76 <Standard_ClearFeature+0x226>
  }

  return USB_UNSUPPORT;
 800eb72:	f04f 0302 	mov.w	r3, #2
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	f107 071c 	add.w	r7, r7, #28
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd90      	pop	{r4, r7, pc}

0800eb80 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 800eb80:	b590      	push	{r4, r7, lr}
 800eb82:	b085      	sub	sp, #20
 800eb84:	af00      	add	r7, sp, #0
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800eb86:	f241 3348 	movw	r3, #4936	; 0x1348
 800eb8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	795b      	ldrb	r3, [r3, #5]
 800eb92:	60bb      	str	r3, [r7, #8]
  rEP = wIndex0 & ~0x80;
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb9a:	607b      	str	r3, [r7, #4]
  Related_Endpoint = ENDP0 + rEP;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	603b      	str	r3, [r7, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
 800eba0:	f241 3348 	movw	r3, #4936	; 0x1348
 800eba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	795b      	ldrb	r3, [r3, #5]
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	da0c      	bge.n	800ebce <Standard_SetEndPointFeature+0x4e>
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ebba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ebbe:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	e00b      	b.n	800ebe6 <Standard_SetEndPointFeature+0x66>
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ebd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ebd8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ebe4:	60fb      	str	r3, [r7, #12]
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800ebe6:	f240 2364 	movw	r3, #612	; 0x264
 800ebea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d912      	bls.n	800ec1e <Standard_SetEndPointFeature+0x9e>
      || pInformation->USBwValue != 0 || Status == 0
 800ebf8:	f241 3348 	movw	r3, #4936	; 0x1348
 800ebfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	885b      	ldrh	r3, [r3, #2]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d10a      	bne.n	800ec1e <Standard_SetEndPointFeature+0x9e>
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <Standard_SetEndPointFeature+0x9e>
      || pInformation->Current_Configuration == 0)
 800ec0e:	f241 3348 	movw	r3, #4936	; 0x1348
 800ec12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	7a9b      	ldrb	r3, [r3, #10]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d102      	bne.n	800ec24 <Standard_SetEndPointFeature+0xa4>
  {
    return USB_UNSUPPORT;
 800ec1e:	f04f 0302 	mov.w	r3, #2
 800ec22:	e04c      	b.n	800ecbe <Standard_SetEndPointFeature+0x13e>
  }
  else
  {
    if (wIndex0 & 0x80)
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d01f      	beq.n	800ec6e <Standard_SetEndPointFeature+0xee>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ec34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ec38:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec48:	b29c      	uxth	r4, r3
 800ec4a:	f084 0310 	eor.w	r3, r4, #16
 800ec4e:	b29c      	uxth	r4, r3
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ec56:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800ec5a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ec5e:	f248 0380 	movw	r3, #32896	; 0x8080
 800ec62:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800ec66:	4323      	orrs	r3, r4
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	6013      	str	r3, [r2, #0]
 800ec6c:	e01e      	b.n	800ecac <Standard_SetEndPointFeature+0x12c>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ec74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ec78:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec88:	b29c      	uxth	r4, r3
 800ec8a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ec8e:	b29c      	uxth	r4, r3
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ec96:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800ec9a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ec9e:	f248 0380 	movw	r3, #32896	; 0x8080
 800eca2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800eca6:	4323      	orrs	r3, r4
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	6013      	str	r3, [r2, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800ecac:	f241 3344 	movw	r3, #4932	; 0x1344
 800ecb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	699b      	ldr	r3, [r3, #24]
 800ecb8:	4798      	blx	r3
  return USB_SUCCESS;
 800ecba:	f04f 0300 	mov.w	r3, #0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f107 0714 	add.w	r7, r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd90      	pop	{r4, r7, pc}

0800ecc8 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	af00      	add	r7, sp, #0
  SetBit(pInformation->Current_Feature, 5);
 800eccc:	f241 3348 	movw	r3, #4936	; 0x1348
 800ecd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	f241 3348 	movw	r3, #4936	; 0x1348
 800ecda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	7a5b      	ldrb	r3, [r3, #9]
 800ece2:	f043 0320 	orr.w	r3, r3, #32
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	7253      	strb	r3, [r2, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800ecea:	f241 3344 	movw	r3, #4932	; 0x1344
 800ecee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	69db      	ldr	r3, [r3, #28]
 800ecf6:	4798      	blx	r3
  return USB_SUCCESS;
 800ecf8:	f04f 0300 	mov.w	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <Standard_GetDescriptorData>:
* Return         : Address of a part of the descriptor pointed by the Usb_
*                  wOffset The buffer pointed by this address contains at least
*                  Length bytes.
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	4603      	mov	r3, r0
 800ed08:	6039      	str	r1, [r7, #0]
 800ed0a:	80fb      	strh	r3, [r7, #6]
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800ed0c:	f241 3348 	movw	r3, #4936	; 0x1348
 800ed10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	8a5b      	ldrh	r3, [r3, #18]
 800ed18:	60fb      	str	r3, [r7, #12]
  if (Length == 0)
 800ed1a:	88fb      	ldrh	r3, [r7, #6]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10e      	bne.n	800ed3e <Standard_GetDescriptorData+0x3e>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800ed20:	f241 3348 	movw	r3, #4936	; 0x1348
 800ed24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	8891      	ldrh	r1, [r2, #4]
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	b292      	uxth	r2, r2
 800ed32:	1a8a      	subs	r2, r1, r2
 800ed34:	b292      	uxth	r2, r2
 800ed36:	821a      	strh	r2, [r3, #16]
    return 0;
 800ed38:	f04f 0300 	mov.w	r3, #0
 800ed3c:	e003      	b.n	800ed46 <Standard_GetDescriptorData+0x46>
  }

  return pDesc->Descriptor + wOffset;
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	18d3      	adds	r3, r2, r3
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	f107 0714 	add.w	r7, r7, #20
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bc80      	pop	{r7}
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop

0800ed54 <DataStageOut>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageOut(void)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800ed5a:	f241 3348 	movw	r3, #4936	; 0x1348
 800ed5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f103 0310 	add.w	r3, r3, #16
 800ed68:	60bb      	str	r3, [r7, #8]
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	607b      	str	r3, [r7, #4]

  if (pEPinfo->CopyData && save_rLength)
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d02f      	beq.n	800edd8 <DataStageOut+0x84>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d02c      	beq.n	800edd8 <DataStageOut+0x84>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	889b      	ldrh	r3, [r3, #4]
 800ed82:	60fb      	str	r3, [r7, #12]
    if (Length > save_rLength)
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d901      	bls.n	800ed90 <DataStageOut+0x3c>
    {
      Length = save_rLength;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	60fb      	str	r3, [r7, #12]
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	b292      	uxth	r2, r2
 800ed98:	4610      	mov	r0, r2
 800ed9a:	4798      	blx	r3
 800ed9c:	6038      	str	r0, [r7, #0]
    pEPinfo->Usb_rLength -= Length;
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	881a      	ldrh	r2, [r3, #0]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	801a      	strh	r2, [r3, #0]
    pEPinfo->Usb_rOffset += Length;
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	885a      	ldrh	r2, [r3, #2]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	18d3      	adds	r3, r2, r3
 800edb8:	b29a      	uxth	r2, r3
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	805a      	strh	r2, [r3, #2]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800edbe:	f04f 0000 	mov.w	r0, #0
 800edc2:	f001 fab9 	bl	8010338 <GetEPRxAddr>
 800edc6:	4603      	mov	r3, r0
 800edc8:	461a      	mov	r2, r3
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	b29b      	uxth	r3, r3
 800edce:	6838      	ldr	r0, [r7, #0]
 800edd0:	4611      	mov	r1, r2
 800edd2:	461a      	mov	r2, r3
 800edd4:	f001 f880 	bl	800fed8 <PMAToUserBufferCopy>

  }

  if (pEPinfo->Usb_rLength != 0)
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d013      	beq.n	800ee08 <DataStageOut+0xb4>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800ede0:	f241 334e 	movw	r3, #4942	; 0x134e
 800ede4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ede8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800edec:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800edee:	f04f 0000 	mov.w	r0, #0
 800edf2:	f04f 0100 	mov.w	r1, #0
 800edf6:	f001 fabf 	bl	8010378 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800edfa:	f241 3350 	movw	r3, #4944	; 0x1350
 800edfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee02:	f04f 0230 	mov.w	r2, #48	; 0x30
 800ee06:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	881a      	ldrh	r2, [r3, #0]
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	889b      	ldrh	r3, [r3, #4]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d308      	bcc.n	800ee26 <DataStageOut+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
 800ee14:	f241 3348 	movw	r3, #4936	; 0x1348
 800ee18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f04f 0203 	mov.w	r2, #3
 800ee22:	721a      	strb	r2, [r3, #8]
 800ee24:	e030      	b.n	800ee88 <DataStageOut+0x134>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	881b      	ldrh	r3, [r3, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d008      	beq.n	800ee40 <DataStageOut+0xec>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800ee2e:	f241 3348 	movw	r3, #4936	; 0x1348
 800ee32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f04f 0205 	mov.w	r2, #5
 800ee3c:	721a      	strb	r2, [r3, #8]
 800ee3e:	e023      	b.n	800ee88 <DataStageOut+0x134>
    }
    else if (pEPinfo->Usb_rLength == 0)
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	881b      	ldrh	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d11f      	bne.n	800ee88 <DataStageOut+0x134>
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800ee48:	f241 3348 	movw	r3, #4936	; 0x1348
 800ee4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f04f 0206 	mov.w	r2, #6
 800ee56:	721a      	strb	r2, [r3, #8]
      USB_StatusIn();
 800ee58:	f645 4350 	movw	r3, #23632	; 0x5c50
 800ee5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	461a      	mov	r2, r3
 800ee66:	f243 0302 	movw	r3, #12290	; 0x3002
 800ee6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee6e:	18d3      	adds	r3, r2, r3
 800ee70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee74:	f04f 0200 	mov.w	r2, #0
 800ee78:	601a      	str	r2, [r3, #0]
 800ee7a:	f241 3350 	movw	r3, #4944	; 0x1350
 800ee7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee82:	f04f 0230 	mov.w	r2, #48	; 0x30
 800ee86:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800ee88:	f107 0710 	add.w	r7, r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800ee96:	f241 3348 	movw	r3, #4936	; 0x1348
 800ee9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f103 0310 	add.w	r3, r3, #16
 800eea4:	60fb      	str	r3, [r7, #12]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	60bb      	str	r3, [r7, #8]
  uint32_t ControlState = pInformation->ControlState;
 800eeac:	f241 3348 	movw	r3, #4936	; 0x1348
 800eeb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	7a1b      	ldrb	r3, [r3, #8]
 800eeb8:	617b      	str	r3, [r7, #20]

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d137      	bne.n	800ef30 <DataStageIn+0xa0>
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d134      	bne.n	800ef30 <DataStageIn+0xa0>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800eec6:	f240 7368 	movw	r3, #1896	; 0x768
 800eeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d122      	bne.n	800ef1a <DataStageIn+0x8a>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800eed4:	f645 4350 	movw	r3, #23632	; 0x5c50
 800eed8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	461a      	mov	r2, r3
 800eee2:	f243 0302 	movw	r3, #12290	; 0x3002
 800eee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eeea:	18d3      	adds	r3, r2, r3
 800eeec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eef0:	f04f 0200 	mov.w	r2, #0
 800eef4:	601a      	str	r2, [r3, #0]
 800eef6:	f241 3350 	movw	r3, #4944	; 0x1350
 800eefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eefe:	f04f 0230 	mov.w	r2, #48	; 0x30
 800ef02:	801a      	strh	r2, [r3, #0]
      ControlState = LAST_IN_DATA;
 800ef04:	f04f 0304 	mov.w	r3, #4
 800ef08:	617b      	str	r3, [r7, #20]
      Data_Mul_MaxPacketSize = FALSE;
 800ef0a:	f240 7368 	movw	r3, #1896	; 0x768
 800ef0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef12:	f04f 0200 	mov.w	r2, #0
 800ef16:	701a      	strb	r2, [r3, #0]
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 
    }
    
    goto Expect_Status_Out;
 800ef18:	e056      	b.n	800efc8 <DataStageIn+0x138>
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 800ef1a:	f04f 0307 	mov.w	r3, #7
 800ef1e:	617b      	str	r3, [r7, #20]
      vSetEPTxStatus(EP_TX_STALL);
 800ef20:	f241 3350 	movw	r3, #4944	; 0x1350
 800ef24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ef28:	f04f 0210 	mov.w	r2, #16
 800ef2c:	801a      	strh	r2, [r3, #0]
 
    }
    
    goto Expect_Status_Out;
 800ef2e:	e04b      	b.n	800efc8 <DataStageIn+0x138>
  }

  Length = pEPinfo->PacketSize;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	889b      	ldrh	r3, [r3, #4]
 800ef34:	613b      	str	r3, [r7, #16]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d802      	bhi.n	800ef44 <DataStageIn+0xb4>
 800ef3e:	f04f 0304 	mov.w	r3, #4
 800ef42:	e001      	b.n	800ef48 <DataStageIn+0xb8>
 800ef44:	f04f 0302 	mov.w	r3, #2
 800ef48:	617b      	str	r3, [r7, #20]

  if (Length > save_wLength)
 800ef4a:	693a      	ldr	r2, [r7, #16]
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d901      	bls.n	800ef56 <DataStageIn+0xc6>
  {
    Length = save_wLength;
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	613b      	str	r3, [r7, #16]
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	693a      	ldr	r2, [r7, #16]
 800ef5c:	b292      	uxth	r2, r2
 800ef5e:	4610      	mov	r0, r2
 800ef60:	4798      	blx	r3
 800ef62:	6078      	str	r0, [r7, #4]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800ef64:	f04f 0000 	mov.w	r0, #0
 800ef68:	f001 f9c8 	bl	80102fc <GetEPTxAddr>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	461a      	mov	r2, r3
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	4611      	mov	r1, r2
 800ef78:	461a      	mov	r2, r3
 800ef7a:	f000 ff69 	bl	800fe50 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	f04f 0000 	mov.w	r0, #0
 800ef86:	4619      	mov	r1, r3
 800ef88:	f001 f9f6 	bl	8010378 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	881a      	ldrh	r2, [r3, #0]
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	801a      	strh	r2, [r3, #0]
  pEPinfo->Usb_wOffset += Length;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	885a      	ldrh	r2, [r3, #2]
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	b29b      	uxth	r3, r3
 800efa4:	18d3      	adds	r3, r2, r3
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	805a      	strh	r2, [r3, #2]
  vSetEPTxStatus(EP_TX_VALID);
 800efac:	f241 3350 	movw	r3, #4944	; 0x1350
 800efb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efb4:	f04f 0230 	mov.w	r2, #48	; 0x30
 800efb8:	801a      	strh	r2, [r3, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800efba:	f241 334e 	movw	r3, #4942	; 0x134e
 800efbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efc2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800efc6:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800efc8:	f241 3348 	movw	r3, #4936	; 0x1348
 800efcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	b2d2      	uxtb	r2, r2
 800efd6:	721a      	strb	r2, [r3, #8]
}
 800efd8:	f107 0718 	add.w	r7, r7, #24
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <NoData_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
  RESULT Result = USB_UNSUPPORT;
 800efe6:	f04f 0302 	mov.w	r3, #2
 800efea:	73fb      	strb	r3, [r7, #15]
  uint32_t RequestNo = pInformation->USBbRequest;
 800efec:	f241 3348 	movw	r3, #4936	; 0x1348
 800eff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	785b      	ldrb	r3, [r3, #1]
 800eff8:	607b      	str	r3, [r7, #4]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800effa:	f241 3348 	movw	r3, #4936	; 0x1348
 800effe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d176      	bne.n	800f0fc <NoData_Setup0+0x11c>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2b09      	cmp	r3, #9
 800f012:	d104      	bne.n	800f01e <NoData_Setup0+0x3e>
    {
      Result = Standard_SetConfiguration();
 800f014:	f7ff fafa 	bl	800e60c <Standard_SetConfiguration>
 800f018:	4603      	mov	r3, r0
 800f01a:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800f01c:	e09e      	b.n	800f15c <NoData_Setup0+0x17c>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b05      	cmp	r3, #5
 800f022:	d129      	bne.n	800f078 <NoData_Setup0+0x98>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800f024:	f241 3348 	movw	r3, #4936	; 0x1348
 800f028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	78db      	ldrb	r3, [r3, #3]
 800f030:	b2db      	uxtb	r3, r3
 800f032:	b25b      	sxtb	r3, r3
 800f034:	2b00      	cmp	r3, #0
 800f036:	db17      	blt.n	800f068 <NoData_Setup0+0x88>
 800f038:	f241 3348 	movw	r3, #4936	; 0x1348
 800f03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	789b      	ldrb	r3, [r3, #2]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10f      	bne.n	800f068 <NoData_Setup0+0x88>
          || (pInformation->USBwIndex != 0)
 800f048:	f241 3348 	movw	r3, #4936	; 0x1348
 800f04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	889b      	ldrh	r3, [r3, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d107      	bne.n	800f068 <NoData_Setup0+0x88>
          || (pInformation->Current_Configuration != 0))
 800f058:	f241 3348 	movw	r3, #4936	; 0x1348
 800f05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	7a9b      	ldrb	r3, [r3, #10]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d003      	beq.n	800f070 <NoData_Setup0+0x90>
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 800f068:	f04f 0308 	mov.w	r3, #8
 800f06c:	60bb      	str	r3, [r7, #8]
        goto exit_NoData_Setup0;
 800f06e:	e0ae      	b.n	800f1ce <NoData_Setup0+0x1ee>
      }
      else
      {
        Result = USB_SUCCESS;
 800f070:	f04f 0300 	mov.w	r3, #0
 800f074:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800f076:	e071      	b.n	800f15c <NoData_Setup0+0x17c>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b03      	cmp	r3, #3
 800f07c:	d118      	bne.n	800f0b0 <NoData_Setup0+0xd0>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 800f07e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f082:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	78db      	ldrb	r3, [r3, #3]
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d10c      	bne.n	800f0a8 <NoData_Setup0+0xc8>
          && (pInformation->USBwIndex == 0))
 800f08e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	889b      	ldrh	r3, [r3, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d104      	bne.n	800f0a8 <NoData_Setup0+0xc8>
      {
        Result = Standard_SetDeviceFeature();
 800f09e:	f7ff fe13 	bl	800ecc8 <Standard_SetDeviceFeature>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800f0a6:	e059      	b.n	800f15c <NoData_Setup0+0x17c>
      {
        Result = Standard_SetDeviceFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800f0a8:	f04f 0302 	mov.w	r3, #2
 800f0ac:	73fb      	strb	r3, [r7, #15]
 800f0ae:	e056      	b.n	800f15e <NoData_Setup0+0x17e>
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d152      	bne.n	800f15c <NoData_Setup0+0x17c>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800f0b6:	f241 3348 	movw	r3, #4936	; 0x1348
 800f0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	78db      	ldrb	r3, [r3, #3]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d116      	bne.n	800f0f4 <NoData_Setup0+0x114>
          && pInformation->USBwIndex == 0
 800f0c6:	f241 3348 	movw	r3, #4936	; 0x1348
 800f0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	889b      	ldrh	r3, [r3, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d10e      	bne.n	800f0f4 <NoData_Setup0+0x114>
          && ValBit(pInformation->Current_Feature, 5))
 800f0d6:	f241 3348 	movw	r3, #4936	; 0x1348
 800f0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	7a5b      	ldrb	r3, [r3, #9]
 800f0e2:	f003 0320 	and.w	r3, r3, #32
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d004      	beq.n	800f0f4 <NoData_Setup0+0x114>
      {
        Result = Standard_ClearFeature();
 800f0ea:	f7ff fc31 	bl	800e950 <Standard_ClearFeature>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	73fb      	strb	r3, [r7, #15]
 800f0f2:	e034      	b.n	800f15e <NoData_Setup0+0x17e>
      }
      else
      {
        Result = USB_UNSUPPORT;
 800f0f4:	f04f 0302 	mov.w	r3, #2
 800f0f8:	73fb      	strb	r3, [r7, #15]
 800f0fa:	e02f      	b.n	800f15c <NoData_Setup0+0x17c>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800f0fc:	f241 3348 	movw	r3, #4936	; 0x1348
 800f100:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d107      	bne.n	800f120 <NoData_Setup0+0x140>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b0b      	cmp	r3, #11
 800f114:	d123      	bne.n	800f15e <NoData_Setup0+0x17e>
    {
      Result = Standard_SetInterface();
 800f116:	f7ff fad9 	bl	800e6cc <Standard_SetInterface>
 800f11a:	4603      	mov	r3, r0
 800f11c:	73fb      	strb	r3, [r7, #15]
 800f11e:	e01e      	b.n	800f15e <NoData_Setup0+0x17e>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800f120:	f241 3348 	movw	r3, #4936	; 0x1348
 800f124:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f130:	2b02      	cmp	r3, #2
 800f132:	d10f      	bne.n	800f154 <NoData_Setup0+0x174>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d104      	bne.n	800f144 <NoData_Setup0+0x164>
    {
      Result = Standard_ClearFeature();
 800f13a:	f7ff fc09 	bl	800e950 <Standard_ClearFeature>
 800f13e:	4603      	mov	r3, r0
 800f140:	73fb      	strb	r3, [r7, #15]
 800f142:	e00c      	b.n	800f15e <NoData_Setup0+0x17e>
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2b03      	cmp	r3, #3
 800f148:	d109      	bne.n	800f15e <NoData_Setup0+0x17e>
    {
      Result = Standard_SetEndPointFeature();
 800f14a:	f7ff fd19 	bl	800eb80 <Standard_SetEndPointFeature>
 800f14e:	4603      	mov	r3, r0
 800f150:	73fb      	strb	r3, [r7, #15]
 800f152:	e004      	b.n	800f15e <NoData_Setup0+0x17e>
    }
  }
  else
  {
    Result = USB_UNSUPPORT;
 800f154:	f04f 0302 	mov.w	r3, #2
 800f158:	73fb      	strb	r3, [r7, #15]
 800f15a:	e000      	b.n	800f15e <NoData_Setup0+0x17e>
      {
        Result = Standard_ClearFeature();
      }
      else
      {
        Result = USB_UNSUPPORT;
 800f15c:	bf00      	nop
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d012      	beq.n	800f18a <NoData_Setup0+0x1aa>
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800f164:	f241 3320 	movw	r3, #4896	; 0x1320
 800f168:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	695b      	ldr	r3, [r3, #20]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	b2d2      	uxtb	r2, r2
 800f174:	4610      	mov	r0, r2
 800f176:	4798      	blx	r3
 800f178:	4603      	mov	r3, r0
 800f17a:	73fb      	strb	r3, [r7, #15]
    if (Result == USB_NOT_READY)
 800f17c:	7bfb      	ldrb	r3, [r7, #15]
 800f17e:	2b03      	cmp	r3, #3
 800f180:	d103      	bne.n	800f18a <NoData_Setup0+0x1aa>
    {
      ControlState = PAUSE;
 800f182:	f04f 0309 	mov.w	r3, #9
 800f186:	60bb      	str	r3, [r7, #8]
      goto exit_NoData_Setup0;
 800f188:	e021      	b.n	800f1ce <NoData_Setup0+0x1ee>
    }
  }

  if (Result != USB_SUCCESS)
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d003      	beq.n	800f198 <NoData_Setup0+0x1b8>
  {
    ControlState = STALLED;
 800f190:	f04f 0308 	mov.w	r3, #8
 800f194:	60bb      	str	r3, [r7, #8]
    goto exit_NoData_Setup0;
 800f196:	e01a      	b.n	800f1ce <NoData_Setup0+0x1ee>
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 800f198:	f04f 0306 	mov.w	r3, #6
 800f19c:	60bb      	str	r3, [r7, #8]

  USB_StatusIn();
 800f19e:	f645 4350 	movw	r3, #23632	; 0x5c50
 800f1a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	f243 0302 	movw	r3, #12290	; 0x3002
 800f1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1b4:	18d3      	adds	r3, r2, r3
 800f1b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f1ba:	f04f 0200 	mov.w	r2, #0
 800f1be:	601a      	str	r2, [r3, #0]
 800f1c0:	f241 3350 	movw	r3, #4944	; 0x1350
 800f1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1c8:	f04f 0230 	mov.w	r2, #48	; 0x30
 800f1cc:	801a      	strh	r2, [r3, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800f1ce:	f241 3348 	movw	r3, #4936	; 0x1348
 800f1d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	b2d2      	uxtb	r2, r2
 800f1dc:	721a      	strb	r2, [r3, #8]
  return;
 800f1de:	bf00      	nop
}
 800f1e0:	f107 0710 	add.w	r7, r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <Data_Setup0>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Data_Setup0(void)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b08a      	sub	sp, #40	; 0x28
 800f1ec:	af00      	add	r7, sp, #0
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 800f1ee:	f241 3348 	movw	r3, #4936	; 0x1348
 800f1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	785b      	ldrb	r3, [r3, #1]
 800f1fa:	61bb      	str	r3, [r7, #24]
  uint32_t Related_Endpoint, Reserved;
  uint32_t wOffset, Status;



  CopyRoutine = NULL;
 800f1fc:	f04f 0300 	mov.w	r3, #0
 800f200:	627b      	str	r3, [r7, #36]	; 0x24
  wOffset = 0;
 800f202:	f04f 0300 	mov.w	r3, #0
 800f206:	617b      	str	r3, [r7, #20]

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	2b06      	cmp	r3, #6
 800f20c:	d133      	bne.n	800f276 <Data_Setup0+0x8e>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800f20e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f212:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f21e:	2b00      	cmp	r3, #0
 800f220:	f040 813c 	bne.w	800f49c <Data_Setup0+0x2b4>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 800f224:	f241 3348 	movw	r3, #4936	; 0x1348
 800f228:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	789b      	ldrb	r3, [r3, #2]
 800f230:	74fb      	strb	r3, [r7, #19]
      if (wValue1 == DEVICE_DESCRIPTOR)
 800f232:	7cfb      	ldrb	r3, [r7, #19]
 800f234:	2b01      	cmp	r3, #1
 800f236:	d107      	bne.n	800f248 <Data_Setup0+0x60>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800f238:	f241 3320 	movw	r3, #4896	; 0x1320
 800f23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	69db      	ldr	r3, [r3, #28]
 800f244:	627b      	str	r3, [r7, #36]	; 0x24
 800f246:	e129      	b.n	800f49c <Data_Setup0+0x2b4>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800f248:	7cfb      	ldrb	r3, [r7, #19]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d107      	bne.n	800f25e <Data_Setup0+0x76>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800f24e:	f241 3320 	movw	r3, #4896	; 0x1320
 800f252:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	6a1b      	ldr	r3, [r3, #32]
 800f25a:	627b      	str	r3, [r7, #36]	; 0x24
 800f25c:	e11e      	b.n	800f49c <Data_Setup0+0x2b4>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800f25e:	7cfb      	ldrb	r3, [r7, #19]
 800f260:	2b03      	cmp	r3, #3
 800f262:	f040 811b 	bne.w	800f49c <Data_Setup0+0x2b4>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 800f266:	f241 3320 	movw	r3, #4896	; 0x1320
 800f26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	627b      	str	r3, [r7, #36]	; 0x24
 800f274:	e112      	b.n	800f49c <Data_Setup0+0x2b4>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f040 80b5 	bne.w	800f3e8 <Data_Setup0+0x200>
 800f27e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	885b      	ldrh	r3, [r3, #2]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f040 80ac 	bne.w	800f3e8 <Data_Setup0+0x200>
           && (pInformation->USBwLength == 0x0002)
 800f290:	f241 3348 	movw	r3, #4936	; 0x1348
 800f294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	88db      	ldrh	r3, [r3, #6]
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	f040 80a3 	bne.w	800f3e8 <Data_Setup0+0x200>
           && (pInformation->USBwIndex1 == 0))
 800f2a2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	791b      	ldrb	r3, [r3, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	f040 809a 	bne.w	800f3e8 <Data_Setup0+0x200>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800f2b4:	f241 3348 	movw	r3, #4936	; 0x1348
 800f2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d10d      	bne.n	800f2e4 <Data_Setup0+0xfc>
        && (pInformation->USBwIndex == 0))
 800f2c8:	f241 3348 	movw	r3, #4936	; 0x1348
 800f2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	889b      	ldrh	r3, [r3, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d105      	bne.n	800f2e4 <Data_Setup0+0xfc>
    {
      CopyRoutine = Standard_GetStatus;
 800f2d8:	f24e 7395 	movw	r3, #59285	; 0xe795
 800f2dc:	f6c0 0300 	movt	r3, #2048	; 0x800
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800f2e2:	e0da      	b.n	800f49a <Data_Setup0+0x2b2>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800f2e4:	f241 3348 	movw	r3, #4936	; 0x1348
 800f2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d122      	bne.n	800f33e <Data_Setup0+0x156>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800f2f8:	f241 3320 	movw	r3, #4896	; 0x1320
 800f2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	699a      	ldr	r2, [r3, #24]
 800f304:	f241 3348 	movw	r3, #4936	; 0x1348
 800f308:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	795b      	ldrb	r3, [r3, #5]
 800f310:	4618      	mov	r0, r3
 800f312:	f04f 0100 	mov.w	r1, #0
 800f316:	4790      	blx	r2
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f040 80bd 	bne.w	800f49a <Data_Setup0+0x2b2>
          && (pInformation->Current_Configuration != 0))
 800f320:	f241 3348 	movw	r3, #4936	; 0x1348
 800f324:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	7a9b      	ldrb	r3, [r3, #10]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	f000 80b4 	beq.w	800f49a <Data_Setup0+0x2b2>
      {
        CopyRoutine = Standard_GetStatus;
 800f332:	f24e 7395 	movw	r3, #59285	; 0xe795
 800f336:	f6c0 0300 	movt	r3, #2048	; 0x800
 800f33a:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800f33c:	e0ad      	b.n	800f49a <Data_Setup0+0x2b2>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800f33e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f342:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f34e:	2b02      	cmp	r3, #2
 800f350:	f040 80a3 	bne.w	800f49a <Data_Setup0+0x2b2>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800f354:	f241 3348 	movw	r3, #4936	; 0x1348
 800f358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	795b      	ldrb	r3, [r3, #5]
 800f360:	f003 030f 	and.w	r3, r3, #15
 800f364:	60fb      	str	r3, [r7, #12]
      Reserved = pInformation->USBwIndex0 & 0x70;
 800f366:	f241 3348 	movw	r3, #4936	; 0x1348
 800f36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	795b      	ldrb	r3, [r3, #5]
 800f372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f376:	60bb      	str	r3, [r7, #8]

      if (ValBit(pInformation->USBwIndex0, 7))
 800f378:	f241 3348 	movw	r3, #4936	; 0x1348
 800f37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	795b      	ldrb	r3, [r3, #5]
 800f384:	b2db      	uxtb	r3, r3
 800f386:	b25b      	sxtb	r3, r3
 800f388:	2b00      	cmp	r3, #0
 800f38a:	da0c      	bge.n	800f3a6 <Data_Setup0+0x1be>
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f392:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f396:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f3a2:	61fb      	str	r3, [r7, #28]
 800f3a4:	e00b      	b.n	800f3be <Data_Setup0+0x1d6>
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f3ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f3b0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f3bc:	61fb      	str	r3, [r7, #28]
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800f3be:	f240 2364 	movw	r3, #612	; 0x264
 800f3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d964      	bls.n	800f49a <Data_Setup0+0x2b2>
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d161      	bne.n	800f49a <Data_Setup0+0x2b2>
          && (Status != 0))
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d05e      	beq.n	800f49a <Data_Setup0+0x2b2>
      {
        CopyRoutine = Standard_GetStatus;
 800f3dc:	f24e 7395 	movw	r3, #59285	; 0xe795
 800f3e0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800f3e4:	627b      	str	r3, [r7, #36]	; 0x24
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800f3e6:	e058      	b.n	800f49a <Data_Setup0+0x2b2>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800f3e8:	69bb      	ldr	r3, [r7, #24]
 800f3ea:	2b08      	cmp	r3, #8
 800f3ec:	d10f      	bne.n	800f40e <Data_Setup0+0x226>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800f3ee:	f241 3348 	movw	r3, #4936	; 0x1348
 800f3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d14c      	bne.n	800f49c <Data_Setup0+0x2b4>
    {
      CopyRoutine = Standard_GetConfiguration;
 800f402:	f24e 53c1 	movw	r3, #58817	; 0xe5c1
 800f406:	f6c0 0300 	movt	r3, #2048	; 0x800
 800f40a:	627b      	str	r3, [r7, #36]	; 0x24
 800f40c:	e046      	b.n	800f49c <Data_Setup0+0x2b4>
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	2b0a      	cmp	r3, #10
 800f412:	d143      	bne.n	800f49c <Data_Setup0+0x2b4>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800f414:	f241 3348 	movw	r3, #4936	; 0x1348
 800f418:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f424:	2b01      	cmp	r3, #1
 800f426:	d139      	bne.n	800f49c <Data_Setup0+0x2b4>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800f428:	f241 3348 	movw	r3, #4936	; 0x1348
 800f42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	7a9b      	ldrb	r3, [r3, #10]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d031      	beq.n	800f49c <Data_Setup0+0x2b4>
 800f438:	f241 3348 	movw	r3, #4936	; 0x1348
 800f43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	885b      	ldrh	r3, [r3, #2]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d129      	bne.n	800f49c <Data_Setup0+0x2b4>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800f448:	f241 3348 	movw	r3, #4936	; 0x1348
 800f44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	791b      	ldrb	r3, [r3, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d121      	bne.n	800f49c <Data_Setup0+0x2b4>
 800f458:	f241 3348 	movw	r3, #4936	; 0x1348
 800f45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	88db      	ldrh	r3, [r3, #6]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d119      	bne.n	800f49c <Data_Setup0+0x2b4>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800f468:	f241 3320 	movw	r3, #4896	; 0x1320
 800f46c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	699a      	ldr	r2, [r3, #24]
 800f474:	f241 3348 	movw	r3, #4936	; 0x1348
 800f478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	795b      	ldrb	r3, [r3, #5]
 800f480:	4618      	mov	r0, r3
 800f482:	f04f 0100 	mov.w	r1, #0
 800f486:	4790      	blx	r2
 800f488:	4603      	mov	r3, r0
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d106      	bne.n	800f49c <Data_Setup0+0x2b4>
    {
      CopyRoutine = Standard_GetInterface;
 800f48e:	f24e 6381 	movw	r3, #59009	; 0xe681
 800f492:	f6c0 0300 	movt	r3, #2048	; 0x800
 800f496:	627b      	str	r3, [r7, #36]	; 0x24
 800f498:	e000      	b.n	800f49c <Data_Setup0+0x2b4>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800f49a:	bf00      	nop
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d017      	beq.n	800f4d2 <Data_Setup0+0x2ea>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800f4a2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	697a      	ldr	r2, [r7, #20]
 800f4ae:	b292      	uxth	r2, r2
 800f4b0:	825a      	strh	r2, [r3, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800f4b2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f4b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4be:	619a      	str	r2, [r3, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	f04f 0000 	mov.w	r0, #0
 800f4c6:	4798      	blx	r3
    Result = USB_SUCCESS;
 800f4c8:	f04f 0300 	mov.w	r3, #0
 800f4cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f4d0:	e01d      	b.n	800f50e <Data_Setup0+0x326>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 800f4d2:	f241 3320 	movw	r3, #4896	; 0x1320
 800f4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	691a      	ldr	r2, [r3, #16]
 800f4de:	f241 3348 	movw	r3, #4936	; 0x1348
 800f4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	785b      	ldrb	r3, [r3, #1]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	4790      	blx	r2
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (Result == USB_NOT_READY)
 800f4f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4f8:	2b03      	cmp	r3, #3
 800f4fa:	d108      	bne.n	800f50e <Data_Setup0+0x326>
    {
      pInformation->ControlState = PAUSE;
 800f4fc:	f241 3348 	movw	r3, #4936	; 0x1348
 800f500:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f04f 0209 	mov.w	r2, #9
 800f50a:	721a      	strb	r2, [r3, #8]
      return;
 800f50c:	e0ac      	b.n	800f668 <Data_Setup0+0x480>
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800f50e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f512:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	8a1a      	ldrh	r2, [r3, #16]
 800f51a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f51e:	429a      	cmp	r2, r3
 800f520:	d108      	bne.n	800f534 <Data_Setup0+0x34c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800f522:	f241 3348 	movw	r3, #4936	; 0x1348
 800f526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f04f 0209 	mov.w	r2, #9
 800f530:	721a      	strb	r2, [r3, #8]
    return;
 800f532:	e099      	b.n	800f668 <Data_Setup0+0x480>
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800f534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f538:	2b02      	cmp	r3, #2
 800f53a:	d007      	beq.n	800f54c <Data_Setup0+0x364>
 800f53c:	f241 3348 	movw	r3, #4936	; 0x1348
 800f540:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	8a1b      	ldrh	r3, [r3, #16]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d108      	bne.n	800f55e <Data_Setup0+0x376>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 800f54c:	f241 3348 	movw	r3, #4936	; 0x1348
 800f550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f04f 0208 	mov.w	r2, #8
 800f55a:	721a      	strb	r2, [r3, #8]
    return;
 800f55c:	e084      	b.n	800f668 <Data_Setup0+0x480>
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800f55e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f562:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	b25b      	sxtb	r3, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	da6a      	bge.n	800f648 <Data_Setup0+0x460>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800f572:	f241 3348 	movw	r3, #4936	; 0x1348
 800f576:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	88db      	ldrh	r3, [r3, #6]
 800f57e:	607b      	str	r3, [r7, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800f580:	f241 3348 	movw	r3, #4936	; 0x1348
 800f584:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	8a1b      	ldrh	r3, [r3, #16]
 800f58c:	461a      	mov	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	429a      	cmp	r2, r3
 800f592:	d908      	bls.n	800f5a6 <Data_Setup0+0x3be>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800f594:	f241 3348 	movw	r3, #4936	; 0x1348
 800f598:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	b292      	uxth	r2, r2
 800f5a2:	821a      	strh	r2, [r3, #16]
 800f5a4:	e040      	b.n	800f628 <Data_Setup0+0x440>
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800f5a6:	f241 3348 	movw	r3, #4936	; 0x1348
 800f5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	8a1a      	ldrh	r2, [r3, #16]
 800f5b2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	88db      	ldrh	r3, [r3, #6]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d232      	bcs.n	800f628 <Data_Setup0+0x440>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800f5c2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	8a1a      	ldrh	r2, [r3, #16]
 800f5ce:	f241 3320 	movw	r3, #4896	; 0x1320
 800f5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d207      	bcs.n	800f5f0 <Data_Setup0+0x408>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800f5e0:	f240 7368 	movw	r3, #1896	; 0x768
 800f5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5e8:	f04f 0200 	mov.w	r2, #0
 800f5ec:	701a      	strb	r2, [r3, #0]
 800f5ee:	e01b      	b.n	800f628 <Data_Setup0+0x440>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800f5f0:	f241 3348 	movw	r3, #4936	; 0x1348
 800f5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	8a1b      	ldrh	r3, [r3, #16]
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	f241 3320 	movw	r3, #4896	; 0x1320
 800f602:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f60c:	fb92 f1f3 	sdiv	r1, r2, r3
 800f610:	fb03 f301 	mul.w	r3, r3, r1
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	d106      	bne.n	800f628 <Data_Setup0+0x440>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800f61a:	f240 7368 	movw	r3, #1896	; 0x768
 800f61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f622:	f04f 0201 	mov.w	r2, #1
 800f626:	701a      	strb	r2, [r3, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800f628:	f241 3348 	movw	r3, #4936	; 0x1348
 800f62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	f241 3320 	movw	r3, #4896	; 0x1320
 800f636:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f640:	8293      	strh	r3, [r2, #20]
    DataStageIn();
 800f642:	f7ff fc25 	bl	800ee90 <DataStageIn>
  {
    pInformation->ControlState = OUT_DATA;
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
  }

  return;
 800f646:	e00e      	b.n	800f666 <Data_Setup0+0x47e>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800f648:	f241 3348 	movw	r3, #4936	; 0x1348
 800f64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f04f 0203 	mov.w	r2, #3
 800f656:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800f658:	f241 334e 	movw	r3, #4942	; 0x134e
 800f65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f660:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800f664:	801a      	strh	r2, [r3, #0]
  }

  return;
 800f666:	bf00      	nop
}
 800f668:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800f670:	b590      	push	{r4, r7, lr}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
  union
  {
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
 800f676:	f04f 0301 	mov.w	r3, #1
 800f67a:	80fb      	strh	r3, [r7, #6]
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800f67c:	f645 4350 	movw	r3, #23632	; 0x5c50
 800f680:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	b29b      	uxth	r3, r3
 800f688:	461a      	mov	r2, r3
 800f68a:	f243 0304 	movw	r3, #12292	; 0x3004
 800f68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f692:	18d3      	adds	r3, r2, r3
 800f694:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f6a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f6a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800f6a8:	603b      	str	r3, [r7, #0]

  if (pInformation->ControlState != PAUSE)
 800f6aa:	f241 3348 	movw	r3, #4936	; 0x1348
 800f6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	7a1b      	ldrb	r3, [r3, #8]
 800f6b6:	2b09      	cmp	r3, #9
 800f6b8:	d04d      	beq.n	800f756 <Setup0_Process+0xe6>
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800f6ba:	f241 3348 	movw	r3, #4936	; 0x1348
 800f6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	7819      	ldrb	r1, [r3, #0]
 800f6c8:	7011      	strb	r1, [r2, #0]
 800f6ca:	f103 0301 	add.w	r3, r3, #1
 800f6ce:	603b      	str	r3, [r7, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800f6d0:	f241 3348 	movw	r3, #4936	; 0x1348
 800f6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	7819      	ldrb	r1, [r3, #0]
 800f6de:	7051      	strb	r1, [r2, #1]
 800f6e0:	f103 0301 	add.w	r3, r3, #1
 800f6e4:	603b      	str	r3, [r7, #0]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	88fb      	ldrh	r3, [r7, #6]
 800f6ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f6ee:	18d3      	adds	r3, r2, r3
 800f6f0:	603b      	str	r3, [r7, #0]
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800f6f2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f6f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f6fa:	681c      	ldr	r4, [r3, #0]
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	881a      	ldrh	r2, [r3, #0]
 800f700:	f103 0302 	add.w	r3, r3, #2
 800f704:	603b      	str	r3, [r7, #0]
 800f706:	4610      	mov	r0, r2
 800f708:	f000 fec6 	bl	8010498 <ByteSwap>
 800f70c:	4603      	mov	r3, r0
 800f70e:	8063      	strh	r3, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800f710:	683a      	ldr	r2, [r7, #0]
 800f712:	88fb      	ldrh	r3, [r7, #6]
 800f714:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f718:	18d3      	adds	r3, r2, r3
 800f71a:	603b      	str	r3, [r7, #0]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800f71c:	f241 3348 	movw	r3, #4936	; 0x1348
 800f720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f724:	681c      	ldr	r4, [r3, #0]
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	881a      	ldrh	r2, [r3, #0]
 800f72a:	f103 0302 	add.w	r3, r3, #2
 800f72e:	603b      	str	r3, [r7, #0]
 800f730:	4610      	mov	r0, r2
 800f732:	f000 feb1 	bl	8010498 <ByteSwap>
 800f736:	4603      	mov	r3, r0
 800f738:	80a3      	strh	r3, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	88fb      	ldrh	r3, [r7, #6]
 800f73e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f742:	18d3      	adds	r3, r2, r3
 800f744:	603b      	str	r3, [r7, #0]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800f746:	f241 3348 	movw	r3, #4936	; 0x1348
 800f74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	683a      	ldr	r2, [r7, #0]
 800f752:	8812      	ldrh	r2, [r2, #0]
 800f754:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800f756:	f241 3348 	movw	r3, #4936	; 0x1348
 800f75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f04f 0201 	mov.w	r2, #1
 800f764:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 800f766:	f241 3348 	movw	r3, #4936	; 0x1348
 800f76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	88db      	ldrh	r3, [r3, #6]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d102      	bne.n	800f77c <Setup0_Process+0x10c>
  {
    /* Setup with no data stage */
    NoData_Setup0();
 800f776:	f7ff fc33 	bl	800efe0 <NoData_Setup0>
 800f77a:	e001      	b.n	800f780 <Setup0_Process+0x110>
  }
  else
  {
    /* Setup with data stage */
    Data_Setup0();
 800f77c:	f7ff fd34 	bl	800f1e8 <Data_Setup0>
  }
  return Post0_Process();
 800f780:	f000 f8aa 	bl	800f8d8 <Post0_Process>
 800f784:	4603      	mov	r3, r0
}
 800f786:	4618      	mov	r0, r3
 800f788:	f107 070c 	add.w	r7, r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd90      	pop	{r4, r7, pc}

0800f790 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 800f796:	f241 3348 	movw	r3, #4936	; 0x1348
 800f79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	7a1b      	ldrb	r3, [r3, #8]
 800f7a2:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2b02      	cmp	r3, #2
 800f7a8:	d002      	beq.n	800f7b0 <In0_Process+0x20>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2b04      	cmp	r3, #4
 800f7ae:	d109      	bne.n	800f7c4 <In0_Process+0x34>
  {
    DataStageIn();
 800f7b0:	f7ff fb6e 	bl	800ee90 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 800f7b4:	f241 3348 	movw	r3, #4936	; 0x1348
 800f7b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	7a1b      	ldrb	r3, [r3, #8]
 800f7c0:	607b      	str	r3, [r7, #4]
 800f7c2:	e032      	b.n	800f82a <In0_Process+0x9a>
  }

  else if (ControlState == WAIT_STATUS_IN)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b06      	cmp	r3, #6
 800f7c8:	d12c      	bne.n	800f824 <In0_Process+0x94>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800f7ca:	f241 3348 	movw	r3, #4936	; 0x1348
 800f7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	785b      	ldrb	r3, [r3, #1]
 800f7d6:	2b05      	cmp	r3, #5
 800f7d8:	d119      	bne.n	800f80e <In0_Process+0x7e>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 800f7da:	f241 3348 	movw	r3, #4936	; 0x1348
 800f7de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10f      	bne.n	800f80e <In0_Process+0x7e>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800f7ee:	f241 3348 	movw	r3, #4936	; 0x1348
 800f7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	78db      	ldrb	r3, [r3, #3]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f000 f89c 	bl	800f938 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 800f800:	f241 3344 	movw	r3, #4932	; 0x1344
 800f804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	6a1b      	ldr	r3, [r3, #32]
 800f80c:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 800f80e:	f241 3320 	movw	r3, #4896	; 0x1320
 800f812:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	4798      	blx	r3
    ControlState = STALLED;
 800f81c:	f04f 0308 	mov.w	r3, #8
 800f820:	607b      	str	r3, [r7, #4]
 800f822:	e002      	b.n	800f82a <In0_Process+0x9a>
  }

  else
  {
    ControlState = STALLED;
 800f824:	f04f 0308 	mov.w	r3, #8
 800f828:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 800f82a:	f241 3348 	movw	r3, #4936	; 0x1348
 800f82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	b2d2      	uxtb	r2, r2
 800f838:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800f83a:	f000 f84d 	bl	800f8d8 <Post0_Process>
 800f83e:	4603      	mov	r3, r0
}
 800f840:	4618      	mov	r0, r3
 800f842:	f107 0708 	add.w	r7, r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop

0800f84c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
  uint32_t ControlState = pInformation->ControlState;
 800f852:	f241 3348 	movw	r3, #4936	; 0x1348
 800f856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	7a1b      	ldrb	r3, [r3, #8]
 800f85e:	607b      	str	r3, [r7, #4]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b02      	cmp	r3, #2
 800f864:	d002      	beq.n	800f86c <Out0_Process+0x20>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2b04      	cmp	r3, #4
 800f86a:	d103      	bne.n	800f874 <Out0_Process+0x28>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 800f86c:	f04f 0308 	mov.w	r3, #8
 800f870:	607b      	str	r3, [r7, #4]
 800f872:	e020      	b.n	800f8b6 <Out0_Process+0x6a>
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b03      	cmp	r3, #3
 800f878:	d002      	beq.n	800f880 <Out0_Process+0x34>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b05      	cmp	r3, #5
 800f87e:	d109      	bne.n	800f894 <Out0_Process+0x48>
  {
    DataStageOut();
 800f880:	f7ff fa68 	bl	800ed54 <DataStageOut>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800f884:	f241 3348 	movw	r3, #4936	; 0x1348
 800f888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	7a1b      	ldrb	r3, [r3, #8]
 800f890:	607b      	str	r3, [r7, #4]
 800f892:	e010      	b.n	800f8b6 <Out0_Process+0x6a>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2b07      	cmp	r3, #7
 800f898:	d10a      	bne.n	800f8b0 <Out0_Process+0x64>
  {
    (*pProperty->Process_Status_OUT)();
 800f89a:	f241 3320 	movw	r3, #4896	; 0x1320
 800f89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	4798      	blx	r3
    ControlState = STALLED;
 800f8a8:	f04f 0308 	mov.w	r3, #8
 800f8ac:	607b      	str	r3, [r7, #4]
 800f8ae:	e002      	b.n	800f8b6 <Out0_Process+0x6a>


  /* Unexpect state, STALL the endpoint */
  else
  {
    ControlState = STALLED;
 800f8b0:	f04f 0308 	mov.w	r3, #8
 800f8b4:	607b      	str	r3, [r7, #4]
  }

  pInformation->ControlState = ControlState;
 800f8b6:	f241 3348 	movw	r3, #4936	; 0x1348
 800f8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	b2d2      	uxtb	r2, r2
 800f8c4:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800f8c6:	f000 f807 	bl	800f8d8 <Post0_Process>
 800f8ca:	4603      	mov	r3, r0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f107 0708 	add.w	r7, r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop

0800f8d8 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	af00      	add	r7, sp, #0
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800f8dc:	f240 2368 	movw	r3, #616	; 0x268
 800f8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8e8:	f04f 0000 	mov.w	r0, #0
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	f000 fd63 	bl	80103b8 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800f8f2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f8f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	7a1b      	ldrb	r3, [r3, #8]
 800f8fe:	2b08      	cmp	r3, #8
 800f900:	d10d      	bne.n	800f91e <Post0_Process+0x46>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800f902:	f241 334e 	movw	r3, #4942	; 0x134e
 800f906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f90a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f90e:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800f910:	f241 3350 	movw	r3, #4944	; 0x1350
 800f914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f918:	f04f 0210 	mov.w	r2, #16
 800f91c:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
 800f91e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	7a1b      	ldrb	r3, [r3, #8]
 800f92a:	2b09      	cmp	r3, #9
 800f92c:	bf14      	ite	ne
 800f92e:	2300      	movne	r3, #0
 800f930:	2301      	moveq	r3, #1
 800f932:	b2db      	uxtb	r3, r3
}
 800f934:	4618      	mov	r0, r3
 800f936:	bd80      	pop	{r7, pc}

0800f938 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800f942:	f240 2364 	movw	r3, #612	; 0x264
 800f946:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	60bb      	str	r3, [r7, #8]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800f94e:	f04f 0300 	mov.w	r3, #0
 800f952:	60fb      	str	r3, [r7, #12]
 800f954:	e021      	b.n	800f99a <SetDeviceAddress+0x62>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f95e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f962:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	b2d2      	uxtb	r2, r2
 800f96a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800f96e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f972:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800f976:	6812      	ldr	r2, [r2, #0]
 800f978:	b292      	uxth	r2, r2
 800f97a:	4611      	mov	r1, r2
 800f97c:	f640 720f 	movw	r2, #3855	; 0xf0f
 800f980:	400a      	ands	r2, r1
 800f982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f98a:	68f9      	ldr	r1, [r7, #12]
 800f98c:	b2c9      	uxtb	r1, r1
 800f98e:	430a      	orrs	r2, r1
 800f990:	601a      	str	r2, [r3, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f103 0301 	add.w	r3, r3, #1
 800f998:	60fb      	str	r3, [r7, #12]
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d3d9      	bcc.n	800f956 <SetDeviceAddress+0x1e>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800f9a2:	f645 434c 	movw	r3, #23628	; 0x5c4c
 800f9a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f9aa:	79fa      	ldrb	r2, [r7, #7]
 800f9ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f9b0:	b2d2      	uxtb	r2, r2
 800f9b2:	601a      	str	r2, [r3, #0]
}
 800f9b4:	f107 0714 	add.w	r7, r7, #20
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bc80      	pop	{r7}
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop

0800f9c0 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	af00      	add	r7, sp, #0
}
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bc80      	pop	{r7}
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop

0800f9cc <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	af00      	add	r7, sp, #0
  pInformation = &Device_Info;
 800f9d0:	f241 3348 	movw	r3, #4936	; 0x1348
 800f9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9d8:	f241 3228 	movw	r2, #4904	; 0x1328
 800f9dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800f9e0:	601a      	str	r2, [r3, #0]
  pInformation->ControlState = 2;
 800f9e2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f04f 0202 	mov.w	r2, #2
 800f9f0:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 800f9f2:	f241 3320 	movw	r3, #4896	; 0x1320
 800f9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800f9fa:	f240 2268 	movw	r2, #616	; 0x268
 800f9fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800fa02:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800fa04:	f241 3344 	movw	r3, #4932	; 0x1344
 800fa08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa0c:	f240 2298 	movw	r2, #664	; 0x298
 800fa10:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800fa14:	601a      	str	r2, [r3, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800fa16:	f241 3320 	movw	r3, #4896	; 0x1320
 800fa1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4798      	blx	r3
}
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop

0800fa28 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 800fa28:	b590      	push	{r4, r7, lr}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
  __IO uint16_t wEPVal = 0;
 800fa2e:	f04f 0300 	mov.w	r3, #0
 800fa32:	80fb      	strh	r3, [r7, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800fa34:	e1f5      	b.n	800fe22 <CTR_LP+0x3fa>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800fa36:	f241 3314 	movw	r3, #4884	; 0x1314
 800fa3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa3e:	881b      	ldrh	r3, [r3, #0]
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	f003 030f 	and.w	r3, r3, #15
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	f241 3324 	movw	r3, #4900	; 0x1324
 800fa4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa52:	701a      	strb	r2, [r3, #0]
    if (EPindex == 0)
 800fa54:	f241 3324 	movw	r3, #4900	; 0x1324
 800fa58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f040 816f 	bne.w	800fd42 <CTR_LP+0x31a>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800fa64:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fa68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	f241 334e 	movw	r3, #4942	; 0x134e
 800fa74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa78:	801a      	strh	r2, [r3, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800fa7a:	f241 334e 	movw	r3, #4942	; 0x134e
 800fa7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa82:	881b      	ldrh	r3, [r3, #0]
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	f241 3350 	movw	r3, #4944	; 0x1350
 800fa90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa94:	801a      	strh	r2, [r3, #0]
	    SaveRState &=  EPRX_STAT;	
 800fa96:	f241 334e 	movw	r3, #4942	; 0x134e
 800fa9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800faa6:	b29a      	uxth	r2, r3
 800faa8:	f241 334e 	movw	r3, #4942	; 0x134e
 800faac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fab0:	801a      	strh	r2, [r3, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800fab2:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fab6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800fac2:	401c      	ands	r4, r3
 800fac4:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 800fac8:	f084 0420 	eor.w	r4, r4, #32
 800facc:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800fad0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800fad4:	b2a1      	uxth	r1, r4
 800fad6:	f248 0380 	movw	r3, #32896	; 0x8080
 800fada:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800fade:	430b      	orrs	r3, r1
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	6013      	str	r3, [r2, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 800fae4:	f241 3314 	movw	r3, #4884	; 0x1314
 800fae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800faec:	881b      	ldrh	r3, [r3, #0]
 800faee:	b29b      	uxth	r3, r3
 800faf0:	f003 0310 	and.w	r3, r3, #16
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d15a      	bne.n	800fbae <CTR_LP+0x186>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800faf8:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fafc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fb00:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800fb04:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800fb08:	6812      	ldr	r2, [r2, #0]
 800fb0a:	b292      	uxth	r2, r2
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800fb12:	400a      	ands	r2, r1
 800fb14:	601a      	str	r2, [r3, #0]
        In0_Process();
 800fb16:	f7ff fe3b 	bl	800f790 <In0_Process>

           /* before terminate set Tx & Rx status */

            _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800fb1a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fb1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800fb2a:	401c      	ands	r4, r3
 800fb2c:	f241 334e 	movw	r3, #4942	; 0x134e
 800fb30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb34:	881b      	ldrh	r3, [r3, #0]
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <CTR_LP+0x11e>
 800fb42:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800fb46:	f241 334e 	movw	r3, #4942	; 0x134e
 800fb4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb4e:	881b      	ldrh	r3, [r3, #0]
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <CTR_LP+0x138>
 800fb5c:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 800fb60:	f241 3350 	movw	r3, #4944	; 0x1350
 800fb64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb68:	881b      	ldrh	r3, [r3, #0]
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	f003 0310 	and.w	r3, r3, #16
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <CTR_LP+0x152>
 800fb76:	f084 0410 	eor.w	r4, r4, #16
 800fb7a:	f241 3350 	movw	r3, #4944	; 0x1350
 800fb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	f003 0320 	and.w	r3, r3, #32
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d001      	beq.n	800fb94 <CTR_LP+0x16c>
 800fb90:	f084 0420 	eor.w	r4, r4, #32
 800fb94:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800fb98:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800fb9c:	b2a1      	uxth	r1, r4
 800fb9e:	f248 0380 	movw	r3, #32896	; 0x8080
 800fba2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800fba6:	430b      	orrs	r3, r1
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	6013      	str	r3, [r2, #0]
		  return;
 800fbac:	e14b      	b.n	800fe46 <CTR_LP+0x41e>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800fbae:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fbb2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	80fb      	strh	r3, [r7, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800fbbc:	88fb      	ldrh	r3, [r7, #6]
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d05a      	beq.n	800fc7e <CTR_LP+0x256>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800fbc8:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fbcc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fbd0:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800fbd4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800fbd8:	6812      	ldr	r2, [r2, #0]
 800fbda:	b292      	uxth	r2, r2
 800fbdc:	4611      	mov	r1, r2
 800fbde:	f640 728f 	movw	r2, #3983	; 0xf8f
 800fbe2:	400a      	ands	r2, r1
 800fbe4:	601a      	str	r2, [r3, #0]
          Setup0_Process();
 800fbe6:	f7ff fd43 	bl	800f670 <Setup0_Process>
          /* before terminate set Tx & Rx status */

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800fbea:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fbee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800fbfa:	401c      	ands	r4, r3
 800fbfc:	f241 334e 	movw	r3, #4942	; 0x134e
 800fc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc04:	881b      	ldrh	r3, [r3, #0]
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d001      	beq.n	800fc16 <CTR_LP+0x1ee>
 800fc12:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800fc16:	f241 334e 	movw	r3, #4942	; 0x134e
 800fc1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d001      	beq.n	800fc30 <CTR_LP+0x208>
 800fc2c:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 800fc30:	f241 3350 	movw	r3, #4944	; 0x1350
 800fc34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	f003 0310 	and.w	r3, r3, #16
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <CTR_LP+0x222>
 800fc46:	f084 0410 	eor.w	r4, r4, #16
 800fc4a:	f241 3350 	movw	r3, #4944	; 0x1350
 800fc4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	f003 0320 	and.w	r3, r3, #32
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d001      	beq.n	800fc64 <CTR_LP+0x23c>
 800fc60:	f084 0420 	eor.w	r4, r4, #32
 800fc64:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800fc68:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800fc6c:	b2a1      	uxth	r1, r4
 800fc6e:	f248 0380 	movw	r3, #32896	; 0x8080
 800fc72:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800fc76:	430b      	orrs	r3, r1
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	6013      	str	r3, [r2, #0]
          return;
 800fc7c:	e0e3      	b.n	800fe46 <CTR_LP+0x41e>
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800fc7e:	88fb      	ldrh	r3, [r7, #6]
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	b21b      	sxth	r3, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f280 80cb 	bge.w	800fe22 <CTR_LP+0x3fa>
        {
          _ClearEP_CTR_RX(ENDP0);
 800fc8c:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fc90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fc94:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800fc98:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800fc9c:	6812      	ldr	r2, [r2, #0]
 800fc9e:	b292      	uxth	r2, r2
 800fca0:	4611      	mov	r1, r2
 800fca2:	f640 728f 	movw	r2, #3983	; 0xf8f
 800fca6:	400a      	ands	r2, r1
 800fca8:	601a      	str	r2, [r3, #0]
          Out0_Process();
 800fcaa:	f7ff fdcf 	bl	800f84c <Out0_Process>
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800fcae:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800fcb2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800fcbe:	401c      	ands	r4, r3
 800fcc0:	f241 334e 	movw	r3, #4942	; 0x134e
 800fcc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d001      	beq.n	800fcda <CTR_LP+0x2b2>
 800fcd6:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800fcda:	f241 334e 	movw	r3, #4942	; 0x134e
 800fcde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d001      	beq.n	800fcf4 <CTR_LP+0x2cc>
 800fcf0:	f484 5400 	eor.w	r4, r4, #8192	; 0x2000
 800fcf4:	f241 3350 	movw	r3, #4944	; 0x1350
 800fcf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	f003 0310 	and.w	r3, r3, #16
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <CTR_LP+0x2e6>
 800fd0a:	f084 0410 	eor.w	r4, r4, #16
 800fd0e:	f241 3350 	movw	r3, #4944	; 0x1350
 800fd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd16:	881b      	ldrh	r3, [r3, #0]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	f003 0320 	and.w	r3, r3, #32
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <CTR_LP+0x300>
 800fd24:	f084 0420 	eor.w	r4, r4, #32
 800fd28:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800fd2c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800fd30:	b2a1      	uxth	r1, r4
 800fd32:	f248 0380 	movw	r3, #32896	; 0x8080
 800fd36:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800fd3a:	430b      	orrs	r3, r1
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	6013      	str	r3, [r2, #0]
          return;
 800fd40:	e081      	b.n	800fe46 <CTR_LP+0x41e>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800fd42:	f241 3324 	movw	r3, #4900	; 0x1324
 800fd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fd50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fd54:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	80fb      	strh	r3, [r7, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800fd5e:	88fb      	ldrh	r3, [r7, #6]
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	b21b      	sxth	r3, r3
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	da2a      	bge.n	800fdc0 <CTR_LP+0x398>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800fd6a:	f241 3324 	movw	r3, #4900	; 0x1324
 800fd6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fd78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fd7c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800fd80:	f241 3224 	movw	r2, #4900	; 0x1324
 800fd84:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800fd88:	7812      	ldrb	r2, [r2, #0]
 800fd8a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fd8e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800fd92:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800fd96:	6812      	ldr	r2, [r2, #0]
 800fd98:	b292      	uxth	r2, r2
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	f640 728f 	movw	r2, #3983	; 0xf8f
 800fda0:	400a      	ands	r2, r1
 800fda2:	601a      	str	r2, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800fda4:	f241 3324 	movw	r3, #4900	; 0x1324
 800fda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800fdb2:	f240 2340 	movw	r3, #576	; 0x240
 800fdb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdbe:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800fdc0:	88fb      	ldrh	r3, [r7, #6]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d02a      	beq.n	800fe22 <CTR_LP+0x3fa>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800fdcc:	f241 3324 	movw	r3, #4900	; 0x1324
 800fdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fdda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fdde:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800fde2:	f241 3224 	movw	r2, #4900	; 0x1324
 800fde6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800fdea:	7812      	ldrb	r2, [r2, #0]
 800fdec:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fdf0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800fdf4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800fdf8:	6812      	ldr	r2, [r2, #0]
 800fdfa:	b292      	uxth	r2, r2
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800fe02:	400a      	ands	r2, r1
 800fe04:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800fe06:	f241 3324 	movw	r3, #4900	; 0x1324
 800fe0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800fe14:	f240 2324 	movw	r3, #548	; 0x224
 800fe18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe20:	4798      	blx	r3
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800fe22:	f645 4344 	movw	r3, #23620	; 0x5c44
 800fe26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	461a      	mov	r2, r3
 800fe30:	f241 3314 	movw	r3, #4884	; 0x1314
 800fe34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800fe38:	4611      	mov	r1, r2
 800fe3a:	8019      	strh	r1, [r3, #0]
 800fe3c:	b293      	uxth	r3, r2
 800fe3e:	b21b      	sxth	r3, r3
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	f6ff adf8 	blt.w	800fa36 <CTR_LP+0xe>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800fe46:	f107 070c 	add.w	r7, r7, #12
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd90      	pop	{r4, r7, pc}
 800fe4e:	bf00      	nop

0800fe50 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b089      	sub	sp, #36	; 0x24
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	4613      	mov	r3, r2
 800fe5a:	460a      	mov	r2, r1
 800fe5c:	807a      	strh	r2, [r7, #2]
 800fe5e:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800fe60:	883b      	ldrh	r3, [r7, #0]
 800fe62:	f103 0301 	add.w	r3, r3, #1
 800fe66:	ea4f 0363 	mov.w	r3, r3, asr #1
 800fe6a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800fe6c:	887b      	ldrh	r3, [r7, #2]
 800fe6e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fe72:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fe76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe7a:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0; i--)
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	61fb      	str	r3, [r7, #28]
 800fe80:	e022      	b.n	800fec8 <UserToPMABufferCopy+0x78>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	613b      	str	r3, [r7, #16]
    pbUsrBuf++;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f103 0301 	add.w	r3, r3, #1
 800fe8e:	607b      	str	r3, [r7, #4]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fe98:	461a      	mov	r2, r3
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	60fb      	str	r3, [r7, #12]
    *pdwVal++ = temp2;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	801a      	strh	r2, [r3, #0]
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	f103 0302 	add.w	r3, r3, #2
 800feae:	61bb      	str	r3, [r7, #24]
    pdwVal++;
 800feb0:	69bb      	ldr	r3, [r7, #24]
 800feb2:	f103 0302 	add.w	r3, r3, #2
 800feb6:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f103 0301 	add.w	r3, r3, #1
 800febe:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fec6:	61fb      	str	r3, [r7, #28]
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d1d9      	bne.n	800fe82 <UserToPMABufferCopy+0x32>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800fece:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bc80      	pop	{r7}
 800fed6:	4770      	bx	lr

0800fed8 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fed8:	b480      	push	{r7}
 800feda:	b087      	sub	sp, #28
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	4613      	mov	r3, r2
 800fee2:	460a      	mov	r2, r1
 800fee4:	807a      	strh	r2, [r7, #2]
 800fee6:	803b      	strh	r3, [r7, #0]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800fee8:	883b      	ldrh	r3, [r7, #0]
 800feea:	f103 0301 	add.w	r3, r3, #1
 800feee:	ea4f 0363 	mov.w	r3, r3, asr #1
 800fef2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800fef4:	887b      	ldrh	r3, [r7, #2]
 800fef6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800fefa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800fefe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff02:	613b      	str	r3, [r7, #16]
  for (i = n; i != 0; i--)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	617b      	str	r3, [r7, #20]
 800ff08:	e014      	b.n	800ff34 <PMAToUserBufferCopy+0x5c>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	b29a      	uxth	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	801a      	strh	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f103 0301 	add.w	r3, r3, #1
 800ff1a:	607b      	str	r3, [r7, #4]
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	f103 0304 	add.w	r3, r3, #4
 800ff22:	613b      	str	r3, [r7, #16]
    pbUsrBuf++;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f103 0301 	add.w	r3, r3, #1
 800ff2a:	607b      	str	r3, [r7, #4]
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ff32:	617b      	str	r3, [r7, #20]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1e7      	bne.n	800ff0a <PMAToUserBufferCopy+0x32>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800ff3a:	f107 071c 	add.w	r7, r7, #28
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bc80      	pop	{r7}
 800ff42:	4770      	bx	lr

0800ff44 <SetBTABLE>:
* Input          : wRegValue: New register value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	80fb      	strh	r3, [r7, #6]
  _SetBTABLE(wRegValue);
 800ff4e:	f645 4350 	movw	r3, #23632	; 0x5c50
 800ff52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ff56:	88f9      	ldrh	r1, [r7, #6]
 800ff58:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 800ff5c:	400a      	ands	r2, r1
 800ff5e:	601a      	str	r2, [r3, #0]
}
 800ff60:	f107 070c 	add.w	r7, r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bc80      	pop	{r7}
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop

0800ff6c <SetEPType>:
*                  wType: type definition.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	4602      	mov	r2, r0
 800ff74:	460b      	mov	r3, r1
 800ff76:	71fa      	strb	r2, [r7, #7]
 800ff78:	80bb      	strh	r3, [r7, #4]
  _SetEPType(bEpNum, wType);
 800ff7a:	79fb      	ldrb	r3, [r7, #7]
 800ff7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ff80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ff84:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ff88:	79fa      	ldrb	r2, [r7, #7]
 800ff8a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800ff8e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ff92:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800ff96:	6812      	ldr	r2, [r2, #0]
 800ff98:	b292      	uxth	r2, r2
 800ff9a:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800ff9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ffa2:	b291      	uxth	r1, r2
 800ffa4:	88ba      	ldrh	r2, [r7, #4]
 800ffa6:	430a      	orrs	r2, r1
 800ffa8:	b292      	uxth	r2, r2
 800ffaa:	b292      	uxth	r2, r2
 800ffac:	601a      	str	r2, [r3, #0]
}
 800ffae:	f107 070c 	add.w	r7, r7, #12
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bc80      	pop	{r7}
 800ffb6:	4770      	bx	lr

0800ffb8 <SetEPTxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 800ffb8:	b490      	push	{r4, r7}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	71fa      	strb	r2, [r7, #7]
 800ffc4:	80bb      	strh	r3, [r7, #4]
  _SetEPTxStatus(bEpNum, wState);
 800ffc6:	79fb      	ldrb	r3, [r7, #7]
 800ffc8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ffcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ffd0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ffe0:	b29c      	uxth	r4, r3
 800ffe2:	88bb      	ldrh	r3, [r7, #4]
 800ffe4:	f003 0310 	and.w	r3, r3, #16
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d002      	beq.n	800fff4 <SetEPTxStatus+0x3c>
 800ffee:	f084 0310 	eor.w	r3, r4, #16
 800fff2:	b29c      	uxth	r4, r3
 800fff4:	88bb      	ldrh	r3, [r7, #4]
 800fff6:	f003 0320 	and.w	r3, r3, #32
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d002      	beq.n	8010006 <SetEPTxStatus+0x4e>
 8010000:	f084 0320 	eor.w	r3, r4, #32
 8010004:	b29c      	uxth	r4, r3
 8010006:	79fb      	ldrb	r3, [r7, #7]
 8010008:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801000c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8010010:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8010014:	f248 0380 	movw	r3, #32896	; 0x8080
 8010018:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 801001c:	4323      	orrs	r3, r4
 801001e:	b29b      	uxth	r3, r3
 8010020:	6013      	str	r3, [r2, #0]
}
 8010022:	f107 0708 	add.w	r7, r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bc90      	pop	{r4, r7}
 801002a:	4770      	bx	lr

0801002c <SetEPRxStatus>:
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 801002c:	b490      	push	{r4, r7}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	71fa      	strb	r2, [r7, #7]
 8010038:	80bb      	strh	r3, [r7, #4]
  _SetEPRxStatus(bEpNum, wState);
 801003a:	79fb      	ldrb	r3, [r7, #7]
 801003c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010040:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010044:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	b29b      	uxth	r3, r3
 801004c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010054:	b29c      	uxth	r4, r3
 8010056:	88bb      	ldrh	r3, [r7, #4]
 8010058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801005c:	b29b      	uxth	r3, r3
 801005e:	2b00      	cmp	r3, #0
 8010060:	d002      	beq.n	8010068 <SetEPRxStatus+0x3c>
 8010062:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8010066:	b29c      	uxth	r4, r3
 8010068:	88bb      	ldrh	r3, [r7, #4]
 801006a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801006e:	b29b      	uxth	r3, r3
 8010070:	2b00      	cmp	r3, #0
 8010072:	d002      	beq.n	801007a <SetEPRxStatus+0x4e>
 8010074:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8010078:	b29c      	uxth	r4, r3
 801007a:	79fb      	ldrb	r3, [r7, #7]
 801007c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010080:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8010084:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8010088:	f248 0380 	movw	r3, #32896	; 0x8080
 801008c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8010090:	4323      	orrs	r3, r4
 8010092:	b29b      	uxth	r3, r3
 8010094:	6013      	str	r3, [r2, #0]
}
 8010096:	f107 0708 	add.w	r7, r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bc90      	pop	{r4, r7}
 801009e:	4770      	bx	lr

080100a0 <SetEPTxValid>:
* Input          : bEpNum: Endpoint Number.  
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
 80100a0:	b490      	push	{r4, r7}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	4603      	mov	r3, r0
 80100a8:	71fb      	strb	r3, [r7, #7]
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 80100aa:	79fb      	ldrb	r3, [r7, #7]
 80100ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80100b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80100b4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100c4:	b29c      	uxth	r4, r3
 80100c6:	f084 0310 	eor.w	r3, r4, #16
 80100ca:	b29c      	uxth	r4, r3
 80100cc:	f084 0320 	eor.w	r3, r4, #32
 80100d0:	b29c      	uxth	r4, r3
 80100d2:	79fb      	ldrb	r3, [r7, #7]
 80100d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80100d8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80100dc:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80100e0:	f248 0380 	movw	r3, #32896	; 0x8080
 80100e4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80100e8:	4323      	orrs	r3, r4
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	6013      	str	r3, [r2, #0]
}
 80100ee:	f107 0708 	add.w	r7, r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bc90      	pop	{r4, r7}
 80100f6:	4770      	bx	lr

080100f8 <SetEPRxValid>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
 80100f8:	b490      	push	{r4, r7}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	71fb      	strb	r3, [r7, #7]
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8010102:	79fb      	ldrb	r3, [r7, #7]
 8010104:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801010c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	b29b      	uxth	r3, r3
 8010114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801011c:	b29c      	uxth	r4, r3
 801011e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8010122:	b29c      	uxth	r4, r3
 8010124:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8010128:	b29c      	uxth	r4, r3
 801012a:	79fb      	ldrb	r3, [r7, #7]
 801012c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010130:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8010134:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8010138:	f248 0380 	movw	r3, #32896	; 0x8080
 801013c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8010140:	4323      	orrs	r3, r4
 8010142:	b29b      	uxth	r3, r3
 8010144:	6013      	str	r3, [r2, #0]
}
 8010146:	f107 0708 	add.w	r7, r7, #8
 801014a:	46bd      	mov	sp, r7
 801014c:	bc90      	pop	{r4, r7}
 801014e:	4770      	bx	lr

08010150 <Clear_Status_Out>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	4603      	mov	r3, r0
 8010158:	71fb      	strb	r3, [r7, #7]
  _ClearEP_KIND(bEpNum);
 801015a:	79fb      	ldrb	r3, [r7, #7]
 801015c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010160:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8010164:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8010168:	79fb      	ldrb	r3, [r7, #7]
 801016a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801016e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010172:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	b29b      	uxth	r3, r3
 801017a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 801017e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8010182:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8010186:	b29b      	uxth	r3, r3
 8010188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801018c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010198:	b29b      	uxth	r3, r3
 801019a:	b29b      	uxth	r3, r3
 801019c:	6013      	str	r3, [r2, #0]
}
 801019e:	f107 070c 	add.w	r7, r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bc80      	pop	{r7}
 80101a6:	4770      	bx	lr

080101a8 <ClearDTOG_RX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	4603      	mov	r3, r0
 80101b0:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_RX(bEpNum);
 80101b2:	79fb      	ldrb	r3, [r7, #7]
 80101b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80101b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80101bc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d018      	beq.n	80101fe <ClearDTOG_RX+0x56>
 80101cc:	79fb      	ldrb	r3, [r7, #7]
 80101ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80101d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80101d6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80101da:	79fa      	ldrb	r2, [r7, #7]
 80101dc:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80101e0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80101e4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80101e8:	6812      	ldr	r2, [r2, #0]
 80101ea:	b292      	uxth	r2, r2
 80101ec:	4611      	mov	r1, r2
 80101ee:	f640 720f 	movw	r2, #3855	; 0xf0f
 80101f2:	400a      	ands	r2, r1
 80101f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80101f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80101fc:	601a      	str	r2, [r3, #0]
}
 80101fe:	f107 070c 	add.w	r7, r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	bc80      	pop	{r7}
 8010206:	4770      	bx	lr

08010208 <ClearDTOG_TX>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	4603      	mov	r3, r0
 8010210:	71fb      	strb	r3, [r7, #7]
  _ClearDTOG_TX(bEpNum);
 8010212:	79fb      	ldrb	r3, [r7, #7]
 8010214:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801021c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	b29b      	uxth	r3, r3
 8010224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010228:	2b00      	cmp	r3, #0
 801022a:	d018      	beq.n	801025e <ClearDTOG_TX+0x56>
 801022c:	79fb      	ldrb	r3, [r7, #7]
 801022e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010232:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010236:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 801023a:	79fa      	ldrb	r2, [r7, #7]
 801023c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8010240:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010244:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8010248:	6812      	ldr	r2, [r2, #0]
 801024a:	b292      	uxth	r2, r2
 801024c:	4611      	mov	r1, r2
 801024e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8010252:	400a      	ands	r2, r1
 8010254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010258:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 801025c:	601a      	str	r2, [r3, #0]
}
 801025e:	f107 070c 	add.w	r7, r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	bc80      	pop	{r7}
 8010266:	4770      	bx	lr

08010268 <SetEPTxAddr>:
*                  wAddr: new address. 
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	71fa      	strb	r2, [r7, #7]
 8010274:	80bb      	strh	r3, [r7, #4]
  _SetEPTxAddr(bEpNum, wAddr);
 8010276:	f645 4350 	movw	r3, #23632	; 0x5c50
 801027a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	b29b      	uxth	r3, r3
 8010282:	461a      	mov	r2, r3
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801028a:	18d3      	adds	r3, r2, r3
 801028c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010290:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010294:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010298:	88ba      	ldrh	r2, [r7, #4]
 801029a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801029e:	b292      	uxth	r2, r2
 80102a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80102a4:	601a      	str	r2, [r3, #0]
}
 80102a6:	f107 070c 	add.w	r7, r7, #12
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bc80      	pop	{r7}
 80102ae:	4770      	bx	lr

080102b0 <SetEPRxAddr>:
*                  wAddr: new address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	4602      	mov	r2, r0
 80102b8:	460b      	mov	r3, r1
 80102ba:	71fa      	strb	r2, [r7, #7]
 80102bc:	80bb      	strh	r3, [r7, #4]
  _SetEPRxAddr(bEpNum, wAddr);
 80102be:	f645 4350 	movw	r3, #23632	; 0x5c50
 80102c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	461a      	mov	r2, r3
 80102cc:	79fb      	ldrb	r3, [r7, #7]
 80102ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80102d2:	18d2      	adds	r2, r2, r3
 80102d4:	f243 0304 	movw	r3, #12292	; 0x3004
 80102d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80102dc:	18d3      	adds	r3, r2, r3
 80102de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80102e2:	88ba      	ldrh	r2, [r7, #4]
 80102e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80102e8:	b292      	uxth	r2, r2
 80102ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80102ee:	601a      	str	r2, [r3, #0]
}
 80102f0:	f107 070c 	add.w	r7, r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bc80      	pop	{r7}
 80102f8:	4770      	bx	lr
 80102fa:	bf00      	nop

080102fc <GetEPTxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	4603      	mov	r3, r0
 8010304:	71fb      	strb	r3, [r7, #7]
  return(_GetEPTxAddr(bEpNum));
 8010306:	f645 4350 	movw	r3, #23632	; 0x5c50
 801030a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	b29b      	uxth	r3, r3
 8010312:	461a      	mov	r2, r3
 8010314:	79fb      	ldrb	r3, [r7, #7]
 8010316:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801031a:	18d3      	adds	r3, r2, r3
 801031c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010320:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8010324:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	b29b      	uxth	r3, r3
}
 801032c:	4618      	mov	r0, r3
 801032e:	f107 070c 	add.w	r7, r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	bc80      	pop	{r7}
 8010336:	4770      	bx	lr

08010338 <GetEPRxAddr>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxAddr(bEpNum));
 8010342:	f645 4350 	movw	r3, #23632	; 0x5c50
 8010346:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	b29b      	uxth	r3, r3
 801034e:	461a      	mov	r2, r3
 8010350:	79fb      	ldrb	r3, [r7, #7]
 8010352:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010356:	18d2      	adds	r2, r2, r3
 8010358:	f243 0304 	movw	r3, #12292	; 0x3004
 801035c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010360:	18d3      	adds	r3, r2, r3
 8010362:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	b29b      	uxth	r3, r3
}
 801036a:	4618      	mov	r0, r3
 801036c:	f107 070c 	add.w	r7, r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	bc80      	pop	{r7}
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop

08010378 <SetEPTxCount>:
*                  wCount: new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
 801037e:	4602      	mov	r2, r0
 8010380:	460b      	mov	r3, r1
 8010382:	71fa      	strb	r2, [r7, #7]
 8010384:	80bb      	strh	r3, [r7, #4]
  _SetEPTxCount(bEpNum, wCount);
 8010386:	f645 4350 	movw	r3, #23632	; 0x5c50
 801038a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	b29b      	uxth	r3, r3
 8010392:	461a      	mov	r2, r3
 8010394:	79fb      	ldrb	r3, [r7, #7]
 8010396:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801039a:	18d2      	adds	r2, r2, r3
 801039c:	f243 0302 	movw	r3, #12290	; 0x3002
 80103a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80103a4:	18d3      	adds	r3, r2, r3
 80103a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80103aa:	88ba      	ldrh	r2, [r7, #4]
 80103ac:	601a      	str	r2, [r3, #0]
}
 80103ae:	f107 070c 	add.w	r7, r7, #12
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bc80      	pop	{r7}
 80103b6:	4770      	bx	lr

080103b8 <SetEPRxCount>:
*                  wCount: the new count value.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b085      	sub	sp, #20
 80103bc:	af00      	add	r7, sp, #0
 80103be:	4602      	mov	r2, r0
 80103c0:	460b      	mov	r3, r1
 80103c2:	71fa      	strb	r2, [r7, #7]
 80103c4:	80bb      	strh	r3, [r7, #4]
  _SetEPRxCount(bEpNum, wCount);
 80103c6:	f645 4350 	movw	r3, #23632	; 0x5c50
 80103ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	461a      	mov	r2, r3
 80103d4:	79fb      	ldrb	r3, [r7, #7]
 80103d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80103da:	18d2      	adds	r2, r2, r3
 80103dc:	f243 0306 	movw	r3, #12294	; 0x3006
 80103e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80103e4:	18d3      	adds	r3, r2, r3
 80103e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80103ea:	60bb      	str	r3, [r7, #8]
 80103ec:	88bb      	ldrh	r3, [r7, #4]
 80103ee:	2b3e      	cmp	r3, #62	; 0x3e
 80103f0:	d915      	bls.n	801041e <SetEPRxCount+0x66>
 80103f2:	88bb      	ldrh	r3, [r7, #4]
 80103f4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80103f8:	81fb      	strh	r3, [r7, #14]
 80103fa:	88bb      	ldrh	r3, [r7, #4]
 80103fc:	f003 031f 	and.w	r3, r3, #31
 8010400:	2b00      	cmp	r3, #0
 8010402:	d103      	bne.n	801040c <SetEPRxCount+0x54>
 8010404:	89fb      	ldrh	r3, [r7, #14]
 8010406:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801040a:	81fb      	strh	r3, [r7, #14]
 801040c:	89fb      	ldrh	r3, [r7, #14]
 801040e:	ea4f 2383 	mov.w	r3, r3, lsl #10
 8010412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010416:	461a      	mov	r2, r3
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	601a      	str	r2, [r3, #0]
 801041c:	e012      	b.n	8010444 <SetEPRxCount+0x8c>
 801041e:	88bb      	ldrh	r3, [r7, #4]
 8010420:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8010424:	81fb      	strh	r3, [r7, #14]
 8010426:	88bb      	ldrh	r3, [r7, #4]
 8010428:	f003 0301 	and.w	r3, r3, #1
 801042c:	2b00      	cmp	r3, #0
 801042e:	d003      	beq.n	8010438 <SetEPRxCount+0x80>
 8010430:	89fb      	ldrh	r3, [r7, #14]
 8010432:	f103 0301 	add.w	r3, r3, #1
 8010436:	81fb      	strh	r3, [r7, #14]
 8010438:	89fb      	ldrh	r3, [r7, #14]
 801043a:	ea4f 2383 	mov.w	r3, r3, lsl #10
 801043e:	461a      	mov	r2, r3
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	601a      	str	r2, [r3, #0]
}
 8010444:	f107 0714 	add.w	r7, r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	bc80      	pop	{r7}
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop

08010450 <GetEPRxCount>:
* Input          : bEpNum: Endpoint Number. 
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	4603      	mov	r3, r0
 8010458:	71fb      	strb	r3, [r7, #7]
  return(_GetEPRxCount(bEpNum));
 801045a:	f645 4350 	movw	r3, #23632	; 0x5c50
 801045e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	b29b      	uxth	r3, r3
 8010466:	461a      	mov	r2, r3
 8010468:	79fb      	ldrb	r3, [r7, #7]
 801046a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801046e:	18d2      	adds	r2, r2, r3
 8010470:	f243 0306 	movw	r3, #12294	; 0x3006
 8010474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010478:	18d3      	adds	r3, r2, r3
 801047a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	b29b      	uxth	r3, r3
 8010482:	ea4f 5383 	mov.w	r3, r3, lsl #22
 8010486:	ea4f 5393 	mov.w	r3, r3, lsr #22
 801048a:	b29b      	uxth	r3, r3
}
 801048c:	4618      	mov	r0, r3
 801048e:	f107 070c 	add.w	r7, r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	bc80      	pop	{r7}
 8010496:	4770      	bx	lr

08010498 <ByteSwap>:
* Input          : wSwW: word to Swap.
* Output         : None.
* Return         : resulted word.
*******************************************************************************/
uint16_t ByteSwap(uint16_t wSwW)
{
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
 801049e:	4603      	mov	r3, r0
 80104a0:	80fb      	strh	r3, [r7, #6]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
 80104a2:	88fb      	ldrh	r3, [r7, #6]
 80104a4:	73fb      	strb	r3, [r7, #15]
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 80104a6:	88fb      	ldrh	r3, [r7, #6]
 80104a8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	7bfb      	ldrb	r3, [r7, #15]
 80104b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	4313      	orrs	r3, r2
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	81bb      	strh	r3, [r7, #12]
  return(wRet);
 80104be:	89bb      	ldrh	r3, [r7, #12]
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	f107 0714 	add.w	r7, r7, #20
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bc80      	pop	{r7}
 80104ca:	4770      	bx	lr

080104cc <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 80104cc:	b480      	push	{r7}
 80104ce:	af00      	add	r7, sp, #0
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80104d0:	f645 4344 	movw	r3, #23620	; 0x5c44
 80104d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80104d8:	f04f 0200 	mov.w	r2, #0
 80104dc:	601a      	str	r2, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 80104de:	f241 334c 	movw	r3, #4940	; 0x134c
 80104e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80104e6:	f44f 4206 	mov.w	r2, #34304	; 0x8600
 80104ea:	801a      	strh	r2, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80104ec:	f645 4340 	movw	r3, #23616	; 0x5c40
 80104f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80104f4:	f241 324c 	movw	r2, #4940	; 0x134c
 80104f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80104fc:	8812      	ldrh	r2, [r2, #0]
 80104fe:	601a      	str	r2, [r3, #0]
  return 0;
 8010500:	f04f 0300 	mov.w	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	46bd      	mov	sp, r7
 8010508:	bc80      	pop	{r7}
 801050a:	4770      	bx	lr

0801050c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8010514:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8010518:	f2ce 0300 	movt	r3, #57344	; 0xe000
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8010522:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010526:	60da      	str	r2, [r3, #12]
}
 8010528:	f107 070c 	add.w	r7, r7, #12
 801052c:	46bd      	mov	sp, r7
 801052e:	bc80      	pop	{r7}
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop

08010534 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8010534:	b480      	push	{r7}
 8010536:	b087      	sub	sp, #28
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 801053c:	f04f 0300 	mov.w	r3, #0
 8010540:	617b      	str	r3, [r7, #20]
 8010542:	f04f 0300 	mov.w	r3, #0
 8010546:	613b      	str	r3, [r7, #16]
 8010548:	f04f 030f 	mov.w	r3, #15
 801054c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	78db      	ldrb	r3, [r3, #3]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d047      	beq.n	80105e6 <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8010556:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 801055a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	ea6f 0303 	mvn.w	r3, r3
 8010564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010568:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801056c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	f1c3 0304 	rsb	r3, r3, #4
 8010574:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	fa22 f303 	lsr.w	r3, r2, r3
 801057e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	785b      	ldrb	r3, [r3, #1]
 8010584:	461a      	mov	r2, r3
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	fa02 f303 	lsl.w	r3, r2, r3
 801058c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	789b      	ldrb	r3, [r3, #2]
 8010592:	461a      	mov	r2, r3
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	4013      	ands	r3, r2
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	4313      	orrs	r3, r2
 801059c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80105a4:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80105a6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80105aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	7812      	ldrb	r2, [r2, #0]
 80105b2:	4611      	mov	r1, r2
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	b2d2      	uxtb	r2, r2
 80105b8:	185b      	adds	r3, r3, r1
 80105ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80105be:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80105c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	7812      	ldrb	r2, [r2, #0]
 80105ca:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80105ce:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80105d0:	6879      	ldr	r1, [r7, #4]
 80105d2:	7809      	ldrb	r1, [r1, #0]
 80105d4:	f001 011f 	and.w	r1, r1, #31
 80105d8:	f04f 0001 	mov.w	r0, #1
 80105dc:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80105e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80105e4:	e014      	b.n	8010610 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80105e6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80105ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80105ee:	687a      	ldr	r2, [r7, #4]
 80105f0:	7812      	ldrb	r2, [r2, #0]
 80105f2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80105f6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80105f8:	6879      	ldr	r1, [r7, #4]
 80105fa:	7809      	ldrb	r1, [r1, #0]
 80105fc:	f001 011f 	and.w	r1, r1, #31
 8010600:	f04f 0001 	mov.w	r0, #1
 8010604:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8010608:	f102 0220 	add.w	r2, r2, #32
 801060c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8010610:	f107 071c 	add.w	r7, r7, #28
 8010614:	46bd      	mov	sp, r7
 8010616:	bc80      	pop	{r7}
 8010618:	4770      	bx	lr
 801061a:	bf00      	nop

0801061c <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8010626:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 801062a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 801062e:	683a      	ldr	r2, [r7, #0]
 8010630:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8010634:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8010638:	6879      	ldr	r1, [r7, #4]
 801063a:	430a      	orrs	r2, r1
 801063c:	609a      	str	r2, [r3, #8]
}
 801063e:	f107 070c 	add.w	r7, r7, #12
 8010642:	46bd      	mov	sp, r7
 8010644:	bc80      	pop	{r7}
 8010646:	4770      	bx	lr

08010648 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8010658:	4013      	ands	r3, r2
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f04f 0200 	mov.w	r2, #0
 8010664:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f04f 0200 	mov.w	r2, #0
 801066c:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f04f 0200 	mov.w	r2, #0
 8010674:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f04f 0200 	mov.w	r2, #0
 801067c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	f04f 0308 	mov.w	r3, #8
 8010684:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010688:	429a      	cmp	r2, r3
 801068a:	d10c      	bne.n	80106a6 <DMA_DeInit+0x5e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 801068c:	f04f 0300 	mov.w	r3, #0
 8010690:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010694:	f04f 0200 	mov.w	r2, #0
 8010698:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801069c:	6852      	ldr	r2, [r2, #4]
 801069e:	f042 020f 	orr.w	r2, r2, #15
 80106a2:	605a      	str	r2, [r3, #4]
 80106a4:	e0da      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	f04f 031c 	mov.w	r3, #28
 80106ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d10c      	bne.n	80106ce <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 80106b4:	f04f 0300 	mov.w	r3, #0
 80106b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80106bc:	f04f 0200 	mov.w	r2, #0
 80106c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80106c4:	6852      	ldr	r2, [r2, #4]
 80106c6:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80106ca:	605a      	str	r2, [r3, #4]
 80106cc:	e0c6      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80106d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80106d8:	429a      	cmp	r2, r3
 80106da:	d10c      	bne.n	80106f6 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 80106dc:	f04f 0300 	mov.w	r3, #0
 80106e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80106e4:	f04f 0200 	mov.w	r2, #0
 80106e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80106ec:	6852      	ldr	r2, [r2, #4]
 80106ee:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 80106f2:	605a      	str	r2, [r3, #4]
 80106f4:	e0b2      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	f04f 0344 	mov.w	r3, #68	; 0x44
 80106fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010700:	429a      	cmp	r2, r3
 8010702:	d10c      	bne.n	801071e <DMA_DeInit+0xd6>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8010704:	f04f 0300 	mov.w	r3, #0
 8010708:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801070c:	f04f 0200 	mov.w	r2, #0
 8010710:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010714:	6852      	ldr	r2, [r2, #4]
 8010716:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 801071a:	605a      	str	r2, [r3, #4]
 801071c:	e09e      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	f04f 0358 	mov.w	r3, #88	; 0x58
 8010724:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010728:	429a      	cmp	r2, r3
 801072a:	d10c      	bne.n	8010746 <DMA_DeInit+0xfe>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 801072c:	f04f 0300 	mov.w	r3, #0
 8010730:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010734:	f04f 0200 	mov.w	r2, #0
 8010738:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801073c:	6852      	ldr	r2, [r2, #4]
 801073e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8010742:	605a      	str	r2, [r3, #4]
 8010744:	e08a      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	f04f 036c 	mov.w	r3, #108	; 0x6c
 801074c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010750:	429a      	cmp	r2, r3
 8010752:	d10c      	bne.n	801076e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8010754:	f04f 0300 	mov.w	r3, #0
 8010758:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801075c:	f04f 0200 	mov.w	r2, #0
 8010760:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010764:	6852      	ldr	r2, [r2, #4]
 8010766:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 801076a:	605a      	str	r2, [r3, #4]
 801076c:	e076      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	f04f 0380 	mov.w	r3, #128	; 0x80
 8010774:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010778:	429a      	cmp	r2, r3
 801077a:	d10c      	bne.n	8010796 <DMA_DeInit+0x14e>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 801077c:	f04f 0300 	mov.w	r3, #0
 8010780:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010784:	f04f 0200 	mov.w	r2, #0
 8010788:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801078c:	6852      	ldr	r2, [r2, #4]
 801078e:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 8010792:	605a      	str	r2, [r3, #4]
 8010794:	e062      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	f44f 6381 	mov.w	r3, #1032	; 0x408
 801079c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d10c      	bne.n	80107be <DMA_DeInit+0x176>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 80107a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80107ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80107b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80107b4:	6852      	ldr	r2, [r2, #4]
 80107b6:	f042 020f 	orr.w	r2, r2, #15
 80107ba:	605a      	str	r2, [r3, #4]
 80107bc:	e04e      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	f240 431c 	movw	r3, #1052	; 0x41c
 80107c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d10c      	bne.n	80107e6 <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 80107cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80107d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80107d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80107dc:	6852      	ldr	r2, [r2, #4]
 80107de:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80107e2:	605a      	str	r2, [r3, #4]
 80107e4:	e03a      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80107ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d10c      	bne.n	801080e <DMA_DeInit+0x1c6>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 80107f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80107fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010800:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010804:	6852      	ldr	r2, [r2, #4]
 8010806:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 801080a:	605a      	str	r2, [r3, #4]
 801080c:	e026      	b.n	801085c <DMA_DeInit+0x214>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	f240 4344 	movw	r3, #1092	; 0x444
 8010814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010818:	429a      	cmp	r2, r3
 801081a:	d10c      	bne.n	8010836 <DMA_DeInit+0x1ee>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 801081c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010820:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010828:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801082c:	6852      	ldr	r2, [r2, #4]
 801082e:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8010832:	605a      	str	r2, [r3, #4]
 8010834:	e012      	b.n	801085c <DMA_DeInit+0x214>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	f44f 638b 	mov.w	r3, #1112	; 0x458
 801083c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010840:	429a      	cmp	r2, r3
 8010842:	d10b      	bne.n	801085c <DMA_DeInit+0x214>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8010844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010848:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801084c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010850:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010854:	6852      	ldr	r2, [r2, #4]
 8010856:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 801085a:	605a      	str	r2, [r3, #4]
    }
  }
}
 801085c:	f107 070c 	add.w	r7, r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	bc80      	pop	{r7}
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop

08010868 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8010868:	b480      	push	{r7}
 801086a:	b085      	sub	sp, #20
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010872:	f04f 0300 	mov.w	r3, #0
 8010876:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8010884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010888:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	689a      	ldr	r2, [r3, #8]
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8010898:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	695b      	ldr	r3, [r3, #20]
 801089e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80108a4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	69db      	ldr	r3, [r3, #28]
 80108aa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80108b0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108b6:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80108b8:	68fa      	ldr	r2, [r7, #12]
 80108ba:	4313      	orrs	r3, r2
 80108bc:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	68da      	ldr	r2, [r3, #12]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	685a      	ldr	r2, [r3, #4]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	60da      	str	r2, [r3, #12]
}
 80108dc:	f107 0714 	add.w	r7, r7, #20
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bc80      	pop	{r7}
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop

080108e8 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	460b      	mov	r3, r1
 80108f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80108f4:	78fb      	ldrb	r3, [r7, #3]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d006      	beq.n	8010908 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f043 0201 	orr.w	r2, r3, #1
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	601a      	str	r2, [r3, #0]
 8010906:	e006      	b.n	8010916 <DMA_Cmd+0x2e>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8010910:	4013      	ands	r3, r2
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	6013      	str	r3, [r2, #0]
  }
}
 8010916:	f107 070c 	add.w	r7, r7, #12
 801091a:	46bd      	mov	sp, r7
 801091c:	bc80      	pop	{r7}
 801091e:	4770      	bx	lr

08010920 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8010920:	b480      	push	{r7}
 8010922:	b085      	sub	sp, #20
 8010924:	af00      	add	r7, sp, #0
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	60b9      	str	r1, [r7, #8]
 801092a:	4613      	mov	r3, r2
 801092c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801092e:	79fb      	ldrb	r3, [r7, #7]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d006      	beq.n	8010942 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	431a      	orrs	r2, r3
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	601a      	str	r2, [r3, #0]
 8010940:	e007      	b.n	8010952 <DMA_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	ea6f 0303 	mvn.w	r3, r3
 801094c:	401a      	ands	r2, r3
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	601a      	str	r2, [r3, #0]
  }
}
 8010952:	f107 0714 	add.w	r7, r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	bc80      	pop	{r7}
 801095a:	4770      	bx	lr

0801095c <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	b29b      	uxth	r3, r3
}
 801096a:	4618      	mov	r0, r3
 801096c:	f107 070c 	add.w	r7, r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	bc80      	pop	{r7}
 8010974:	4770      	bx	lr
 8010976:	bf00      	nop

08010978 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8010980:	f04f 0300 	mov.w	r3, #0
 8010984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8010986:	f04f 0300 	mov.w	r3, #0
 801098a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010992:	2b00      	cmp	r3, #0
 8010994:	d006      	beq.n	80109a4 <DMA_GetFlagStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8010996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801099a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	60bb      	str	r3, [r7, #8]
 80109a2:	e005      	b.n	80109b0 <DMA_GetFlagStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 80109a4:	f04f 0300 	mov.w	r3, #0
 80109a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80109b0:	68ba      	ldr	r2, [r7, #8]
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	4013      	ands	r3, r2
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d003      	beq.n	80109c2 <DMA_GetFlagStatus+0x4a>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80109ba:	f04f 0301 	mov.w	r3, #1
 80109be:	73fb      	strb	r3, [r7, #15]
 80109c0:	e002      	b.n	80109c8 <DMA_GetFlagStatus+0x50>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80109c2:	f04f 0300 	mov.w	r3, #0
 80109c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80109c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	f107 0714 	add.w	r7, r7, #20
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bc80      	pop	{r7}
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop

080109d8 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d006      	beq.n	80109f8 <DMA_ClearFlag+0x20>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80109ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	605a      	str	r2, [r3, #4]
 80109f6:	e005      	b.n	8010a04 <DMA_ClearFlag+0x2c>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 80109f8:	f04f 0300 	mov.w	r3, #0
 80109fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	605a      	str	r2, [r3, #4]
  }
}
 8010a04:	f107 070c 	add.w	r7, r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bc80      	pop	{r7}
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop

08010a10 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b085      	sub	sp, #20
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8010a18:	f04f 0300 	mov.w	r3, #0
 8010a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8010a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010a26:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	799b      	ldrb	r3, [r3, #6]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d078      	beq.n	8010b22 <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8010a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8010a40:	6811      	ldr	r1, [r2, #0]
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	6812      	ldr	r2, [r2, #0]
 8010a46:	ea6f 0202 	mvn.w	r2, r2
 8010a4a:	400a      	ands	r2, r1
 8010a4c:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8010a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a52:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a5a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8010a5e:	6851      	ldr	r1, [r2, #4]
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	6812      	ldr	r2, [r2, #0]
 8010a64:	ea6f 0202 	mvn.w	r2, r2
 8010a68:	400a      	ands	r2, r1
 8010a6a:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	791b      	ldrb	r3, [r3, #4]
 8010a70:	68fa      	ldr	r2, [r7, #12]
 8010a72:	18d3      	adds	r3, r2, r3
 8010a74:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	6811      	ldr	r1, [r2, #0]
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	6812      	ldr	r2, [r2, #0]
 8010a80:	430a      	orrs	r2, r1
 8010a82:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8010a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a90:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8010a94:	6891      	ldr	r1, [r2, #8]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	6812      	ldr	r2, [r2, #0]
 8010a9a:	ea6f 0202 	mvn.w	r2, r2
 8010a9e:	400a      	ands	r2, r1
 8010aa0:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8010aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aa6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010aae:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8010ab2:	68d1      	ldr	r1, [r2, #12]
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	6812      	ldr	r2, [r2, #0]
 8010ab8:	ea6f 0202 	mvn.w	r2, r2
 8010abc:	400a      	ands	r2, r1
 8010abe:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	795b      	ldrb	r3, [r3, #5]
 8010ac4:	2b10      	cmp	r3, #16
 8010ac6:	d11a      	bne.n	8010afe <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8010ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010acc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010ad4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8010ad8:	6891      	ldr	r1, [r2, #8]
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	6812      	ldr	r2, [r2, #0]
 8010ade:	430a      	orrs	r2, r1
 8010ae0:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8010ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ae6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010aee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8010af2:	68d1      	ldr	r1, [r2, #12]
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	6812      	ldr	r2, [r2, #0]
 8010af8:	430a      	orrs	r2, r1
 8010afa:	60da      	str	r2, [r3, #12]
 8010afc:	e01f      	b.n	8010b3e <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8010afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010b06:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	795b      	ldrb	r3, [r3, #5]
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	18d3      	adds	r3, r2, r3
 8010b10:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	68fa      	ldr	r2, [r7, #12]
 8010b16:	6811      	ldr	r1, [r2, #0]
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	6812      	ldr	r2, [r2, #0]
 8010b1c:	430a      	orrs	r2, r1
 8010b1e:	601a      	str	r2, [r3, #0]
 8010b20:	e00d      	b.n	8010b3e <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	791b      	ldrb	r3, [r3, #4]
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	18d3      	adds	r3, r2, r3
 8010b2a:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	6811      	ldr	r1, [r2, #0]
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	6812      	ldr	r2, [r2, #0]
 8010b36:	ea6f 0202 	mvn.w	r2, r2
 8010b3a:	400a      	ands	r2, r1
 8010b3c:	601a      	str	r2, [r3, #0]
  }
}
 8010b3e:	f107 0714 	add.w	r7, r7, #20
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bc80      	pop	{r7}
 8010b46:	4770      	bx	lr

08010b48 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8010b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	615a      	str	r2, [r3, #20]
}
 8010b5c:	f107 070c 	add.w	r7, r7, #12
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bc80      	pop	{r7}
 8010b64:	4770      	bx	lr
 8010b66:	bf00      	nop

08010b68 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b085      	sub	sp, #20
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8010b70:	f04f 0300 	mov.w	r3, #0
 8010b74:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8010b76:	f04f 0300 	mov.w	r3, #0
 8010b7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8010b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b80:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4013      	ands	r3, r2
 8010b8a:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8010b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010b94:	695a      	ldr	r2, [r3, #20]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4013      	ands	r3, r2
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d006      	beq.n	8010bac <EXTI_GetITStatus+0x44>
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d003      	beq.n	8010bac <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
 8010ba4:	f04f 0301 	mov.w	r3, #1
 8010ba8:	73fb      	strb	r3, [r7, #15]
 8010baa:	e002      	b.n	8010bb2 <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 8010bac:	f04f 0300 	mov.w	r3, #0
 8010bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f107 0714 	add.w	r7, r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bc80      	pop	{r7}
 8010bbe:	4770      	bx	lr

08010bc0 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8010bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010bcc:	f240 1223 	movw	r2, #291	; 0x123
 8010bd0:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8010bd4:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8010bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010bde:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8010be2:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8010be6:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bc80      	pop	{r7}
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop

08010bf0 <FLASH_Lock>:
  *           to FLASH_LockBank1 function.
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	af00      	add	r7, sp, #0
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 8010bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010c00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010c04:	6912      	ldr	r2, [r2, #16]
 8010c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010c0a:	611a      	str	r2, [r3, #16]

#ifdef STM32F10X_XL
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
  FLASH->CR2 |= CR_LOCK_Set;
#endif /* STM32F10X_XL */
}
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bc80      	pop	{r7}
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop

08010c14 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8010c1c:	f04f 0304 	mov.w	r3, #4
 8010c20:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8010c22:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8010c26:	f000 f8bf 	bl	8010da8 <FLASH_WaitForLastOperation>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8010c2e:	7bfb      	ldrb	r3, [r7, #15]
 8010c30:	2b04      	cmp	r3, #4
 8010c32:	d130      	bne.n	8010c96 <FLASH_ErasePage+0x82>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8010c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010c40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010c44:	6912      	ldr	r2, [r2, #16]
 8010c46:	f042 0202 	orr.w	r2, r2, #2
 8010c4a:	611a      	str	r2, [r3, #16]
    FLASH->AR = Page_Address; 
 8010c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	615a      	str	r2, [r3, #20]
    FLASH->CR|= CR_STRT_Set;
 8010c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010c60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010c64:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010c68:	6912      	ldr	r2, [r2, #16]
 8010c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c6e:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8010c70:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8010c74:	f000 f898 	bl	8010da8 <FLASH_WaitForLastOperation>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8010c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010c88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010c8c:	6911      	ldr	r1, [r2, #16]
 8010c8e:	f641 72fd 	movw	r2, #8189	; 0x1ffd
 8010c92:	400a      	ands	r2, r1
 8010c94:	611a      	str	r2, [r3, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f107 0710 	add.w	r7, r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop

08010ca4 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	460b      	mov	r3, r1
 8010cae:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8010cb0:	f04f 0304 	mov.w	r3, #4
 8010cb4:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8010cb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010cba:	f000 f875 	bl	8010da8 <FLASH_WaitForLastOperation>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8010cc2:	7bfb      	ldrb	r3, [r7, #15]
 8010cc4:	2b04      	cmp	r3, #4
 8010cc6:	d121      	bne.n	8010d0c <FLASH_ProgramHalfWord+0x68>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8010cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ccc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010cd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010cd8:	6912      	ldr	r2, [r2, #16]
 8010cda:	f042 0201 	orr.w	r2, r2, #1
 8010cde:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	887a      	ldrh	r2, [r7, #2]
 8010ce4:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8010ce6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010cea:	f000 f85d 	bl	8010da8 <FLASH_WaitForLastOperation>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8010cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010cf6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010cfe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8010d02:	6911      	ldr	r1, [r2, #16]
 8010d04:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8010d08:	400a      	ands	r2, r1
 8010d0a:	611a      	str	r2, [r3, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f107 0710 	add.w	r7, r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <FLASH_ClearFlag>:
  *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
  *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b083      	sub	sp, #12
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8010d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	60da      	str	r2, [r3, #12]
#endif /* STM32F10X_XL */
}
 8010d2c:	f107 070c 	add.w	r7, r7, #12
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bc80      	pop	{r7}
 8010d34:	4770      	bx	lr
 8010d36:	bf00      	nop

08010d38 <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8010d3e:	f04f 0304 	mov.w	r3, #4
 8010d42:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8010d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	f003 0301 	and.w	r3, r3, #1
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d003      	beq.n	8010d5e <FLASH_GetBank1Status+0x26>
  {
    flashstatus = FLASH_BUSY;
 8010d56:	f04f 0301 	mov.w	r3, #1
 8010d5a:	71fb      	strb	r3, [r7, #7]
 8010d5c:	e01c      	b.n	8010d98 <FLASH_GetBank1Status+0x60>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8010d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	f003 0304 	and.w	r3, r3, #4
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d003      	beq.n	8010d78 <FLASH_GetBank1Status+0x40>
    { 
      flashstatus = FLASH_ERROR_PG;
 8010d70:	f04f 0302 	mov.w	r3, #2
 8010d74:	71fb      	strb	r3, [r7, #7]
 8010d76:	e00f      	b.n	8010d98 <FLASH_GetBank1Status+0x60>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8010d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8010d80:	68db      	ldr	r3, [r3, #12]
 8010d82:	f003 0310 	and.w	r3, r3, #16
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d003      	beq.n	8010d92 <FLASH_GetBank1Status+0x5a>
      {
        flashstatus = FLASH_ERROR_WRP;
 8010d8a:	f04f 0303 	mov.w	r3, #3
 8010d8e:	71fb      	strb	r3, [r7, #7]
 8010d90:	e002      	b.n	8010d98 <FLASH_GetBank1Status+0x60>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8010d92:	f04f 0304 	mov.w	r3, #4
 8010d96:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 8010d98:	79fb      	ldrb	r3, [r7, #7]
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f107 070c 	add.w	r7, r7, #12
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bc80      	pop	{r7}
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop

08010da8 <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8010db0:	f04f 0304 	mov.w	r3, #4
 8010db4:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8010db6:	f7ff ffbf 	bl	8010d38 <FLASH_GetBank1Status>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8010dbe:	e007      	b.n	8010dd0 <FLASH_WaitForLastOperation+0x28>
  {
    status = FLASH_GetBank1Status();
 8010dc0:	f7ff ffba 	bl	8010d38 <FLASH_GetBank1Status>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010dce:	607b      	str	r3, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8010dd0:	7bfb      	ldrb	r3, [r7, #15]
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d102      	bne.n	8010ddc <FLASH_WaitForLastOperation+0x34>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d1f1      	bne.n	8010dc0 <FLASH_WaitForLastOperation+0x18>
  {
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d102      	bne.n	8010de8 <FLASH_WaitForLastOperation+0x40>
  {
    status = FLASH_TIMEOUT;
 8010de2:	f04f 0305 	mov.w	r3, #5
 8010de6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8010de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	f107 0710 	add.w	r7, r7, #16
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b089      	sub	sp, #36	; 0x24
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8010dfe:	f04f 0300 	mov.w	r3, #0
 8010e02:	61fb      	str	r3, [r7, #28]
 8010e04:	f04f 0300 	mov.w	r3, #0
 8010e08:	613b      	str	r3, [r7, #16]
 8010e0a:	f04f 0300 	mov.w	r3, #0
 8010e0e:	61bb      	str	r3, [r7, #24]
 8010e10:	f04f 0300 	mov.w	r3, #0
 8010e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8010e16:	f04f 0300 	mov.w	r3, #0
 8010e1a:	617b      	str	r3, [r7, #20]
 8010e1c:	f04f 0300 	mov.w	r3, #0
 8010e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	78db      	ldrb	r3, [r3, #3]
 8010e26:	f003 030f 	and.w	r3, r3, #15
 8010e2a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	78db      	ldrb	r3, [r3, #3]
 8010e30:	f003 0310 	and.w	r3, r3, #16
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d004      	beq.n	8010e42 <GPIO_Init+0x4e>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	789b      	ldrb	r3, [r3, #2]
 8010e3c:	69fa      	ldr	r2, [r7, #28]
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d04e      	beq.n	8010eea <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8010e52:	f04f 0300 	mov.w	r3, #0
 8010e56:	61bb      	str	r3, [r7, #24]
 8010e58:	e041      	b.n	8010ede <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	f04f 0201 	mov.w	r2, #1
 8010e60:	fa02 f303 	lsl.w	r3, r2, r3
 8010e64:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	881b      	ldrh	r3, [r3, #0]
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	4013      	ands	r3, r2
 8010e70:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8010e72:	693a      	ldr	r2, [r7, #16]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d12d      	bne.n	8010ed6 <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010e80:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f04f 020f 	mov.w	r2, #15
 8010e88:	fa02 f303 	lsl.w	r3, r2, r3
 8010e8c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	ea6f 0303 	mvn.w	r3, r3
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	4013      	ands	r3, r2
 8010e98:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	69fa      	ldr	r2, [r7, #28]
 8010e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea2:	697a      	ldr	r2, [r7, #20]
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	78db      	ldrb	r3, [r3, #3]
 8010eac:	2b28      	cmp	r3, #40	; 0x28
 8010eae:	d107      	bne.n	8010ec0 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	f04f 0201 	mov.w	r2, #1
 8010eb6:	fa02 f203 	lsl.w	r2, r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	615a      	str	r2, [r3, #20]
 8010ebe:	e00a      	b.n	8010ed6 <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	78db      	ldrb	r3, [r3, #3]
 8010ec4:	2b48      	cmp	r3, #72	; 0x48
 8010ec6:	d106      	bne.n	8010ed6 <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8010ec8:	69bb      	ldr	r3, [r7, #24]
 8010eca:	f04f 0201 	mov.w	r2, #1
 8010ece:	fa02 f203 	lsl.w	r2, r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8010ed6:	69bb      	ldr	r3, [r7, #24]
 8010ed8:	f103 0301 	add.w	r3, r3, #1
 8010edc:	61bb      	str	r3, [r7, #24]
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	2b07      	cmp	r3, #7
 8010ee2:	d9ba      	bls.n	8010e5a <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	881b      	ldrh	r3, [r3, #0]
 8010eee:	2bff      	cmp	r3, #255	; 0xff
 8010ef0:	d953      	bls.n	8010f9a <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8010ef8:	f04f 0300 	mov.w	r3, #0
 8010efc:	61bb      	str	r3, [r7, #24]
 8010efe:	e046      	b.n	8010f8e <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	f103 0308 	add.w	r3, r3, #8
 8010f06:	f04f 0201 	mov.w	r2, #1
 8010f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f0e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	881b      	ldrh	r3, [r3, #0]
 8010f14:	461a      	mov	r2, r3
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	4013      	ands	r3, r2
 8010f1a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8010f1c:	693a      	ldr	r2, [r7, #16]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d130      	bne.n	8010f86 <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010f2a:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f04f 020f 	mov.w	r2, #15
 8010f32:	fa02 f303 	lsl.w	r3, r2, r3
 8010f36:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	ea6f 0303 	mvn.w	r3, r3
 8010f3e:	697a      	ldr	r2, [r7, #20]
 8010f40:	4013      	ands	r3, r2
 8010f42:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	69fa      	ldr	r2, [r7, #28]
 8010f48:	fa02 f303 	lsl.w	r3, r2, r3
 8010f4c:	697a      	ldr	r2, [r7, #20]
 8010f4e:	4313      	orrs	r3, r2
 8010f50:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	78db      	ldrb	r3, [r3, #3]
 8010f56:	2b28      	cmp	r3, #40	; 0x28
 8010f58:	d108      	bne.n	8010f6c <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	f103 0308 	add.w	r3, r3, #8
 8010f60:	f04f 0201 	mov.w	r2, #1
 8010f64:	fa02 f203 	lsl.w	r2, r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	78db      	ldrb	r3, [r3, #3]
 8010f70:	2b48      	cmp	r3, #72	; 0x48
 8010f72:	d108      	bne.n	8010f86 <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	f103 0308 	add.w	r3, r3, #8
 8010f7a:	f04f 0201 	mov.w	r2, #1
 8010f7e:	fa02 f203 	lsl.w	r2, r2, r3
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	f103 0301 	add.w	r3, r3, #1
 8010f8c:	61bb      	str	r3, [r7, #24]
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	2b07      	cmp	r3, #7
 8010f92:	d9b5      	bls.n	8010f00 <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	697a      	ldr	r2, [r7, #20]
 8010f98:	605a      	str	r2, [r3, #4]
  }
}
 8010f9a:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bc80      	pop	{r7}
 8010fa2:	4770      	bx	lr

08010fa4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	460b      	mov	r3, r1
 8010fae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8010fb0:	f04f 0300 	mov.w	r3, #0
 8010fb4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	689a      	ldr	r2, [r3, #8]
 8010fba:	887b      	ldrh	r3, [r7, #2]
 8010fbc:	4013      	ands	r3, r2
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d003      	beq.n	8010fca <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8010fc2:	f04f 0301 	mov.w	r3, #1
 8010fc6:	73fb      	strb	r3, [r7, #15]
 8010fc8:	e002      	b.n	8010fd0 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8010fca:	f04f 0300 	mov.w	r3, #0
 8010fce:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f107 0714 	add.w	r7, r7, #20
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bc80      	pop	{r7}
 8010fdc:	4770      	bx	lr
 8010fde:	bf00      	nop

08010fe0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	460b      	mov	r3, r1
 8010fea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8010fec:	887a      	ldrh	r2, [r7, #2]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	611a      	str	r2, [r3, #16]
}
 8010ff2:	f107 070c 	add.w	r7, r7, #12
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bc80      	pop	{r7}
 8010ffa:	4770      	bx	lr

08010ffc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	460b      	mov	r3, r1
 8011006:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8011008:	887a      	ldrh	r2, [r7, #2]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	615a      	str	r2, [r3, #20]
}
 801100e:	f107 070c 	add.w	r7, r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	bc80      	pop	{r7}
 8011016:	4770      	bx	lr

08011018 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8011018:	b480      	push	{r7}
 801101a:	b087      	sub	sp, #28
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	460b      	mov	r3, r1
 8011022:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8011024:	f04f 0300 	mov.w	r3, #0
 8011028:	613b      	str	r3, [r7, #16]
 801102a:	f04f 0300 	mov.w	r3, #0
 801102e:	60fb      	str	r3, [r7, #12]
 8011030:	f04f 0300 	mov.w	r3, #0
 8011034:	617b      	str	r3, [r7, #20]
 8011036:	f04f 0300 	mov.w	r3, #0
 801103a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	da06      	bge.n	8011050 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
 8011042:	f04f 0300 	mov.w	r3, #0
 8011046:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801104a:	69db      	ldr	r3, [r3, #28]
 801104c:	617b      	str	r3, [r7, #20]
 801104e:	e005      	b.n	801105c <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8011050:	f04f 0300 	mov.w	r3, #0
 8011054:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8011062:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8011066:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 801106e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8011072:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801107a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801107e:	d110      	bne.n	80110a2 <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8011086:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8011088:	f04f 0300 	mov.w	r3, #0
 801108c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011090:	f04f 0200 	mov.w	r2, #0
 8011094:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8011098:	6852      	ldr	r2, [r2, #4]
 801109a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801109e:	605a      	str	r2, [r3, #4]
 80110a0:	e026      	b.n	80110f0 <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d010      	beq.n	80110ce <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	f04f 0203 	mov.w	r2, #3
 80110b2:	fa02 f303 	lsl.w	r3, r2, r3
 80110b6:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	ea6f 0303 	mvn.w	r3, r3
 80110be:	697a      	ldr	r2, [r7, #20]
 80110c0:	4013      	ands	r3, r2
 80110c2:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80110ca:	617b      	str	r3, [r7, #20]
 80110cc:	e010      	b.n	80110f0 <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80110d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80110d8:	693a      	ldr	r2, [r7, #16]
 80110da:	fa02 f303 	lsl.w	r3, r2, r3
 80110de:	ea6f 0303 	mvn.w	r3, r3
 80110e2:	697a      	ldr	r2, [r7, #20]
 80110e4:	4013      	ands	r3, r2
 80110e6:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80110ee:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80110f0:	78fb      	ldrb	r3, [r7, #3]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d00a      	beq.n	801110c <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80110fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011100:	693a      	ldr	r2, [r7, #16]
 8011102:	fa02 f303 	lsl.w	r3, r2, r3
 8011106:	697a      	ldr	r2, [r7, #20]
 8011108:	4313      	orrs	r3, r2
 801110a:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	da06      	bge.n	8011120 <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
 8011112:	f04f 0300 	mov.w	r3, #0
 8011116:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801111a:	697a      	ldr	r2, [r7, #20]
 801111c:	61da      	str	r2, [r3, #28]
 801111e:	e005      	b.n	801112c <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8011120:	f04f 0300 	mov.w	r3, #0
 8011124:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011128:	697a      	ldr	r2, [r7, #20]
 801112a:	605a      	str	r2, [r3, #4]
  }  
}
 801112c:	f107 071c 	add.w	r7, r7, #28
 8011130:	46bd      	mov	sp, r7
 8011132:	bc80      	pop	{r7}
 8011134:	4770      	bx	lr
 8011136:	bf00      	nop

08011138 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8011138:	b490      	push	{r4, r7}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	4602      	mov	r2, r0
 8011140:	460b      	mov	r3, r1
 8011142:	71fa      	strb	r2, [r7, #7]
 8011144:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8011146:	f04f 0300 	mov.w	r3, #0
 801114a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 801114c:	79bb      	ldrb	r3, [r7, #6]
 801114e:	f003 0303 	and.w	r3, r3, #3
 8011152:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011156:	f04f 020f 	mov.w	r2, #15
 801115a:	fa02 f303 	lsl.w	r3, r2, r3
 801115e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8011160:	f04f 0300 	mov.w	r3, #0
 8011164:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011168:	79ba      	ldrb	r2, [r7, #6]
 801116a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801116e:	b2d2      	uxtb	r2, r2
 8011170:	4610      	mov	r0, r2
 8011172:	f04f 0200 	mov.w	r2, #0
 8011176:	f2c4 0201 	movt	r2, #16385	; 0x4001
 801117a:	79b9      	ldrb	r1, [r7, #6]
 801117c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8011180:	b2c9      	uxtb	r1, r1
 8011182:	f101 0102 	add.w	r1, r1, #2
 8011186:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801118a:	68fa      	ldr	r2, [r7, #12]
 801118c:	ea6f 0202 	mvn.w	r2, r2
 8011190:	4011      	ands	r1, r2
 8011192:	f100 0202 	add.w	r2, r0, #2
 8011196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 801119a:	f04f 0300 	mov.w	r3, #0
 801119e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80111a2:	79ba      	ldrb	r2, [r7, #6]
 80111a4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80111a8:	b2d2      	uxtb	r2, r2
 80111aa:	4610      	mov	r0, r2
 80111ac:	f04f 0200 	mov.w	r2, #0
 80111b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80111b4:	79b9      	ldrb	r1, [r7, #6]
 80111b6:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80111ba:	b2c9      	uxtb	r1, r1
 80111bc:	f101 0102 	add.w	r1, r1, #2
 80111c0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80111c4:	79fc      	ldrb	r4, [r7, #7]
 80111c6:	79ba      	ldrb	r2, [r7, #6]
 80111c8:	f002 0203 	and.w	r2, r2, #3
 80111cc:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80111d0:	fa04 f202 	lsl.w	r2, r4, r2
 80111d4:	4311      	orrs	r1, r2
 80111d6:	f100 0202 	add.w	r2, r0, #2
 80111da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80111de:	f107 0710 	add.w	r7, r7, #16
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bc90      	pop	{r4, r7}
 80111e6:	4770      	bx	lr

080111e8 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the RTC and backup registers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	4603      	mov	r3, r0
 80111f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80111f2:	f04f 0320 	mov.w	r3, #32
 80111f6:	f2c4 230e 	movt	r3, #16910	; 0x420e
 80111fa:	79fa      	ldrb	r2, [r7, #7]
 80111fc:	601a      	str	r2, [r3, #0]
}
 80111fe:	f107 070c 	add.w	r7, r7, #12
 8011202:	46bd      	mov	sp, r7
 8011204:	bc80      	pop	{r7}
 8011206:	4770      	bx	lr

08011208 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8011210:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 8011214:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8011218:	687a      	ldr	r2, [r7, #4]
 801121a:	601a      	str	r2, [r3, #0]
}
 801121c:	f107 070c 	add.w	r7, r7, #12
 8011220:	46bd      	mov	sp, r7
 8011222:	bc80      	pop	{r7}
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop

08011228 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8011228:	b480      	push	{r7}
 801122a:	b087      	sub	sp, #28
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8011230:	f04f 0300 	mov.w	r3, #0
 8011234:	617b      	str	r3, [r7, #20]
 8011236:	f04f 0300 	mov.w	r3, #0
 801123a:	613b      	str	r3, [r7, #16]
 801123c:	f04f 0300 	mov.w	r3, #0
 8011240:	60fb      	str	r3, [r7, #12]
 8011242:	f04f 0300 	mov.w	r3, #0
 8011246:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8011248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801124c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	f003 030c 	and.w	r3, r3, #12
 8011256:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	2b04      	cmp	r3, #4
 801125c:	d00a      	beq.n	8011274 <RCC_GetClocksFreq+0x4c>
 801125e:	2b08      	cmp	r3, #8
 8011260:	d00f      	beq.n	8011282 <RCC_GetClocksFreq+0x5a>
 8011262:	2b00      	cmp	r3, #0
 8011264:	d14d      	bne.n	8011302 <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8011266:	687a      	ldr	r2, [r7, #4]
 8011268:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801126c:	f2c0 037a 	movt	r3, #122	; 0x7a
 8011270:	6013      	str	r3, [r2, #0]
      break;
 8011272:	e04d      	b.n	8011310 <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 801127a:	f2c0 037a 	movt	r3, #122	; 0x7a
 801127e:	6013      	str	r3, [r2, #0]
      break;
 8011280:	e046      	b.n	8011310 <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8011282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011286:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8011290:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8011292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011296:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80112a0:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	ea4f 4393 	mov.w	r3, r3, lsr #18
 80112a8:	f103 0302 	add.w	r3, r3, #2
 80112ac:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d109      	bne.n	80112c8 <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80112b4:	693a      	ldr	r2, [r7, #16]
 80112b6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80112ba:	f2c0 033d 	movt	r3, #61	; 0x3d
 80112be:	fb03 f202 	mul.w	r2, r3, r2
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80112c6:	e023      	b.n	8011310 <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80112c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d009      	beq.n	80112ee <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80112da:	693a      	ldr	r2, [r7, #16]
 80112dc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80112e0:	f2c0 033d 	movt	r3, #61	; 0x3d
 80112e4:	fb03 f202 	mul.w	r2, r3, r2
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80112ec:	e010      	b.n	8011310 <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80112ee:	693a      	ldr	r2, [r7, #16]
 80112f0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80112f4:	f2c0 037a 	movt	r3, #122	; 0x7a
 80112f8:	fb03 f202 	mul.w	r2, r3, r2
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8011300:	e006      	b.n	8011310 <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8011308:	f2c0 037a 	movt	r3, #122	; 0x7a
 801130c:	6013      	str	r3, [r2, #0]
      break;
 801130e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8011310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011314:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801131e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8011326:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8011328:	f240 23ec 	movw	r3, #748	; 0x2ec
 801132c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011330:	697a      	ldr	r2, [r7, #20]
 8011332:	189b      	adds	r3, r3, r2
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	b2db      	uxtb	r3, r3
 8011338:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	fa22 f203 	lsr.w	r2, r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8011348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801134c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011356:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801135e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8011360:	f240 23ec 	movw	r3, #748	; 0x2ec
 8011364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011368:	697a      	ldr	r2, [r7, #20]
 801136a:	189b      	adds	r3, r3, r2
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	b2db      	uxtb	r3, r3
 8011370:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	685a      	ldr	r2, [r3, #4]
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	fa22 f203 	lsr.w	r2, r2, r3
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8011380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011384:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 801138e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8011396:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8011398:	f240 23ec 	movw	r3, #748	; 0x2ec
 801139c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113a0:	697a      	ldr	r2, [r7, #20]
 80113a2:	189b      	adds	r3, r3, r2
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	b2db      	uxtb	r3, r3
 80113a8:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	685a      	ldr	r2, [r3, #4]
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	fa22 f203 	lsr.w	r2, r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80113b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80113c6:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	ea4f 3393 	mov.w	r3, r3, lsr #14
 80113ce:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80113d0:	f240 23fc 	movw	r3, #764	; 0x2fc
 80113d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80113d8:	697a      	ldr	r2, [r7, #20]
 80113da:	189b      	adds	r3, r3, r2
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	b2db      	uxtb	r3, r3
 80113e0:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	68da      	ldr	r2, [r3, #12]
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	611a      	str	r2, [r3, #16]
}
 80113f0:	f107 071c 	add.w	r7, r7, #28
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bc80      	pop	{r7}
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop

080113fc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	460b      	mov	r3, r1
 8011406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011408:	78fb      	ldrb	r3, [r7, #3]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d00c      	beq.n	8011428 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 801140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011412:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011416:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801141a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801141e:	6951      	ldr	r1, [r2, #20]
 8011420:	687a      	ldr	r2, [r7, #4]
 8011422:	430a      	orrs	r2, r1
 8011424:	615a      	str	r2, [r3, #20]
 8011426:	e00d      	b.n	8011444 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8011428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801142c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011430:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011434:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011438:	6951      	ldr	r1, [r2, #20]
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	ea6f 0202 	mvn.w	r2, r2
 8011440:	400a      	ands	r2, r1
 8011442:	615a      	str	r2, [r3, #20]
  }
}
 8011444:	f107 070c 	add.w	r7, r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	bc80      	pop	{r7}
 801144c:	4770      	bx	lr
 801144e:	bf00      	nop

08011450 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	460b      	mov	r3, r1
 801145a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801145c:	78fb      	ldrb	r3, [r7, #3]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d00c      	beq.n	801147c <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8011462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011466:	f2c4 0302 	movt	r3, #16386	; 0x4002
 801146a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801146e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8011472:	6991      	ldr	r1, [r2, #24]
 8011474:	687a      	ldr	r2, [r7, #4]
 8011476:	430a      	orrs	r2, r1
 8011478:	619a      	str	r2, [r3, #24]
 801147a:	e00d      	b.n	8011498 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 801147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8011484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011488:	f2c4 0202 	movt	r2, #16386	; 0x4002
 801148c:	6991      	ldr	r1, [r2, #24]
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	ea6f 0202 	mvn.w	r2, r2
 8011494:	400a      	ands	r2, r1
 8011496:	619a      	str	r2, [r3, #24]
  }
}
 8011498:	f107 070c 	add.w	r7, r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	bc80      	pop	{r7}
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop

080114a4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	460b      	mov	r3, r1
 80114ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80114b0:	78fb      	ldrb	r3, [r7, #3]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d00c      	beq.n	80114d0 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80114b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80114be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80114c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80114c6:	69d1      	ldr	r1, [r2, #28]
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	430a      	orrs	r2, r1
 80114cc:	61da      	str	r2, [r3, #28]
 80114ce:	e00d      	b.n	80114ec <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80114d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80114d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80114dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80114e0:	69d1      	ldr	r1, [r2, #28]
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	ea6f 0202 	mvn.w	r2, r2
 80114e8:	400a      	ands	r2, r1
 80114ea:	61da      	str	r2, [r3, #28]
  }
}
 80114ec:	f107 070c 	add.w	r7, r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bc80      	pop	{r7}
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop

080114f8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b085      	sub	sp, #20
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8011502:	f04f 0300 	mov.w	r3, #0
 8011506:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	881b      	ldrh	r3, [r3, #0]
 801150c:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 801150e:	89fb      	ldrh	r3, [r7, #14]
 8011510:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8011514:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	881a      	ldrh	r2, [r3, #0]
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	885b      	ldrh	r3, [r3, #2]
 801151e:	4313      	orrs	r3, r2
 8011520:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8011526:	4313      	orrs	r3, r2
 8011528:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801152e:	4313      	orrs	r3, r2
 8011530:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8011536:	4313      	orrs	r3, r2
 8011538:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801153e:	4313      	orrs	r3, r2
 8011540:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8011546:	4313      	orrs	r3, r2
 8011548:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801154e:	4313      	orrs	r3, r2
 8011550:	b29a      	uxth	r2, r3
 8011552:	89fb      	ldrh	r3, [r7, #14]
 8011554:	4313      	orrs	r3, r2
 8011556:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	89fa      	ldrh	r2, [r7, #14]
 801155c:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	8b9b      	ldrh	r3, [r3, #28]
 8011562:	b29b      	uxth	r3, r3
 8011564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011568:	b29a      	uxth	r2, r3
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	8a1a      	ldrh	r2, [r3, #16]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	821a      	strh	r2, [r3, #16]
}
 8011576:	f107 0714 	add.w	r7, r7, #20
 801157a:	46bd      	mov	sp, r7
 801157c:	bc80      	pop	{r7}
 801157e:	4770      	bx	lr

08011580 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	460b      	mov	r3, r1
 801158a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801158c:	78fb      	ldrb	r3, [r7, #3]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d008      	beq.n	80115a4 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	b29b      	uxth	r3, r3
 8011598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801159c:	b29a      	uxth	r2, r3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	801a      	strh	r2, [r3, #0]
 80115a2:	e007      	b.n	80115b4 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	881b      	ldrh	r3, [r3, #0]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	801a      	strh	r2, [r3, #0]
  }
}
 80115b4:	f107 070c 	add.w	r7, r7, #12
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bc80      	pop	{r7}
 80115bc:	4770      	bx	lr
 80115be:	bf00      	nop

080115c0 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	4613      	mov	r3, r2
 80115ca:	460a      	mov	r2, r1
 80115cc:	807a      	strh	r2, [r7, #2]
 80115ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 80115d0:	787b      	ldrb	r3, [r7, #1]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d008      	beq.n	80115e8 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	889b      	ldrh	r3, [r3, #4]
 80115da:	b29a      	uxth	r2, r3
 80115dc:	887b      	ldrh	r3, [r7, #2]
 80115de:	4313      	orrs	r3, r2
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	809a      	strh	r2, [r3, #4]
 80115e6:	e00a      	b.n	80115fe <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	889b      	ldrh	r3, [r3, #4]
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	887b      	ldrh	r3, [r7, #2]
 80115f0:	ea6f 0303 	mvn.w	r3, r3
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	4013      	ands	r3, r2
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	809a      	strh	r2, [r3, #4]
  }
}
 80115fe:	f107 070c 	add.w	r7, r7, #12
 8011602:	46bd      	mov	sp, r7
 8011604:	bc80      	pop	{r7}
 8011606:	4770      	bx	lr

08011608 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8011608:	b480      	push	{r7}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	460b      	mov	r3, r1
 8011612:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8011614:	f04f 0300 	mov.w	r3, #0
 8011618:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	891b      	ldrh	r3, [r3, #8]
 801161e:	b29a      	uxth	r2, r3
 8011620:	887b      	ldrh	r3, [r7, #2]
 8011622:	4013      	ands	r3, r2
 8011624:	b29b      	uxth	r3, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d003      	beq.n	8011632 <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 801162a:	f04f 0301 	mov.w	r3, #1
 801162e:	73fb      	strb	r3, [r7, #15]
 8011630:	e002      	b.n	8011638 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8011632:	f04f 0300 	mov.w	r3, #0
 8011636:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8011638:	7bfb      	ldrb	r3, [r7, #15]
}
 801163a:	4618      	mov	r0, r3
 801163c:	f107 0714 	add.w	r7, r7, #20
 8011640:	46bd      	mov	sp, r7
 8011642:	bc80      	pop	{r7}
 8011644:	4770      	bx	lr
 8011646:	bf00      	nop

08011648 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8011648:	b480      	push	{r7}
 801164a:	b085      	sub	sp, #20
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8011652:	f04f 0300 	mov.w	r3, #0
 8011656:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	881b      	ldrh	r3, [r3, #0]
 801165c:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011664:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011668:	429a      	cmp	r2, r3
 801166a:	d01f      	beq.n	80116ac <TIM_TimeBaseInit+0x64>
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8011672:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011676:	429a      	cmp	r2, r3
 8011678:	d018      	beq.n	80116ac <TIM_TimeBaseInit+0x64>
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011680:	d014      	beq.n	80116ac <TIM_TimeBaseInit+0x64>
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011688:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801168c:	429a      	cmp	r2, r3
 801168e:	d00d      	beq.n	80116ac <TIM_TimeBaseInit+0x64>
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011696:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801169a:	429a      	cmp	r2, r3
 801169c:	d006      	beq.n	80116ac <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80116a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d108      	bne.n	80116be <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80116ac:	89fb      	ldrh	r3, [r7, #14]
 80116ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116b2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	885a      	ldrh	r2, [r3, #2]
 80116b8:	89fb      	ldrh	r3, [r7, #14]
 80116ba:	4313      	orrs	r3, r2
 80116bc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d00f      	beq.n	80116ec <TIM_TimeBaseInit+0xa4>
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80116d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80116d6:	429a      	cmp	r2, r3
 80116d8:	d008      	beq.n	80116ec <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80116da:	89fb      	ldrh	r3, [r7, #14]
 80116dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80116e0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	88da      	ldrh	r2, [r3, #6]
 80116e6:	89fb      	ldrh	r3, [r7, #14]
 80116e8:	4313      	orrs	r3, r2
 80116ea:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	89fa      	ldrh	r2, [r7, #14]
 80116f0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	889a      	ldrh	r2, [r3, #4]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	881a      	ldrh	r2, [r3, #0]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011708:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801170c:	429a      	cmp	r2, r3
 801170e:	d01b      	beq.n	8011748 <TIM_TimeBaseInit+0x100>
 8011710:	687a      	ldr	r2, [r7, #4]
 8011712:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8011716:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801171a:	429a      	cmp	r2, r3
 801171c:	d014      	beq.n	8011748 <TIM_TimeBaseInit+0x100>
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011724:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011728:	429a      	cmp	r2, r3
 801172a:	d00d      	beq.n	8011748 <TIM_TimeBaseInit+0x100>
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8011732:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011736:	429a      	cmp	r2, r3
 8011738:	d006      	beq.n	8011748 <TIM_TimeBaseInit+0x100>
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8011740:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011744:	429a      	cmp	r2, r3
 8011746:	d104      	bne.n	8011752 <TIM_TimeBaseInit+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	7a1b      	ldrb	r3, [r3, #8]
 801174c:	461a      	mov	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f04f 0201 	mov.w	r2, #1
 8011758:	829a      	strh	r2, [r3, #20]
}
 801175a:	f107 0714 	add.w	r7, r7, #20
 801175e:	46bd      	mov	sp, r7
 8011760:	bc80      	pop	{r7}
 8011762:	4770      	bx	lr

08011764 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011772:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f04f 0200 	mov.w	r2, #0
 801177a:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f04f 0200 	mov.w	r2, #0
 8011782:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f04f 0200 	mov.w	r2, #0
 801178a:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f04f 0200 	mov.w	r2, #0
 8011792:	721a      	strb	r2, [r3, #8]
}
 8011794:	f107 070c 	add.w	r7, r7, #12
 8011798:	46bd      	mov	sp, r7
 801179a:	bc80      	pop	{r7}
 801179c:	4770      	bx	lr
 801179e:	bf00      	nop

080117a0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	460b      	mov	r3, r1
 80117aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80117ac:	78fb      	ldrb	r3, [r7, #3]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d008      	beq.n	80117c4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	f043 0301 	orr.w	r3, r3, #1
 80117bc:	b29a      	uxth	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	801a      	strh	r2, [r3, #0]
 80117c2:	e007      	b.n	80117d4 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	881b      	ldrh	r3, [r3, #0]
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	f023 0301 	bic.w	r3, r3, #1
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	801a      	strh	r2, [r3, #0]
  }
}
 80117d4:	f107 070c 	add.w	r7, r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	bc80      	pop	{r7}
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop

080117e0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	4613      	mov	r3, r2
 80117ea:	460a      	mov	r2, r1
 80117ec:	807a      	strh	r2, [r7, #2]
 80117ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80117f0:	787b      	ldrb	r3, [r7, #1]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d008      	beq.n	8011808 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	899b      	ldrh	r3, [r3, #12]
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	887b      	ldrh	r3, [r7, #2]
 80117fe:	4313      	orrs	r3, r2
 8011800:	b29a      	uxth	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	819a      	strh	r2, [r3, #12]
 8011806:	e00a      	b.n	801181e <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	899b      	ldrh	r3, [r3, #12]
 801180c:	b29a      	uxth	r2, r3
 801180e:	887b      	ldrh	r3, [r7, #2]
 8011810:	ea6f 0303 	mvn.w	r3, r3
 8011814:	b29b      	uxth	r3, r3
 8011816:	4013      	ands	r3, r2
 8011818:	b29a      	uxth	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	819a      	strh	r2, [r3, #12]
  }
}
 801181e:	f107 070c 	add.w	r7, r7, #12
 8011822:	46bd      	mov	sp, r7
 8011824:	bc80      	pop	{r7}
 8011826:	4770      	bx	lr

08011828 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	460b      	mov	r3, r1
 8011832:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	881b      	ldrh	r3, [r3, #0]
 8011838:	b29b      	uxth	r3, r3
 801183a:	f023 0308 	bic.w	r3, r3, #8
 801183e:	b29a      	uxth	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	881b      	ldrh	r3, [r3, #0]
 8011848:	b29a      	uxth	r2, r3
 801184a:	887b      	ldrh	r3, [r7, #2]
 801184c:	4313      	orrs	r3, r2
 801184e:	b29a      	uxth	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	801a      	strh	r2, [r3, #0]
}
 8011854:	f107 070c 	add.w	r7, r7, #12
 8011858:	46bd      	mov	sp, r7
 801185a:	bc80      	pop	{r7}
 801185c:	4770      	bx	lr
 801185e:	bf00      	nop

08011860 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8011860:	b480      	push	{r7}
 8011862:	b085      	sub	sp, #20
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	460b      	mov	r3, r1
 801186a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 801186c:	f04f 0300 	mov.w	r3, #0
 8011870:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8011872:	f04f 0300 	mov.w	r3, #0
 8011876:	81bb      	strh	r3, [r7, #12]
 8011878:	f04f 0300 	mov.w	r3, #0
 801187c:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	8a1b      	ldrh	r3, [r3, #16]
 8011882:	b29a      	uxth	r2, r3
 8011884:	887b      	ldrh	r3, [r7, #2]
 8011886:	4013      	ands	r3, r2
 8011888:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	899b      	ldrh	r3, [r3, #12]
 801188e:	b29a      	uxth	r2, r3
 8011890:	887b      	ldrh	r3, [r7, #2]
 8011892:	4013      	ands	r3, r2
 8011894:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8011896:	89bb      	ldrh	r3, [r7, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d006      	beq.n	80118aa <TIM_GetITStatus+0x4a>
 801189c:	897b      	ldrh	r3, [r7, #10]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d003      	beq.n	80118aa <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80118a2:	f04f 0301 	mov.w	r3, #1
 80118a6:	73fb      	strb	r3, [r7, #15]
 80118a8:	e002      	b.n	80118b0 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 80118aa:	f04f 0300 	mov.w	r3, #0
 80118ae:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80118b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	f107 0714 	add.w	r7, r7, #20
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bc80      	pop	{r7}
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop

080118c0 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b083      	sub	sp, #12
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	460b      	mov	r3, r1
 80118ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80118cc:	887b      	ldrh	r3, [r7, #2]
 80118ce:	ea6f 0303 	mvn.w	r3, r3
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	821a      	strh	r2, [r3, #16]
}
 80118d8:	f107 070c 	add.w	r7, r7, #12
 80118dc:	46bd      	mov	sp, r7
 80118de:	bc80      	pop	{r7}
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop

080118e4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b08c      	sub	sp, #48	; 0x30
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80118ee:	f04f 0300 	mov.w	r3, #0
 80118f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118f4:	f04f 0300 	mov.w	r3, #0
 80118f8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80118fa:	f04f 0300 	mov.w	r3, #0
 80118fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8011900:	f04f 0300 	mov.w	r3, #0
 8011904:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8011906:	f04f 0300 	mov.w	r3, #0
 801190a:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8a1b      	ldrh	r3, [r3, #16]
 8011914:	b29b      	uxth	r3, r3
 8011916:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8011918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801191a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801191e:	4013      	ands	r3, r2
 8011920:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	88db      	ldrh	r3, [r3, #6]
 8011926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011928:	4313      	orrs	r3, r2
 801192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 801192c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192e:	b29a      	uxth	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	899b      	ldrh	r3, [r3, #12]
 8011938:	b29b      	uxth	r3, r3
 801193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 801193c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801193e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8011942:	4013      	ands	r3, r2
 8011944:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	889a      	ldrh	r2, [r3, #4]
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	891b      	ldrh	r3, [r3, #8]
 801194e:	4313      	orrs	r3, r2
 8011950:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8011956:	4313      	orrs	r3, r2
 8011958:	b29b      	uxth	r3, r3
 801195a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801195c:	4313      	orrs	r3, r2
 801195e:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8011960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011962:	b29a      	uxth	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	8a9b      	ldrh	r3, [r3, #20]
 801196c:	b29b      	uxth	r3, r3
 801196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8011970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011972:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8011976:	4013      	ands	r3, r2
 8011978:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	899b      	ldrh	r3, [r3, #12]
 801197e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011980:	4313      	orrs	r3, r2
 8011982:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8011984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011986:	b29a      	uxth	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 801198c:	f107 0308 	add.w	r3, r7, #8
 8011990:	4618      	mov	r0, r3
 8011992:	f7ff fc49 	bl	8011228 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8011996:	69fa      	ldr	r2, [r7, #28]
 8011998:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801199c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d102      	bne.n	80119aa <USART_Init+0xc6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80119a8:	e001      	b.n	80119ae <USART_Init+0xca>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	899b      	ldrh	r3, [r3, #12]
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	b29b      	uxth	r3, r3
 80119b6:	b21b      	sxth	r3, r3
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	da0f      	bge.n	80119dc <USART_Init+0xf8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80119bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119be:	4613      	mov	r3, r2
 80119c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80119c4:	189b      	adds	r3, r3, r2
 80119c6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80119ca:	189a      	adds	r2, r3, r2
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80119d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80119d8:	627b      	str	r3, [r7, #36]	; 0x24
 80119da:	e00e      	b.n	80119fa <USART_Init+0x116>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80119dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119de:	4613      	mov	r3, r2
 80119e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80119e4:	189b      	adds	r3, r3, r2
 80119e6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80119ea:	189a      	adds	r2, r3, r2
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80119f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80119f8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80119fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119fc:	f248 531f 	movw	r3, #34079	; 0x851f
 8011a00:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8011a04:	fba3 1302 	umull	r1, r3, r3, r2
 8011a08:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011a0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011a10:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8011a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a14:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8011a18:	f04f 0264 	mov.w	r2, #100	; 0x64
 8011a1c:	fb02 f303 	mul.w	r3, r2, r3
 8011a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a22:	1ad3      	subs	r3, r2, r3
 8011a24:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	899b      	ldrh	r3, [r3, #12]
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	b21b      	sxth	r3, r3
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	da12      	bge.n	8011a5a <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8011a34:	6a3b      	ldr	r3, [r7, #32]
 8011a36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011a3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011a3e:	f248 531f 	movw	r3, #34079	; 0x851f
 8011a42:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8011a46:	fba3 1302 	umull	r1, r3, r3, r2
 8011a4a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011a4e:	f003 0307 	and.w	r3, r3, #7
 8011a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a54:	4313      	orrs	r3, r2
 8011a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a58:	e011      	b.n	8011a7e <USART_Init+0x19a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8011a5a:	6a3b      	ldr	r3, [r7, #32]
 8011a5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011a60:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011a64:	f248 531f 	movw	r3, #34079	; 0x851f
 8011a68:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8011a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8011a70:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011a74:	f003 030f 	and.w	r3, r3, #15
 8011a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8011a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	811a      	strh	r2, [r3, #8]
}
 8011a86:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop

08011a90 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011a90:	b480      	push	{r7}
 8011a92:	b083      	sub	sp, #12
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	460b      	mov	r3, r1
 8011a9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011a9c:	78fb      	ldrb	r3, [r7, #3]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d008      	beq.n	8011ab4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	899b      	ldrh	r3, [r3, #12]
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011aac:	b29a      	uxth	r2, r3
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	819a      	strh	r2, [r3, #12]
 8011ab2:	e007      	b.n	8011ac4 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	899b      	ldrh	r3, [r3, #12]
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	819a      	strh	r2, [r3, #12]
  }
}
 8011ac4:	f107 070c 	add.w	r7, r7, #12
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bc80      	pop	{r7}
 8011acc:	4770      	bx	lr
 8011ace:	bf00      	nop

08011ad0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	460b      	mov	r3, r1
 8011ada:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8011adc:	887b      	ldrh	r3, [r7, #2]
 8011ade:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011ae2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011ae6:	b29a      	uxth	r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	809a      	strh	r2, [r3, #4]
}
 8011aec:	f107 070c 	add.w	r7, r7, #12
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bc80      	pop	{r7}
 8011af4:	4770      	bx	lr
 8011af6:	bf00      	nop

08011af8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b083      	sub	sp, #12
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	889b      	ldrh	r3, [r3, #4]
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011b0a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011b0e:	b29b      	uxth	r3, r3
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	f107 070c 	add.w	r7, r7, #12
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bc80      	pop	{r7}
 8011b1a:	4770      	bx	lr

08011b1c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	460b      	mov	r3, r1
 8011b26:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8011b28:	f04f 0300 	mov.w	r3, #0
 8011b2c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	881b      	ldrh	r3, [r3, #0]
 8011b32:	b29a      	uxth	r2, r3
 8011b34:	887b      	ldrh	r3, [r7, #2]
 8011b36:	4013      	ands	r3, r2
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d003      	beq.n	8011b46 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8011b3e:	f04f 0301 	mov.w	r3, #1
 8011b42:	73fb      	strb	r3, [r7, #15]
 8011b44:	e002      	b.n	8011b4c <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8011b46:	f04f 0300 	mov.w	r3, #0
 8011b4a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f107 0714 	add.w	r7, r7, #20
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bc80      	pop	{r7}
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop

08011b5c <UINT32_TO_STREAM_f>:
//!						   while converting to little endian format.
//
//*****************************************************************************

unsigned char* UINT32_TO_STREAM_f (unsigned char *p, unsigned long u32)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b083      	sub	sp, #12
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
	*(p)++ = (unsigned char)(u32);
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	b2da      	uxtb	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	701a      	strb	r2, [r3, #0]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f103 0301 	add.w	r3, r3, #1
 8011b74:	607b      	str	r3, [r7, #4]
	*(p)++ = (unsigned char)((u32) >> 8);
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8011b7c:	b2da      	uxtb	r2, r3
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	701a      	strb	r2, [r3, #0]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f103 0301 	add.w	r3, r3, #1
 8011b88:	607b      	str	r3, [r7, #4]
	*(p)++ = (unsigned char)((u32) >> 16);
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8011b90:	b2da      	uxtb	r2, r3
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	701a      	strb	r2, [r3, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f103 0301 	add.w	r3, r3, #1
 8011b9c:	607b      	str	r3, [r7, #4]
	*(p)++ = (unsigned char)((u32) >> 24);
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	701a      	strb	r2, [r3, #0]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f103 0301 	add.w	r3, r3, #1
 8011bb0:	607b      	str	r3, [r7, #4]
	return p;
 8011bb2:	687b      	ldr	r3, [r7, #4]
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f107 070c 	add.w	r7, r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bc80      	pop	{r7}
 8011bbe:	4770      	bx	lr

08011bc0 <UINT16_TO_STREAM_f>:
//!                       while converting to little endian format.
//
//*****************************************************************************

unsigned char* UINT16_TO_STREAM_f (unsigned char *p, unsigned short u16)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	460b      	mov	r3, r1
 8011bca:	807b      	strh	r3, [r7, #2]
	*(p)++ = (unsigned char)(u16);
 8011bcc:	887b      	ldrh	r3, [r7, #2]
 8011bce:	b2da      	uxtb	r2, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	701a      	strb	r2, [r3, #0]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f103 0301 	add.w	r3, r3, #1
 8011bda:	607b      	str	r3, [r7, #4]
	*(p)++ = (unsigned char)((u16) >> 8);
 8011bdc:	887b      	ldrh	r3, [r7, #2]
 8011bde:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	701a      	strb	r2, [r3, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f103 0301 	add.w	r3, r3, #1
 8011bf0:	607b      	str	r3, [r7, #4]
	return p;
 8011bf2:	687b      	ldr	r3, [r7, #4]
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f107 070c 	add.w	r7, r7, #12
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bc80      	pop	{r7}
 8011bfe:	4770      	bx	lr

08011c00 <STREAM_TO_UINT16_f>:
//!                       16 bit in little endian format.
//
//*****************************************************************************

unsigned short STREAM_TO_UINT16_f(char* p, unsigned short offset)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	807b      	strh	r3, [r7, #2]
        return (unsigned short)((unsigned short)((unsigned short)
								(*(p + offset + 1)) << 8) + (unsigned short)(*(p + offset)));
 8011c0c:	887b      	ldrh	r3, [r7, #2]
 8011c0e:	f103 0301 	add.w	r3, r3, #1
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	18d3      	adds	r3, r2, r3
 8011c16:	781b      	ldrb	r3, [r3, #0]
//
//*****************************************************************************

unsigned short STREAM_TO_UINT16_f(char* p, unsigned short offset)
{
        return (unsigned short)((unsigned short)((unsigned short)
 8011c18:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011c1c:	b29a      	uxth	r2, r3
								(*(p + offset + 1)) << 8) + (unsigned short)(*(p + offset)));
 8011c1e:	887b      	ldrh	r3, [r7, #2]
 8011c20:	6879      	ldr	r1, [r7, #4]
 8011c22:	18cb      	adds	r3, r1, r3
 8011c24:	781b      	ldrb	r3, [r3, #0]
//
//*****************************************************************************

unsigned short STREAM_TO_UINT16_f(char* p, unsigned short offset)
{
        return (unsigned short)((unsigned short)((unsigned short)
 8011c26:	18d3      	adds	r3, r2, r3
 8011c28:	b29b      	uxth	r3, r3
								(*(p + offset + 1)) << 8) + (unsigned short)(*(p + offset)));
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f107 070c 	add.w	r7, r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bc80      	pop	{r7}
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop

08011c38 <STREAM_TO_UINT32_f>:
//!                       32 bit in little endian format.
//
//*****************************************************************************

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	460b      	mov	r3, r1
 8011c42:	807b      	strh	r3, [r7, #2]
        return (unsigned long)((unsigned long)((unsigned long)
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
 8011c44:	887b      	ldrh	r3, [r7, #2]
 8011c46:	f103 0303 	add.w	r3, r3, #3
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	18d3      	adds	r3, r2, r3
 8011c4e:	781b      	ldrb	r3, [r3, #0]
//
//*****************************************************************************

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
        return (unsigned long)((unsigned long)((unsigned long)
 8011c50:	ea4f 6203 	mov.w	r2, r3, lsl #24
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
							 (*(p + offset + 2)) << 16) + (unsigned long)((unsigned long)
 8011c54:	887b      	ldrh	r3, [r7, #2]
 8011c56:	f103 0302 	add.w	r3, r3, #2
 8011c5a:	6879      	ldr	r1, [r7, #4]
 8011c5c:	18cb      	adds	r3, r1, r3
 8011c5e:	781b      	ldrb	r3, [r3, #0]
//*****************************************************************************

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
        return (unsigned long)((unsigned long)((unsigned long)
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
 8011c60:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8011c64:	18d2      	adds	r2, r2, r3
							 (*(p + offset + 2)) << 16) + (unsigned long)((unsigned long)
							 (*(p + offset + 1)) << 8) + (unsigned long)(*(p + offset)));
 8011c66:	887b      	ldrh	r3, [r7, #2]
 8011c68:	f103 0301 	add.w	r3, r3, #1
 8011c6c:	6879      	ldr	r1, [r7, #4]
 8011c6e:	18cb      	adds	r3, r1, r3
 8011c70:	781b      	ldrb	r3, [r3, #0]

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
        return (unsigned long)((unsigned long)((unsigned long)
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
							 (*(p + offset + 2)) << 16) + (unsigned long)((unsigned long)
 8011c72:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011c76:	18d2      	adds	r2, r2, r3
							 (*(p + offset + 1)) << 8) + (unsigned long)(*(p + offset)));
 8011c78:	887b      	ldrh	r3, [r7, #2]
 8011c7a:	6879      	ldr	r1, [r7, #4]
 8011c7c:	18cb      	adds	r3, r1, r3
 8011c7e:	781b      	ldrb	r3, [r3, #0]
//
//*****************************************************************************

unsigned long STREAM_TO_UINT32_f(char* p, unsigned short offset)
{
        return (unsigned long)((unsigned long)((unsigned long)
 8011c80:	18d3      	adds	r3, r2, r3
							 (*(p + offset + 3)) << 24) + (unsigned long)((unsigned long)
							 (*(p + offset + 2)) << 16) + (unsigned long)((unsigned long)
							 (*(p + offset + 1)) << 8) + (unsigned long)(*(p + offset)));
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	f107 070c 	add.w	r7, r7, #12
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bc80      	pop	{r7}
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop

08011c90 <hci_unsol_handle_patch_request>:
//!
//!  @brief   Handle unsolicited event from type patch request
//
//*****************************************************************************
void hci_unsol_handle_patch_request(char *event_hdr)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b086      	sub	sp, #24
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
	char *params = (char *)(event_hdr) + HCI_EVENT_HEADER_SIZE;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f103 0305 	add.w	r3, r3, #5
 8011c9e:	617b      	str	r3, [r7, #20]
	unsigned long ucLength = 0;
 8011ca0:	f04f 0300 	mov.w	r3, #0
 8011ca4:	60fb      	str	r3, [r7, #12]
	char *patch;
	
	switch (*params)
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	2b02      	cmp	r3, #2
 8011cac:	d035      	beq.n	8011d1a <hci_unsol_handle_patch_request+0x8a>
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d064      	beq.n	8011d7c <hci_unsol_handle_patch_request+0xec>
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	f040 8093 	bne.w	8011dde <hci_unsol_handle_patch_request+0x14e>
	{
	case HCI_EVENT_PATCHES_DRV_REQ:
		
		if (tSLInformation.sDriverPatches)
 8011cb8:	f241 3398 	movw	r3, #5016	; 0x1398
 8011cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cc0:	691b      	ldr	r3, [r3, #16]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d01a      	beq.n	8011cfc <hci_unsol_handle_patch_request+0x6c>
		{
			patch = tSLInformation.sDriverPatches(&ucLength);
 8011cc6:	f241 3398 	movw	r3, #5016	; 0x1398
 8011cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011cce:	691b      	ldr	r3, [r3, #16]
 8011cd0:	f107 020c 	add.w	r2, r7, #12
 8011cd4:	4610      	mov	r0, r2
 8011cd6:	4798      	blx	r3
 8011cd8:	6138      	str	r0, [r7, #16]
			
			if (patch)
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00d      	beq.n	8011cfc <hci_unsol_handle_patch_request+0x6c>
			{
				hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
 8011ce0:	f241 3398 	movw	r3, #5016	; 0x1398
 8011ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011ce8:	689a      	ldr	r2, [r3, #8]
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	f04f 0001 	mov.w	r0, #1
 8011cf2:	4611      	mov	r1, r2
 8011cf4:	693a      	ldr	r2, [r7, #16]
 8011cf6:	f000 fea5 	bl	8012a44 <hci_patch_send>
 8011cfa:	e070      	b.n	8011dde <hci_unsol_handle_patch_request+0x14e>
				return;
			}
		}
		
		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_DRV_REQ, 
 8011cfc:	f241 3398 	movw	r3, #5016	; 0x1398
 8011d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	f04f 0001 	mov.w	r0, #1
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	f04f 0200 	mov.w	r2, #0
 8011d10:	f04f 0300 	mov.w	r3, #0
 8011d14:	f000 fe96 	bl	8012a44 <hci_patch_send>
									 tSLInformation.pucTxCommandBuffer, 0, 0);
		break;
 8011d18:	e061      	b.n	8011dde <hci_unsol_handle_patch_request+0x14e>
		
	case HCI_EVENT_PATCHES_FW_REQ:
		
		if (tSLInformation.sFWPatches)
 8011d1a:	f241 3398 	movw	r3, #5016	; 0x1398
 8011d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d01a      	beq.n	8011d5e <hci_unsol_handle_patch_request+0xce>
		{
			patch = tSLInformation.sFWPatches(&ucLength);
 8011d28:	f241 3398 	movw	r3, #5016	; 0x1398
 8011d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	f107 020c 	add.w	r2, r7, #12
 8011d36:	4610      	mov	r0, r2
 8011d38:	4798      	blx	r3
 8011d3a:	6138      	str	r0, [r7, #16]
			
			// Build and send a patch
			if (patch)
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d00d      	beq.n	8011d5e <hci_unsol_handle_patch_request+0xce>
			{
				hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
 8011d42:	f241 3398 	movw	r3, #5016	; 0x1398
 8011d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d4a:	689a      	ldr	r2, [r3, #8]
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	f04f 0002 	mov.w	r0, #2
 8011d54:	4611      	mov	r1, r2
 8011d56:	693a      	ldr	r2, [r7, #16]
 8011d58:	f000 fe74 	bl	8012a44 <hci_patch_send>
 8011d5c:	e03f      	b.n	8011dde <hci_unsol_handle_patch_request+0x14e>
				return;
			}
		}
		
		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_FW_REQ, 
 8011d5e:	f241 3398 	movw	r3, #5016	; 0x1398
 8011d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	f04f 0002 	mov.w	r0, #2
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	f04f 0200 	mov.w	r2, #0
 8011d72:	f04f 0300 	mov.w	r3, #0
 8011d76:	f000 fe65 	bl	8012a44 <hci_patch_send>
									 tSLInformation.pucTxCommandBuffer, 0, 0);
		break;
 8011d7a:	e030      	b.n	8011dde <hci_unsol_handle_patch_request+0x14e>
		
	case HCI_EVENT_PATCHES_BOOTLOAD_REQ:
		
		if (tSLInformation.sBootLoaderPatches)
 8011d7c:	f241 3398 	movw	r3, #5016	; 0x1398
 8011d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d84:	695b      	ldr	r3, [r3, #20]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d01a      	beq.n	8011dc0 <hci_unsol_handle_patch_request+0x130>
		{
			patch = tSLInformation.sBootLoaderPatches(&ucLength);
 8011d8a:	f241 3398 	movw	r3, #5016	; 0x1398
 8011d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011d92:	695b      	ldr	r3, [r3, #20]
 8011d94:	f107 020c 	add.w	r2, r7, #12
 8011d98:	4610      	mov	r0, r2
 8011d9a:	4798      	blx	r3
 8011d9c:	6138      	str	r0, [r7, #16]
			
			if (patch)
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d00d      	beq.n	8011dc0 <hci_unsol_handle_patch_request+0x130>
			{
				hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ,  
 8011da4:	f241 3398 	movw	r3, #5016	; 0x1398
 8011da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011dac:	689a      	ldr	r2, [r3, #8]
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	f04f 0003 	mov.w	r0, #3
 8011db6:	4611      	mov	r1, r2
 8011db8:	693a      	ldr	r2, [r7, #16]
 8011dba:	f000 fe43 	bl	8012a44 <hci_patch_send>
 8011dbe:	e00e      	b.n	8011dde <hci_unsol_handle_patch_request+0x14e>
				return;
			}
		}
		
		// Send 0 length Patches response event
		hci_patch_send(HCI_EVENT_PATCHES_BOOTLOAD_REQ, 
 8011dc0:	f241 3398 	movw	r3, #5016	; 0x1398
 8011dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011dc8:	689b      	ldr	r3, [r3, #8]
 8011dca:	f04f 0003 	mov.w	r0, #3
 8011dce:	4619      	mov	r1, r3
 8011dd0:	f04f 0200 	mov.w	r2, #0
 8011dd4:	f04f 0300 	mov.w	r3, #0
 8011dd8:	f000 fe34 	bl	8012a44 <hci_patch_send>
									 tSLInformation.pucTxCommandBuffer, 0, 0);
		break;
 8011ddc:	bf00      	nop
	}
}
 8011dde:	f107 0718 	add.w	r7, r7, #24
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop

08011de8 <hci_event_handler>:
//*****************************************************************************

	
unsigned char *
hci_event_handler(void *pRetParams, unsigned char *from, unsigned char *fromlen)
{
 8011de8:	b590      	push	{r4, r7, lr}
 8011dea:	b08d      	sub	sp, #52	; 0x34
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
	unsigned char *pucReceivedData, ucArgsize;
	unsigned short usLength;
	unsigned char *pucReceivedParams;
	unsigned short usReceivedEventOpcode = 0;
 8011df4:	f04f 0300 	mov.w	r3, #0
 8011df8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011dfa:	e000      	b.n	8011dfe <hci_event_handler+0x16>
			if ((tSLInformation.usRxEventOpcode == 0) && (tSLInformation.usRxDataPending == 0))
			{
				return NULL;
			}	
		}
	}
 8011dfc:	bf00      	nop
  unsigned char *RetParams;
	
	
	while (1)
	{
		if (tSLInformation.usEventOrDataReceived != 0)
 8011dfe:	f241 3398 	movw	r3, #5016	; 0x1398
 8011e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e06:	885b      	ldrh	r3, [r3, #2]
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d0f6      	beq.n	8011dfc <hci_event_handler+0x14>
		{				
			pucReceivedData = (tSLInformation.pucReceivedData);
 8011e0e:	f241 3398 	movw	r3, #5016	; 0x1398
 8011e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	627b      	str	r3, [r7, #36]	; 0x24

			if (*pucReceivedData == HCI_TYPE_EVNT)
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	2b04      	cmp	r3, #4
 8011e20:	f040 8268 	bne.w	80122f4 <hci_event_handler+0x50c>
			{
				// Event Received
				STREAM_TO_UINT16((char *)pucReceivedData, HCI_EVENT_OPCODE_OFFSET,
 8011e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e26:	f04f 0101 	mov.w	r1, #1
 8011e2a:	f7ff fee9 	bl	8011c00 <STREAM_TO_UINT16_f>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	85fb      	strh	r3, [r7, #46]	; 0x2e
												 usReceivedEventOpcode);
				pucReceivedParams = pucReceivedData + HCI_EVENT_HEADER_SIZE;		
 8011e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e34:	f103 0305 	add.w	r3, r3, #5
 8011e38:	623b      	str	r3, [r7, #32]
				RecvParams = pucReceivedParams;
 8011e3a:	6a3b      	ldr	r3, [r7, #32]
 8011e3c:	61fb      	str	r3, [r7, #28]
				RetParams = pRetParams;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	62bb      	str	r3, [r7, #40]	; 0x28
				
				// In case unsolicited event received - here the handling finished
				if (hci_unsol_event_handler((char *)pucReceivedData) == 0)
 8011e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e44:	f000 fabe 	bl	80123c4 <hci_unsol_event_handler>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f040 8241 	bne.w	80122d2 <hci_event_handler+0x4ea>
				{
					STREAM_TO_UINT8(pucReceivedData, HCI_DATA_LENGTH_OFFSET, usLength);
 8011e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e52:	f103 0303 	add.w	r3, r3, #3
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	837b      	strh	r3, [r7, #26]
					
					switch(usReceivedEventOpcode)
 8011e5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e5c:	f241 0207 	movw	r2, #4103	; 0x1007
 8011e60:	4293      	cmp	r3, r2
 8011e62:	dc3a      	bgt.n	8011eda <hci_event_handler+0xf2>
 8011e64:	f241 0206 	movw	r2, #4102	; 0x1006
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	f280 8093 	bge.w	8011f94 <hci_event_handler+0x1ac>
 8011e6e:	f240 2202 	movw	r2, #514	; 0x202
 8011e72:	4293      	cmp	r3, r2
 8011e74:	f000 808e 	beq.w	8011f94 <hci_event_handler+0x1ac>
 8011e78:	f240 2202 	movw	r2, #514	; 0x202
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	dc11      	bgt.n	8011ea4 <hci_event_handler+0xbc>
 8011e80:	2b0c      	cmp	r3, #12
 8011e82:	dc08      	bgt.n	8011e96 <hci_event_handler+0xae>
 8011e84:	2b08      	cmp	r3, #8
 8011e86:	f280 8085 	bge.w	8011f94 <hci_event_handler+0x1ac>
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	f2c0 8221 	blt.w	80122d2 <hci_event_handler+0x4ea>
 8011e90:	2b06      	cmp	r3, #6
 8011e92:	dd7f      	ble.n	8011f94 <hci_event_handler+0x1ac>
 8011e94:	e139      	b.n	801210a <hci_event_handler+0x322>
 8011e96:	2b0d      	cmp	r3, #13
 8011e98:	d077      	beq.n	8011f8a <hci_event_handler+0x1a2>
 8011e9a:	f240 2201 	movw	r2, #513	; 0x201
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d073      	beq.n	8011f8a <hci_event_handler+0x1a2>
 8011ea2:	e216      	b.n	80122d2 <hci_event_handler+0x4ea>
 8011ea4:	f241 0202 	movw	r2, #4098	; 0x1002
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	dc0b      	bgt.n	8011ec4 <hci_event_handler+0xdc>
 8011eac:	f241 0201 	movw	r2, #4097	; 0x1001
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	da6f      	bge.n	8011f94 <hci_event_handler+0x1ac>
 8011eb4:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8011eb8:	dd67      	ble.n	8011f8a <hci_event_handler+0x1a2>
 8011eba:	f240 2207 	movw	r2, #519	; 0x207
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	d071      	beq.n	8011fa6 <hci_event_handler+0x1be>
 8011ec2:	e206      	b.n	80122d2 <hci_event_handler+0x4ea>
 8011ec4:	f241 0204 	movw	r2, #4100	; 0x1004
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	f000 80b6 	beq.w	801203a <hci_event_handler+0x252>
 8011ece:	f241 0205 	movw	r2, #4101	; 0x1005
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	f000 808f 	beq.w	8011ff6 <hci_event_handler+0x20e>
 8011ed8:	e1fb      	b.n	80122d2 <hci_event_handler+0x4ea>
 8011eda:	f242 0204 	movw	r2, #8196	; 0x2004
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	dc23      	bgt.n	8011f2a <hci_event_handler+0x142>
 8011ee2:	f242 0201 	movw	r2, #8193	; 0x2001
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	da4f      	bge.n	8011f8a <hci_event_handler+0x1a2>
 8011eea:	f241 020b 	movw	r2, #4107	; 0x100b
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d050      	beq.n	8011f94 <hci_event_handler+0x1ac>
 8011ef2:	f241 020b 	movw	r2, #4107	; 0x100b
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	dc09      	bgt.n	8011f0e <hci_event_handler+0x126>
 8011efa:	f241 0209 	movw	r2, #4105	; 0x1009
 8011efe:	4293      	cmp	r3, r2
 8011f00:	d048      	beq.n	8011f94 <hci_event_handler+0x1ac>
 8011f02:	f241 0209 	movw	r2, #4105	; 0x1009
 8011f06:	4293      	cmp	r3, r2
 8011f08:	f300 80f2 	bgt.w	80120f0 <hci_event_handler+0x308>
 8011f0c:	e0c3      	b.n	8012096 <hci_event_handler+0x2ae>
 8011f0e:	f241 0210 	movw	r2, #4112	; 0x1010
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d05a      	beq.n	8011fcc <hci_event_handler+0x1e4>
 8011f16:	f241 0211 	movw	r2, #4113	; 0x1011
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	d03a      	beq.n	8011f94 <hci_event_handler+0x1ac>
 8011f1e:	f241 020d 	movw	r2, #4109	; 0x100d
 8011f22:	4293      	cmp	r3, r2
 8011f24:	f000 8089 	beq.w	801203a <hci_event_handler+0x252>
 8011f28:	e1d3      	b.n	80122d2 <hci_event_handler+0x4ea>
 8011f2a:	f242 0209 	movw	r2, #8201	; 0x2009
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	dc0d      	bgt.n	8011f4e <hci_event_handler+0x166>
 8011f32:	f242 0208 	movw	r2, #8200	; 0x2008
 8011f36:	4293      	cmp	r3, r2
 8011f38:	da27      	bge.n	8011f8a <hci_event_handler+0x1a2>
 8011f3a:	f242 0205 	movw	r2, #8197	; 0x2005
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	f000 811f 	beq.w	8012182 <hci_event_handler+0x39a>
 8011f44:	f242 0206 	movw	r2, #8198	; 0x2006
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	d01e      	beq.n	8011f8a <hci_event_handler+0x1a2>
 8011f4c:	e1c1      	b.n	80122d2 <hci_event_handler+0x4ea>
 8011f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f52:	f000 81bb 	beq.w	80122cc <hci_event_handler+0x4e4>
 8011f56:	f244 020b 	movw	r2, #16395	; 0x400b
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	f040 81b9 	bne.w	80122d2 <hci_event_handler+0x4ea>
					{		
					case HCI_CMND_READ_BUFFER_SIZE:
						{
							STREAM_TO_UINT8((char *)pucReceivedParams, 0, 
 8011f60:	6a3b      	ldr	r3, [r7, #32]
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	461a      	mov	r2, r3
 8011f66:	f241 3398 	movw	r3, #5016	; 0x1398
 8011f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f6e:	861a      	strh	r2, [r3, #48]	; 0x30
															tSLInformation.usNumberOfFreeBuffers);
							STREAM_TO_UINT16((char *)pucReceivedParams, 1, 
 8011f70:	6a38      	ldr	r0, [r7, #32]
 8011f72:	f04f 0101 	mov.w	r1, #1
 8011f76:	f7ff fe43 	bl	8011c00 <STREAM_TO_UINT16_f>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	f241 3398 	movw	r3, #5016	; 0x1398
 8011f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8011f86:	865a      	strh	r2, [r3, #50]	; 0x32
															 tSLInformation.usSlBufferLength);
						}
						break;
 8011f88:	e1a3      	b.n	80122d2 <hci_event_handler+0x4ea>
					case HCI_EVNT_NVMEM_READ:
					case HCI_EVNT_NVMEM_CREATE_ENTRY:
					case HCI_CMND_NVMEM_WRITE_PATCH:
					case HCI_NETAPP_PING_REPORT:
						
						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8c:	791a      	ldrb	r2, [r3, #4]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	701a      	strb	r2, [r3, #0]
														,*(unsigned char *)pRetParams);
						break;
 8011f92:	e19e      	b.n	80122d2 <hci_event_handler+0x4ea>
					case HCI_EVNT_CLOSE_SOCKET:
					case HCI_EVNT_MDNS_ADVERTISE:
					case HCI_EVNT_CONNECT:
					case HCI_EVNT_NVMEM_WRITE:
						
						STREAM_TO_UINT32((char *)pucReceivedParams,0
 8011f94:	6a38      	ldr	r0, [r7, #32]
 8011f96:	f04f 0100 	mov.w	r1, #0
 8011f9a:	f7ff fe4d 	bl	8011c38 <STREAM_TO_UINT32_f>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	601a      	str	r2, [r3, #0]
														 ,*(unsigned long *)pRetParams);
						break;
 8011fa4:	e195      	b.n	80122d2 <hci_event_handler+0x4ea>
						
					case HCI_EVNT_READ_SP_VERSION:
						
						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET
 8011fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa8:	791a      	ldrb	r2, [r3, #4]
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	701a      	strb	r2, [r3, #0]
														,*(unsigned char *)pRetParams);
						pRetParams = ((char *)pRetParams) + 1;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f103 0301 	add.w	r3, r3, #1
 8011fb4:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT32((char *)pucReceivedParams, 0, retValue32);
 8011fb6:	6a38      	ldr	r0, [r7, #32]
 8011fb8:	f04f 0100 	mov.w	r1, #0
 8011fbc:	f7ff fe3c 	bl	8011c38 <STREAM_TO_UINT32_f>
 8011fc0:	6178      	str	r0, [r7, #20]
						UINT32_TO_STREAM((unsigned char *)pRetParams, retValue32);				
 8011fc2:	68f8      	ldr	r0, [r7, #12]
 8011fc4:	6979      	ldr	r1, [r7, #20]
 8011fc6:	f7ff fdc9 	bl	8011b5c <UINT32_TO_STREAM_f>
						break;
 8011fca:	e182      	b.n	80122d2 <hci_event_handler+0x4ea>
						
					case HCI_EVNT_BSD_GETHOSTBYNAME:
						
						STREAM_TO_UINT32((char *)pucReceivedParams
 8011fcc:	6a38      	ldr	r0, [r7, #32]
 8011fce:	f04f 0100 	mov.w	r1, #0
 8011fd2:	f7ff fe31 	bl	8011c38 <STREAM_TO_UINT32_f>
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	601a      	str	r2, [r3, #0]
						      ,GET_HOST_BY_NAME_RETVAL_OFFSET,*(unsigned long *)pRetParams);
						pRetParams = ((char *)pRetParams) + 4;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	f103 0304 	add.w	r3, r3, #4
 8011fe2:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT32((char *)pucReceivedParams
 8011fe4:	6a38      	ldr	r0, [r7, #32]
 8011fe6:	f04f 0104 	mov.w	r1, #4
 8011fea:	f7ff fe25 	bl	8011c38 <STREAM_TO_UINT32_f>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	601a      	str	r2, [r3, #0]
									,GET_HOST_BY_NAME_ADDR_OFFSET,*(unsigned long *)pRetParams);					
						break;
 8011ff4:	e16d      	b.n	80122d2 <hci_event_handler+0x4ea>
						
					case HCI_EVNT_ACCEPT:
						{
							STREAM_TO_UINT32((char *)pucReceivedParams,ACCEPT_SD_OFFSET
 8011ff6:	6a38      	ldr	r0, [r7, #32]
 8011ff8:	f04f 0100 	mov.w	r1, #0
 8011ffc:	f7ff fe1c 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012000:	4602      	mov	r2, r0
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	601a      	str	r2, [r3, #0]
															 ,*(unsigned long *)pRetParams);
							pRetParams = ((char *)pRetParams) + 4;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f103 0304 	add.w	r3, r3, #4
 801200c:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams
 801200e:	6a38      	ldr	r0, [r7, #32]
 8012010:	f04f 0104 	mov.w	r1, #4
 8012014:	f7ff fe10 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012018:	4602      	mov	r2, r0
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	601a      	str	r2, [r3, #0]
										,ACCEPT_RETURN_STATUS_OFFSET,*(unsigned long *)pRetParams);
              pRetParams = ((char *)pRetParams) + 4; 
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f103 0304 	add.w	r3, r3, #4
 8012024:	60fb      	str	r3, [r7, #12]
							
							//This argument returns in network order
							memcpy((unsigned char *)pRetParams, 
 8012026:	6a3b      	ldr	r3, [r7, #32]
 8012028:	f103 0308 	add.w	r3, r3, #8
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	4619      	mov	r1, r3
 8012030:	f04f 0210 	mov.w	r2, #16
 8012034:	f001 fc4c 	bl	80138d0 <memcpy>
								  pucReceivedParams + ACCEPT_ADDRESS__OFFSET, sizeof(sockaddr));	
							break;
 8012038:	e14b      	b.n	80122d2 <hci_event_handler+0x4ea>
						}
						
					case HCI_EVNT_RECV:
					case HCI_EVNT_RECVFROM:
						{
							STREAM_TO_UINT32((char *)pucReceivedParams,SL_RECEIVE_SD_OFFSET ,*(unsigned long *)pRetParams);
 801203a:	6a38      	ldr	r0, [r7, #32]
 801203c:	f04f 0100 	mov.w	r1, #0
 8012040:	f7ff fdfa 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012044:	4602      	mov	r2, r0
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f103 0304 	add.w	r3, r3, #4
 8012050:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SL_RECEIVE_NUM_BYTES_OFFSET,*(unsigned long *)pRetParams);
 8012052:	6a38      	ldr	r0, [r7, #32]
 8012054:	f04f 0104 	mov.w	r1, #4
 8012058:	f7ff fdee 	bl	8011c38 <STREAM_TO_UINT32_f>
 801205c:	4602      	mov	r2, r0
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f103 0304 	add.w	r3, r3, #4
 8012068:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SL_RECEIVE__FLAGS__OFFSET,*(unsigned long *)pRetParams);
 801206a:	6a38      	ldr	r0, [r7, #32]
 801206c:	f04f 0108 	mov.w	r1, #8
 8012070:	f7ff fde2 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012074:	4602      	mov	r2, r0
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	601a      	str	r2, [r3, #0]
							
							if(((tBsdReadReturnParams *)pRetParams)->iNumberOfBytes == ERROR_SOCKET_INACTIVE)
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	f113 0f39 	cmn.w	r3, #57	; 0x39
 8012082:	f040 8125 	bne.w	80122d0 <hci_event_handler+0x4e8>
							{
								set_socket_active_status(((tBsdReadReturnParams *)pRetParams)->iSocketDescriptor,SOCKET_STATUS_INACTIVE);
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	4618      	mov	r0, r3
 801208c:	f04f 0101 	mov.w	r1, #1
 8012090:	f000 fb64 	bl	801275c <set_socket_active_status>
							}
							break;
 8012094:	e11c      	b.n	80122d0 <hci_event_handler+0x4e8>
						}
						
					case HCI_EVNT_SELECT:
						{ 
							STREAM_TO_UINT32((char *)pucReceivedParams,SELECT_STATUS_OFFSET,*(unsigned long *)pRetParams);
 8012096:	6a38      	ldr	r0, [r7, #32]
 8012098:	f04f 0100 	mov.w	r1, #0
 801209c:	f7ff fdcc 	bl	8011c38 <STREAM_TO_UINT32_f>
 80120a0:	4602      	mov	r2, r0
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	f103 0304 	add.w	r3, r3, #4
 80120ac:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SELECT_READFD_OFFSET,*(unsigned long *)pRetParams);
 80120ae:	6a38      	ldr	r0, [r7, #32]
 80120b0:	f04f 0104 	mov.w	r1, #4
 80120b4:	f7ff fdc0 	bl	8011c38 <STREAM_TO_UINT32_f>
 80120b8:	4602      	mov	r2, r0
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	f103 0304 	add.w	r3, r3, #4
 80120c4:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SELECT_WRITEFD_OFFSET,*(unsigned long *)pRetParams);
 80120c6:	6a38      	ldr	r0, [r7, #32]
 80120c8:	f04f 0108 	mov.w	r1, #8
 80120cc:	f7ff fdb4 	bl	8011c38 <STREAM_TO_UINT32_f>
 80120d0:	4602      	mov	r2, r0
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	601a      	str	r2, [r3, #0]
							pRetParams = ((char *)pRetParams) + 4;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	f103 0304 	add.w	r3, r3, #4
 80120dc:	60fb      	str	r3, [r7, #12]
							STREAM_TO_UINT32((char *)pucReceivedParams,SELECT_EXFD_OFFSET,*(unsigned long *)pRetParams);			
 80120de:	6a38      	ldr	r0, [r7, #32]
 80120e0:	f04f 010c 	mov.w	r1, #12
 80120e4:	f7ff fda8 	bl	8011c38 <STREAM_TO_UINT32_f>
 80120e8:	4602      	mov	r2, r0
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	601a      	str	r2, [r3, #0]
							break;
 80120ee:	e0f0      	b.n	80122d2 <hci_event_handler+0x4ea>
						}
						
					case HCI_CMND_GETSOCKOPT:
						
						STREAM_TO_UINT8(pucReceivedData, HCI_EVENT_STATUS_OFFSET,((tBsdGetSockOptReturnParams *)pRetParams)->iStatus);
 80120f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f2:	f103 0304 	add.w	r3, r3, #4
 80120f6:	781a      	ldrb	r2, [r3, #0]
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	711a      	strb	r2, [r3, #4]
						//This argument returns in network order
						memcpy((unsigned char *)pRetParams, pucReceivedParams, 4);
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	6a39      	ldr	r1, [r7, #32]
 8012100:	f04f 0204 	mov.w	r2, #4
 8012104:	f001 fbe4 	bl	80138d0 <memcpy>
						break;
 8012108:	e0e3      	b.n	80122d2 <hci_event_handler+0x4ea>
						
					case HCI_CMND_WLAN_IOCTL_GET_SCAN_RESULTS:
						
						STREAM_TO_UINT32((char *)pucReceivedParams,GET_SCAN_RESULTS_TABlE_COUNT_OFFSET,*(unsigned long *)pRetParams);
 801210a:	6a38      	ldr	r0, [r7, #32]
 801210c:	f04f 0100 	mov.w	r1, #0
 8012110:	f7ff fd92 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012114:	4602      	mov	r2, r0
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	601a      	str	r2, [r3, #0]
						pRetParams = ((char *)pRetParams) + 4;   					
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	f103 0304 	add.w	r3, r3, #4
 8012120:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT32((char *)pucReceivedParams,GET_SCAN_RESULTS_SCANRESULT_STATUS_OFFSET,*(unsigned long *)pRetParams);
 8012122:	6a38      	ldr	r0, [r7, #32]
 8012124:	f04f 0104 	mov.w	r1, #4
 8012128:	f7ff fd86 	bl	8011c38 <STREAM_TO_UINT32_f>
 801212c:	4602      	mov	r2, r0
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	601a      	str	r2, [r3, #0]
						pRetParams = ((char *)pRetParams) + 4;                                                        					
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f103 0304 	add.w	r3, r3, #4
 8012138:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT16((char *)pucReceivedParams,GET_SCAN_RESULTS_ISVALID_TO_SSIDLEN_OFFSET,*(unsigned long *)pRetParams);
 801213a:	6a38      	ldr	r0, [r7, #32]
 801213c:	f04f 0108 	mov.w	r1, #8
 8012140:	f7ff fd5e 	bl	8011c00 <STREAM_TO_UINT16_f>
 8012144:	4603      	mov	r3, r0
 8012146:	461a      	mov	r2, r3
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	601a      	str	r2, [r3, #0]
						pRetParams = ((char *)pRetParams) + 2;   					
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f103 0302 	add.w	r3, r3, #2
 8012152:	60fb      	str	r3, [r7, #12]
						STREAM_TO_UINT16((char *)pucReceivedParams,GET_SCAN_RESULTS_FRAME_TIME_OFFSET,*(unsigned long *)pRetParams);
 8012154:	6a38      	ldr	r0, [r7, #32]
 8012156:	f04f 010a 	mov.w	r1, #10
 801215a:	f7ff fd51 	bl	8011c00 <STREAM_TO_UINT16_f>
 801215e:	4603      	mov	r3, r0
 8012160:	461a      	mov	r2, r3
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	601a      	str	r2, [r3, #0]
						pRetParams = ((char *)pRetParams) + 2;  
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	f103 0302 	add.w	r3, r3, #2
 801216c:	60fb      	str	r3, [r7, #12]
						memcpy((unsigned char *)pRetParams, (char *)(pucReceivedParams + GET_SCAN_RESULTS_FRAME_TIME_OFFSET + 2), GET_SCAN_RESULTS_SSID_MAC_LENGTH);	
 801216e:	6a3b      	ldr	r3, [r7, #32]
 8012170:	f103 030c 	add.w	r3, r3, #12
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	4619      	mov	r1, r3
 8012178:	f04f 0226 	mov.w	r2, #38	; 0x26
 801217c:	f001 fba8 	bl	80138d0 <memcpy>
						break;
 8012180:	e0a7      	b.n	80122d2 <hci_event_handler+0x4ea>
						break;
						
					case HCI_NETAPP_IPCONFIG:
						
						//Read IP address
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 8012182:	f04f 0400 	mov.w	r4, #0
 8012186:	e00d      	b.n	80121a4 <hci_event_handler+0x3bc>
 8012188:	b223      	sxth	r3, r4
 801218a:	69fa      	ldr	r2, [r7, #28]
 801218c:	18d3      	adds	r3, r2, r3
 801218e:	781a      	ldrb	r2, [r3, #0]
 8012190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012192:	701a      	strb	r2, [r3, #0]
 8012194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012196:	f103 0301 	add.w	r3, r3, #1
 801219a:	62bb      	str	r3, [r7, #40]	; 0x28
 801219c:	4623      	mov	r3, r4
 801219e:	f103 0301 	add.w	r3, r3, #1
 80121a2:	b29c      	uxth	r4, r3
 80121a4:	b223      	sxth	r3, r4
 80121a6:	2b03      	cmp	r3, #3
 80121a8:	ddee      	ble.n	8012188 <hci_event_handler+0x3a0>
						RecvParams += 4;
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	f103 0304 	add.w	r3, r3, #4
 80121b0:	61fb      	str	r3, [r7, #28]
						
						//Read subnet
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 80121b2:	f04f 0400 	mov.w	r4, #0
 80121b6:	e00d      	b.n	80121d4 <hci_event_handler+0x3ec>
 80121b8:	b223      	sxth	r3, r4
 80121ba:	69fa      	ldr	r2, [r7, #28]
 80121bc:	18d3      	adds	r3, r2, r3
 80121be:	781a      	ldrb	r2, [r3, #0]
 80121c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c2:	701a      	strb	r2, [r3, #0]
 80121c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c6:	f103 0301 	add.w	r3, r3, #1
 80121ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80121cc:	4623      	mov	r3, r4
 80121ce:	f103 0301 	add.w	r3, r3, #1
 80121d2:	b29c      	uxth	r4, r3
 80121d4:	b223      	sxth	r3, r4
 80121d6:	2b03      	cmp	r3, #3
 80121d8:	ddee      	ble.n	80121b8 <hci_event_handler+0x3d0>
						RecvParams += 4;
 80121da:	69fb      	ldr	r3, [r7, #28]
 80121dc:	f103 0304 	add.w	r3, r3, #4
 80121e0:	61fb      	str	r3, [r7, #28]
						
						//Read default GW
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 80121e2:	f04f 0400 	mov.w	r4, #0
 80121e6:	e00d      	b.n	8012204 <hci_event_handler+0x41c>
 80121e8:	b223      	sxth	r3, r4
 80121ea:	69fa      	ldr	r2, [r7, #28]
 80121ec:	18d3      	adds	r3, r2, r3
 80121ee:	781a      	ldrb	r2, [r3, #0]
 80121f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f2:	701a      	strb	r2, [r3, #0]
 80121f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f6:	f103 0301 	add.w	r3, r3, #1
 80121fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80121fc:	4623      	mov	r3, r4
 80121fe:	f103 0301 	add.w	r3, r3, #1
 8012202:	b29c      	uxth	r4, r3
 8012204:	b223      	sxth	r3, r4
 8012206:	2b03      	cmp	r3, #3
 8012208:	ddee      	ble.n	80121e8 <hci_event_handler+0x400>
						RecvParams += 4;
 801220a:	69fb      	ldr	r3, [r7, #28]
 801220c:	f103 0304 	add.w	r3, r3, #4
 8012210:	61fb      	str	r3, [r7, #28]
						
						//Read DHCP server                                          	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 8012212:	f04f 0400 	mov.w	r4, #0
 8012216:	e00d      	b.n	8012234 <hci_event_handler+0x44c>
 8012218:	b223      	sxth	r3, r4
 801221a:	69fa      	ldr	r2, [r7, #28]
 801221c:	18d3      	adds	r3, r2, r3
 801221e:	781a      	ldrb	r2, [r3, #0]
 8012220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012222:	701a      	strb	r2, [r3, #0]
 8012224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012226:	f103 0301 	add.w	r3, r3, #1
 801222a:	62bb      	str	r3, [r7, #40]	; 0x28
 801222c:	4623      	mov	r3, r4
 801222e:	f103 0301 	add.w	r3, r3, #1
 8012232:	b29c      	uxth	r4, r3
 8012234:	b223      	sxth	r3, r4
 8012236:	2b03      	cmp	r3, #3
 8012238:	ddee      	ble.n	8012218 <hci_event_handler+0x430>
						RecvParams += 4;
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	f103 0304 	add.w	r3, r3, #4
 8012240:	61fb      	str	r3, [r7, #28]
						
						//Read DNS server                                           
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_IP_LENGTH);
 8012242:	f04f 0400 	mov.w	r4, #0
 8012246:	e00d      	b.n	8012264 <hci_event_handler+0x47c>
 8012248:	b223      	sxth	r3, r4
 801224a:	69fa      	ldr	r2, [r7, #28]
 801224c:	18d3      	adds	r3, r2, r3
 801224e:	781a      	ldrb	r2, [r3, #0]
 8012250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012252:	701a      	strb	r2, [r3, #0]
 8012254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012256:	f103 0301 	add.w	r3, r3, #1
 801225a:	62bb      	str	r3, [r7, #40]	; 0x28
 801225c:	4623      	mov	r3, r4
 801225e:	f103 0301 	add.w	r3, r3, #1
 8012262:	b29c      	uxth	r4, r3
 8012264:	b223      	sxth	r3, r4
 8012266:	2b03      	cmp	r3, #3
 8012268:	ddee      	ble.n	8012248 <hci_event_handler+0x460>
						RecvParams += 4;
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	f103 0304 	add.w	r3, r3, #4
 8012270:	61fb      	str	r3, [r7, #28]
						
						//Read Mac address                            	
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_MAC_LENGTH);
 8012272:	f04f 0400 	mov.w	r4, #0
 8012276:	e00d      	b.n	8012294 <hci_event_handler+0x4ac>
 8012278:	b223      	sxth	r3, r4
 801227a:	69fa      	ldr	r2, [r7, #28]
 801227c:	18d3      	adds	r3, r2, r3
 801227e:	781a      	ldrb	r2, [r3, #0]
 8012280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012282:	701a      	strb	r2, [r3, #0]
 8012284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012286:	f103 0301 	add.w	r3, r3, #1
 801228a:	62bb      	str	r3, [r7, #40]	; 0x28
 801228c:	4623      	mov	r3, r4
 801228e:	f103 0301 	add.w	r3, r3, #1
 8012292:	b29c      	uxth	r4, r3
 8012294:	b223      	sxth	r3, r4
 8012296:	2b05      	cmp	r3, #5
 8012298:	ddee      	ble.n	8012278 <hci_event_handler+0x490>
						RecvParams += 6;
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	f103 0306 	add.w	r3, r3, #6
 80122a0:	61fb      	str	r3, [r7, #28]
						
						//Read SSID
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_SSID_LENGTH);
 80122a2:	f04f 0400 	mov.w	r4, #0
 80122a6:	e00d      	b.n	80122c4 <hci_event_handler+0x4dc>
 80122a8:	b223      	sxth	r3, r4
 80122aa:	69fa      	ldr	r2, [r7, #28]
 80122ac:	18d3      	adds	r3, r2, r3
 80122ae:	781a      	ldrb	r2, [r3, #0]
 80122b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b2:	701a      	strb	r2, [r3, #0]
 80122b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b6:	f103 0301 	add.w	r3, r3, #1
 80122ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80122bc:	4623      	mov	r3, r4
 80122be:	f103 0301 	add.w	r3, r3, #1
 80122c2:	b29c      	uxth	r4, r3
 80122c4:	b223      	sxth	r3, r4
 80122c6:	2b1f      	cmp	r3, #31
 80122c8:	ddee      	ble.n	80122a8 <hci_event_handler+0x4c0>
 80122ca:	e002      	b.n	80122d2 <hci_event_handler+0x4ea>
						pRetParams = ((char *)pRetParams) + 2;  
						memcpy((unsigned char *)pRetParams, (char *)(pucReceivedParams + GET_SCAN_RESULTS_FRAME_TIME_OFFSET + 2), GET_SCAN_RESULTS_SSID_MAC_LENGTH);	
						break;
						
					case HCI_CMND_SIMPLE_LINK_START:
						break;
 80122cc:	bf00      	nop
 80122ce:	e000      	b.n	80122d2 <hci_event_handler+0x4ea>
							
							if(((tBsdReadReturnParams *)pRetParams)->iNumberOfBytes == ERROR_SOCKET_INACTIVE)
							{
								set_socket_active_status(((tBsdReadReturnParams *)pRetParams)->iSocketDescriptor,SOCKET_STATUS_INACTIVE);
							}
							break;
 80122d0:	bf00      	nop
						STREAM_TO_STREAM(RecvParams,RetParams,NETAPP_IPCONFIG_SSID_LENGTH);
	
					}
				}
				
				if (usReceivedEventOpcode == tSLInformation.usRxEventOpcode)
 80122d2:	f241 3398 	movw	r3, #5016	; 0x1398
 80122d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80122da:	881b      	ldrh	r3, [r3, #0]
 80122dc:	b29b      	uxth	r3, r3
 80122de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d141      	bne.n	8012368 <hci_event_handler+0x580>
				{
					tSLInformation.usRxEventOpcode = 0;
 80122e4:	f241 3398 	movw	r3, #5016	; 0x1398
 80122e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80122ec:	f04f 0200 	mov.w	r2, #0
 80122f0:	801a      	strh	r2, [r3, #0]
 80122f2:	e039      	b.n	8012368 <hci_event_handler+0x580>
				}
			}
			else
			{				
				pucReceivedParams = pucReceivedData;
 80122f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f6:	623b      	str	r3, [r7, #32]
				STREAM_TO_UINT8((char *)pucReceivedData, HCI_PACKET_ARGSIZE_OFFSET, ucArgsize);
 80122f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fa:	f103 0302 	add.w	r3, r3, #2
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	74fb      	strb	r3, [r7, #19]
				
				STREAM_TO_UINT16((char *)pucReceivedData, HCI_PACKET_LENGTH_OFFSET, usLength);
 8012302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012304:	f04f 0103 	mov.w	r1, #3
 8012308:	f7ff fc7a 	bl	8011c00 <STREAM_TO_UINT16_f>
 801230c:	4603      	mov	r3, r0
 801230e:	837b      	strh	r3, [r7, #26]

				// Data received: note that the only case where from and from length 
				// are not null is in recv from, so fill the args accordingly
				if (from)
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d014      	beq.n	8012340 <hci_event_handler+0x558>
				{
					STREAM_TO_UINT32((char *)(pucReceivedData + HCI_DATA_HEADER_SIZE), BSD_RECV_FROM_FROMLEN_OFFSET, *(unsigned long *)fromlen);
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	f103 0305 	add.w	r3, r3, #5
 801231c:	4618      	mov	r0, r3
 801231e:	f04f 0104 	mov.w	r1, #4
 8012322:	f7ff fc89 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012326:	4602      	mov	r2, r0
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	601a      	str	r2, [r3, #0]
					memcpy(from, (pucReceivedData + HCI_DATA_HEADER_SIZE + BSD_RECV_FROM_FROM_OFFSET) ,*fromlen);
 801232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232e:	f103 0215 	add.w	r2, r3, #21
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	68b8      	ldr	r0, [r7, #8]
 8012338:	4611      	mov	r1, r2
 801233a:	461a      	mov	r2, r3
 801233c:	f001 fac8 	bl	80138d0 <memcpy>
				}
				
				memcpy(pRetParams, pucReceivedParams + HCI_DATA_HEADER_SIZE + ucArgsize,
 8012340:	7cfb      	ldrb	r3, [r7, #19]
 8012342:	f103 0305 	add.w	r3, r3, #5
 8012346:	6a3a      	ldr	r2, [r7, #32]
 8012348:	18d2      	adds	r2, r2, r3
							 usLength - ucArgsize);
 801234a:	8b79      	ldrh	r1, [r7, #26]
 801234c:	7cfb      	ldrb	r3, [r7, #19]
 801234e:	1acb      	subs	r3, r1, r3
				{
					STREAM_TO_UINT32((char *)(pucReceivedData + HCI_DATA_HEADER_SIZE), BSD_RECV_FROM_FROMLEN_OFFSET, *(unsigned long *)fromlen);
					memcpy(from, (pucReceivedData + HCI_DATA_HEADER_SIZE + BSD_RECV_FROM_FROM_OFFSET) ,*fromlen);
				}
				
				memcpy(pRetParams, pucReceivedParams + HCI_DATA_HEADER_SIZE + ucArgsize,
 8012350:	68f8      	ldr	r0, [r7, #12]
 8012352:	4611      	mov	r1, r2
 8012354:	461a      	mov	r2, r3
 8012356:	f001 fabb 	bl	80138d0 <memcpy>
							 usLength - ucArgsize);
				
				tSLInformation.usRxDataPending = 0;
 801235a:	f241 3398 	movw	r3, #5016	; 0x1398
 801235e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012362:	f04f 0200 	mov.w	r2, #0
 8012366:	86da      	strh	r2, [r3, #54]	; 0x36
			}
		
			tSLInformation.usEventOrDataReceived = 0;
 8012368:	f241 3398 	movw	r3, #5016	; 0x1398
 801236c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012370:	f04f 0200 	mov.w	r2, #0
 8012374:	805a      	strh	r2, [r3, #2]
			
			SpiResumeSpi();
 8012376:	f7f8 fcbf 	bl	800acf8 <SpiResumeSpi>
			
			// Since we are going to TX - we need to handle this event after the 
			// ResumeSPi since we need interrupts
			if ((*pucReceivedData == HCI_TYPE_EVNT) &&
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	2b04      	cmp	r3, #4
 8012380:	d106      	bne.n	8012390 <hci_event_handler+0x5a8>
 8012382:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012388:	d102      	bne.n	8012390 <hci_event_handler+0x5a8>
					(usReceivedEventOpcode == HCI_EVNT_PATCHES_REQ))
			{
				hci_unsol_handle_patch_request((char *)pucReceivedData);
 801238a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801238c:	f7ff fc80 	bl	8011c90 <hci_unsol_handle_patch_request>
			}
			
			if ((tSLInformation.usRxEventOpcode == 0) && (tSLInformation.usRxDataPending == 0))
 8012390:	f241 3398 	movw	r3, #5016	; 0x1398
 8012394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	b29b      	uxth	r3, r3
 801239c:	2b00      	cmp	r3, #0
 801239e:	f47f ad2d 	bne.w	8011dfc <hci_event_handler+0x14>
 80123a2:	f241 3398 	movw	r3, #5016	; 0x1398
 80123a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80123aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	f47f ad24 	bne.w	8011dfc <hci_event_handler+0x14>
			{
				return NULL;
 80123b4:	f04f 0300 	mov.w	r3, #0
			}	
		}
	}

}
 80123b8:	4618      	mov	r0, r3
 80123ba:	f107 0734 	add.w	r7, r7, #52	; 0x34
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd90      	pop	{r4, r7, pc}
 80123c2:	bf00      	nop

080123c4 <hci_unsol_event_handler>:
//!  @brief              Handle unsolicited events
//
//*****************************************************************************
long
hci_unsol_event_handler(char *event_hdr)
{
 80123c4:	b590      	push	{r4, r7, lr}
 80123c6:	b093      	sub	sp, #76	; 0x4c
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
	char * data = NULL;
 80123cc:	f04f 0300 	mov.w	r3, #0
 80123d0:	643b      	str	r3, [r7, #64]	; 0x40
	long event_type;
	unsigned long NumberOfReleasedPackets;
	unsigned long NumberOfSentPackets;
	
	STREAM_TO_UINT16(event_hdr, HCI_EVENT_OPCODE_OFFSET,event_type);
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f04f 0101 	mov.w	r1, #1
 80123d8:	f7ff fc12 	bl	8011c00 <STREAM_TO_UINT16_f>
 80123dc:	4603      	mov	r3, r0
 80123de:	63fb      	str	r3, [r7, #60]	; 0x3c
	
	if (event_type & HCI_EVNT_UNSOL_BASE)
 80123e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d02e      	beq.n	8012448 <hci_unsol_event_handler+0x84>
	{
		switch(event_type)
 80123ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123ec:	f5b3 4f82 	cmp.w	r3, #16640	; 0x4100
 80123f0:	d12a      	bne.n	8012448 <hci_unsol_event_handler+0x84>
		{
	
		case HCI_EVNT_DATA_UNSOL_FREE_BUFF:
			{
				hci_event_unsol_flowcontrol_handler(event_hdr);
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 f9ec 	bl	80127d0 <hci_event_unsol_flowcontrol_handler>
				
				NumberOfReleasedPackets = tSLInformation.NumberOfReleasedPackets;
 80123f8:	f241 3398 	movw	r3, #5016	; 0x1398
 80123fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012402:	63bb      	str	r3, [r7, #56]	; 0x38
				NumberOfSentPackets = tSLInformation.NumberOfSentPackets;
 8012404:	f241 3398 	movw	r3, #5016	; 0x1398
 8012408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801240e:	637b      	str	r3, [r7, #52]	; 0x34
								
				if (NumberOfReleasedPackets == NumberOfSentPackets)
 8012410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012414:	429a      	cmp	r2, r3
 8012416:	d114      	bne.n	8012442 <hci_unsol_event_handler+0x7e>
				{
					if (tSLInformation.InformHostOnTxComplete)
 8012418:	f241 3398 	movw	r3, #5016	; 0x1398
 801241c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012424:	b2db      	uxtb	r3, r3
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00b      	beq.n	8012442 <hci_unsol_event_handler+0x7e>
					{
						tSLInformation.sWlanCB(HCI_EVENT_CC3000_CAN_SHUT_DOWN, NULL, 0);
 801242a:	f241 3398 	movw	r3, #5016	; 0x1398
 801242e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012432:	699b      	ldr	r3, [r3, #24]
 8012434:	f04f 0099 	mov.w	r0, #153	; 0x99
 8012438:	f04f 0100 	mov.w	r1, #0
 801243c:	f04f 0200 	mov.w	r2, #0
 8012440:	4798      	blx	r3
					}
				}				
				return 1;
 8012442:	f04f 0301 	mov.w	r3, #1
 8012446:	e154      	b.n	80126f2 <hci_unsol_event_handler+0x32e>
				
			}
		}
	}
	
	if(event_type & HCI_EVNT_WLAN_UNSOL_BASE)
 8012448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801244a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801244e:	2b00      	cmp	r3, #0
 8012450:	f000 812b 	beq.w	80126aa <hci_unsol_event_handler+0x2e6>
	{           
		switch(event_type)
 8012454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012456:	f248 0210 	movw	r2, #32784	; 0x8010
 801245a:	4293      	cmp	r3, r2
 801245c:	d03b      	beq.n	80124d6 <hci_unsol_event_handler+0x112>
 801245e:	f248 0210 	movw	r2, #32784	; 0x8010
 8012462:	4293      	cmp	r3, r2
 8012464:	dc0d      	bgt.n	8012482 <hci_unsol_event_handler+0xbe>
 8012466:	f248 0201 	movw	r2, #32769	; 0x8001
 801246a:	4293      	cmp	r3, r2
 801246c:	f2c0 8110 	blt.w	8012690 <hci_unsol_event_handler+0x2cc>
 8012470:	f248 0202 	movw	r2, #32770	; 0x8002
 8012474:	4293      	cmp	r3, r2
 8012476:	dd1a      	ble.n	80124ae <hci_unsol_event_handler+0xea>
 8012478:	f248 0204 	movw	r2, #32772	; 0x8004
 801247c:	4293      	cmp	r3, r2
 801247e:	d016      	beq.n	80124ae <hci_unsol_event_handler+0xea>
 8012480:	e106      	b.n	8012690 <hci_unsol_event_handler+0x2cc>
 8012482:	f248 0280 	movw	r2, #32896	; 0x8080
 8012486:	4293      	cmp	r3, r2
 8012488:	d011      	beq.n	80124ae <hci_unsol_event_handler+0xea>
 801248a:	f248 0280 	movw	r2, #32896	; 0x8080
 801248e:	4293      	cmp	r3, r2
 8012490:	dc05      	bgt.n	801249e <hci_unsol_event_handler+0xda>
 8012492:	f248 0240 	movw	r2, #32832	; 0x8040
 8012496:	4293      	cmp	r3, r2
 8012498:	f000 80ac 	beq.w	80125f4 <hci_unsol_event_handler+0x230>
 801249c:	e0f8      	b.n	8012690 <hci_unsol_event_handler+0x2cc>
 801249e:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 80124a2:	d004      	beq.n	80124ae <hci_unsol_event_handler+0xea>
 80124a4:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 80124a8:	f000 80df 	beq.w	801266a <hci_unsol_event_handler+0x2a6>
 80124ac:	e0f0      	b.n	8012690 <hci_unsol_event_handler+0x2cc>
		case HCI_EVNT_WLAN_UNSOL_CONNECT:
		case HCI_EVNT_WLAN_UNSOL_DISCONNECT:
		case HCI_EVNT_WLAN_UNSOL_INIT:
		case HCI_EVNT_WLAN_ASYNC_SIMPLE_CONFIG_DONE:
			
			if( tSLInformation.sWlanCB )
 80124ae:	f241 3398 	movw	r3, #5016	; 0x1398
 80124b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124b6:	699b      	ldr	r3, [r3, #24]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f000 80ec 	beq.w	8012696 <hci_unsol_event_handler+0x2d2>
			{
				tSLInformation.sWlanCB(event_type, 0, 0);
 80124be:	f241 3398 	movw	r3, #5016	; 0x1398
 80124c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80124c6:	699b      	ldr	r3, [r3, #24]
 80124c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80124ca:	f04f 0100 	mov.w	r1, #0
 80124ce:	f04f 0200 	mov.w	r2, #0
 80124d2:	4798      	blx	r3
			}
			break;
 80124d4:	e0df      	b.n	8012696 <hci_unsol_event_handler+0x2d2>
			
		case HCI_EVNT_WLAN_UNSOL_DHCP:
			{
				tNetappDhcpParams params;
				unsigned char *recParams = (unsigned char *)&params;			
 80124d6:	f107 0320 	add.w	r3, r7, #32
 80124da:	647b      	str	r3, [r7, #68]	; 0x44
				data = (char*)(event_hdr) + HCI_EVENT_HEADER_SIZE;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f103 0305 	add.w	r3, r3, #5
 80124e2:	643b      	str	r3, [r7, #64]	; 0x40
				
				//Read IP address
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
 80124e4:	f04f 0400 	mov.w	r4, #0
 80124e8:	e00d      	b.n	8012506 <hci_unsol_event_handler+0x142>
 80124ea:	b223      	sxth	r3, r4
 80124ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124ee:	18d3      	adds	r3, r2, r3
 80124f0:	781a      	ldrb	r2, [r3, #0]
 80124f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124f4:	701a      	strb	r2, [r3, #0]
 80124f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124f8:	f103 0301 	add.w	r3, r3, #1
 80124fc:	647b      	str	r3, [r7, #68]	; 0x44
 80124fe:	4623      	mov	r3, r4
 8012500:	f103 0301 	add.w	r3, r3, #1
 8012504:	b29c      	uxth	r4, r3
 8012506:	b223      	sxth	r3, r4
 8012508:	2b03      	cmp	r3, #3
 801250a:	ddee      	ble.n	80124ea <hci_unsol_event_handler+0x126>
				data += 4;
 801250c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801250e:	f103 0304 	add.w	r3, r3, #4
 8012512:	643b      	str	r3, [r7, #64]	; 0x40
				//Read subnet
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);
 8012514:	f04f 0400 	mov.w	r4, #0
 8012518:	e00d      	b.n	8012536 <hci_unsol_event_handler+0x172>
 801251a:	b223      	sxth	r3, r4
 801251c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801251e:	18d3      	adds	r3, r2, r3
 8012520:	781a      	ldrb	r2, [r3, #0]
 8012522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012524:	701a      	strb	r2, [r3, #0]
 8012526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012528:	f103 0301 	add.w	r3, r3, #1
 801252c:	647b      	str	r3, [r7, #68]	; 0x44
 801252e:	4623      	mov	r3, r4
 8012530:	f103 0301 	add.w	r3, r3, #1
 8012534:	b29c      	uxth	r4, r3
 8012536:	b223      	sxth	r3, r4
 8012538:	2b03      	cmp	r3, #3
 801253a:	ddee      	ble.n	801251a <hci_unsol_event_handler+0x156>
				data += 4;
 801253c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801253e:	f103 0304 	add.w	r3, r3, #4
 8012542:	643b      	str	r3, [r7, #64]	; 0x40
				//Read default GW
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
 8012544:	f04f 0400 	mov.w	r4, #0
 8012548:	e00d      	b.n	8012566 <hci_unsol_event_handler+0x1a2>
 801254a:	b223      	sxth	r3, r4
 801254c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801254e:	18d3      	adds	r3, r2, r3
 8012550:	781a      	ldrb	r2, [r3, #0]
 8012552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012554:	701a      	strb	r2, [r3, #0]
 8012556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012558:	f103 0301 	add.w	r3, r3, #1
 801255c:	647b      	str	r3, [r7, #68]	; 0x44
 801255e:	4623      	mov	r3, r4
 8012560:	f103 0301 	add.w	r3, r3, #1
 8012564:	b29c      	uxth	r4, r3
 8012566:	b223      	sxth	r3, r4
 8012568:	2b03      	cmp	r3, #3
 801256a:	ddee      	ble.n	801254a <hci_unsol_event_handler+0x186>
				data += 4;
 801256c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801256e:	f103 0304 	add.w	r3, r3, #4
 8012572:	643b      	str	r3, [r7, #64]	; 0x40
				//Read DHCP server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH);     
 8012574:	f04f 0400 	mov.w	r4, #0
 8012578:	e00d      	b.n	8012596 <hci_unsol_event_handler+0x1d2>
 801257a:	b223      	sxth	r3, r4
 801257c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801257e:	18d3      	adds	r3, r2, r3
 8012580:	781a      	ldrb	r2, [r3, #0]
 8012582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012584:	701a      	strb	r2, [r3, #0]
 8012586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012588:	f103 0301 	add.w	r3, r3, #1
 801258c:	647b      	str	r3, [r7, #68]	; 0x44
 801258e:	4623      	mov	r3, r4
 8012590:	f103 0301 	add.w	r3, r3, #1
 8012594:	b29c      	uxth	r4, r3
 8012596:	b223      	sxth	r3, r4
 8012598:	2b03      	cmp	r3, #3
 801259a:	ddee      	ble.n	801257a <hci_unsol_event_handler+0x1b6>
				data += 4;
 801259c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801259e:	f103 0304 	add.w	r3, r3, #4
 80125a2:	643b      	str	r3, [r7, #64]	; 0x40
				//Read DNS server  
				STREAM_TO_STREAM(data,recParams,NETAPP_IPCONFIG_IP_LENGTH); 
 80125a4:	f04f 0400 	mov.w	r4, #0
 80125a8:	e00d      	b.n	80125c6 <hci_unsol_event_handler+0x202>
 80125aa:	b223      	sxth	r3, r4
 80125ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125ae:	18d3      	adds	r3, r2, r3
 80125b0:	781a      	ldrb	r2, [r3, #0]
 80125b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125b4:	701a      	strb	r2, [r3, #0]
 80125b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125b8:	f103 0301 	add.w	r3, r3, #1
 80125bc:	647b      	str	r3, [r7, #68]	; 0x44
 80125be:	4623      	mov	r3, r4
 80125c0:	f103 0301 	add.w	r3, r3, #1
 80125c4:	b29c      	uxth	r4, r3
 80125c6:	b223      	sxth	r3, r4
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	ddee      	ble.n	80125aa <hci_unsol_event_handler+0x1e6>
					
				if( tSLInformation.sWlanCB )
 80125cc:	f241 3398 	movw	r3, #5016	; 0x1398
 80125d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125d4:	699b      	ldr	r3, [r3, #24]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d05f      	beq.n	801269a <hci_unsol_event_handler+0x2d6>
				{
					tSLInformation.sWlanCB(event_type, (char *)&params, sizeof(params));
 80125da:	f241 3398 	movw	r3, #5016	; 0x1398
 80125de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80125e2:	699b      	ldr	r3, [r3, #24]
 80125e4:	f107 0220 	add.w	r2, r7, #32
 80125e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80125ea:	4611      	mov	r1, r2
 80125ec:	f04f 0214 	mov.w	r2, #20
 80125f0:	4798      	blx	r3
				}
			}
			break;
 80125f2:	e052      	b.n	801269a <hci_unsol_event_handler+0x2d6>
			
		case HCI_EVNT_WLAN_ASYNC_PING_REPORT:
			{
				netapp_pingreport_args_t params;			
				data = (char*)(event_hdr) + HCI_EVENT_HEADER_SIZE;			
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f103 0305 	add.w	r3, r3, #5
 80125fa:	643b      	str	r3, [r7, #64]	; 0x40
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_SENT_OFFSET, params.packets_sent);			
 80125fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80125fe:	f04f 0100 	mov.w	r1, #0
 8012602:	f7ff fb19 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012606:	4603      	mov	r3, r0
 8012608:	60fb      	str	r3, [r7, #12]
				STREAM_TO_UINT32(data, NETAPP_PING_PACKETS_RCVD_OFFSET, params.packets_received);			
 801260a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801260c:	f04f 0104 	mov.w	r1, #4
 8012610:	f7ff fb12 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012614:	4603      	mov	r3, r0
 8012616:	613b      	str	r3, [r7, #16]
				STREAM_TO_UINT32(data, NETAPP_PING_MIN_RTT_OFFSET, params.min_round_time);		
 8012618:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801261a:	f04f 0108 	mov.w	r1, #8
 801261e:	f7ff fb0b 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012622:	4603      	mov	r3, r0
 8012624:	617b      	str	r3, [r7, #20]
				STREAM_TO_UINT32(data, NETAPP_PING_MAX_RTT_OFFSET, params.max_round_time);	
 8012626:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012628:	f04f 010c 	mov.w	r1, #12
 801262c:	f7ff fb04 	bl	8011c38 <STREAM_TO_UINT32_f>
 8012630:	4603      	mov	r3, r0
 8012632:	61bb      	str	r3, [r7, #24]
				STREAM_TO_UINT32(data, NETAPP_PING_AVG_RTT_OFFSET, params.avg_round_time);
 8012634:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012636:	f04f 0110 	mov.w	r1, #16
 801263a:	f7ff fafd 	bl	8011c38 <STREAM_TO_UINT32_f>
 801263e:	4603      	mov	r3, r0
 8012640:	61fb      	str	r3, [r7, #28]
				
				if( tSLInformation.sWlanCB )
 8012642:	f241 3398 	movw	r3, #5016	; 0x1398
 8012646:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801264a:	699b      	ldr	r3, [r3, #24]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d026      	beq.n	801269e <hci_unsol_event_handler+0x2da>
				{
					tSLInformation.sWlanCB(event_type, (char *)&params, sizeof(params));
 8012650:	f241 3398 	movw	r3, #5016	; 0x1398
 8012654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012658:	699b      	ldr	r3, [r3, #24]
 801265a:	f107 020c 	add.w	r2, r7, #12
 801265e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012660:	4611      	mov	r1, r2
 8012662:	f04f 0214 	mov.w	r2, #20
 8012666:	4798      	blx	r3
				}
			}
			break;
 8012668:	e019      	b.n	801269e <hci_unsol_event_handler+0x2da>
		case HCI_EVNT_BSD_TCP_CLOSE_WAIT:
			{
				if( tSLInformation.sWlanCB )
 801266a:	f241 3398 	movw	r3, #5016	; 0x1398
 801266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012672:	699b      	ldr	r3, [r3, #24]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d014      	beq.n	80126a2 <hci_unsol_event_handler+0x2de>
				{
					tSLInformation.sWlanCB(event_type, NULL, 0);
 8012678:	f241 3398 	movw	r3, #5016	; 0x1398
 801267c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012680:	699b      	ldr	r3, [r3, #24]
 8012682:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012684:	f04f 0100 	mov.w	r1, #0
 8012688:	f04f 0200 	mov.w	r2, #0
 801268c:	4798      	blx	r3
				}
			}
			break;
 801268e:	e008      	b.n	80126a2 <hci_unsol_event_handler+0x2de>
			
		//'default' case which means "event not supported" 	
		default: 
			return (0);
 8012690:	f04f 0300 	mov.w	r3, #0
 8012694:	e02d      	b.n	80126f2 <hci_unsol_event_handler+0x32e>
			
			if( tSLInformation.sWlanCB )
			{
				tSLInformation.sWlanCB(event_type, 0, 0);
			}
			break;
 8012696:	bf00      	nop
 8012698:	e004      	b.n	80126a4 <hci_unsol_event_handler+0x2e0>
				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, (char *)&params, sizeof(params));
				}
			}
			break;
 801269a:	bf00      	nop
 801269c:	e002      	b.n	80126a4 <hci_unsol_event_handler+0x2e0>
				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, (char *)&params, sizeof(params));
				}
			}
			break;
 801269e:	bf00      	nop
 80126a0:	e000      	b.n	80126a4 <hci_unsol_event_handler+0x2e0>
				if( tSLInformation.sWlanCB )
				{
					tSLInformation.sWlanCB(event_type, NULL, 0);
				}
			}
			break;
 80126a2:	bf00      	nop
			
		//'default' case which means "event not supported" 	
		default: 
			return (0);
		}
		return(1);
 80126a4:	f04f 0301 	mov.w	r3, #1
 80126a8:	e023      	b.n	80126f2 <hci_unsol_event_handler+0x32e>
	}
	
	if ((event_type == HCI_EVNT_SEND) || (event_type == HCI_EVNT_SENDTO)
 80126aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126ac:	f241 0303 	movw	r3, #4099	; 0x1003
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d009      	beq.n	80126c8 <hci_unsol_event_handler+0x304>
 80126b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126b6:	f241 030f 	movw	r3, #4111	; 0x100f
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d004      	beq.n	80126c8 <hci_unsol_event_handler+0x304>
			|| (event_type == HCI_EVNT_WRITE))
 80126be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126c0:	f241 030e 	movw	r3, #4110	; 0x100e
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d112      	bne.n	80126ee <hci_unsol_event_handler+0x32a>
	{
		// The only synchronous event that can come from SL device in form of 
		// command complete is "Command Complete" on data sent, in case SL device 
		// was unable to transmit
		STREAM_TO_UINT8(event_hdr, HCI_EVENT_STATUS_OFFSET, tSLInformation.slTransmitDataError);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f103 0304 	add.w	r3, r3, #4
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	461a      	mov	r2, r3
 80126d2:	f241 3398 	movw	r3, #5016	; 0x1398
 80126d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80126da:	62da      	str	r2, [r3, #44]	; 0x2c
		update_socket_active_status(M_BSD_RESP_PARAMS_OFFSET(event_hdr));
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f103 0305 	add.w	r3, r3, #5
 80126e2:	4618      	mov	r0, r3
 80126e4:	f000 f8ea 	bl	80128bc <update_socket_active_status>
		
		return (1);
 80126e8:	f04f 0301 	mov.w	r3, #1
 80126ec:	e001      	b.n	80126f2 <hci_unsol_event_handler+0x32e>
	}
	
	return(0);
 80126ee:	f04f 0300 	mov.w	r3, #0
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	f107 074c 	add.w	r7, r7, #76	; 0x4c
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd90      	pop	{r4, r7, pc}

080126fc <hci_unsolicited_event_handler>:
//!                  corresponding event handler.
//
//*****************************************************************************
long
hci_unsolicited_event_handler(void)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
	unsigned long   res = 0;
 8012702:	f04f 0300 	mov.w	r3, #0
 8012706:	607b      	str	r3, [r7, #4]
	unsigned char *pucReceivedData;
	
	if (tSLInformation.usEventOrDataReceived != 0)
 8012708:	f241 3398 	movw	r3, #5016	; 0x1398
 801270c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012710:	885b      	ldrh	r3, [r3, #2]
 8012712:	b29b      	uxth	r3, r3
 8012714:	2b00      	cmp	r3, #0
 8012716:	d01b      	beq.n	8012750 <hci_unsolicited_event_handler+0x54>
	{
		pucReceivedData = (tSLInformation.pucReceivedData);
 8012718:	f241 3398 	movw	r3, #5016	; 0x1398
 801271c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	603b      	str	r3, [r7, #0]
		
		if (*pucReceivedData == HCI_TYPE_EVNT)
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	2b04      	cmp	r3, #4
 801272a:	d111      	bne.n	8012750 <hci_unsolicited_event_handler+0x54>
		{			
			
			// In case unsolicited event received - here the handling finished
			if (hci_unsol_event_handler((char *)pucReceivedData) == 1)
 801272c:	6838      	ldr	r0, [r7, #0]
 801272e:	f7ff fe49 	bl	80123c4 <hci_unsol_event_handler>
 8012732:	4603      	mov	r3, r0
 8012734:	2b01      	cmp	r3, #1
 8012736:	d10b      	bne.n	8012750 <hci_unsolicited_event_handler+0x54>
			{
				
				// There was an unsolicited event received - we can release the buffer
				// and clean the event received 
				tSLInformation.usEventOrDataReceived = 0;
 8012738:	f241 3398 	movw	r3, #5016	; 0x1398
 801273c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012740:	f04f 0200 	mov.w	r2, #0
 8012744:	805a      	strh	r2, [r3, #2]
				
				res = 1;
 8012746:	f04f 0301 	mov.w	r3, #1
 801274a:	607b      	str	r3, [r7, #4]
				SpiResumeSpi();
 801274c:	f7f8 fad4 	bl	800acf8 <SpiResumeSpi>
			}
		}
	}
	
	return res;
 8012750:	687b      	ldr	r3, [r7, #4]
}
 8012752:	4618      	mov	r0, r3
 8012754:	f107 0708 	add.w	r7, r7, #8
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <set_socket_active_status>:
//!  @brief          Check if the socket ID and status are valid and set 
//!                  accordingly  the global socket status
//
//*****************************************************************************
void set_socket_active_status(long Sd, long Status)
{
 801275c:	b480      	push	{r7}
 801275e:	b083      	sub	sp, #12
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	6039      	str	r1, [r7, #0]
	if(M_IS_VALID_SD(Sd) && M_IS_VALID_STATUS(Status))
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	db2b      	blt.n	80127c4 <set_socket_active_status+0x68>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2b07      	cmp	r3, #7
 8012770:	dc28      	bgt.n	80127c4 <set_socket_active_status+0x68>
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <set_socket_active_status+0x22>
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d122      	bne.n	80127c4 <set_socket_active_status+0x68>
	{
		socket_active_status &= ~(1 << Sd);      /* clean socket's mask */
 801277e:	f04f 0201 	mov.w	r2, #1
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	fa02 f303 	lsl.w	r3, r2, r3
 8012788:	ea6f 0303 	mvn.w	r3, r3
 801278c:	461a      	mov	r2, r3
 801278e:	f240 3300 	movw	r3, #768	; 0x300
 8012792:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	401a      	ands	r2, r3
 801279a:	f240 3300 	movw	r3, #768	; 0x300
 801279e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127a2:	601a      	str	r2, [r3, #0]
		socket_active_status |= (Status << Sd); /* set new socket's mask */
 80127a4:	683a      	ldr	r2, [r7, #0]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	fa02 f303 	lsl.w	r3, r2, r3
 80127ac:	461a      	mov	r2, r3
 80127ae:	f240 3300 	movw	r3, #768	; 0x300
 80127b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	431a      	orrs	r2, r3
 80127ba:	f240 3300 	movw	r3, #768	; 0x300
 80127be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80127c2:	601a      	str	r2, [r3, #0]
	}
}
 80127c4:	f107 070c 	add.w	r7, r7, #12
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bc80      	pop	{r7}
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop

080127d0 <hci_event_unsol_flowcontrol_handler>:
//!					 number of free buffer in the SL device.
//
//*****************************************************************************
long
hci_event_unsol_flowcontrol_handler(char *pEvent)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b088      	sub	sp, #32
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
	
	long temp, value;
	unsigned short i;
	unsigned short  pusNumberOfHandles=0;
 80127d8:	f04f 0300 	mov.w	r3, #0
 80127dc:	827b      	strh	r3, [r7, #18]
	char *pReadPayload;
	
	STREAM_TO_UINT16((char *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f04f 0105 	mov.w	r1, #5
 80127e4:	f7ff fa0c 	bl	8011c00 <STREAM_TO_UINT16_f>
 80127e8:	4603      	mov	r3, r0
 80127ea:	827b      	strh	r3, [r7, #18]
	pReadPayload = ((char *)pEvent +
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f103 0307 	add.w	r3, r3, #7
 80127f2:	617b      	str	r3, [r7, #20]
									HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
	temp = 0;
 80127f4:	f04f 0300 	mov.w	r3, #0
 80127f8:	61fb      	str	r3, [r7, #28]
	
	for(i = 0; i < pusNumberOfHandles ; i++)
 80127fa:	f04f 0300 	mov.w	r3, #0
 80127fe:	837b      	strh	r3, [r7, #26]
 8012800:	e012      	b.n	8012828 <hci_event_unsol_flowcontrol_handler+0x58>
	{
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
 8012802:	6978      	ldr	r0, [r7, #20]
 8012804:	f04f 0102 	mov.w	r1, #2
 8012808:	f7ff f9fa 	bl	8011c00 <STREAM_TO_UINT16_f>
 801280c:	4603      	mov	r3, r0
 801280e:	60fb      	str	r3, [r7, #12]
		temp += value;
 8012810:	69fa      	ldr	r2, [r7, #28]
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	18d3      	adds	r3, r2, r3
 8012816:	61fb      	str	r3, [r7, #28]
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	f103 0304 	add.w	r3, r3, #4
 801281e:	617b      	str	r3, [r7, #20]
	STREAM_TO_UINT16((char *)pEvent,HCI_EVENT_HEADER_SIZE,pusNumberOfHandles);
	pReadPayload = ((char *)pEvent +
									HCI_EVENT_HEADER_SIZE + sizeof(pusNumberOfHandles));	
	temp = 0;
	
	for(i = 0; i < pusNumberOfHandles ; i++)
 8012820:	8b7b      	ldrh	r3, [r7, #26]
 8012822:	f103 0301 	add.w	r3, r3, #1
 8012826:	837b      	strh	r3, [r7, #26]
 8012828:	8b7a      	ldrh	r2, [r7, #26]
 801282a:	8a7b      	ldrh	r3, [r7, #18]
 801282c:	429a      	cmp	r2, r3
 801282e:	d3e8      	bcc.n	8012802 <hci_event_unsol_flowcontrol_handler+0x32>
		STREAM_TO_UINT16(pReadPayload, FLOW_CONTROL_EVENT_FREE_BUFFS_OFFSET, value);
		temp += value;
		pReadPayload += FLOW_CONTROL_EVENT_SIZE;  
	}
	
	tSLInformation.usNumberOfFreeBuffers += temp;
 8012830:	f241 3398 	movw	r3, #5016	; 0x1398
 8012834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012838:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801283a:	b29a      	uxth	r2, r3
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	b29b      	uxth	r3, r3
 8012840:	18d3      	adds	r3, r2, r3
 8012842:	b29a      	uxth	r2, r3
 8012844:	f241 3398 	movw	r3, #5016	; 0x1398
 8012848:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801284c:	861a      	strh	r2, [r3, #48]	; 0x30
	tSLInformation.NumberOfReleasedPackets += temp;
 801284e:	f241 3398 	movw	r3, #5016	; 0x1398
 8012852:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	18d2      	adds	r2, r2, r3
 801285c:	f241 3398 	movw	r3, #5016	; 0x1398
 8012860:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012864:	63da      	str	r2, [r3, #60]	; 0x3c
	
	return(ESUCCESS);
 8012866:	f04f 0300 	mov.w	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	f107 0720 	add.w	r7, r7, #32
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <get_socket_active_status>:
//
//*****************************************************************************

long
get_socket_active_status(long Sd)
{
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
	if(M_IS_VALID_SD(Sd))
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	db14      	blt.n	80128ac <get_socket_active_status+0x38>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2b07      	cmp	r3, #7
 8012886:	dc11      	bgt.n	80128ac <get_socket_active_status+0x38>
	{
		return (socket_active_status & (1 << Sd)) ? SOCKET_STATUS_INACTIVE : SOCKET_STATUS_ACTIVE;
 8012888:	f04f 0201 	mov.w	r2, #1
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	fa02 f303 	lsl.w	r3, r2, r3
 8012892:	461a      	mov	r2, r3
 8012894:	f240 3300 	movw	r3, #768	; 0x300
 8012898:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	4013      	ands	r3, r2
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	bf0c      	ite	eq
 80128a4:	2300      	moveq	r3, #0
 80128a6:	2301      	movne	r3, #1
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	e001      	b.n	80128b0 <get_socket_active_status+0x3c>
	}
	return SOCKET_STATUS_INACTIVE;
 80128ac:	f04f 0301 	mov.w	r3, #1
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	f107 070c 	add.w	r7, r7, #12
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bc80      	pop	{r7}
 80128ba:	4770      	bx	lr

080128bc <update_socket_active_status>:
//!  @brief  Retrieve socket status
//
//*****************************************************************************
void
update_socket_active_status(char *resp_params)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b084      	sub	sp, #16
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
	long status, sd;
	
	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_SOCKET_OFFSET,sd);
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f04f 0100 	mov.w	r1, #0
 80128ca:	f7ff f9b5 	bl	8011c38 <STREAM_TO_UINT32_f>
 80128ce:	4603      	mov	r3, r0
 80128d0:	60fb      	str	r3, [r7, #12]
	STREAM_TO_UINT32(resp_params, BSD_RSP_PARAMS_STATUS_OFFSET,status);
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f04f 0104 	mov.w	r1, #4
 80128d8:	f7ff f9ae 	bl	8011c38 <STREAM_TO_UINT32_f>
 80128dc:	4603      	mov	r3, r0
 80128de:	60bb      	str	r3, [r7, #8]
	
	if(ERROR_SOCKET_INACTIVE == status)
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	f113 0f39 	cmn.w	r3, #57	; 0x39
 80128e6:	d104      	bne.n	80128f2 <update_socket_active_status+0x36>
	{
		set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f04f 0101 	mov.w	r1, #1
 80128ee:	f7ff ff35 	bl	801275c <set_socket_active_status>
	}
}
 80128f2:	f107 0710 	add.w	r7, r7, #16
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop

080128fc <SimpleLinkWaitEvent>:
//
//*****************************************************************************

void 
SimpleLinkWaitEvent(unsigned short usOpcode, void *pRetParams)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	4603      	mov	r3, r0
 8012904:	6039      	str	r1, [r7, #0]
 8012906:	80fb      	strh	r3, [r7, #6]
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction
	tSLInformation.usRxEventOpcode = usOpcode;
 8012908:	f241 3398 	movw	r3, #5016	; 0x1398
 801290c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012910:	88fa      	ldrh	r2, [r7, #6]
 8012912:	801a      	strh	r2, [r3, #0]
	hci_event_handler(pRetParams, 0, 0);
 8012914:	6838      	ldr	r0, [r7, #0]
 8012916:	f04f 0100 	mov.w	r1, #0
 801291a:	f04f 0200 	mov.w	r2, #0
 801291e:	f7ff fa63 	bl	8011de8 <hci_event_handler>
}
 8012922:	f107 0708 	add.w	r7, r7, #8
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop

0801292c <SimpleLinkWaitData>:
//*****************************************************************************

void 
SimpleLinkWaitData(unsigned char *pBuf, unsigned char *from, 
									 unsigned char *fromlen)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	607a      	str	r2, [r7, #4]
	// In the blocking implementation the control to caller will be returned only 
	// after the end of current transaction, i.e. only after data will be received
	tSLInformation.usRxDataPending = 1;
 8012938:	f241 3398 	movw	r3, #5016	; 0x1398
 801293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012940:	f04f 0201 	mov.w	r2, #1
 8012944:	86da      	strh	r2, [r3, #54]	; 0x36
	hci_event_handler(pBuf, from, fromlen);
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	68b9      	ldr	r1, [r7, #8]
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	f7ff fa4c 	bl	8011de8 <hci_event_handler>
}
 8012950:	f107 0710 	add.w	r7, r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <hci_command_send>:
//
//*****************************************************************************
unsigned short 
hci_command_send(unsigned short usOpcode, unsigned char *pucBuff,
                     unsigned char ucArgsLength)
{ 
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6039      	str	r1, [r7, #0]
 8012960:	4613      	mov	r3, r2
 8012962:	4602      	mov	r2, r0
 8012964:	80fa      	strh	r2, [r7, #6]
 8012966:	717b      	strb	r3, [r7, #5]
	unsigned char *stream;
	
	stream = (pucBuff + SPI_HEADER_SIZE);
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	f103 0305 	add.w	r3, r3, #5
 801296e:	60fb      	str	r3, [r7, #12]
	
	UINT8_TO_STREAM(stream, HCI_TYPE_CMND);
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f04f 0201 	mov.w	r2, #1
 8012976:	701a      	strb	r2, [r3, #0]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f103 0301 	add.w	r3, r3, #1
 801297e:	60fb      	str	r3, [r7, #12]
	stream = UINT16_TO_STREAM(stream, usOpcode);
 8012980:	88fb      	ldrh	r3, [r7, #6]
 8012982:	68f8      	ldr	r0, [r7, #12]
 8012984:	4619      	mov	r1, r3
 8012986:	f7ff f91b 	bl	8011bc0 <UINT16_TO_STREAM_f>
 801298a:	60f8      	str	r0, [r7, #12]
	UINT8_TO_STREAM(stream, ucArgsLength);
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	797a      	ldrb	r2, [r7, #5]
 8012990:	701a      	strb	r2, [r3, #0]
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f103 0301 	add.w	r3, r3, #1
 8012998:	60fb      	str	r3, [r7, #12]
	
	//Update the opcode of the event we will be waiting for
	SpiWrite(pucBuff, ucArgsLength + SIMPLE_LINK_HCI_CMND_HEADER_SIZE);
 801299a:	797b      	ldrb	r3, [r7, #5]
 801299c:	b29b      	uxth	r3, r3
 801299e:	f103 0304 	add.w	r3, r3, #4
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	6838      	ldr	r0, [r7, #0]
 80129a6:	4619      	mov	r1, r3
 80129a8:	f7f8 fb22 	bl	800aff0 <SpiWrite>
	
	return(0);
 80129ac:	f04f 0300 	mov.w	r3, #0
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	f107 0710 	add.w	r7, r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop

080129bc <hci_data_send>:
							unsigned char *ucArgs,
							unsigned short usArgsLength, 
							unsigned short usDataLength,
							const unsigned char *ucTail,
							unsigned short usTailLength)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60b9      	str	r1, [r7, #8]
 80129c4:	4601      	mov	r1, r0
 80129c6:	73f9      	strb	r1, [r7, #15]
 80129c8:	81ba      	strh	r2, [r7, #12]
 80129ca:	80fb      	strh	r3, [r7, #6]
	unsigned char *stream;
	
	stream = ((ucArgs) + SPI_HEADER_SIZE);
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	f103 0305 	add.w	r3, r3, #5
 80129d2:	617b      	str	r3, [r7, #20]
	
	UINT8_TO_STREAM(stream, HCI_TYPE_DATA);
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	f04f 0202 	mov.w	r2, #2
 80129da:	701a      	strb	r2, [r3, #0]
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	f103 0301 	add.w	r3, r3, #1
 80129e2:	617b      	str	r3, [r7, #20]
	UINT8_TO_STREAM(stream, ucOpcode);
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	7bfa      	ldrb	r2, [r7, #15]
 80129e8:	701a      	strb	r2, [r3, #0]
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	f103 0301 	add.w	r3, r3, #1
 80129f0:	617b      	str	r3, [r7, #20]
	UINT8_TO_STREAM(stream, usArgsLength);
 80129f2:	89bb      	ldrh	r3, [r7, #12]
 80129f4:	b2da      	uxtb	r2, r3
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	701a      	strb	r2, [r3, #0]
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	f103 0301 	add.w	r3, r3, #1
 8012a00:	617b      	str	r3, [r7, #20]
	stream = UINT16_TO_STREAM(stream, usArgsLength + usDataLength + usTailLength);
 8012a02:	89ba      	ldrh	r2, [r7, #12]
 8012a04:	88fb      	ldrh	r3, [r7, #6]
 8012a06:	18d3      	adds	r3, r2, r3
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a0c:	18d3      	adds	r3, r2, r3
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	6978      	ldr	r0, [r7, #20]
 8012a12:	4619      	mov	r1, r3
 8012a14:	f7ff f8d4 	bl	8011bc0 <UINT16_TO_STREAM_f>
 8012a18:	6178      	str	r0, [r7, #20]
	
	// Send the packet over the SPI
	SpiWrite(ucArgs, SIMPLE_LINK_HCI_DATA_HEADER_SIZE + usArgsLength + usDataLength + usTailLength);
 8012a1a:	89ba      	ldrh	r2, [r7, #12]
 8012a1c:	88fb      	ldrh	r3, [r7, #6]
 8012a1e:	18d3      	adds	r3, r2, r3
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a24:	18d3      	adds	r3, r2, r3
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	f103 0305 	add.w	r3, r3, #5
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	68b8      	ldr	r0, [r7, #8]
 8012a30:	4619      	mov	r1, r3
 8012a32:	f7f8 fadd 	bl	800aff0 <SpiWrite>
	
	return(ESUCCESS);
 8012a36:	f04f 0300 	mov.w	r3, #0
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f107 0718 	add.w	r7, r7, #24
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <hci_patch_send>:
//!  @brief               Prepeare HCI header and initiate an HCI patch write operation
//
//*****************************************************************************
void
hci_patch_send(unsigned char ucOpcode, unsigned char *pucBuff, char *patch, unsigned short usDataLength)
{ 
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b088      	sub	sp, #32
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	60b9      	str	r1, [r7, #8]
 8012a4c:	607a      	str	r2, [r7, #4]
 8012a4e:	4602      	mov	r2, r0
 8012a50:	73fa      	strb	r2, [r7, #15]
 8012a52:	81bb      	strh	r3, [r7, #12]
 	unsigned char *data_ptr = (pucBuff + SPI_HEADER_SIZE);
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	f103 0305 	add.w	r3, r3, #5
 8012a5a:	61bb      	str	r3, [r7, #24]
	unsigned short usTransLength;
	unsigned char *stream = (pucBuff + SPI_HEADER_SIZE);
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	f103 0305 	add.w	r3, r3, #5
 8012a62:	617b      	str	r3, [r7, #20]
	
	UINT8_TO_STREAM(stream, HCI_TYPE_PATCH);
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	f04f 0203 	mov.w	r2, #3
 8012a6a:	701a      	strb	r2, [r3, #0]
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	f103 0301 	add.w	r3, r3, #1
 8012a72:	617b      	str	r3, [r7, #20]
	UINT8_TO_STREAM(stream, ucOpcode);
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	7bfa      	ldrb	r2, [r7, #15]
 8012a78:	701a      	strb	r2, [r3, #0]
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	f103 0301 	add.w	r3, r3, #1
 8012a80:	617b      	str	r3, [r7, #20]
	stream = UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
 8012a82:	89bb      	ldrh	r3, [r7, #12]
 8012a84:	f103 0302 	add.w	r3, r3, #2
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	6978      	ldr	r0, [r7, #20]
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	f7ff f897 	bl	8011bc0 <UINT16_TO_STREAM_f>
 8012a92:	6178      	str	r0, [r7, #20]
	
	if (usDataLength <= SL_PATCH_PORTION_SIZE)
 8012a94:	89bb      	ldrh	r3, [r7, #12]
 8012a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012a9a:	d81c      	bhi.n	8012ad6 <hci_patch_send+0x92>
	{
		UINT16_TO_STREAM(stream, usDataLength);
 8012a9c:	89bb      	ldrh	r3, [r7, #12]
 8012a9e:	6978      	ldr	r0, [r7, #20]
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	f7ff f88d 	bl	8011bc0 <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, usDataLength);
 8012aa6:	89bb      	ldrh	r3, [r7, #12]
 8012aa8:	6978      	ldr	r0, [r7, #20]
 8012aaa:	4619      	mov	r1, r3
 8012aac:	f7ff f888 	bl	8011bc0 <UINT16_TO_STREAM_f>
 8012ab0:	6178      	str	r0, [r7, #20]
		memcpy((pucBuff + SPI_HEADER_SIZE) + HCI_PATCH_HEADER_SIZE, patch, usDataLength);
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	f103 020b 	add.w	r2, r3, #11
 8012ab8:	89bb      	ldrh	r3, [r7, #12]
 8012aba:	4610      	mov	r0, r2
 8012abc:	6879      	ldr	r1, [r7, #4]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	f000 ff06 	bl	80138d0 <memcpy>
		
		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, usDataLength + HCI_PATCH_HEADER_SIZE);
 8012ac4:	89bb      	ldrh	r3, [r7, #12]
 8012ac6:	f103 0306 	add.w	r3, r3, #6
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	68b8      	ldr	r0, [r7, #8]
 8012ace:	4619      	mov	r1, r3
 8012ad0:	f7f8 fa8e 	bl	800aff0 <SpiWrite>
 8012ad4:	e060      	b.n	8012b98 <hci_patch_send+0x154>
	}
	else
	{
		
		usTransLength = (usDataLength/SL_PATCH_PORTION_SIZE);
 8012ad6:	89ba      	ldrh	r2, [r7, #12]
 8012ad8:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8012adc:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8012ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8012ae4:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8012ae8:	83fb      	strh	r3, [r7, #30]
		UINT16_TO_STREAM(stream, usDataLength + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE + usTransLength*SIMPLE_LINK_HCI_PATCH_HEADER_SIZE);
 8012aea:	8bfb      	ldrh	r3, [r7, #30]
 8012aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012af0:	b29a      	uxth	r2, r3
 8012af2:	89bb      	ldrh	r3, [r7, #12]
 8012af4:	18d3      	adds	r3, r2, r3
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	f103 0302 	add.w	r3, r3, #2
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	6978      	ldr	r0, [r7, #20]
 8012b00:	4619      	mov	r1, r3
 8012b02:	f7ff f85d 	bl	8011bc0 <UINT16_TO_STREAM_f>
		stream = UINT16_TO_STREAM(stream, SL_PATCH_PORTION_SIZE);
 8012b06:	6978      	ldr	r0, [r7, #20]
 8012b08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012b0c:	f7ff f858 	bl	8011bc0 <UINT16_TO_STREAM_f>
 8012b10:	6178      	str	r0, [r7, #20]
		memcpy(pucBuff + SPI_HEADER_SIZE + HCI_PATCH_HEADER_SIZE, patch, SL_PATCH_PORTION_SIZE);
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	f103 030b 	add.w	r3, r3, #11
 8012b18:	4618      	mov	r0, r3
 8012b1a:	6879      	ldr	r1, [r7, #4]
 8012b1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012b20:	f000 fed6 	bl	80138d0 <memcpy>
		usDataLength -= SL_PATCH_PORTION_SIZE;
 8012b24:	89bb      	ldrh	r3, [r7, #12]
 8012b26:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8012b2a:	81bb      	strh	r3, [r7, #12]
		patch += SL_PATCH_PORTION_SIZE;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012b32:	607b      	str	r3, [r7, #4]
		
		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);
 8012b34:	68b8      	ldr	r0, [r7, #8]
 8012b36:	f240 31ee 	movw	r1, #1006	; 0x3ee
 8012b3a:	f7f8 fa59 	bl	800aff0 <SpiWrite>
		
		while (usDataLength)
 8012b3e:	e028      	b.n	8012b92 <hci_patch_send+0x14e>
		{
			if (usDataLength <= SL_PATCH_PORTION_SIZE)
 8012b40:	89bb      	ldrh	r3, [r7, #12]
 8012b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012b46:	d805      	bhi.n	8012b54 <hci_patch_send+0x110>
			{
				usTransLength = usDataLength;
 8012b48:	89bb      	ldrh	r3, [r7, #12]
 8012b4a:	83fb      	strh	r3, [r7, #30]
				usDataLength = 0;
 8012b4c:	f04f 0300 	mov.w	r3, #0
 8012b50:	81bb      	strh	r3, [r7, #12]
 8012b52:	e006      	b.n	8012b62 <hci_patch_send+0x11e>
				
			}
			else
			{
				usTransLength = SL_PATCH_PORTION_SIZE;
 8012b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012b58:	83fb      	strh	r3, [r7, #30]
				usDataLength -= usTransLength;
 8012b5a:	89ba      	ldrh	r2, [r7, #12]
 8012b5c:	8bfb      	ldrh	r3, [r7, #30]
 8012b5e:	1ad3      	subs	r3, r2, r3
 8012b60:	81bb      	strh	r3, [r7, #12]
			}
			
			*(unsigned short *)data_ptr = usTransLength;
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	8bfa      	ldrh	r2, [r7, #30]
 8012b66:	801a      	strh	r2, [r3, #0]
			memcpy(data_ptr + SIMPLE_LINK_HCI_PATCH_HEADER_SIZE, patch, usTransLength);
 8012b68:	69bb      	ldr	r3, [r7, #24]
 8012b6a:	f103 0202 	add.w	r2, r3, #2
 8012b6e:	8bfb      	ldrh	r3, [r7, #30]
 8012b70:	4610      	mov	r0, r2
 8012b72:	6879      	ldr	r1, [r7, #4]
 8012b74:	461a      	mov	r2, r3
 8012b76:	f000 feab 	bl	80138d0 <memcpy>
			patch += usTransLength;
 8012b7a:	8bfb      	ldrh	r3, [r7, #30]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	18d3      	adds	r3, r2, r3
 8012b80:	607b      	str	r3, [r7, #4]
			
			// Update the opcode of the event we will be waiting for
			SpiWrite((unsigned char *)data_ptr, usTransLength + sizeof(usTransLength));
 8012b82:	8bfb      	ldrh	r3, [r7, #30]
 8012b84:	f103 0302 	add.w	r3, r3, #2
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	69b8      	ldr	r0, [r7, #24]
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	f7f8 fa2f 	bl	800aff0 <SpiWrite>
		patch += SL_PATCH_PORTION_SIZE;
		
		// Update the opcode of the event we will be waiting for
		SpiWrite(pucBuff, SL_PATCH_PORTION_SIZE + HCI_PATCH_HEADER_SIZE);
		
		while (usDataLength)
 8012b92:	89bb      	ldrh	r3, [r7, #12]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d1d3      	bne.n	8012b40 <hci_patch_send+0xfc>
			
			// Update the opcode of the event we will be waiting for
			SpiWrite((unsigned char *)data_ptr, usTransLength + sizeof(usTransLength));
		}
	}
}
 8012b98:	f107 0720 	add.w	r7, r7, #32
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <netapp_timeout_values>:
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
long 
netapp_timeout_values(unsigned long *aucDHCP, unsigned long *aucARP,unsigned long *aucKeepalive,	unsigned long *aucInactivity)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b088      	sub	sp, #32
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	60f8      	str	r0, [r7, #12]
 8012ba8:	60b9      	str	r1, [r7, #8]
 8012baa:	607a      	str	r2, [r7, #4]
 8012bac:	603b      	str	r3, [r7, #0]
	signed char scRet;
	unsigned char *ptr;
	unsigned char *args;
	
	scRet = EFAIL;
 8012bae:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8012bb2:	75fb      	strb	r3, [r7, #23]
	ptr = tSLInformation.pucTxCommandBuffer;
 8012bb4:	f241 3398 	movw	r3, #5016	; 0x1398
 8012bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012bbc:	689b      	ldr	r3, [r3, #8]
 8012bbe:	61fb      	str	r3, [r7, #28]
	args = (ptr + HEADERS_SIZE_CMD);
 8012bc0:	69fb      	ldr	r3, [r7, #28]
 8012bc2:	f103 0309 	add.w	r3, r3, #9
 8012bc6:	61bb      	str	r3, [r7, #24]
	
	// Set minimal values of timers 
	MIN_TIMER_SET(*aucDHCP)
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d007      	beq.n	8012be0 <netapp_timeout_values+0x40>
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	2b13      	cmp	r3, #19
 8012bd6:	d803      	bhi.n	8012be0 <netapp_timeout_values+0x40>
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	f04f 0214 	mov.w	r2, #20
 8012bde:	601a      	str	r2, [r3, #0]
    MIN_TIMER_SET(*aucARP)
 8012be0:	68bb      	ldr	r3, [r7, #8]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d007      	beq.n	8012bf8 <netapp_timeout_values+0x58>
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	2b13      	cmp	r3, #19
 8012bee:	d803      	bhi.n	8012bf8 <netapp_timeout_values+0x58>
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	f04f 0214 	mov.w	r2, #20
 8012bf6:	601a      	str	r2, [r3, #0]
	MIN_TIMER_SET(*aucKeepalive)
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d007      	beq.n	8012c10 <netapp_timeout_values+0x70>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	2b13      	cmp	r3, #19
 8012c06:	d803      	bhi.n	8012c10 <netapp_timeout_values+0x70>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f04f 0214 	mov.w	r2, #20
 8012c0e:	601a      	str	r2, [r3, #0]
	MIN_TIMER_SET(*aucInactivity)
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d007      	beq.n	8012c28 <netapp_timeout_values+0x88>
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	2b13      	cmp	r3, #19
 8012c1e:	d803      	bhi.n	8012c28 <netapp_timeout_values+0x88>
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	f04f 0214 	mov.w	r2, #20
 8012c26:	601a      	str	r2, [r3, #0]
					
	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, *aucDHCP);
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	69b8      	ldr	r0, [r7, #24]
 8012c2e:	4619      	mov	r1, r3
 8012c30:	f7fe ff94 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012c34:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, *aucARP);
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	69b8      	ldr	r0, [r7, #24]
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	f7fe ff8d 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012c42:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, *aucKeepalive);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	69b8      	ldr	r0, [r7, #24]
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	f7fe ff86 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012c50:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, *aucInactivity);
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	69b8      	ldr	r0, [r7, #24]
 8012c58:	4619      	mov	r1, r3
 8012c5a:	f7fe ff7f 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012c5e:	61b8      	str	r0, [r7, #24]
	
	// Initiate a HCI command
	hci_command_send(HCI_NETAPP_SET_TIMERS, ptr, NETAPP_SET_TIMER_PARAMS_LEN);
 8012c60:	f242 0009 	movw	r0, #8201	; 0x2009
 8012c64:	69f9      	ldr	r1, [r7, #28]
 8012c66:	f04f 0214 	mov.w	r2, #20
 8012c6a:	f7ff fe75 	bl	8012958 <hci_command_send>
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_NETAPP_SET_TIMERS, &scRet);
 8012c6e:	f107 0317 	add.w	r3, r7, #23
 8012c72:	f242 0009 	movw	r0, #8201	; 0x2009
 8012c76:	4619      	mov	r1, r3
 8012c78:	f7ff fe40 	bl	80128fc <SimpleLinkWaitEvent>
	
	return(scRet);
 8012c7c:	7dfb      	ldrb	r3, [r7, #23]
 8012c7e:	b25b      	sxtb	r3, r3
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	f107 0720 	add.w	r7, r7, #32
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop

08012c8c <nvmem_read_sp_version>:
//!	 
//*****************************************************************************

#ifndef CC3000_TINY_DRIVER
unsigned char nvmem_read_sp_version(unsigned char* patchVer)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
	unsigned char *ptr;
	// 1st byte is the status and the rest is the SP version
	unsigned char	retBuf[5];	
	
	ptr = tSLInformation.pucTxCommandBuffer;
 8012c94:	f241 3398 	movw	r3, #5016	; 0x1398
 8012c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	617b      	str	r3, [r7, #20]
  
   // Initiate a HCI command, no args are required
	hci_command_send(HCI_CMND_READ_SP_VERSION, ptr, 0);	
 8012ca0:	f240 2007 	movw	r0, #519	; 0x207
 8012ca4:	6979      	ldr	r1, [r7, #20]
 8012ca6:	f04f 0200 	mov.w	r2, #0
 8012caa:	f7ff fe55 	bl	8012958 <hci_command_send>
	SimpleLinkWaitEvent(HCI_CMND_READ_SP_VERSION, retBuf);
 8012cae:	f107 030c 	add.w	r3, r7, #12
 8012cb2:	f240 2007 	movw	r0, #519	; 0x207
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	f7ff fe20 	bl	80128fc <SimpleLinkWaitEvent>
	
	// package ID
	*patchVer = retBuf[3];			
 8012cbc:	7bfa      	ldrb	r2, [r7, #15]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	701a      	strb	r2, [r3, #0]
	// package build number
	*(patchVer+1) = retBuf[4];		
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f103 0301 	add.w	r3, r3, #1
 8012cc8:	7c3a      	ldrb	r2, [r7, #16]
 8012cca:	701a      	strb	r2, [r3, #0]
	
	return(retBuf[0]);
 8012ccc:	7b3b      	ldrb	r3, [r7, #12]
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f107 0718 	add.w	r7, r7, #24
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}

08012cd8 <HostFlowControlConsumeBuff>:
//!          regarding the buffers available.
//
//*****************************************************************************
int
HostFlowControlConsumeBuff(int sd)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
	do
	{
		// In case last transmission failed then we will return the last failure 
		// reason here.
		// Note that the buffer will not be allocated in this case
		if (tSLInformation.slTransmitDataError != 0)
 8012ce0:	f241 3398 	movw	r3, #5016	; 0x1398
 8012ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d014      	beq.n	8012d18 <HostFlowControlConsumeBuff+0x40>
		{
			errno = tSLInformation.slTransmitDataError;
 8012cee:	f000 fde9 	bl	80138c4 <__errno>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	f241 3398 	movw	r3, #5016	; 0x1398
 8012cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cfe:	6013      	str	r3, [r2, #0]
			tSLInformation.slTransmitDataError = 0;
 8012d00:	f241 3398 	movw	r3, #5016	; 0x1398
 8012d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d08:	f04f 0200 	mov.w	r2, #0
 8012d0c:	62da      	str	r2, [r3, #44]	; 0x2c
			return errno;
 8012d0e:	f000 fdd9 	bl	80138c4 <__errno>
 8012d12:	4603      	mov	r3, r0
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	e020      	b.n	8012d5a <HostFlowControlConsumeBuff+0x82>
		}
		
		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7ff fdab 	bl	8012874 <get_socket_active_status>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d002      	beq.n	8012d2a <HostFlowControlConsumeBuff+0x52>
			return -1;
 8012d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d28:	e017      	b.n	8012d5a <HostFlowControlConsumeBuff+0x82>
	} while(0 == tSLInformation.usNumberOfFreeBuffers);
 8012d2a:	f241 3398 	movw	r3, #5016	; 0x1398
 8012d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d32:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d0d2      	beq.n	8012ce0 <HostFlowControlConsumeBuff+0x8>
	
	tSLInformation.usNumberOfFreeBuffers--;
 8012d3a:	f241 3398 	movw	r3, #5016	; 0x1398
 8012d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d42:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	f241 3398 	movw	r3, #5016	; 0x1398
 8012d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d54:	861a      	strh	r2, [r3, #48]	; 0x30
	
	return 0;
 8012d56:	f04f 0300 	mov.w	r3, #0
	{
		tSLInformation.usNumberOfFreeBuffers--;
		return 0;
	}
#endif
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f107 0708 	add.w	r7, r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <socket>:
//
//*****************************************************************************

int
socket(long domain, long type, long protocol)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b088      	sub	sp, #32
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	60b9      	str	r1, [r7, #8]
 8012d6e:	607a      	str	r2, [r7, #4]
	long ret;
	unsigned char *ptr, *args;
	
	ret = EFAIL;
 8012d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d74:	617b      	str	r3, [r7, #20]
	ptr = tSLInformation.pucTxCommandBuffer;
 8012d76:	f241 3398 	movw	r3, #5016	; 0x1398
 8012d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012d7e:	689b      	ldr	r3, [r3, #8]
 8012d80:	61fb      	str	r3, [r7, #28]
	args = (ptr + HEADERS_SIZE_CMD);
 8012d82:	69fb      	ldr	r3, [r7, #28]
 8012d84:	f103 0309 	add.w	r3, r3, #9
 8012d88:	61bb      	str	r3, [r7, #24]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, domain);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	69b8      	ldr	r0, [r7, #24]
 8012d8e:	4619      	mov	r1, r3
 8012d90:	f7fe fee4 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012d94:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, type);
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	69b8      	ldr	r0, [r7, #24]
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	f7fe fede 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012da0:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, protocol);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	69b8      	ldr	r0, [r7, #24]
 8012da6:	4619      	mov	r1, r3
 8012da8:	f7fe fed8 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012dac:	61b8      	str	r0, [r7, #24]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_SOCKET, ptr, SOCKET_OPEN_PARAMS_LEN);
 8012dae:	f241 0001 	movw	r0, #4097	; 0x1001
 8012db2:	69f9      	ldr	r1, [r7, #28]
 8012db4:	f04f 020c 	mov.w	r2, #12
 8012db8:	f7ff fdce 	bl	8012958 <hci_command_send>
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_SOCKET, &ret);
 8012dbc:	f107 0314 	add.w	r3, r7, #20
 8012dc0:	f241 0001 	movw	r0, #4097	; 0x1001
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	f7ff fd99 	bl	80128fc <SimpleLinkWaitEvent>
	
	// Process the event 
	errno = ret;
 8012dca:	f000 fd7b 	bl	80138c4 <__errno>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	697a      	ldr	r2, [r7, #20]
 8012dd2:	601a      	str	r2, [r3, #0]
	
	set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f04f 0100 	mov.w	r1, #0
 8012ddc:	f7ff fcbe 	bl	801275c <set_socket_active_status>
	
	return(ret);
 8012de0:	697b      	ldr	r3, [r7, #20]
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	f107 0720 	add.w	r7, r7, #32
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}

08012dec <closesocket>:
//
//*****************************************************************************

long
closesocket(long sd)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b086      	sub	sp, #24
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
	long ret;
	unsigned char *ptr, *args;
	
	ret = EFAIL;
 8012df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012df8:	60fb      	str	r3, [r7, #12]
	ptr = tSLInformation.pucTxCommandBuffer;
 8012dfa:	f241 3398 	movw	r3, #5016	; 0x1398
 8012dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	617b      	str	r3, [r7, #20]
	args = (ptr + HEADERS_SIZE_CMD);
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	f103 0309 	add.w	r3, r3, #9
 8012e0c:	613b      	str	r3, [r7, #16]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6938      	ldr	r0, [r7, #16]
 8012e12:	4619      	mov	r1, r3
 8012e14:	f7fe fea2 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012e18:	6138      	str	r0, [r7, #16]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_CLOSE_SOCKET,
 8012e1a:	f241 000b 	movw	r0, #4107	; 0x100b
 8012e1e:	6979      	ldr	r1, [r7, #20]
 8012e20:	f04f 0204 	mov.w	r2, #4
 8012e24:	f7ff fd98 	bl	8012958 <hci_command_send>
									 ptr, SOCKET_CLOSE_PARAMS_LEN);
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CLOSE_SOCKET, &ret);
 8012e28:	f107 030c 	add.w	r3, r7, #12
 8012e2c:	f241 000b 	movw	r0, #4107	; 0x100b
 8012e30:	4619      	mov	r1, r3
 8012e32:	f7ff fd63 	bl	80128fc <SimpleLinkWaitEvent>
	errno = ret;
 8012e36:	f000 fd45 	bl	80138c4 <__errno>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	68fa      	ldr	r2, [r7, #12]
 8012e3e:	601a      	str	r2, [r3, #0]
	
	// since 'close' call may result in either OK (and then it closed) or error 
	// mark this socket as invalid 
	set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f04f 0101 	mov.w	r1, #1
 8012e46:	f7ff fc89 	bl	801275c <set_socket_active_status>
	
	return(ret);
 8012e4a:	68fb      	ldr	r3, [r7, #12]
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f107 0718 	add.w	r7, r7, #24
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop

08012e58 <connect>:
//
//*****************************************************************************

long
connect(long sd, const sockaddr *addr, long addrlen)
{
 8012e58:	b590      	push	{r4, r7, lr}
 8012e5a:	b089      	sub	sp, #36	; 0x24
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	607a      	str	r2, [r7, #4]
	long int ret;
	unsigned char *ptr, *args;
	
	ret = EFAIL;
 8012e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e68:	613b      	str	r3, [r7, #16]
	ptr = tSLInformation.pucTxCommandBuffer;
 8012e6a:	f241 3398 	movw	r3, #5016	; 0x1398
 8012e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012e72:	689b      	ldr	r3, [r3, #8]
 8012e74:	61bb      	str	r3, [r7, #24]
	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
 8012e76:	69bb      	ldr	r3, [r7, #24]
 8012e78:	f103 0309 	add.w	r3, r3, #9
 8012e7c:	61fb      	str	r3, [r7, #28]
	addrlen = 8;
 8012e7e:	f04f 0308 	mov.w	r3, #8
 8012e82:	617b      	str	r3, [r7, #20]
	
	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	69f8      	ldr	r0, [r7, #28]
 8012e88:	4619      	mov	r1, r3
 8012e8a:	f7fe fe67 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012e8e:	61f8      	str	r0, [r7, #28]
	args = UINT32_TO_STREAM(args, 0x00000008);
 8012e90:	69f8      	ldr	r0, [r7, #28]
 8012e92:	f04f 0108 	mov.w	r1, #8
 8012e96:	f7fe fe61 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012e9a:	61f8      	str	r0, [r7, #28]
	args = UINT32_TO_STREAM(args, addrlen);
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	69f8      	ldr	r0, [r7, #28]
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	f7fe fe5b 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012ea6:	61f8      	str	r0, [r7, #28]
	ARRAY_TO_STREAM(args, ((unsigned char *)addr), addrlen);
 8012ea8:	f04f 0400 	mov.w	r4, #0
 8012eac:	e00d      	b.n	8012eca <connect+0x72>
 8012eae:	b223      	sxth	r3, r4
 8012eb0:	68ba      	ldr	r2, [r7, #8]
 8012eb2:	18d3      	adds	r3, r2, r3
 8012eb4:	781a      	ldrb	r2, [r3, #0]
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	701a      	strb	r2, [r3, #0]
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	f103 0301 	add.w	r3, r3, #1
 8012ec0:	61fb      	str	r3, [r7, #28]
 8012ec2:	4623      	mov	r3, r4
 8012ec4:	f103 0301 	add.w	r3, r3, #1
 8012ec8:	b29c      	uxth	r4, r3
 8012eca:	b222      	sxth	r2, r4
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	dbed      	blt.n	8012eae <connect+0x56>
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_CONNECT,
 8012ed2:	f241 0007 	movw	r0, #4103	; 0x1007
 8012ed6:	69b9      	ldr	r1, [r7, #24]
 8012ed8:	f04f 0214 	mov.w	r2, #20
 8012edc:	f7ff fd3c 	bl	8012958 <hci_command_send>
									 ptr, SOCKET_CONNECT_PARAMS_LEN);
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_CMND_CONNECT, &ret);
 8012ee0:	f107 0310 	add.w	r3, r7, #16
 8012ee4:	f241 0007 	movw	r0, #4103	; 0x1007
 8012ee8:	4619      	mov	r1, r3
 8012eea:	f7ff fd07 	bl	80128fc <SimpleLinkWaitEvent>
	
	errno = ret;
 8012eee:	f000 fce9 	bl	80138c4 <__errno>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	693a      	ldr	r2, [r7, #16]
 8012ef6:	601a      	str	r2, [r3, #0]
	
	return((long)ret);
 8012ef8:	693b      	ldr	r3, [r7, #16]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd90      	pop	{r4, r7, pc}

08012f04 <select>:
//*****************************************************************************

int
select(long nfds, fd_set *readsds, fd_set *writesds, fd_set *exceptsds, 
       struct timeval *timeout)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b08c      	sub	sp, #48	; 0x30
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
 8012f10:	603b      	str	r3, [r7, #0]
	unsigned char *ptr, *args;
	tBsdSelectRecvParams tParams;
	unsigned long is_blocking;
	
	if( timeout == NULL)
 8012f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d103      	bne.n	8012f20 <select+0x1c>
	{
		is_blocking = 1; /* blocking , infinity timeout */
 8012f18:	f04f 0301 	mov.w	r3, #1
 8012f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f1e:	e002      	b.n	8012f26 <select+0x22>
	}
	else
	{
		is_blocking = 0; /* no blocking, timeout */
 8012f20:	f04f 0300 	mov.w	r3, #0
 8012f24:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	
	// Fill in HCI packet structure
	ptr = tSLInformation.pucTxCommandBuffer;
 8012f26:	f241 3398 	movw	r3, #5016	; 0x1398
 8012f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012f2e:	689b      	ldr	r3, [r3, #8]
 8012f30:	62bb      	str	r3, [r7, #40]	; 0x28
	args = (ptr + HEADERS_SIZE_CMD);
 8012f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f34:	f103 0309 	add.w	r3, r3, #9
 8012f38:	627b      	str	r3, [r7, #36]	; 0x24
	
	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, nfds);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f3e:	4619      	mov	r1, r3
 8012f40:	f7fe fe0c 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012f44:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000014);
 8012f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f48:	f04f 0114 	mov.w	r1, #20
 8012f4c:	f7fe fe06 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012f50:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000014);
 8012f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f54:	f04f 0114 	mov.w	r1, #20
 8012f58:	f7fe fe00 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012f5c:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000014);
 8012f5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f60:	f04f 0114 	mov.w	r1, #20
 8012f64:	f7fe fdfa 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012f68:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000014);
 8012f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f6c:	f04f 0114 	mov.w	r1, #20
 8012f70:	f7fe fdf4 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012f74:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, is_blocking);
 8012f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f7a:	f7fe fdef 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012f7e:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ((readsds) ? *(unsigned long*)readsds : 0));
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d002      	beq.n	8012f8c <select+0x88>
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	e001      	b.n	8012f90 <select+0x8c>
 8012f8c:	f04f 0300 	mov.w	r3, #0
 8012f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f92:	4619      	mov	r1, r3
 8012f94:	f7fe fde2 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012f98:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ((writesds) ? *(unsigned long*)writesds : 0));
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d002      	beq.n	8012fa6 <select+0xa2>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	e001      	b.n	8012faa <select+0xa6>
 8012fa6:	f04f 0300 	mov.w	r3, #0
 8012faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fac:	4619      	mov	r1, r3
 8012fae:	f7fe fdd5 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012fb2:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ((exceptsds) ? *(unsigned long*)exceptsds : 0));
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d002      	beq.n	8012fc0 <select+0xbc>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	e001      	b.n	8012fc4 <select+0xc0>
 8012fc0:	f04f 0300 	mov.w	r3, #0
 8012fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	f7fe fdc8 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012fcc:	6278      	str	r0, [r7, #36]	; 0x24
	
	if (timeout)
 8012fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d01b      	beq.n	801300c <select+0x108>
	{
		if ( 0 == timeout->tv_sec && timeout->tv_usec < 
 8012fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d109      	bne.n	8012ff0 <select+0xec>
 8012fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fde:	685a      	ldr	r2, [r3, #4]
 8012fe0:	f241 3387 	movw	r3, #4999	; 0x1387
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	dc03      	bgt.n	8012ff0 <select+0xec>
				SELECT_TIMEOUT_MIN_MICRO_SECONDS)
		{
			timeout->tv_usec = SELECT_TIMEOUT_MIN_MICRO_SECONDS;
 8012fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fee:	605a      	str	r2, [r3, #4]
		}
		args = UINT32_TO_STREAM(args, timeout->tv_sec);
 8012ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	f7fe fdb0 	bl	8011b5c <UINT32_TO_STREAM_f>
 8012ffc:	6278      	str	r0, [r7, #36]	; 0x24
		args = UINT32_TO_STREAM(args, timeout->tv_usec);
 8012ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013004:	4619      	mov	r1, r3
 8013006:	f7fe fda9 	bl	8011b5c <UINT32_TO_STREAM_f>
 801300a:	6278      	str	r0, [r7, #36]	; 0x24
	}
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_BSD_SELECT, ptr, SOCKET_SELECT_PARAMS_LEN);
 801300c:	f241 0008 	movw	r0, #4104	; 0x1008
 8013010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013012:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8013016:	f7ff fc9f 	bl	8012958 <hci_command_send>
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(HCI_EVNT_SELECT, &tParams);
 801301a:	f107 0314 	add.w	r3, r7, #20
 801301e:	f241 0008 	movw	r0, #4104	; 0x1008
 8013022:	4619      	mov	r1, r3
 8013024:	f7ff fc6a 	bl	80128fc <SimpleLinkWaitEvent>
	
	// Update actually read FD
	if (tParams.iStatus >= 0)
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	2b00      	cmp	r3, #0
 801302c:	db28      	blt.n	8013080 <select+0x17c>
	{
		if (readsds)
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d009      	beq.n	8013048 <select+0x144>
		{
			memcpy(readsds, &tParams.uiRdfd, sizeof(tParams.uiRdfd));
 8013034:	f107 0314 	add.w	r3, r7, #20
 8013038:	f103 0304 	add.w	r3, r3, #4
 801303c:	68b8      	ldr	r0, [r7, #8]
 801303e:	4619      	mov	r1, r3
 8013040:	f04f 0204 	mov.w	r2, #4
 8013044:	f000 fc44 	bl	80138d0 <memcpy>
		}
		
		if (writesds)
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d009      	beq.n	8013062 <select+0x15e>
		{
			memcpy(writesds, &tParams.uiWrfd, sizeof(tParams.uiWrfd)); 
 801304e:	f107 0314 	add.w	r3, r7, #20
 8013052:	f103 0308 	add.w	r3, r3, #8
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	4619      	mov	r1, r3
 801305a:	f04f 0204 	mov.w	r2, #4
 801305e:	f000 fc37 	bl	80138d0 <memcpy>
		}
		
		if (exceptsds)
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d009      	beq.n	801307c <select+0x178>
		{
			memcpy(exceptsds, &tParams.uiExfd, sizeof(tParams.uiExfd)); 
 8013068:	f107 0314 	add.w	r3, r7, #20
 801306c:	f103 030c 	add.w	r3, r3, #12
 8013070:	6838      	ldr	r0, [r7, #0]
 8013072:	4619      	mov	r1, r3
 8013074:	f04f 0204 	mov.w	r2, #4
 8013078:	f000 fc2a 	bl	80138d0 <memcpy>
		}
		
		return(tParams.iStatus);
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	e006      	b.n	801308e <select+0x18a>
		
	}
	else
	{
		errno = tParams.iStatus;
 8013080:	f000 fc20 	bl	80138c4 <__errno>
 8013084:	4603      	mov	r3, r0
 8013086:	697a      	ldr	r2, [r7, #20]
 8013088:	601a      	str	r2, [r3, #0]
		return(-1);
 801308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 801308e:	4618      	mov	r0, r3
 8013090:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <simple_link_recv>:
//
//*****************************************************************************
int
simple_link_recv(long sd, void *buf, long len, long flags, sockaddr *from,
                socklen_t *fromlen, long opcode)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b08a      	sub	sp, #40	; 0x28
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
 80130a4:	603b      	str	r3, [r7, #0]
	unsigned char *ptr, *args;
	tBsdReadReturnParams tSocketReadEvent;
	
	ptr = tSLInformation.pucTxCommandBuffer;
 80130a6:	f241 3398 	movw	r3, #5016	; 0x1398
 80130aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	627b      	str	r3, [r7, #36]	; 0x24
	args = (ptr + HEADERS_SIZE_CMD);
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b4:	f103 0309 	add.w	r3, r3, #9
 80130b8:	623b      	str	r3, [r7, #32]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, sd);
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	6a38      	ldr	r0, [r7, #32]
 80130be:	4619      	mov	r1, r3
 80130c0:	f7fe fd4c 	bl	8011b5c <UINT32_TO_STREAM_f>
 80130c4:	6238      	str	r0, [r7, #32]
	args = UINT32_TO_STREAM(args, len);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6a38      	ldr	r0, [r7, #32]
 80130ca:	4619      	mov	r1, r3
 80130cc:	f7fe fd46 	bl	8011b5c <UINT32_TO_STREAM_f>
 80130d0:	6238      	str	r0, [r7, #32]
	args = UINT32_TO_STREAM(args, flags);
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	6a38      	ldr	r0, [r7, #32]
 80130d6:	4619      	mov	r1, r3
 80130d8:	f7fe fd40 	bl	8011b5c <UINT32_TO_STREAM_f>
 80130dc:	6238      	str	r0, [r7, #32]
	
	// Generate the read command, and wait for the 
	hci_command_send(opcode,  ptr, SOCKET_RECV_FROM_PARAMS_LEN);
 80130de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	4618      	mov	r0, r3
 80130e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130e6:	f04f 020c 	mov.w	r2, #12
 80130ea:	f7ff fc35 	bl	8012958 <hci_command_send>
	
	// Since we are in blocking state - wait for event complete
	SimpleLinkWaitEvent(opcode, &tSocketReadEvent);
 80130ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f0:	b29a      	uxth	r2, r3
 80130f2:	f107 0314 	add.w	r3, r7, #20
 80130f6:	4610      	mov	r0, r2
 80130f8:	4619      	mov	r1, r3
 80130fa:	f7ff fbff 	bl	80128fc <SimpleLinkWaitEvent>
	
	// In case the number of bytes is more then zero - read data
	if (tSocketReadEvent.iNumberOfBytes > 0)
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	2b00      	cmp	r3, #0
 8013102:	dd04      	ble.n	801310e <simple_link_recv+0x76>
	{
		// Wait for the data in a synchronous way. Here we assume that the bug is 
		// big enough to store also parameters of receive from too....
		SimpleLinkWaitData(buf, (unsigned char *)from, (unsigned char *)fromlen);
 8013104:	68b8      	ldr	r0, [r7, #8]
 8013106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801310a:	f7ff fc0f 	bl	801292c <SimpleLinkWaitData>
	}
	
	errno = tSocketReadEvent.iNumberOfBytes;
 801310e:	f000 fbd9 	bl	80138c4 <__errno>
 8013112:	4603      	mov	r3, r0
 8013114:	69ba      	ldr	r2, [r7, #24]
 8013116:	601a      	str	r2, [r3, #0]
	
	return(tSocketReadEvent.iNumberOfBytes);
 8013118:	69bb      	ldr	r3, [r7, #24]
}
 801311a:	4618      	mov	r0, r3
 801311c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <recv>:
//
//*****************************************************************************

int
recv(long sd, void *buf, long len, long flags)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b088      	sub	sp, #32
 8013128:	af04      	add	r7, sp, #16
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	607a      	str	r2, [r7, #4]
 8013130:	603b      	str	r3, [r7, #0]
	return(simple_link_recv(sd, buf, len, flags, NULL, NULL, HCI_CMND_RECV));
 8013132:	f04f 0300 	mov.w	r3, #0
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	f04f 0300 	mov.w	r3, #0
 801313c:	9301      	str	r3, [sp, #4]
 801313e:	f241 0304 	movw	r3, #4100	; 0x1004
 8013142:	9302      	str	r3, [sp, #8]
 8013144:	68f8      	ldr	r0, [r7, #12]
 8013146:	68b9      	ldr	r1, [r7, #8]
 8013148:	687a      	ldr	r2, [r7, #4]
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	f7ff ffa4 	bl	8013098 <simple_link_recv>
 8013150:	4603      	mov	r3, r0
}
 8013152:	4618      	mov	r0, r3
 8013154:	f107 0710 	add.w	r7, r7, #16
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <simple_link_send>:
//
//*****************************************************************************
int
simple_link_send(long sd, const void *buf, long len, long flags,
              const sockaddr *to, long tolen, long opcode)
{    
 801315c:	b590      	push	{r4, r7, lr}
 801315e:	b08d      	sub	sp, #52	; 0x34
 8013160:	af02      	add	r7, sp, #8
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	607a      	str	r2, [r7, #4]
 8013168:	603b      	str	r3, [r7, #0]
	unsigned char *ptr, *pDataPtr, *args;
	unsigned long addr_offset;
	int res;
	
	// Check the bsd_arguments
	if (0 != (res = HostFlowControlConsumeBuff(sd)))
 801316a:	68f8      	ldr	r0, [r7, #12]
 801316c:	f7ff fdb4 	bl	8012cd8 <HostFlowControlConsumeBuff>
 8013170:	61b8      	str	r0, [r7, #24]
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d001      	beq.n	801317c <simple_link_send+0x20>
	{
		return res;
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	e0a3      	b.n	80132c4 <simple_link_send+0x168>
	}
	
	//Update the number of sent packets
	tSLInformation.NumberOfSentPackets++;
 801317c:	f241 3398 	movw	r3, #5016	; 0x1398
 8013180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013186:	f103 0201 	add.w	r2, r3, #1
 801318a:	f241 3398 	movw	r3, #5016	; 0x1398
 801318e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013192:	639a      	str	r2, [r3, #56]	; 0x38
	
	// Allocate a buffer and construct a packet and send it over spi
	ptr = tSLInformation.pucTxCommandBuffer;
 8013194:	f241 3398 	movw	r3, #5016	; 0x1398
 8013198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801319c:	689b      	ldr	r3, [r3, #8]
 801319e:	617b      	str	r3, [r7, #20]
	args = (ptr + HEADERS_SIZE_DATA);
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	f103 030a 	add.w	r3, r3, #10
 80131a6:	613b      	str	r3, [r7, #16]
	
	// Update the offset of data and parameters according to the command
	switch(opcode)
 80131a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131aa:	2b81      	cmp	r3, #129	; 0x81
 80131ac:	d012      	beq.n	80131d4 <simple_link_send+0x78>
 80131ae:	2b83      	cmp	r3, #131	; 0x83
 80131b0:	d11f      	bne.n	80131f2 <simple_link_send+0x96>
	{ 
	case HCI_CMND_SENDTO:
		{
			addr_offset = len + sizeof(len) + sizeof(len);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f103 0308 	add.w	r3, r3, #8
 80131b8:	61fb      	str	r3, [r7, #28]
			addrlen = 8;
 80131ba:	f04f 0308 	mov.w	r3, #8
 80131be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uArgSize = SOCKET_SENDTO_PARAMS_LEN;
 80131c2:	f04f 0318 	mov.w	r3, #24
 80131c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			pDataPtr = ptr + HEADERS_SIZE_DATA + SOCKET_SENDTO_PARAMS_LEN;
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80131d0:	623b      	str	r3, [r7, #32]
			break;
 80131d2:	e00f      	b.n	80131f4 <simple_link_send+0x98>
		}
		
	case HCI_CMND_SEND:
		{
			tolen = 0;
 80131d4:	f04f 0300 	mov.w	r3, #0
 80131d8:	63fb      	str	r3, [r7, #60]	; 0x3c
			to = NULL;
 80131da:	f04f 0300 	mov.w	r3, #0
 80131de:	63bb      	str	r3, [r7, #56]	; 0x38
			uArgSize = HCI_CMND_SEND_ARG_LENGTH;
 80131e0:	f04f 0310 	mov.w	r3, #16
 80131e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			pDataPtr = ptr + HEADERS_SIZE_DATA + HCI_CMND_SEND_ARG_LENGTH;
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	f103 031a 	add.w	r3, r3, #26
 80131ee:	623b      	str	r3, [r7, #32]
			break;
 80131f0:	e000      	b.n	80131f4 <simple_link_send+0x98>
		}
		
	default:
		{
			break;
 80131f2:	bf00      	nop
		}
	}
	
	// Fill in temporary command buffer
	args = UINT32_TO_STREAM(args, sd);
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	6938      	ldr	r0, [r7, #16]
 80131f8:	4619      	mov	r1, r3
 80131fa:	f7fe fcaf 	bl	8011b5c <UINT32_TO_STREAM_f>
 80131fe:	6138      	str	r0, [r7, #16]
	args = UINT32_TO_STREAM(args, uArgSize - sizeof(sd));
 8013200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013204:	f1a3 0304 	sub.w	r3, r3, #4
 8013208:	6938      	ldr	r0, [r7, #16]
 801320a:	4619      	mov	r1, r3
 801320c:	f7fe fca6 	bl	8011b5c <UINT32_TO_STREAM_f>
 8013210:	6138      	str	r0, [r7, #16]
	args = UINT32_TO_STREAM(args, len);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6938      	ldr	r0, [r7, #16]
 8013216:	4619      	mov	r1, r3
 8013218:	f7fe fca0 	bl	8011b5c <UINT32_TO_STREAM_f>
 801321c:	6138      	str	r0, [r7, #16]
	args = UINT32_TO_STREAM(args, flags);
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	6938      	ldr	r0, [r7, #16]
 8013222:	4619      	mov	r1, r3
 8013224:	f7fe fc9a 	bl	8011b5c <UINT32_TO_STREAM_f>
 8013228:	6138      	str	r0, [r7, #16]
	
	if (opcode == HCI_CMND_SENDTO)
 801322a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801322c:	2b83      	cmp	r3, #131	; 0x83
 801322e:	d10b      	bne.n	8013248 <simple_link_send+0xec>
	{
		args = UINT32_TO_STREAM(args, addr_offset);
 8013230:	6938      	ldr	r0, [r7, #16]
 8013232:	69f9      	ldr	r1, [r7, #28]
 8013234:	f7fe fc92 	bl	8011b5c <UINT32_TO_STREAM_f>
 8013238:	6138      	str	r0, [r7, #16]
		args = UINT32_TO_STREAM(args, addrlen);
 801323a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801323e:	6938      	ldr	r0, [r7, #16]
 8013240:	4619      	mov	r1, r3
 8013242:	f7fe fc8b 	bl	8011b5c <UINT32_TO_STREAM_f>
 8013246:	6138      	str	r0, [r7, #16]
	}
	
	// Copy the data received from user into the TX Buffer
	ARRAY_TO_STREAM(pDataPtr, ((unsigned char *)buf), len);
 8013248:	f04f 0400 	mov.w	r4, #0
 801324c:	e00d      	b.n	801326a <simple_link_send+0x10e>
 801324e:	b223      	sxth	r3, r4
 8013250:	68ba      	ldr	r2, [r7, #8]
 8013252:	18d3      	adds	r3, r2, r3
 8013254:	781a      	ldrb	r2, [r3, #0]
 8013256:	6a3b      	ldr	r3, [r7, #32]
 8013258:	701a      	strb	r2, [r3, #0]
 801325a:	6a3b      	ldr	r3, [r7, #32]
 801325c:	f103 0301 	add.w	r3, r3, #1
 8013260:	623b      	str	r3, [r7, #32]
 8013262:	4623      	mov	r3, r4
 8013264:	f103 0301 	add.w	r3, r3, #1
 8013268:	b29c      	uxth	r4, r3
 801326a:	b222      	sxth	r2, r4
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	429a      	cmp	r2, r3
 8013270:	dbed      	blt.n	801324e <simple_link_send+0xf2>
	
	// In case we are using SendTo, copy the to parameters
	if (opcode == HCI_CMND_SENDTO)
 8013272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013274:	2b83      	cmp	r3, #131	; 0x83
 8013276:	d114      	bne.n	80132a2 <simple_link_send+0x146>
	{	
		ARRAY_TO_STREAM(pDataPtr, ((unsigned char *)to), tolen);
 8013278:	f04f 0400 	mov.w	r4, #0
 801327c:	e00d      	b.n	801329a <simple_link_send+0x13e>
 801327e:	b223      	sxth	r3, r4
 8013280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013282:	18d3      	adds	r3, r2, r3
 8013284:	781a      	ldrb	r2, [r3, #0]
 8013286:	6a3b      	ldr	r3, [r7, #32]
 8013288:	701a      	strb	r2, [r3, #0]
 801328a:	6a3b      	ldr	r3, [r7, #32]
 801328c:	f103 0301 	add.w	r3, r3, #1
 8013290:	623b      	str	r3, [r7, #32]
 8013292:	4623      	mov	r3, r4
 8013294:	f103 0301 	add.w	r3, r3, #1
 8013298:	b29c      	uxth	r4, r3
 801329a:	b222      	sxth	r2, r4
 801329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801329e:	429a      	cmp	r2, r3
 80132a0:	dbed      	blt.n	801327e <simple_link_send+0x122>
	}
	
	// Initiate a HCI command
	hci_data_send(opcode, ptr, uArgSize, len,(unsigned char*)to, tolen);
 80132a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132a4:	b2d9      	uxtb	r1, r3
 80132a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80132b2:	b280      	uxth	r0, r0
 80132b4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80132b6:	9400      	str	r4, [sp, #0]
 80132b8:	9001      	str	r0, [sp, #4]
 80132ba:	4608      	mov	r0, r1
 80132bc:	6979      	ldr	r1, [r7, #20]
 80132be:	f7ff fb7d 	bl	80129bc <hci_data_send>
	
	return	(len);
 80132c2:	687b      	ldr	r3, [r7, #4]
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd90      	pop	{r4, r7, pc}
 80132ce:	bf00      	nop

080132d0 <send>:
//
//*****************************************************************************

int
send(long sd, const void *buf, long len, long flags)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b088      	sub	sp, #32
 80132d4:	af04      	add	r7, sp, #16
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
 80132dc:	603b      	str	r3, [r7, #0]
	return(simple_link_send(sd, buf, len, flags, NULL, 0, HCI_CMND_SEND));
 80132de:	f04f 0300 	mov.w	r3, #0
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	f04f 0300 	mov.w	r3, #0
 80132e8:	9301      	str	r3, [sp, #4]
 80132ea:	f04f 0381 	mov.w	r3, #129	; 0x81
 80132ee:	9302      	str	r3, [sp, #8]
 80132f0:	68f8      	ldr	r0, [r7, #12]
 80132f2:	68b9      	ldr	r1, [r7, #8]
 80132f4:	687a      	ldr	r2, [r7, #4]
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	f7ff ff30 	bl	801315c <simple_link_send>
 80132fc:	4603      	mov	r3, r0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	f107 0710 	add.w	r7, r7, #16
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <SimpleLink_Init_Start>:
//!
//!  @brief    Send HCI_CMND_SIMPLE_LINK_START to CC3000
//
//*****************************************************************************
static void SimpleLink_Init_Start(unsigned short usPatchesAvailableAtHost)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	4603      	mov	r3, r0
 8013310:	80fb      	strh	r3, [r7, #6]
	unsigned char *ptr;
	unsigned char *args;
	
	ptr = tSLInformation.pucTxCommandBuffer;
 8013312:	f241 3398 	movw	r3, #5016	; 0x1398
 8013316:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801331a:	689b      	ldr	r3, [r3, #8]
 801331c:	60fb      	str	r3, [r7, #12]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f103 0309 	add.w	r3, r3, #9
 8013324:	60bb      	str	r3, [r7, #8]
	
	UINT8_TO_STREAM(args, ((usPatchesAvailableAtHost) ? SL_PATCHES_REQUEST_FORCE_HOST : SL_PATCHES_REQUEST_DEFAULT));
 8013326:	88fb      	ldrh	r3, [r7, #6]
 8013328:	2b00      	cmp	r3, #0
 801332a:	bf0c      	ite	eq
 801332c:	2300      	moveq	r3, #0
 801332e:	2301      	movne	r3, #1
 8013330:	b2db      	uxtb	r3, r3
 8013332:	461a      	mov	r2, r3
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	701a      	strb	r2, [r3, #0]
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	f103 0301 	add.w	r3, r3, #1
 801333e:	60bb      	str	r3, [r7, #8]
	
	// IRQ Line asserted - send HCI_CMND_SIMPLE_LINK_START to CC3000
	hci_command_send(HCI_CMND_SIMPLE_LINK_START, ptr, WLAN_SL_INIT_START_PARAMS_LEN);
 8013340:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8013344:	68f9      	ldr	r1, [r7, #12]
 8013346:	f04f 0201 	mov.w	r2, #1
 801334a:	f7ff fb05 	bl	8012958 <hci_command_send>
	
	SimpleLinkWaitEvent(HCI_CMND_SIMPLE_LINK_START, 0);
 801334e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8013352:	f04f 0100 	mov.w	r1, #0
 8013356:	f7ff fad1 	bl	80128fc <SimpleLinkWaitEvent>
}
 801335a:	f107 0710 	add.w	r7, r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop

08013364 <wlan_init>:
							 tBootLoaderPatches sBootLoaderPatches,
							 tWlanReadInteruptPin  sReadWlanInterruptPin,
							 tWlanInterruptEnable  sWlanInterruptEnable,
							 tWlanInterruptDisable sWlanInterruptDisable,
							 tWriteWlanPin         sWriteWlanPin)
{
 8013364:	b480      	push	{r7}
 8013366:	b085      	sub	sp, #20
 8013368:	af00      	add	r7, sp, #0
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
 8013370:	603b      	str	r3, [r7, #0]
	
	tSLInformation.sFWPatches = sFWPatches;
 8013372:	f241 3398 	movw	r3, #5016	; 0x1398
 8013376:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801337a:	68ba      	ldr	r2, [r7, #8]
 801337c:	60da      	str	r2, [r3, #12]
	tSLInformation.sDriverPatches = sDriverPatches;
 801337e:	f241 3398 	movw	r3, #5016	; 0x1398
 8013382:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	611a      	str	r2, [r3, #16]
	tSLInformation.sBootLoaderPatches = sBootLoaderPatches;
 801338a:	f241 3398 	movw	r3, #5016	; 0x1398
 801338e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013392:	683a      	ldr	r2, [r7, #0]
 8013394:	615a      	str	r2, [r3, #20]
	
	// init io callback
	tSLInformation.ReadWlanInterruptPin = sReadWlanInterruptPin;
 8013396:	f241 3398 	movw	r3, #5016	; 0x1398
 801339a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801339e:	69ba      	ldr	r2, [r7, #24]
 80133a0:	61da      	str	r2, [r3, #28]
	tSLInformation.WlanInterruptEnable  = sWlanInterruptEnable;
 80133a2:	f241 3398 	movw	r3, #5016	; 0x1398
 80133a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133aa:	69fa      	ldr	r2, [r7, #28]
 80133ac:	621a      	str	r2, [r3, #32]
	tSLInformation.WlanInterruptDisable = sWlanInterruptDisable;
 80133ae:	f241 3398 	movw	r3, #5016	; 0x1398
 80133b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133b6:	6a3a      	ldr	r2, [r7, #32]
 80133b8:	625a      	str	r2, [r3, #36]	; 0x24
	tSLInformation.WriteWlanPin = sWriteWlanPin;
 80133ba:	f241 3398 	movw	r3, #5016	; 0x1398
 80133be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133c4:	629a      	str	r2, [r3, #40]	; 0x28
	
	//init asynchronous events callback
	tSLInformation.sWlanCB= sWlanCB;
 80133c6:	f241 3398 	movw	r3, #5016	; 0x1398
 80133ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133ce:	68fa      	ldr	r2, [r7, #12]
 80133d0:	619a      	str	r2, [r3, #24]
	
	// By default TX Complete events are routed to host too
	tSLInformation.InformHostOnTxComplete = 1;
 80133d2:	f241 3398 	movw	r3, #5016	; 0x1398
 80133d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133da:	f04f 0201 	mov.w	r2, #1
 80133de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80133e2:	f107 0714 	add.w	r7, r7, #20
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bc80      	pop	{r7}
 80133ea:	4770      	bx	lr

080133ec <SpiReceiveHandler>:
//!  @brief         The function triggers Received event/data processing. It is 
//! 			          called from the SPI library to receive the data
//
//*****************************************************************************
void SpiReceiveHandler(void *pvBuffer)
{	
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b082      	sub	sp, #8
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
	tSLInformation.usEventOrDataReceived = 1;
 80133f4:	f241 3398 	movw	r3, #5016	; 0x1398
 80133f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133fc:	f04f 0201 	mov.w	r2, #1
 8013400:	805a      	strh	r2, [r3, #2]
	tSLInformation.pucReceivedData = (unsigned char 	*)pvBuffer;
 8013402:	f241 3398 	movw	r3, #5016	; 0x1398
 8013406:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	605a      	str	r2, [r3, #4]
	
	hci_unsolicited_event_handler();
 801340e:	f7ff f975 	bl	80126fc <hci_unsolicited_event_handler>
}
 8013412:	f107 0708 	add.w	r7, r7, #8
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop

0801341c <wlan_start>:
//
//*****************************************************************************

void
wlan_start(unsigned short usPatchesAvailableAtHost)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	4603      	mov	r3, r0
 8013424:	80fb      	strh	r3, [r7, #6]
	
	unsigned long ulSpiIRQState;
	
	tSLInformation.NumberOfSentPackets = 0;
 8013426:	f241 3398 	movw	r3, #5016	; 0x1398
 801342a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801342e:	f04f 0200 	mov.w	r2, #0
 8013432:	639a      	str	r2, [r3, #56]	; 0x38
	tSLInformation.NumberOfReleasedPackets = 0;
 8013434:	f241 3398 	movw	r3, #5016	; 0x1398
 8013438:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801343c:	f04f 0200 	mov.w	r2, #0
 8013440:	63da      	str	r2, [r3, #60]	; 0x3c
	tSLInformation.usRxEventOpcode = 0;
 8013442:	f241 3398 	movw	r3, #5016	; 0x1398
 8013446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801344a:	f04f 0200 	mov.w	r2, #0
 801344e:	801a      	strh	r2, [r3, #0]
	tSLInformation.usNumberOfFreeBuffers = 0;
 8013450:	f241 3398 	movw	r3, #5016	; 0x1398
 8013454:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013458:	f04f 0200 	mov.w	r2, #0
 801345c:	861a      	strh	r2, [r3, #48]	; 0x30
	tSLInformation.usSlBufferLength = 0;
 801345e:	f241 3398 	movw	r3, #5016	; 0x1398
 8013462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013466:	f04f 0200 	mov.w	r2, #0
 801346a:	865a      	strh	r2, [r3, #50]	; 0x32
	tSLInformation.usBufferSize = 0;
 801346c:	f241 3398 	movw	r3, #5016	; 0x1398
 8013470:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013474:	f04f 0200 	mov.w	r2, #0
 8013478:	869a      	strh	r2, [r3, #52]	; 0x34
	tSLInformation.usRxDataPending = 0;
 801347a:	f241 3398 	movw	r3, #5016	; 0x1398
 801347e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013482:	f04f 0200 	mov.w	r2, #0
 8013486:	86da      	strh	r2, [r3, #54]	; 0x36
	tSLInformation.slTransmitDataError = 0;
 8013488:	f241 3398 	movw	r3, #5016	; 0x1398
 801348c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013490:	f04f 0200 	mov.w	r2, #0
 8013494:	62da      	str	r2, [r3, #44]	; 0x2c
	tSLInformation.usEventOrDataReceived = 0;
 8013496:	f241 3398 	movw	r3, #5016	; 0x1398
 801349a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801349e:	f04f 0200 	mov.w	r2, #0
 80134a2:	805a      	strh	r2, [r3, #2]
	tSLInformation.pucReceivedData = 0;
 80134a4:	f241 3398 	movw	r3, #5016	; 0x1398
 80134a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134ac:	f04f 0200 	mov.w	r2, #0
 80134b0:	605a      	str	r2, [r3, #4]
	
	// Allocate the memory for the RX/TX data transactions
	tSLInformation.pucTxCommandBuffer = (unsigned char *)wlan_tx_buffer;
 80134b2:	f241 3398 	movw	r3, #5016	; 0x1398
 80134b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134ba:	f240 7280 	movw	r2, #1920	; 0x780
 80134be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80134c2:	609a      	str	r2, [r3, #8]
	
	// init spi
	SpiOpen(SpiReceiveHandler);
 80134c4:	f243 30ed 	movw	r0, #13293	; 0x33ed
 80134c8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80134cc:	f7f7 fbda 	bl	800ac84 <SpiOpen>
	
	// Check the IRQ line
	ulSpiIRQState = tSLInformation.ReadWlanInterruptPin();
 80134d0:	f241 3398 	movw	r3, #5016	; 0x1398
 80134d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134d8:	69db      	ldr	r3, [r3, #28]
 80134da:	4798      	blx	r3
 80134dc:	4603      	mov	r3, r0
 80134de:	60fb      	str	r3, [r7, #12]
	
	// ASIC 1273 chip enable: toggle WLAN EN line
	tSLInformation.WriteWlanPin( WLAN_ENABLE );
 80134e0:	f241 3398 	movw	r3, #5016	; 0x1398
 80134e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80134e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134ea:	f04f 0001 	mov.w	r0, #1
 80134ee:	4798      	blx	r3
	
	if (ulSpiIRQState)
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d00a      	beq.n	801350c <wlan_start+0xf0>
	{
		// wait till the IRQ line goes low
		while(tSLInformation.ReadWlanInterruptPin() != 0)
 80134f6:	bf00      	nop
 80134f8:	f241 3398 	movw	r3, #5016	; 0x1398
 80134fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013500:	69db      	ldr	r3, [r3, #28]
 8013502:	4798      	blx	r3
 8013504:	4603      	mov	r3, r0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d1f6      	bne.n	80134f8 <wlan_start+0xdc>
 801350a:	e013      	b.n	8013534 <wlan_start+0x118>
		}
	}
	else
	{
		// wait till the IRQ line goes high and than low
		while(tSLInformation.ReadWlanInterruptPin() == 0)
 801350c:	bf00      	nop
 801350e:	f241 3398 	movw	r3, #5016	; 0x1398
 8013512:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013516:	69db      	ldr	r3, [r3, #28]
 8013518:	4798      	blx	r3
 801351a:	4603      	mov	r3, r0
 801351c:	2b00      	cmp	r3, #0
 801351e:	d0f6      	beq.n	801350e <wlan_start+0xf2>
		{
		}
		
		while(tSLInformation.ReadWlanInterruptPin() != 0)
 8013520:	bf00      	nop
 8013522:	f241 3398 	movw	r3, #5016	; 0x1398
 8013526:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801352a:	69db      	ldr	r3, [r3, #28]
 801352c:	4798      	blx	r3
 801352e:	4603      	mov	r3, r0
 8013530:	2b00      	cmp	r3, #0
 8013532:	d1f6      	bne.n	8013522 <wlan_start+0x106>
		{
		}
	}
	
	SimpleLink_Init_Start(usPatchesAvailableAtHost);
 8013534:	88fb      	ldrh	r3, [r7, #6]
 8013536:	4618      	mov	r0, r3
 8013538:	f7ff fee6 	bl	8013308 <SimpleLink_Init_Start>
	
	// Read Buffer's size and finish
	hci_command_send(HCI_CMND_READ_BUFFER_SIZE, tSLInformation.pucTxCommandBuffer, 0);
 801353c:	f241 3398 	movw	r3, #5016	; 0x1398
 8013540:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	f244 000b 	movw	r0, #16395	; 0x400b
 801354a:	4619      	mov	r1, r3
 801354c:	f04f 0200 	mov.w	r2, #0
 8013550:	f7ff fa02 	bl	8012958 <hci_command_send>
	SimpleLinkWaitEvent(HCI_CMND_READ_BUFFER_SIZE, 0);
 8013554:	f244 000b 	movw	r0, #16395	; 0x400b
 8013558:	f04f 0100 	mov.w	r1, #0
 801355c:	f7ff f9ce 	bl	80128fc <SimpleLinkWaitEvent>
}
 8013560:	f107 0710 	add.w	r7, r7, #16
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}

08013568 <wlan_connect>:
  
#ifndef CC3000_TINY_DRIVER
long
wlan_connect(unsigned long ulSecType, char *ssid, long ssid_len,
             unsigned char *bssid, unsigned char *key, long key_len)
{
 8013568:	b590      	push	{r4, r7, lr}
 801356a:	b08b      	sub	sp, #44	; 0x2c
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
 8013574:	603b      	str	r3, [r7, #0]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	unsigned char bssid_zero[] = {0, 0, 0, 0, 0, 0};
 8013576:	f04f 0300 	mov.w	r3, #0
 801357a:	753b      	strb	r3, [r7, #20]
 801357c:	f04f 0300 	mov.w	r3, #0
 8013580:	757b      	strb	r3, [r7, #21]
 8013582:	f04f 0300 	mov.w	r3, #0
 8013586:	75bb      	strb	r3, [r7, #22]
 8013588:	f04f 0300 	mov.w	r3, #0
 801358c:	75fb      	strb	r3, [r7, #23]
 801358e:	f04f 0300 	mov.w	r3, #0
 8013592:	763b      	strb	r3, [r7, #24]
 8013594:	f04f 0300 	mov.w	r3, #0
 8013598:	767b      	strb	r3, [r7, #25]
	
	ret  	= EFAIL;
 801359a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801359e:	61fb      	str	r3, [r7, #28]
	ptr  	= tSLInformation.pucTxCommandBuffer;
 80135a0:	f241 3398 	movw	r3, #5016	; 0x1398
 80135a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	623b      	str	r3, [r7, #32]
	args 	= (ptr + HEADERS_SIZE_CMD);
 80135ac:	6a3b      	ldr	r3, [r7, #32]
 80135ae:	f103 0309 	add.w	r3, r3, #9
 80135b2:	627b      	str	r3, [r7, #36]	; 0x24
	
	// Fill in command buffer
	args = UINT32_TO_STREAM(args, 0x0000001c);
 80135b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135b6:	f04f 011c 	mov.w	r1, #28
 80135ba:	f7fe facf 	bl	8011b5c <UINT32_TO_STREAM_f>
 80135be:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ssid_len);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135c4:	4619      	mov	r1, r3
 80135c6:	f7fe fac9 	bl	8011b5c <UINT32_TO_STREAM_f>
 80135ca:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, ulSecType);
 80135cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135ce:	68f9      	ldr	r1, [r7, #12]
 80135d0:	f7fe fac4 	bl	8011b5c <UINT32_TO_STREAM_f>
 80135d4:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, 0x00000010 + ssid_len);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f103 0310 	add.w	r3, r3, #16
 80135dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135de:	4619      	mov	r1, r3
 80135e0:	f7fe fabc 	bl	8011b5c <UINT32_TO_STREAM_f>
 80135e4:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT32_TO_STREAM(args, key_len);
 80135e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135ea:	4619      	mov	r1, r3
 80135ec:	f7fe fab6 	bl	8011b5c <UINT32_TO_STREAM_f>
 80135f0:	6278      	str	r0, [r7, #36]	; 0x24
	args = UINT16_TO_STREAM(args, 0);
 80135f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135f4:	f04f 0100 	mov.w	r1, #0
 80135f8:	f7fe fae2 	bl	8011bc0 <UINT16_TO_STREAM_f>
 80135fc:	6278      	str	r0, [r7, #36]	; 0x24
	
	// padding shall be zeroed
	if(bssid)
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d014      	beq.n	801362e <wlan_connect+0xc6>
	{
		ARRAY_TO_STREAM(args, bssid, ETH_ALEN);
 8013604:	f04f 0400 	mov.w	r4, #0
 8013608:	e00d      	b.n	8013626 <wlan_connect+0xbe>
 801360a:	b223      	sxth	r3, r4
 801360c:	683a      	ldr	r2, [r7, #0]
 801360e:	18d3      	adds	r3, r2, r3
 8013610:	781a      	ldrb	r2, [r3, #0]
 8013612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013614:	701a      	strb	r2, [r3, #0]
 8013616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013618:	f103 0301 	add.w	r3, r3, #1
 801361c:	627b      	str	r3, [r7, #36]	; 0x24
 801361e:	4623      	mov	r3, r4
 8013620:	f103 0301 	add.w	r3, r3, #1
 8013624:	b29c      	uxth	r4, r3
 8013626:	b223      	sxth	r3, r4
 8013628:	2b05      	cmp	r3, #5
 801362a:	ddee      	ble.n	801360a <wlan_connect+0xa2>
 801362c:	e014      	b.n	8013658 <wlan_connect+0xf0>
	}
	else
	{
		ARRAY_TO_STREAM(args, bssid_zero, ETH_ALEN);
 801362e:	f04f 0400 	mov.w	r4, #0
 8013632:	e00e      	b.n	8013652 <wlan_connect+0xea>
 8013634:	b223      	sxth	r3, r4
 8013636:	f107 0214 	add.w	r2, r7, #20
 801363a:	18d3      	adds	r3, r2, r3
 801363c:	781a      	ldrb	r2, [r3, #0]
 801363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013640:	701a      	strb	r2, [r3, #0]
 8013642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013644:	f103 0301 	add.w	r3, r3, #1
 8013648:	627b      	str	r3, [r7, #36]	; 0x24
 801364a:	4623      	mov	r3, r4
 801364c:	f103 0301 	add.w	r3, r3, #1
 8013650:	b29c      	uxth	r4, r3
 8013652:	b223      	sxth	r3, r4
 8013654:	2b05      	cmp	r3, #5
 8013656:	dded      	ble.n	8013634 <wlan_connect+0xcc>
	}
	
	ARRAY_TO_STREAM(args, ssid, ssid_len);
 8013658:	f04f 0400 	mov.w	r4, #0
 801365c:	e00d      	b.n	801367a <wlan_connect+0x112>
 801365e:	b223      	sxth	r3, r4
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	18d3      	adds	r3, r2, r3
 8013664:	781a      	ldrb	r2, [r3, #0]
 8013666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013668:	701a      	strb	r2, [r3, #0]
 801366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801366c:	f103 0301 	add.w	r3, r3, #1
 8013670:	627b      	str	r3, [r7, #36]	; 0x24
 8013672:	4623      	mov	r3, r4
 8013674:	f103 0301 	add.w	r3, r3, #1
 8013678:	b29c      	uxth	r4, r3
 801367a:	b222      	sxth	r2, r4
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	429a      	cmp	r2, r3
 8013680:	dbed      	blt.n	801365e <wlan_connect+0xf6>
	
	if(key_len && key)
 8013682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013684:	2b00      	cmp	r3, #0
 8013686:	d017      	beq.n	80136b8 <wlan_connect+0x150>
 8013688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801368a:	2b00      	cmp	r3, #0
 801368c:	d014      	beq.n	80136b8 <wlan_connect+0x150>
	{
		ARRAY_TO_STREAM(args, key, key_len);
 801368e:	f04f 0400 	mov.w	r4, #0
 8013692:	e00d      	b.n	80136b0 <wlan_connect+0x148>
 8013694:	b223      	sxth	r3, r4
 8013696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013698:	18d3      	adds	r3, r2, r3
 801369a:	781a      	ldrb	r2, [r3, #0]
 801369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369e:	701a      	strb	r2, [r3, #0]
 80136a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a2:	f103 0301 	add.w	r3, r3, #1
 80136a6:	627b      	str	r3, [r7, #36]	; 0x24
 80136a8:	4623      	mov	r3, r4
 80136aa:	f103 0301 	add.w	r3, r3, #1
 80136ae:	b29c      	uxth	r4, r3
 80136b0:	b222      	sxth	r2, r4
 80136b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136b4:	429a      	cmp	r2, r3
 80136b6:	dbed      	blt.n	8013694 <wlan_connect+0x12c>
	}
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_CONNECT, ptr, WLAN_CONNECT_PARAM_LEN + 
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	b2da      	uxtb	r2, r3
 80136bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	18d3      	adds	r3, r2, r3
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	f103 031c 	add.w	r3, r3, #28
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	f04f 0001 	mov.w	r0, #1
 80136ce:	6a39      	ldr	r1, [r7, #32]
 80136d0:	461a      	mov	r2, r3
 80136d2:	f7ff f941 	bl	8012958 <hci_command_send>
									 ssid_len + key_len - 1);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_CONNECT, &ret);
 80136d6:	f107 031c 	add.w	r3, r7, #28
 80136da:	f04f 0001 	mov.w	r0, #1
 80136de:	4619      	mov	r1, r3
 80136e0:	f7ff f90c 	bl	80128fc <SimpleLinkWaitEvent>
	errno = ret;
 80136e4:	f000 f8ee 	bl	80138c4 <__errno>
 80136e8:	4603      	mov	r3, r0
 80136ea:	69fa      	ldr	r2, [r7, #28]
 80136ec:	601a      	str	r2, [r3, #0]
	
	return(ret);
 80136ee:	69fb      	ldr	r3, [r7, #28]
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd90      	pop	{r4, r7, pc}
 80136fa:	bf00      	nop

080136fc <wlan_ioctl_set_connection_policy>:

long
wlan_ioctl_set_connection_policy(unsigned long should_connect_to_open_ap, 
                                 unsigned long ulShouldUseFastConnect,
                                 unsigned long ulUseProfiles)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b088      	sub	sp, #32
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	607a      	str	r2, [r7, #4]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	
	ret = EFAIL;
 8013708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801370c:	617b      	str	r3, [r7, #20]
	ptr = tSLInformation.pucTxCommandBuffer;
 801370e:	f241 3398 	movw	r3, #5016	; 0x1398
 8013712:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	61fb      	str	r3, [r7, #28]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 801371a:	69fb      	ldr	r3, [r7, #28]
 801371c:	f103 0309 	add.w	r3, r3, #9
 8013720:	61bb      	str	r3, [r7, #24]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, should_connect_to_open_ap);
 8013722:	69b8      	ldr	r0, [r7, #24]
 8013724:	68f9      	ldr	r1, [r7, #12]
 8013726:	f7fe fa19 	bl	8011b5c <UINT32_TO_STREAM_f>
 801372a:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, ulShouldUseFastConnect);
 801372c:	69b8      	ldr	r0, [r7, #24]
 801372e:	68b9      	ldr	r1, [r7, #8]
 8013730:	f7fe fa14 	bl	8011b5c <UINT32_TO_STREAM_f>
 8013734:	61b8      	str	r0, [r7, #24]
	args = UINT32_TO_STREAM(args, ulUseProfiles);
 8013736:	69b8      	ldr	r0, [r7, #24]
 8013738:	6879      	ldr	r1, [r7, #4]
 801373a:	f7fe fa0f 	bl	8011b5c <UINT32_TO_STREAM_f>
 801373e:	61b8      	str	r0, [r7, #24]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY,
 8013740:	f04f 0004 	mov.w	r0, #4
 8013744:	69f9      	ldr	r1, [r7, #28]
 8013746:	f04f 020c 	mov.w	r2, #12
 801374a:	f7ff f905 	bl	8012958 <hci_command_send>
									 ptr, WLAN_SET_CONNECTION_POLICY_PARAMS_LEN);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SET_CONNECTION_POLICY, &ret);
 801374e:	f107 0314 	add.w	r3, r7, #20
 8013752:	f04f 0004 	mov.w	r0, #4
 8013756:	4619      	mov	r1, r3
 8013758:	f7ff f8d0 	bl	80128fc <SimpleLinkWaitEvent>
	
	return(ret);
 801375c:	697b      	ldr	r3, [r7, #20]
}
 801375e:	4618      	mov	r0, r3
 8013760:	f107 0720 	add.w	r7, r7, #32
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <wlan_ioctl_del_profile>:
//
//*****************************************************************************

long
wlan_ioctl_del_profile(unsigned long ulIndex)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b086      	sub	sp, #24
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	
	ptr = tSLInformation.pucTxCommandBuffer;
 8013770:	f241 3398 	movw	r3, #5016	; 0x1398
 8013774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013778:	689b      	ldr	r3, [r3, #8]
 801377a:	617b      	str	r3, [r7, #20]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	f103 0309 	add.w	r3, r3, #9
 8013782:	613b      	str	r3, [r7, #16]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulIndex);
 8013784:	6938      	ldr	r0, [r7, #16]
 8013786:	6879      	ldr	r1, [r7, #4]
 8013788:	f7fe f9e8 	bl	8011b5c <UINT32_TO_STREAM_f>
 801378c:	6138      	str	r0, [r7, #16]
	ret = EFAIL;
 801378e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013792:	60fb      	str	r3, [r7, #12]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_WLAN_IOCTL_DEL_PROFILE,
 8013794:	f04f 0006 	mov.w	r0, #6
 8013798:	6979      	ldr	r1, [r7, #20]
 801379a:	f04f 0204 	mov.w	r2, #4
 801379e:	f7ff f8db 	bl	8012958 <hci_command_send>
									 ptr, WLAN_DEL_PROFILE_PARAMS_LEN);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_DEL_PROFILE, &ret);
 80137a2:	f107 030c 	add.w	r3, r7, #12
 80137a6:	f04f 0006 	mov.w	r0, #6
 80137aa:	4619      	mov	r1, r3
 80137ac:	f7ff f8a6 	bl	80128fc <SimpleLinkWaitEvent>
	
	return(ret);
 80137b0:	68fb      	ldr	r3, [r7, #12]
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	f107 0718 	add.w	r7, r7, #24
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <wlan_set_event_mask>:
//
//*****************************************************************************

long
wlan_set_event_mask(unsigned long ulMask)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b086      	sub	sp, #24
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	
	
	if ((ulMask & HCI_EVNT_WLAN_TX_COMPLETE) == HCI_EVNT_WLAN_TX_COMPLETE)
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	f248 0308 	movw	r3, #32776	; 0x8008
 80137ca:	4013      	ands	r3, r2
 80137cc:	f248 0208 	movw	r2, #32776	; 0x8008
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d11a      	bne.n	801380a <wlan_set_event_mask+0x4e>
	{
		tSLInformation.InformHostOnTxComplete = 0;
 80137d4:	f241 3398 	movw	r3, #5016	; 0x1398
 80137d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80137dc:	f04f 0200 	mov.w	r2, #0
 80137e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		
		// Since an event is a virtual event - i.e. it is not coming from CC3000
		// there is no need to send anything to the device if it was an only event
		if (ulMask == HCI_EVNT_WLAN_TX_COMPLETE)
 80137e4:	687a      	ldr	r2, [r7, #4]
 80137e6:	f248 0308 	movw	r3, #32776	; 0x8008
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d102      	bne.n	80137f4 <wlan_set_event_mask+0x38>
		{
			return 0;
 80137ee:	f04f 0300 	mov.w	r3, #0
 80137f2:	e033      	b.n	801385c <wlan_set_event_mask+0xa0>
		}
		
		ulMask &= ~HCI_EVNT_WLAN_TX_COMPLETE;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80137fa:	f023 0308 	bic.w	r3, r3, #8
 80137fe:	607b      	str	r3, [r7, #4]
		ulMask |= HCI_EVNT_WLAN_UNSOL_BASE;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013806:	607b      	str	r3, [r7, #4]
 8013808:	e007      	b.n	801381a <wlan_set_event_mask+0x5e>
	}
	else
	{
		tSLInformation.InformHostOnTxComplete = 1;
 801380a:	f241 3398 	movw	r3, #5016	; 0x1398
 801380e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013812:	f04f 0201 	mov.w	r2, #1
 8013816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	}
	
	ret = EFAIL;
 801381a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801381e:	60fb      	str	r3, [r7, #12]
	ptr = tSLInformation.pucTxCommandBuffer;
 8013820:	f241 3398 	movw	r3, #5016	; 0x1398
 8013824:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013828:	689b      	ldr	r3, [r3, #8]
 801382a:	617b      	str	r3, [r7, #20]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	f103 0309 	add.w	r3, r3, #9
 8013832:	613b      	str	r3, [r7, #16]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, ulMask);
 8013834:	6938      	ldr	r0, [r7, #16]
 8013836:	6879      	ldr	r1, [r7, #4]
 8013838:	f7fe f990 	bl	8011b5c <UINT32_TO_STREAM_f>
 801383c:	6138      	str	r0, [r7, #16]
	
	// Initiate a HCI command
	hci_command_send(HCI_CMND_EVENT_MASK,
 801383e:	f04f 0008 	mov.w	r0, #8
 8013842:	6979      	ldr	r1, [r7, #20]
 8013844:	f04f 0204 	mov.w	r2, #4
 8013848:	f7ff f886 	bl	8012958 <hci_command_send>
									 ptr, WLAN_SET_MASK_PARAMS_LEN);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_EVENT_MASK, &ret);
 801384c:	f107 030c 	add.w	r3, r7, #12
 8013850:	f04f 0008 	mov.w	r0, #8
 8013854:	4619      	mov	r1, r3
 8013856:	f7ff f851 	bl	80128fc <SimpleLinkWaitEvent>
	
	return(ret);
 801385a:	68fb      	ldr	r3, [r7, #12]
}
 801385c:	4618      	mov	r0, r3
 801385e:	f107 0718 	add.w	r7, r7, #24
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop

08013868 <wlan_smart_config_start>:
//
//*****************************************************************************

long
wlan_smart_config_start(unsigned long algoEncryptedFlag)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b086      	sub	sp, #24
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
	long ret;
	unsigned char *ptr;
	unsigned char *args;
	
	ret = EFAIL;
 8013870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013874:	60fb      	str	r3, [r7, #12]
	ptr = tSLInformation.pucTxCommandBuffer;
 8013876:	f241 3398 	movw	r3, #5016	; 0x1398
 801387a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801387e:	689b      	ldr	r3, [r3, #8]
 8013880:	617b      	str	r3, [r7, #20]
	args = (unsigned char *)(ptr + HEADERS_SIZE_CMD);
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	f103 0309 	add.w	r3, r3, #9
 8013888:	613b      	str	r3, [r7, #16]
	
	// Fill in HCI packet structure
	args = UINT32_TO_STREAM(args, algoEncryptedFlag);
 801388a:	6938      	ldr	r0, [r7, #16]
 801388c:	6879      	ldr	r1, [r7, #4]
 801388e:	f7fe f965 	bl	8011b5c <UINT32_TO_STREAM_f>
 8013892:	6138      	str	r0, [r7, #16]
	ret = EFAIL;
 8013894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013898:	60fb      	str	r3, [r7, #12]
	
	hci_command_send(HCI_CMND_WLAN_IOCTL_SIMPLE_CONFIG_START, ptr, 
 801389a:	f04f 000a 	mov.w	r0, #10
 801389e:	6979      	ldr	r1, [r7, #20]
 80138a0:	f04f 0204 	mov.w	r2, #4
 80138a4:	f7ff f858 	bl	8012958 <hci_command_send>
									 WLAN_SMART_CONFIG_START_PARAMS_LEN);
	
	// Wait for command complete event
	SimpleLinkWaitEvent(HCI_CMND_WLAN_IOCTL_SIMPLE_CONFIG_START, &ret);
 80138a8:	f107 030c 	add.w	r3, r7, #12
 80138ac:	f04f 000a 	mov.w	r0, #10
 80138b0:	4619      	mov	r1, r3
 80138b2:	f7ff f823 	bl	80128fc <SimpleLinkWaitEvent>
	
	return(ret);    
 80138b6:	68fb      	ldr	r3, [r7, #12]
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	f107 0718 	add.w	r7, r7, #24
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop

080138c4 <__errno>:
 80138c4:	f240 7330 	movw	r3, #1840	; 0x730
 80138c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80138cc:	6818      	ldr	r0, [r3, #0]
 80138ce:	4770      	bx	lr

080138d0 <memcpy>:
 80138d0:	2a0f      	cmp	r2, #15
 80138d2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80138d6:	f240 80a1 	bls.w	8013a1c <memcpy+0x14c>
 80138da:	ea41 0300 	orr.w	r3, r1, r0
 80138de:	079b      	lsls	r3, r3, #30
 80138e0:	f040 809e 	bne.w	8013a20 <memcpy+0x150>
 80138e4:	680c      	ldr	r4, [r1, #0]
 80138e6:	f1a2 0510 	sub.w	r5, r2, #16
 80138ea:	6004      	str	r4, [r0, #0]
 80138ec:	684b      	ldr	r3, [r1, #4]
 80138ee:	46ac      	mov	ip, r5
 80138f0:	6043      	str	r3, [r0, #4]
 80138f2:	688c      	ldr	r4, [r1, #8]
 80138f4:	f1bc 0f0f 	cmp.w	ip, #15
 80138f8:	6084      	str	r4, [r0, #8]
 80138fa:	68cc      	ldr	r4, [r1, #12]
 80138fc:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8013900:	60c4      	str	r4, [r0, #12]
 8013902:	f100 0310 	add.w	r3, r0, #16
 8013906:	f101 0410 	add.w	r4, r1, #16
 801390a:	d92b      	bls.n	8013964 <memcpy+0x94>
 801390c:	b175      	cbz	r5, 801392c <memcpy+0x5c>
 801390e:	6825      	ldr	r5, [r4, #0]
 8013910:	f1ac 0c10 	sub.w	ip, ip, #16
 8013914:	601d      	str	r5, [r3, #0]
 8013916:	6865      	ldr	r5, [r4, #4]
 8013918:	605d      	str	r5, [r3, #4]
 801391a:	68a5      	ldr	r5, [r4, #8]
 801391c:	609d      	str	r5, [r3, #8]
 801391e:	68e5      	ldr	r5, [r4, #12]
 8013920:	3410      	adds	r4, #16
 8013922:	60dd      	str	r5, [r3, #12]
 8013924:	3310      	adds	r3, #16
 8013926:	f1bc 0f0f 	cmp.w	ip, #15
 801392a:	d91b      	bls.n	8013964 <memcpy+0x94>
 801392c:	6827      	ldr	r7, [r4, #0]
 801392e:	f104 0610 	add.w	r6, r4, #16
 8013932:	601f      	str	r7, [r3, #0]
 8013934:	6867      	ldr	r7, [r4, #4]
 8013936:	f103 0510 	add.w	r5, r3, #16
 801393a:	605f      	str	r7, [r3, #4]
 801393c:	68a7      	ldr	r7, [r4, #8]
 801393e:	f1ac 0c20 	sub.w	ip, ip, #32
 8013942:	609f      	str	r7, [r3, #8]
 8013944:	68e7      	ldr	r7, [r4, #12]
 8013946:	60df      	str	r7, [r3, #12]
 8013948:	6924      	ldr	r4, [r4, #16]
 801394a:	611c      	str	r4, [r3, #16]
 801394c:	6877      	ldr	r7, [r6, #4]
 801394e:	f106 0410 	add.w	r4, r6, #16
 8013952:	606f      	str	r7, [r5, #4]
 8013954:	68b7      	ldr	r7, [r6, #8]
 8013956:	3320      	adds	r3, #32
 8013958:	60af      	str	r7, [r5, #8]
 801395a:	68f6      	ldr	r6, [r6, #12]
 801395c:	f1bc 0f0f 	cmp.w	ip, #15
 8013960:	60ee      	str	r6, [r5, #12]
 8013962:	d8e3      	bhi.n	801392c <memcpy+0x5c>
 8013964:	f1a2 0810 	sub.w	r8, r2, #16
 8013968:	f028 030f 	bic.w	r3, r8, #15
 801396c:	f002 040f 	and.w	r4, r2, #15
 8013970:	f103 0c10 	add.w	ip, r3, #16
 8013974:	2c03      	cmp	r4, #3
 8013976:	eb00 030c 	add.w	r3, r0, ip
 801397a:	eb01 080c 	add.w	r8, r1, ip
 801397e:	d951      	bls.n	8013a24 <memcpy+0x154>
 8013980:	1f21      	subs	r1, r4, #4
 8013982:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8013986:	4644      	mov	r4, r8
 8013988:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
 801398c:	f854 6b04 	ldr.w	r6, [r4], #4
 8013990:	ebc8 010c 	rsb	r1, r8, ip
 8013994:	f10c 0c04 	add.w	ip, ip, #4
 8013998:	461d      	mov	r5, r3
 801399a:	4564      	cmp	r4, ip
 801399c:	f845 6b04 	str.w	r6, [r5], #4
 80139a0:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80139a4:	d012      	beq.n	80139cc <memcpy+0xfc>
 80139a6:	b129      	cbz	r1, 80139b4 <memcpy+0xe4>
 80139a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80139ac:	4564      	cmp	r4, ip
 80139ae:	f845 1b04 	str.w	r1, [r5], #4
 80139b2:	d00b      	beq.n	80139cc <memcpy+0xfc>
 80139b4:	4627      	mov	r7, r4
 80139b6:	f857 1b04 	ldr.w	r1, [r7], #4
 80139ba:	462e      	mov	r6, r5
 80139bc:	f846 1b04 	str.w	r1, [r6], #4
 80139c0:	6864      	ldr	r4, [r4, #4]
 80139c2:	606c      	str	r4, [r5, #4]
 80139c4:	1d3c      	adds	r4, r7, #4
 80139c6:	1d35      	adds	r5, r6, #4
 80139c8:	4564      	cmp	r4, ip
 80139ca:	d1f3      	bne.n	80139b4 <memcpy+0xe4>
 80139cc:	f109 0c01 	add.w	ip, r9, #1
 80139d0:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80139d4:	f002 0203 	and.w	r2, r2, #3
 80139d8:	eb08 0109 	add.w	r1, r8, r9
 80139dc:	444b      	add	r3, r9
 80139de:	b1d2      	cbz	r2, 8013a16 <memcpy+0x146>
 80139e0:	780d      	ldrb	r5, [r1, #0]
 80139e2:	189a      	adds	r2, r3, r2
 80139e4:	43dc      	mvns	r4, r3
 80139e6:	f803 5b01 	strb.w	r5, [r3], #1
 80139ea:	1914      	adds	r4, r2, r4
 80139ec:	4293      	cmp	r3, r2
 80139ee:	f004 0401 	and.w	r4, r4, #1
 80139f2:	d010      	beq.n	8013a16 <memcpy+0x146>
 80139f4:	b12c      	cbz	r4, 8013a02 <memcpy+0x132>
 80139f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80139fa:	f803 4b01 	strb.w	r4, [r3], #1
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d009      	beq.n	8013a16 <memcpy+0x146>
 8013a02:	784d      	ldrb	r5, [r1, #1]
 8013a04:	461c      	mov	r4, r3
 8013a06:	f804 5b01 	strb.w	r5, [r4], #1
 8013a0a:	788d      	ldrb	r5, [r1, #2]
 8013a0c:	3102      	adds	r1, #2
 8013a0e:	705d      	strb	r5, [r3, #1]
 8013a10:	1c63      	adds	r3, r4, #1
 8013a12:	4293      	cmp	r3, r2
 8013a14:	d1f5      	bne.n	8013a02 <memcpy+0x132>
 8013a16:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8013a1a:	4770      	bx	lr
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	e7de      	b.n	80139de <memcpy+0x10e>
 8013a20:	4603      	mov	r3, r0
 8013a22:	e7dd      	b.n	80139e0 <memcpy+0x110>
 8013a24:	4641      	mov	r1, r8
 8013a26:	4622      	mov	r2, r4
 8013a28:	e7d9      	b.n	80139de <memcpy+0x10e>
 8013a2a:	bf00      	nop

08013a2c <memset>:
 8013a2c:	b4f0      	push	{r4, r5, r6, r7}
 8013a2e:	0784      	lsls	r4, r0, #30
 8013a30:	4603      	mov	r3, r0
 8013a32:	f000 808d 	beq.w	8013b50 <memset+0x124>
 8013a36:	1e54      	subs	r4, r2, #1
 8013a38:	2a00      	cmp	r2, #0
 8013a3a:	f000 8087 	beq.w	8013b4c <memset+0x120>
 8013a3e:	07e5      	lsls	r5, r4, #31
 8013a40:	b2ce      	uxtb	r6, r1
 8013a42:	d411      	bmi.n	8013a68 <memset+0x3c>
 8013a44:	461a      	mov	r2, r3
 8013a46:	f802 6b01 	strb.w	r6, [r2], #1
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	4615      	mov	r5, r2
 8013a4e:	0792      	lsls	r2, r2, #30
 8013a50:	d010      	beq.n	8013a74 <memset+0x48>
 8013a52:	1e62      	subs	r2, r4, #1
 8013a54:	2c00      	cmp	r4, #0
 8013a56:	d079      	beq.n	8013b4c <memset+0x120>
 8013a58:	f803 6b01 	strb.w	r6, [r3], #1
 8013a5c:	4614      	mov	r4, r2
 8013a5e:	079a      	lsls	r2, r3, #30
 8013a60:	461d      	mov	r5, r3
 8013a62:	d007      	beq.n	8013a74 <memset+0x48>
 8013a64:	3c01      	subs	r4, #1
 8013a66:	e7ed      	b.n	8013a44 <memset+0x18>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	f803 6b01 	strb.w	r6, [r3], #1
 8013a6e:	079a      	lsls	r2, r3, #30
 8013a70:	461d      	mov	r5, r3
 8013a72:	d1f7      	bne.n	8013a64 <memset+0x38>
 8013a74:	2c03      	cmp	r4, #3
 8013a76:	d952      	bls.n	8013b1e <memset+0xf2>
 8013a78:	b2ce      	uxtb	r6, r1
 8013a7a:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8013a7e:	2c0f      	cmp	r4, #15
 8013a80:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8013a84:	d92d      	bls.n	8013ae2 <memset+0xb6>
 8013a86:	f1a4 0210 	sub.w	r2, r4, #16
 8013a8a:	4617      	mov	r7, r2
 8013a8c:	2f0f      	cmp	r7, #15
 8013a8e:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8013a92:	602b      	str	r3, [r5, #0]
 8013a94:	606b      	str	r3, [r5, #4]
 8013a96:	60ab      	str	r3, [r5, #8]
 8013a98:	60eb      	str	r3, [r5, #12]
 8013a9a:	f105 0210 	add.w	r2, r5, #16
 8013a9e:	d916      	bls.n	8013ace <memset+0xa2>
 8013aa0:	b13e      	cbz	r6, 8013ab2 <memset+0x86>
 8013aa2:	3f10      	subs	r7, #16
 8013aa4:	6013      	str	r3, [r2, #0]
 8013aa6:	6053      	str	r3, [r2, #4]
 8013aa8:	6093      	str	r3, [r2, #8]
 8013aaa:	60d3      	str	r3, [r2, #12]
 8013aac:	3210      	adds	r2, #16
 8013aae:	2f0f      	cmp	r7, #15
 8013ab0:	d90d      	bls.n	8013ace <memset+0xa2>
 8013ab2:	3f20      	subs	r7, #32
 8013ab4:	f102 0610 	add.w	r6, r2, #16
 8013ab8:	6013      	str	r3, [r2, #0]
 8013aba:	6053      	str	r3, [r2, #4]
 8013abc:	6093      	str	r3, [r2, #8]
 8013abe:	60d3      	str	r3, [r2, #12]
 8013ac0:	6113      	str	r3, [r2, #16]
 8013ac2:	6153      	str	r3, [r2, #20]
 8013ac4:	6193      	str	r3, [r2, #24]
 8013ac6:	61d3      	str	r3, [r2, #28]
 8013ac8:	3220      	adds	r2, #32
 8013aca:	2f0f      	cmp	r7, #15
 8013acc:	d8f1      	bhi.n	8013ab2 <memset+0x86>
 8013ace:	f1a4 0210 	sub.w	r2, r4, #16
 8013ad2:	f022 020f 	bic.w	r2, r2, #15
 8013ad6:	f004 040f 	and.w	r4, r4, #15
 8013ada:	3210      	adds	r2, #16
 8013adc:	2c03      	cmp	r4, #3
 8013ade:	4415      	add	r5, r2
 8013ae0:	d91d      	bls.n	8013b1e <memset+0xf2>
 8013ae2:	1f27      	subs	r7, r4, #4
 8013ae4:	463e      	mov	r6, r7
 8013ae6:	462a      	mov	r2, r5
 8013ae8:	2e03      	cmp	r6, #3
 8013aea:	f842 3b04 	str.w	r3, [r2], #4
 8013aee:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8013af2:	d90d      	bls.n	8013b10 <memset+0xe4>
 8013af4:	b127      	cbz	r7, 8013b00 <memset+0xd4>
 8013af6:	3e04      	subs	r6, #4
 8013af8:	2e03      	cmp	r6, #3
 8013afa:	f842 3b04 	str.w	r3, [r2], #4
 8013afe:	d907      	bls.n	8013b10 <memset+0xe4>
 8013b00:	4617      	mov	r7, r2
 8013b02:	f847 3b04 	str.w	r3, [r7], #4
 8013b06:	3e08      	subs	r6, #8
 8013b08:	6053      	str	r3, [r2, #4]
 8013b0a:	1d3a      	adds	r2, r7, #4
 8013b0c:	2e03      	cmp	r6, #3
 8013b0e:	d8f7      	bhi.n	8013b00 <memset+0xd4>
 8013b10:	1f23      	subs	r3, r4, #4
 8013b12:	f023 0203 	bic.w	r2, r3, #3
 8013b16:	1d13      	adds	r3, r2, #4
 8013b18:	f004 0403 	and.w	r4, r4, #3
 8013b1c:	18ed      	adds	r5, r5, r3
 8013b1e:	b1ac      	cbz	r4, 8013b4c <memset+0x120>
 8013b20:	b2c9      	uxtb	r1, r1
 8013b22:	43ea      	mvns	r2, r5
 8013b24:	192c      	adds	r4, r5, r4
 8013b26:	f805 1b01 	strb.w	r1, [r5], #1
 8013b2a:	18a3      	adds	r3, r4, r2
 8013b2c:	42a5      	cmp	r5, r4
 8013b2e:	f003 0201 	and.w	r2, r3, #1
 8013b32:	d00b      	beq.n	8013b4c <memset+0x120>
 8013b34:	b11a      	cbz	r2, 8013b3e <memset+0x112>
 8013b36:	f805 1b01 	strb.w	r1, [r5], #1
 8013b3a:	42a5      	cmp	r5, r4
 8013b3c:	d006      	beq.n	8013b4c <memset+0x120>
 8013b3e:	462b      	mov	r3, r5
 8013b40:	f803 1b01 	strb.w	r1, [r3], #1
 8013b44:	7069      	strb	r1, [r5, #1]
 8013b46:	1c5d      	adds	r5, r3, #1
 8013b48:	42a5      	cmp	r5, r4
 8013b4a:	d1f8      	bne.n	8013b3e <memset+0x112>
 8013b4c:	bcf0      	pop	{r4, r5, r6, r7}
 8013b4e:	4770      	bx	lr
 8013b50:	4605      	mov	r5, r0
 8013b52:	4614      	mov	r4, r2
 8013b54:	e78e      	b.n	8013a74 <memset+0x48>
 8013b56:	bf00      	nop

08013b58 <strchr>:
 8013b58:	b2c9      	uxtb	r1, r1
 8013b5a:	b4f0      	push	{r4, r5, r6, r7}
 8013b5c:	2900      	cmp	r1, #0
 8013b5e:	d04b      	beq.n	8013bf8 <strchr+0xa0>
 8013b60:	0782      	lsls	r2, r0, #30
 8013b62:	d00f      	beq.n	8013b84 <strchr+0x2c>
 8013b64:	7802      	ldrb	r2, [r0, #0]
 8013b66:	2a00      	cmp	r2, #0
 8013b68:	d071      	beq.n	8013c4e <strchr+0xf6>
 8013b6a:	4291      	cmp	r1, r2
 8013b6c:	d042      	beq.n	8013bf4 <strchr+0x9c>
 8013b6e:	1c43      	adds	r3, r0, #1
 8013b70:	e005      	b.n	8013b7e <strchr+0x26>
 8013b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b76:	2a00      	cmp	r2, #0
 8013b78:	d03b      	beq.n	8013bf2 <strchr+0x9a>
 8013b7a:	4291      	cmp	r1, r2
 8013b7c:	d03a      	beq.n	8013bf4 <strchr+0x9c>
 8013b7e:	079a      	lsls	r2, r3, #30
 8013b80:	4618      	mov	r0, r3
 8013b82:	d1f6      	bne.n	8013b72 <strchr+0x1a>
 8013b84:	6803      	ldr	r3, [r0, #0]
 8013b86:	ea41 2701 	orr.w	r7, r1, r1, lsl #8
 8013b8a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8013b8e:	ea22 0203 	bic.w	r2, r2, r3
 8013b92:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013b96:	ea47 4707 	orr.w	r7, r7, r7, lsl #16
 8013b9a:	d11c      	bne.n	8013bd6 <strchr+0x7e>
 8013b9c:	407b      	eors	r3, r7
 8013b9e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8013ba2:	ea22 0303 	bic.w	r3, r2, r3
 8013ba6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8013baa:	d114      	bne.n	8013bd6 <strchr+0x7e>
 8013bac:	1d02      	adds	r2, r0, #4
 8013bae:	e002      	b.n	8013bb6 <strchr+0x5e>
 8013bb0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8013bb4:	d10f      	bne.n	8013bd6 <strchr+0x7e>
 8013bb6:	4610      	mov	r0, r2
 8013bb8:	f852 3b04 	ldr.w	r3, [r2], #4
 8013bbc:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
 8013bc0:	ea87 0403 	eor.w	r4, r7, r3
 8013bc4:	ea26 0303 	bic.w	r3, r6, r3
 8013bc8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8013bcc:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8013bd0:	ea25 0404 	bic.w	r4, r5, r4
 8013bd4:	d0ec      	beq.n	8013bb0 <strchr+0x58>
 8013bd6:	7802      	ldrb	r2, [r0, #0]
 8013bd8:	2a00      	cmp	r2, #0
 8013bda:	d038      	beq.n	8013c4e <strchr+0xf6>
 8013bdc:	4291      	cmp	r1, r2
 8013bde:	d009      	beq.n	8013bf4 <strchr+0x9c>
 8013be0:	1c43      	adds	r3, r0, #1
 8013be2:	e001      	b.n	8013be8 <strchr+0x90>
 8013be4:	4291      	cmp	r1, r2
 8013be6:	d005      	beq.n	8013bf4 <strchr+0x9c>
 8013be8:	4618      	mov	r0, r3
 8013bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bee:	2a00      	cmp	r2, #0
 8013bf0:	d1f8      	bne.n	8013be4 <strchr+0x8c>
 8013bf2:	4610      	mov	r0, r2
 8013bf4:	bcf0      	pop	{r4, r5, r6, r7}
 8013bf6:	4770      	bx	lr
 8013bf8:	0783      	lsls	r3, r0, #30
 8013bfa:	d00b      	beq.n	8013c14 <strchr+0xbc>
 8013bfc:	7802      	ldrb	r2, [r0, #0]
 8013bfe:	2a00      	cmp	r2, #0
 8013c00:	d0f8      	beq.n	8013bf4 <strchr+0x9c>
 8013c02:	1c43      	adds	r3, r0, #1
 8013c04:	e003      	b.n	8013c0e <strchr+0xb6>
 8013c06:	7801      	ldrb	r1, [r0, #0]
 8013c08:	3301      	adds	r3, #1
 8013c0a:	2900      	cmp	r1, #0
 8013c0c:	d0f2      	beq.n	8013bf4 <strchr+0x9c>
 8013c0e:	0799      	lsls	r1, r3, #30
 8013c10:	4618      	mov	r0, r3
 8013c12:	d1f8      	bne.n	8013c06 <strchr+0xae>
 8013c14:	6801      	ldr	r1, [r0, #0]
 8013c16:	f1a1 3301 	sub.w	r3, r1, #16843009	; 0x1010101
 8013c1a:	ea23 0201 	bic.w	r2, r3, r1
 8013c1e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013c22:	d10a      	bne.n	8013c3a <strchr+0xe2>
 8013c24:	1d03      	adds	r3, r0, #4
 8013c26:	4618      	mov	r0, r3
 8013c28:	f853 1b04 	ldr.w	r1, [r3], #4
 8013c2c:	f1a1 3401 	sub.w	r4, r1, #16843009	; 0x1010101
 8013c30:	ea24 0201 	bic.w	r2, r4, r1
 8013c34:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013c38:	d0f5      	beq.n	8013c26 <strchr+0xce>
 8013c3a:	7803      	ldrb	r3, [r0, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d0d9      	beq.n	8013bf4 <strchr+0x9c>
 8013c40:	1c42      	adds	r2, r0, #1
 8013c42:	7811      	ldrb	r1, [r2, #0]
 8013c44:	4610      	mov	r0, r2
 8013c46:	3201      	adds	r2, #1
 8013c48:	2900      	cmp	r1, #0
 8013c4a:	d1fa      	bne.n	8013c42 <strchr+0xea>
 8013c4c:	e7d2      	b.n	8013bf4 <strchr+0x9c>
 8013c4e:	4610      	mov	r0, r2
 8013c50:	e7d0      	b.n	8013bf4 <strchr+0x9c>
 8013c52:	bf00      	nop

08013c54 <strcmp>:
 8013c54:	ea80 0201 	eor.w	r2, r0, r1
 8013c58:	f012 0f03 	tst.w	r2, #3
 8013c5c:	f040 803a 	bne.w	8013cd4 <strcmp_unaligned>
 8013c60:	f010 0203 	ands.w	r2, r0, #3
 8013c64:	f020 0003 	bic.w	r0, r0, #3
 8013c68:	f021 0103 	bic.w	r1, r1, #3
 8013c6c:	f850 cb04 	ldr.w	ip, [r0], #4
 8013c70:	bf08      	it	eq
 8013c72:	f851 3b04 	ldreq.w	r3, [r1], #4
 8013c76:	d00d      	beq.n	8013c94 <strcmp+0x40>
 8013c78:	f082 0203 	eor.w	r2, r2, #3
 8013c7c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013c80:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013c84:	fa23 f202 	lsr.w	r2, r3, r2
 8013c88:	f851 3b04 	ldr.w	r3, [r1], #4
 8013c8c:	ea4c 0c02 	orr.w	ip, ip, r2
 8013c90:	ea43 0302 	orr.w	r3, r3, r2
 8013c94:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8013c98:	459c      	cmp	ip, r3
 8013c9a:	bf01      	itttt	eq
 8013c9c:	ea22 020c 	biceq.w	r2, r2, ip
 8013ca0:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8013ca4:	f850 cb04 	ldreq.w	ip, [r0], #4
 8013ca8:	f851 3b04 	ldreq.w	r3, [r1], #4
 8013cac:	d0f2      	beq.n	8013c94 <strcmp+0x40>
 8013cae:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8013cb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8013cb6:	2801      	cmp	r0, #1
 8013cb8:	bf28      	it	cs
 8013cba:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8013cbe:	bf08      	it	eq
 8013cc0:	0a1b      	lsreq	r3, r3, #8
 8013cc2:	d0f4      	beq.n	8013cae <strcmp+0x5a>
 8013cc4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8013cc8:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8013ccc:	eba0 0003 	sub.w	r0, r0, r3
 8013cd0:	4770      	bx	lr
 8013cd2:	bf00      	nop

08013cd4 <strcmp_unaligned>:
 8013cd4:	f010 0f03 	tst.w	r0, #3
 8013cd8:	d00a      	beq.n	8013cf0 <strcmp_unaligned+0x1c>
 8013cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ce2:	2a01      	cmp	r2, #1
 8013ce4:	bf28      	it	cs
 8013ce6:	429a      	cmpcs	r2, r3
 8013ce8:	d0f4      	beq.n	8013cd4 <strcmp_unaligned>
 8013cea:	eba2 0003 	sub.w	r0, r2, r3
 8013cee:	4770      	bx	lr
 8013cf0:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8013cf4:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8013cf8:	f04f 0201 	mov.w	r2, #1
 8013cfc:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8013d00:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8013d04:	f001 0c03 	and.w	ip, r1, #3
 8013d08:	f021 0103 	bic.w	r1, r1, #3
 8013d0c:	f850 4b04 	ldr.w	r4, [r0], #4
 8013d10:	f851 5b04 	ldr.w	r5, [r1], #4
 8013d14:	f1bc 0f02 	cmp.w	ip, #2
 8013d18:	d026      	beq.n	8013d68 <strcmp_unaligned+0x94>
 8013d1a:	d84b      	bhi.n	8013db4 <strcmp_unaligned+0xe0>
 8013d1c:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8013d20:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8013d24:	eba4 0302 	sub.w	r3, r4, r2
 8013d28:	ea23 0304 	bic.w	r3, r3, r4
 8013d2c:	d10d      	bne.n	8013d4a <strcmp_unaligned+0x76>
 8013d2e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8013d32:	bf08      	it	eq
 8013d34:	f851 5b04 	ldreq.w	r5, [r1], #4
 8013d38:	d10a      	bne.n	8013d50 <strcmp_unaligned+0x7c>
 8013d3a:	ea8c 0c04 	eor.w	ip, ip, r4
 8013d3e:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8013d42:	d10c      	bne.n	8013d5e <strcmp_unaligned+0x8a>
 8013d44:	f850 4b04 	ldr.w	r4, [r0], #4
 8013d48:	e7e8      	b.n	8013d1c <strcmp_unaligned+0x48>
 8013d4a:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8013d4e:	e05c      	b.n	8013e0a <strcmp_unaligned+0x136>
 8013d50:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8013d54:	d152      	bne.n	8013dfc <strcmp_unaligned+0x128>
 8013d56:	780d      	ldrb	r5, [r1, #0]
 8013d58:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8013d5c:	e055      	b.n	8013e0a <strcmp_unaligned+0x136>
 8013d5e:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8013d62:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8013d66:	e050      	b.n	8013e0a <strcmp_unaligned+0x136>
 8013d68:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8013d6c:	eba4 0302 	sub.w	r3, r4, r2
 8013d70:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8013d74:	ea23 0304 	bic.w	r3, r3, r4
 8013d78:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8013d7c:	d117      	bne.n	8013dae <strcmp_unaligned+0xda>
 8013d7e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8013d82:	bf08      	it	eq
 8013d84:	f851 5b04 	ldreq.w	r5, [r1], #4
 8013d88:	d107      	bne.n	8013d9a <strcmp_unaligned+0xc6>
 8013d8a:	ea8c 0c04 	eor.w	ip, ip, r4
 8013d8e:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8013d92:	d108      	bne.n	8013da6 <strcmp_unaligned+0xd2>
 8013d94:	f850 4b04 	ldr.w	r4, [r0], #4
 8013d98:	e7e6      	b.n	8013d68 <strcmp_unaligned+0x94>
 8013d9a:	041b      	lsls	r3, r3, #16
 8013d9c:	d12e      	bne.n	8013dfc <strcmp_unaligned+0x128>
 8013d9e:	880d      	ldrh	r5, [r1, #0]
 8013da0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8013da4:	e031      	b.n	8013e0a <strcmp_unaligned+0x136>
 8013da6:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8013daa:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8013dae:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8013db2:	e02a      	b.n	8013e0a <strcmp_unaligned+0x136>
 8013db4:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8013db8:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8013dbc:	eba4 0302 	sub.w	r3, r4, r2
 8013dc0:	ea23 0304 	bic.w	r3, r3, r4
 8013dc4:	d10d      	bne.n	8013de2 <strcmp_unaligned+0x10e>
 8013dc6:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8013dca:	bf08      	it	eq
 8013dcc:	f851 5b04 	ldreq.w	r5, [r1], #4
 8013dd0:	d10a      	bne.n	8013de8 <strcmp_unaligned+0x114>
 8013dd2:	ea8c 0c04 	eor.w	ip, ip, r4
 8013dd6:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8013dda:	d10a      	bne.n	8013df2 <strcmp_unaligned+0x11e>
 8013ddc:	f850 4b04 	ldr.w	r4, [r0], #4
 8013de0:	e7e8      	b.n	8013db4 <strcmp_unaligned+0xe0>
 8013de2:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8013de6:	e010      	b.n	8013e0a <strcmp_unaligned+0x136>
 8013de8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8013dec:	d006      	beq.n	8013dfc <strcmp_unaligned+0x128>
 8013dee:	f851 5b04 	ldr.w	r5, [r1], #4
 8013df2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8013df6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8013dfa:	e006      	b.n	8013e0a <strcmp_unaligned+0x136>
 8013dfc:	f04f 0000 	mov.w	r0, #0
 8013e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e04:	f85d 5b04 	ldr.w	r5, [sp], #4
 8013e08:	4770      	bx	lr
 8013e0a:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8013e0e:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8013e12:	2801      	cmp	r0, #1
 8013e14:	bf28      	it	cs
 8013e16:	4290      	cmpcs	r0, r2
 8013e18:	bf04      	itt	eq
 8013e1a:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8013e1e:	0a2d      	lsreq	r5, r5, #8
 8013e20:	d0f3      	beq.n	8013e0a <strcmp_unaligned+0x136>
 8013e22:	eba2 0000 	sub.w	r0, r2, r0
 8013e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e2a:	f85d 5b04 	ldr.w	r5, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <strlen>:
 8013e30:	f020 0103 	bic.w	r1, r0, #3
 8013e34:	f010 0003 	ands.w	r0, r0, #3
 8013e38:	f1c0 0000 	rsb	r0, r0, #0
 8013e3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8013e40:	f100 0c04 	add.w	ip, r0, #4
 8013e44:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013e48:	f06f 0200 	mvn.w	r2, #0
 8013e4c:	bf1c      	itt	ne
 8013e4e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8013e52:	4313      	orrne	r3, r2
 8013e54:	f04f 0c01 	mov.w	ip, #1
 8013e58:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8013e5c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8013e60:	eba3 020c 	sub.w	r2, r3, ip
 8013e64:	ea22 0203 	bic.w	r2, r2, r3
 8013e68:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8013e6c:	bf04      	itt	eq
 8013e6e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8013e72:	3004      	addeq	r0, #4
 8013e74:	d0f4      	beq.n	8013e60 <strlen+0x30>
 8013e76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013e7a:	bf1f      	itttt	ne
 8013e7c:	3001      	addne	r0, #1
 8013e7e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8013e82:	3001      	addne	r0, #1
 8013e84:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8013e88:	bf18      	it	ne
 8013e8a:	3001      	addne	r0, #1
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop

08013e90 <strncmp>:
 8013e90:	b4f0      	push	{r4, r5, r6, r7}
 8013e92:	2a00      	cmp	r2, #0
 8013e94:	f000 8083 	beq.w	8013f9e <strncmp+0x10e>
 8013e98:	ea41 0300 	orr.w	r3, r1, r0
 8013e9c:	f013 0503 	ands.w	r5, r3, #3
 8013ea0:	d02e      	beq.n	8013f00 <strncmp+0x70>
 8013ea2:	1e55      	subs	r5, r2, #1
 8013ea4:	7803      	ldrb	r3, [r0, #0]
 8013ea6:	780a      	ldrb	r2, [r1, #0]
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d126      	bne.n	8013efa <strncmp+0x6a>
 8013eac:	2d00      	cmp	r5, #0
 8013eae:	d07a      	beq.n	8013fa6 <strncmp+0x116>
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d07a      	beq.n	8013faa <strncmp+0x11a>
 8013eb4:	3501      	adds	r5, #1
 8013eb6:	1c8c      	adds	r4, r1, #2
 8013eb8:	194d      	adds	r5, r1, r5
 8013eba:	1b2b      	subs	r3, r5, r4
 8013ebc:	07db      	lsls	r3, r3, #31
 8013ebe:	d516      	bpl.n	8013eee <strncmp+0x5e>
 8013ec0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013ec4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8013ec8:	4293      	cmp	r3, r2
 8013eca:	d116      	bne.n	8013efa <strncmp+0x6a>
 8013ecc:	1ccc      	adds	r4, r1, #3
 8013ece:	b973      	cbnz	r3, 8013eee <strncmp+0x5e>
 8013ed0:	e036      	b.n	8013f40 <strncmp+0xb0>
 8013ed2:	42ac      	cmp	r4, r5
 8013ed4:	d034      	beq.n	8013f40 <strncmp+0xb0>
 8013ed6:	3401      	adds	r4, #1
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d031      	beq.n	8013f40 <strncmp+0xb0>
 8013edc:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8013ee0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013ee4:	3401      	adds	r4, #1
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d107      	bne.n	8013efa <strncmp+0x6a>
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d028      	beq.n	8013f40 <strncmp+0xb0>
 8013eee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013ef2:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d0eb      	beq.n	8013ed2 <strncmp+0x42>
 8013efa:	1a98      	subs	r0, r3, r2
 8013efc:	bcf0      	pop	{r4, r5, r6, r7}
 8013efe:	4770      	bx	lr
 8013f00:	2a03      	cmp	r2, #3
 8013f02:	d9ce      	bls.n	8013ea2 <strncmp+0x12>
 8013f04:	6804      	ldr	r4, [r0, #0]
 8013f06:	680b      	ldr	r3, [r1, #0]
 8013f08:	429c      	cmp	r4, r3
 8013f0a:	d1ca      	bne.n	8013ea2 <strncmp+0x12>
 8013f0c:	1f13      	subs	r3, r2, #4
 8013f0e:	d04c      	beq.n	8013faa <strncmp+0x11a>
 8013f10:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8013f14:	ea22 0404 	bic.w	r4, r2, r4
 8013f18:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8013f1c:	d143      	bne.n	8013fa6 <strncmp+0x116>
 8013f1e:	075a      	lsls	r2, r3, #29
 8013f20:	d52f      	bpl.n	8013f82 <strncmp+0xf2>
 8013f22:	6842      	ldr	r2, [r0, #4]
 8013f24:	684c      	ldr	r4, [r1, #4]
 8013f26:	3004      	adds	r0, #4
 8013f28:	3104      	adds	r1, #4
 8013f2a:	42a2      	cmp	r2, r4
 8013f2c:	d139      	bne.n	8013fa2 <strncmp+0x112>
 8013f2e:	3b04      	subs	r3, #4
 8013f30:	d006      	beq.n	8013f40 <strncmp+0xb0>
 8013f32:	f1a2 3401 	sub.w	r4, r2, #16843009	; 0x1010101
 8013f36:	ea24 0202 	bic.w	r2, r4, r2
 8013f3a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8013f3e:	d020      	beq.n	8013f82 <strncmp+0xf2>
 8013f40:	2000      	movs	r0, #0
 8013f42:	e7db      	b.n	8013efc <strncmp+0x6c>
 8013f44:	6872      	ldr	r2, [r6, #4]
 8013f46:	6864      	ldr	r4, [r4, #4]
 8013f48:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8013f4c:	42a2      	cmp	r2, r4
 8013f4e:	ea25 0502 	bic.w	r5, r5, r2
 8013f52:	d126      	bne.n	8013fa2 <strncmp+0x112>
 8013f54:	3b04      	subs	r3, #4
 8013f56:	f100 0004 	add.w	r0, r0, #4
 8013f5a:	f101 0104 	add.w	r1, r1, #4
 8013f5e:	d0ef      	beq.n	8013f40 <strncmp+0xb0>
 8013f60:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8013f64:	d1ec      	bne.n	8013f40 <strncmp+0xb0>
 8013f66:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013f6a:	687c      	ldr	r4, [r7, #4]
 8013f6c:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8013f70:	42a2      	cmp	r2, r4
 8013f72:	ea25 0502 	bic.w	r5, r5, r2
 8013f76:	d114      	bne.n	8013fa2 <strncmp+0x112>
 8013f78:	3b04      	subs	r3, #4
 8013f7a:	d0e1      	beq.n	8013f40 <strncmp+0xb0>
 8013f7c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8013f80:	d1de      	bne.n	8013f40 <strncmp+0xb0>
 8013f82:	460c      	mov	r4, r1
 8013f84:	4606      	mov	r6, r0
 8013f86:	3104      	adds	r1, #4
 8013f88:	3004      	adds	r0, #4
 8013f8a:	2b03      	cmp	r3, #3
 8013f8c:	4684      	mov	ip, r0
 8013f8e:	460f      	mov	r7, r1
 8013f90:	d8d8      	bhi.n	8013f44 <strncmp+0xb4>
 8013f92:	1e5d      	subs	r5, r3, #1
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d185      	bne.n	8013ea4 <strncmp+0x14>
 8013f98:	7933      	ldrb	r3, [r6, #4]
 8013f9a:	7922      	ldrb	r2, [r4, #4]
 8013f9c:	e7ad      	b.n	8013efa <strncmp+0x6a>
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	e7ac      	b.n	8013efc <strncmp+0x6c>
 8013fa2:	1e5d      	subs	r5, r3, #1
 8013fa4:	e77e      	b.n	8013ea4 <strncmp+0x14>
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	e7a8      	b.n	8013efc <strncmp+0x6c>
 8013faa:	4618      	mov	r0, r3
 8013fac:	e7a6      	b.n	8013efc <strncmp+0x6c>
 8013fae:	bf00      	nop

08013fb0 <strncpy>:
 8013fb0:	ea41 0300 	orr.w	r3, r1, r0
 8013fb4:	079b      	lsls	r3, r3, #30
 8013fb6:	b4f0      	push	{r4, r5, r6, r7}
 8013fb8:	d174      	bne.n	80140a4 <strncpy+0xf4>
 8013fba:	2a03      	cmp	r2, #3
 8013fbc:	d972      	bls.n	80140a4 <strncpy+0xf4>
 8013fbe:	460c      	mov	r4, r1
 8013fc0:	f854 5b04 	ldr.w	r5, [r4], #4
 8013fc4:	1f16      	subs	r6, r2, #4
 8013fc6:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 8013fca:	ea27 0705 	bic.w	r7, r7, r5
 8013fce:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 8013fd8:	d131      	bne.n	801403e <strncpy+0x8e>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2e03      	cmp	r6, #3
 8013fde:	4632      	mov	r2, r6
 8013fe0:	f843 5b04 	str.w	r5, [r3], #4
 8013fe4:	d92a      	bls.n	801403c <strncpy+0x8c>
 8013fe6:	f1bc 0f00 	cmp.w	ip, #0
 8013fea:	d00a      	beq.n	8014002 <strncpy+0x52>
 8013fec:	4621      	mov	r1, r4
 8013fee:	f854 5b04 	ldr.w	r5, [r4], #4
 8013ff2:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8013ff6:	ea26 0605 	bic.w	r6, r6, r5
 8013ffa:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8013ffe:	d018      	beq.n	8014032 <strncpy+0x82>
 8014000:	e01d      	b.n	801403e <strncpy+0x8e>
 8014002:	4626      	mov	r6, r4
 8014004:	f856 5b04 	ldr.w	r5, [r6], #4
 8014008:	4621      	mov	r1, r4
 801400a:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 801400e:	ea27 0705 	bic.w	r7, r7, r5
 8014012:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 8014016:	d112      	bne.n	801403e <strncpy+0x8e>
 8014018:	f843 5b04 	str.w	r5, [r3], #4
 801401c:	6865      	ldr	r5, [r4, #4]
 801401e:	4631      	mov	r1, r6
 8014020:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8014024:	ea26 0605 	bic.w	r6, r6, r5
 8014028:	3a04      	subs	r2, #4
 801402a:	1d0c      	adds	r4, r1, #4
 801402c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8014030:	d105      	bne.n	801403e <strncpy+0x8e>
 8014032:	3a04      	subs	r2, #4
 8014034:	2a03      	cmp	r2, #3
 8014036:	f843 5b04 	str.w	r5, [r3], #4
 801403a:	d8e2      	bhi.n	8014002 <strncpy+0x52>
 801403c:	4621      	mov	r1, r4
 801403e:	b37a      	cbz	r2, 80140a0 <strncpy+0xf0>
 8014040:	780d      	ldrb	r5, [r1, #0]
 8014042:	3a01      	subs	r2, #1
 8014044:	f803 5b01 	strb.w	r5, [r3], #1
 8014048:	b19d      	cbz	r5, 8014072 <strncpy+0xc2>
 801404a:	f012 0f01 	tst.w	r2, #1
 801404e:	461c      	mov	r4, r3
 8014050:	d12a      	bne.n	80140a8 <strncpy+0xf8>
 8014052:	4623      	mov	r3, r4
 8014054:	b322      	cbz	r2, 80140a0 <strncpy+0xf0>
 8014056:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801405a:	3a01      	subs	r2, #1
 801405c:	f803 5b01 	strb.w	r5, [r3], #1
 8014060:	b13d      	cbz	r5, 8014072 <strncpy+0xc2>
 8014062:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8014066:	3a01      	subs	r2, #1
 8014068:	7065      	strb	r5, [r4, #1]
 801406a:	1c5c      	adds	r4, r3, #1
 801406c:	4623      	mov	r3, r4
 801406e:	2d00      	cmp	r5, #0
 8014070:	d1ef      	bne.n	8014052 <strncpy+0xa2>
 8014072:	b1aa      	cbz	r2, 80140a0 <strncpy+0xf0>
 8014074:	2100      	movs	r1, #0
 8014076:	189c      	adds	r4, r3, r2
 8014078:	43da      	mvns	r2, r3
 801407a:	f803 1b01 	strb.w	r1, [r3], #1
 801407e:	18a2      	adds	r2, r4, r2
 8014080:	42a3      	cmp	r3, r4
 8014082:	f002 0201 	and.w	r2, r2, #1
 8014086:	d00b      	beq.n	80140a0 <strncpy+0xf0>
 8014088:	b11a      	cbz	r2, 8014092 <strncpy+0xe2>
 801408a:	f803 1b01 	strb.w	r1, [r3], #1
 801408e:	42a3      	cmp	r3, r4
 8014090:	d006      	beq.n	80140a0 <strncpy+0xf0>
 8014092:	461a      	mov	r2, r3
 8014094:	f802 1b01 	strb.w	r1, [r2], #1
 8014098:	7059      	strb	r1, [r3, #1]
 801409a:	1c53      	adds	r3, r2, #1
 801409c:	42a3      	cmp	r3, r4
 801409e:	d1f8      	bne.n	8014092 <strncpy+0xe2>
 80140a0:	bcf0      	pop	{r4, r5, r6, r7}
 80140a2:	4770      	bx	lr
 80140a4:	4603      	mov	r3, r0
 80140a6:	e7ca      	b.n	801403e <strncpy+0x8e>
 80140a8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80140ac:	461c      	mov	r4, r3
 80140ae:	f804 5b01 	strb.w	r5, [r4], #1
 80140b2:	3a01      	subs	r2, #1
 80140b4:	4623      	mov	r3, r4
 80140b6:	2d00      	cmp	r5, #0
 80140b8:	d1cb      	bne.n	8014052 <strncpy+0xa2>
 80140ba:	e7da      	b.n	8014072 <strncpy+0xc2>

080140bc <_strtol_r>:
 80140bc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80140c0:	4c49      	ldr	r4, [pc, #292]	; (80141e8 <_strtol_r+0x12c>)
 80140c2:	b082      	sub	sp, #8
 80140c4:	f8d4 c000 	ldr.w	ip, [r4]
 80140c8:	9001      	str	r0, [sp, #4]
 80140ca:	460f      	mov	r7, r1
 80140cc:	463c      	mov	r4, r7
 80140ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 80140d2:	eb0c 0005 	add.w	r0, ip, r5
 80140d6:	7846      	ldrb	r6, [r0, #1]
 80140d8:	4627      	mov	r7, r4
 80140da:	f006 0008 	and.w	r0, r6, #8
 80140de:	b2c6      	uxtb	r6, r0
 80140e0:	2e00      	cmp	r6, #0
 80140e2:	d1f3      	bne.n	80140cc <_strtol_r+0x10>
 80140e4:	2d2d      	cmp	r5, #45	; 0x2d
 80140e6:	d061      	beq.n	80141ac <_strtol_r+0xf0>
 80140e8:	2d2b      	cmp	r5, #43	; 0x2b
 80140ea:	bf04      	itt	eq
 80140ec:	4624      	moveq	r4, r4
 80140ee:	f814 5b01 	ldrbeq.w	r5, [r4], #1
 80140f2:	46b3      	mov	fp, r6
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d141      	bne.n	801417c <_strtol_r+0xc0>
 80140f8:	2d30      	cmp	r5, #48	; 0x30
 80140fa:	d043      	beq.n	8014184 <_strtol_r+0xc8>
 80140fc:	230a      	movs	r3, #10
 80140fe:	469a      	mov	sl, r3
 8014100:	f1bb 0f00 	cmp.w	fp, #0
 8014104:	bf0c      	ite	eq
 8014106:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000
 801410a:	f04f 4700 	movne.w	r7, #2147483648	; 0x80000000
 801410e:	fbb7 f9fa 	udiv	r9, r7, sl
 8014112:	fb0a 7019 	mls	r0, sl, r9, r7
 8014116:	9000      	str	r0, [sp, #0]
 8014118:	2000      	movs	r0, #0
 801411a:	4680      	mov	r8, r0
 801411c:	e00c      	b.n	8014138 <_strtol_r+0x7c>
 801411e:	3d30      	subs	r5, #48	; 0x30
 8014120:	42ab      	cmp	r3, r5
 8014122:	dd1b      	ble.n	801415c <_strtol_r+0xa0>
 8014124:	1c46      	adds	r6, r0, #1
 8014126:	d005      	beq.n	8014134 <_strtol_r+0x78>
 8014128:	45c8      	cmp	r8, r9
 801412a:	d839      	bhi.n	80141a0 <_strtol_r+0xe4>
 801412c:	d035      	beq.n	801419a <_strtol_r+0xde>
 801412e:	fb0a 5808 	mla	r8, sl, r8, r5
 8014132:	2001      	movs	r0, #1
 8014134:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014138:	eb0c 0605 	add.w	r6, ip, r5
 801413c:	7876      	ldrb	r6, [r6, #1]
 801413e:	f006 0704 	and.w	r7, r6, #4
 8014142:	b2ff      	uxtb	r7, r7
 8014144:	2f00      	cmp	r7, #0
 8014146:	d1ea      	bne.n	801411e <_strtol_r+0x62>
 8014148:	f016 0603 	ands.w	r6, r6, #3
 801414c:	d006      	beq.n	801415c <_strtol_r+0xa0>
 801414e:	2e01      	cmp	r6, #1
 8014150:	bf14      	ite	ne
 8014152:	2657      	movne	r6, #87	; 0x57
 8014154:	2637      	moveq	r6, #55	; 0x37
 8014156:	1bad      	subs	r5, r5, r6
 8014158:	42ab      	cmp	r3, r5
 801415a:	dce3      	bgt.n	8014124 <_strtol_r+0x68>
 801415c:	1c43      	adds	r3, r0, #1
 801415e:	d02a      	beq.n	80141b6 <_strtol_r+0xfa>
 8014160:	f1bb 0f00 	cmp.w	fp, #0
 8014164:	d001      	beq.n	801416a <_strtol_r+0xae>
 8014166:	f1c8 0800 	rsb	r8, r8, #0
 801416a:	2a00      	cmp	r2, #0
 801416c:	d031      	beq.n	80141d2 <_strtol_r+0x116>
 801416e:	b9d0      	cbnz	r0, 80141a6 <_strtol_r+0xea>
 8014170:	4640      	mov	r0, r8
 8014172:	6011      	str	r1, [r2, #0]
 8014174:	b002      	add	sp, #8
 8014176:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801417a:	4770      	bx	lr
 801417c:	2b10      	cmp	r3, #16
 801417e:	d1be      	bne.n	80140fe <_strtol_r+0x42>
 8014180:	2d30      	cmp	r5, #48	; 0x30
 8014182:	d1bc      	bne.n	80140fe <_strtol_r+0x42>
 8014184:	7825      	ldrb	r5, [r4, #0]
 8014186:	2d78      	cmp	r5, #120	; 0x78
 8014188:	d025      	beq.n	80141d6 <_strtol_r+0x11a>
 801418a:	2d58      	cmp	r5, #88	; 0x58
 801418c:	d023      	beq.n	80141d6 <_strtol_r+0x11a>
 801418e:	bb43      	cbnz	r3, 80141e2 <_strtol_r+0x126>
 8014190:	f04f 0a08 	mov.w	sl, #8
 8014194:	2530      	movs	r5, #48	; 0x30
 8014196:	4653      	mov	r3, sl
 8014198:	e7b2      	b.n	8014100 <_strtol_r+0x44>
 801419a:	9800      	ldr	r0, [sp, #0]
 801419c:	4285      	cmp	r5, r0
 801419e:	ddc6      	ble.n	801412e <_strtol_r+0x72>
 80141a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141a4:	e7c6      	b.n	8014134 <_strtol_r+0x78>
 80141a6:	4640      	mov	r0, r8
 80141a8:	1e61      	subs	r1, r4, #1
 80141aa:	e7e2      	b.n	8014172 <_strtol_r+0xb6>
 80141ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80141b0:	f04f 0b01 	mov.w	fp, #1
 80141b4:	e79e      	b.n	80140f4 <_strtol_r+0x38>
 80141b6:	f1bb 0f00 	cmp.w	fp, #0
 80141ba:	9901      	ldr	r1, [sp, #4]
 80141bc:	bf0c      	ite	eq
 80141be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80141c2:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80141c6:	2322      	movs	r3, #34	; 0x22
 80141c8:	600b      	str	r3, [r1, #0]
 80141ca:	2a00      	cmp	r2, #0
 80141cc:	d0d2      	beq.n	8014174 <_strtol_r+0xb8>
 80141ce:	1e61      	subs	r1, r4, #1
 80141d0:	e7cf      	b.n	8014172 <_strtol_r+0xb6>
 80141d2:	4640      	mov	r0, r8
 80141d4:	e7ce      	b.n	8014174 <_strtol_r+0xb8>
 80141d6:	f04f 0a10 	mov.w	sl, #16
 80141da:	7865      	ldrb	r5, [r4, #1]
 80141dc:	4653      	mov	r3, sl
 80141de:	3402      	adds	r4, #2
 80141e0:	e78e      	b.n	8014100 <_strtol_r+0x44>
 80141e2:	469a      	mov	sl, r3
 80141e4:	2530      	movs	r5, #48	; 0x30
 80141e6:	e78b      	b.n	8014100 <_strtol_r+0x44>
 80141e8:	20000734 	.word	0x20000734

080141ec <strtol>:
 80141ec:	b470      	push	{r4, r5, r6}
 80141ee:	f240 7430 	movw	r4, #1840	; 0x730
 80141f2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80141f6:	4606      	mov	r6, r0
 80141f8:	460d      	mov	r5, r1
 80141fa:	6820      	ldr	r0, [r4, #0]
 80141fc:	4613      	mov	r3, r2
 80141fe:	4631      	mov	r1, r6
 8014200:	462a      	mov	r2, r5
 8014202:	bc70      	pop	{r4, r5, r6}
 8014204:	f7ff bf5a 	b.w	80140bc <_strtol_r>
 8014208:	00006466 	.word	0x00006466
 801420c:	00006b62 	.word	0x00006b62
 8014210:	00007472 	.word	0x00007472
 8014214:	0000746c 	.word	0x0000746c
	...

08014220 <DIO_PIN>:
 8014220:	00400080 00100020 80000008 20004000     ..@. ........@. 

08014230 <DIO_CLK>:
 8014230:	00000008 00000008 00000008 00000008     ................
 8014240:	00000008 00000004 00000004 00000004     ................

08014250 <LED_PIN>:
 8014250:	02000100                                ....

08014254 <LED_CLK>:
 8014254:	00000004 00000004                       ........

0801425c <BUTTON_PIN>:
 801425c:	00000400                                ....

08014260 <BUTTON_CLK>:
 8014260:	00000004 00000000                       ........

08014268 <BUTTON_EXTI_LINE>:
 8014268:	00000400                                ....

0801426c <BUTTON_PORT_SOURCE>:
 801426c:	00000000                                ....

08014270 <BUTTON_PIN_SOURCE>:
 8014270:	0000000a                                ....

08014274 <BUTTON_IRQn>:
 8014274:	00000028 4f434f43 4c504d2d 00000053     (...COCO-MPLS...
 8014284:	6f636f63 34333231 00000000              coco1234....

08014290 <Device_Secret>:
 8014290:	72636573 00007465                       secret..

08014298 <Device_Name>:
 8014298:	73706f74 65726365 72757474 00656c74     topsecretturtle.

080142a8 <Device_Ok>:
 80142a8:	00204b4f                                OK .

080142ac <Device_Fail>:
 80142ac:	4c494146 00000020                       FAIL ...

080142b4 <Device_CRLF>:
 80142b4:	0000000a                                ....

080142b8 <API_Alive>:
 80142b8:	76696c61 00000065                       alive...

080142c0 <API_Who>:
 80142c0:	006f6877                                who.

080142c4 <API_UserFunc>:
 80142c4:	52455355 434e5546 00000020              USERFUNC ...

080142d0 <API_Callback>:
 80142d0:	4c4c4143 4b434142 00000020 00000a0d     CALLBACK .......

080142e0 <Virtual_Com_Port_DeviceDescriptor>:
 80142e0:	02000112 40000002 57400483 02010200     .......@..@W....
 80142f0:	00000103                                ....

080142f4 <Virtual_Com_Port_ConfigDescriptor>:
 80142f4:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8014304:	24050001 05011000 01000124 02022404     ...$....$....$..
 8014314:	00062405 82050701 ff000803 00010409     .$..............
 8014324:	00000a02 03050700 00004002 02810507     .........@......
 8014334:	00000040                                @...

08014338 <Virtual_Com_Port_StringLangID>:
 8014338:	04090304                                ....

0801433c <Virtual_Com_Port_StringVendor>:
 801433c:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 801434c:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 801435c:	00630069 00000073                       i.c.s...

08014364 <Virtual_Com_Port_StringProduct>:
 8014364:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 8014374:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 8014384:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 8014394:	00000020 00000043                        ...C...

0801439c <_ctype_>:
 801439c:	20202000 20202020 28282020 20282828     .         ((((( 
 80143ac:	20202020 20202020 20202020 20202020                     
 80143bc:	10108820 10101010 10101010 10101010      ...............
 80143cc:	04040410 04040404 10040404 10101010     ................
 80143dc:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80143ec:	01010101 01010101 01010101 10101010     ................
 80143fc:	42421010 42424242 02020202 02020202     ..BBBBBB........
 801440c:	02020202 02020202 02020202 10101010     ................
 801441c:	00000020 00000000 00000000 00000000      ...............
	...
