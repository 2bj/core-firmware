   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"sst25vf_spi.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.sFLASH_Init,"ax",%progbits
  19              		.align	2
  20              		.global	sFLASH_Init
  21              		.thumb
  22              		.thumb_func
  24              	sFLASH_Init:
  25              	.LFB56:
  26              		.file 1 "../src/sst25vf_spi.c"
   1:../src/sst25vf_spi.c **** /**
   2:../src/sst25vf_spi.c ****   ******************************************************************************
   3:../src/sst25vf_spi.c ****   * @file    sst25vf_spi.c
   4:../src/sst25vf_spi.c ****   * @author  Spark Application Team
   5:../src/sst25vf_spi.c ****   * @version V1.0.0
   6:../src/sst25vf_spi.c ****   * @date    15-May-2013
   7:../src/sst25vf_spi.c ****   * @brief   This file provides a set of functions needed to manage the
   8:../src/sst25vf_spi.c ****   *          SPI SST25xxxFLASH memory mounted on Spark boards
   9:../src/sst25vf_spi.c ****   ******************************************************************************
  10:../src/sst25vf_spi.c ****   */
  11:../src/sst25vf_spi.c **** 
  12:../src/sst25vf_spi.c **** /* Includes ------------------------------------------------------------------*/
  13:../src/sst25vf_spi.c **** #include "sst25vf_spi.h"
  14:../src/sst25vf_spi.c **** 
  15:../src/sst25vf_spi.c **** /**
  16:../src/sst25vf_spi.c ****   * @brief Initializes SPI Flash
  17:../src/sst25vf_spi.c ****   * @param void
  18:../src/sst25vf_spi.c ****   * @return void
  19:../src/sst25vf_spi.c ****   */
  20:../src/sst25vf_spi.c **** void sFLASH_Init(void)
  21:../src/sst25vf_spi.c **** {
  27              		.loc 1 21 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  22:../src/sst25vf_spi.c ****   uint32_t Device_ID = 0;
  42              		.loc 1 22 0
  43 0006 4FF00003 		mov	r3, #0
  44 000a 7B60     		str	r3, [r7, #4]
  23:../src/sst25vf_spi.c **** 
  24:../src/sst25vf_spi.c ****   /* Initializes the peripherals used by the SPI FLASH driver */
  25:../src/sst25vf_spi.c ****   sFLASH_SPI_Init();
  45              		.loc 1 25 0
  46 000c FFF7FEFF 		bl	sFLASH_SPI_Init
  26:../src/sst25vf_spi.c **** 
  27:../src/sst25vf_spi.c ****   /* Disable the write access to the FLASH */
  28:../src/sst25vf_spi.c ****   sFLASH_WriteDisable();
  47              		.loc 1 28 0
  48 0010 FFF7FEFF 		bl	sFLASH_WriteDisable
  29:../src/sst25vf_spi.c **** 
  30:../src/sst25vf_spi.c ****   /* Read FLASH identification */
  31:../src/sst25vf_spi.c ****   Device_ID = sFLASH_ReadID();
  49              		.loc 1 31 0
  50 0014 FFF7FEFF 		bl	sFLASH_ReadID
  51 0018 7860     		str	r0, [r7, #4]
  32:../src/sst25vf_spi.c **** 
  33:../src/sst25vf_spi.c ****   if(Device_ID == sFLASH_SST25VF040_ID || Device_ID == sFLASH_SST25VF016_ID)
  52              		.loc 1 33 0
  53 001a 7A68     		ldr	r2, [r7, #4]
  54 001c 42F28D53 		movw	r3, #9613
  55 0020 C0F2BF03 		movt	r3, 191
  56 0024 9A42     		cmp	r2, r3
  57 0026 06D0     		beq	.L2
  58              		.loc 1 33 0 is_stmt 0 discriminator 1
  59 0028 7A68     		ldr	r2, [r7, #4]
  60 002a 42F24153 		movw	r3, #9537
  61 002e C0F2BF03 		movt	r3, 191
  62 0032 9A42     		cmp	r2, r3
  63 0034 3FD1     		bne	.L1
  64              	.L2:
  34:../src/sst25vf_spi.c ****   {
  35:../src/sst25vf_spi.c ****     /* Select the FLASH: Chip Select low */
  36:../src/sst25vf_spi.c ****     sFLASH_CS_LOW();
  65              		.loc 1 36 0 is_stmt 1
  66 0036 4FF44060 		mov	r0, #3072
  67 003a C4F20100 		movt	r0, 16385
  68 003e 4FF40071 		mov	r1, #512
  69 0042 FFF7FEFF 		bl	GPIO_ResetBits
  37:../src/sst25vf_spi.c ****     /* Send "Disable SO RY/BY# Status" instruction */
  38:../src/sst25vf_spi.c ****     sFLASH_SendByte(sFLASH_CMD_DBSY);
  70              		.loc 1 38 0
  71 0046 4FF08000 		mov	r0, #128
  72 004a FFF7FEFF 		bl	sFLASH_SendByte
  39:../src/sst25vf_spi.c ****     /* Deselect the FLASH: Chip Select high */
  40:../src/sst25vf_spi.c ****     sFLASH_CS_HIGH();
  73              		.loc 1 40 0
  74 004e 4FF44060 		mov	r0, #3072
  75 0052 C4F20100 		movt	r0, 16385
  76 0056 4FF40071 		mov	r1, #512
  77 005a FFF7FEFF 		bl	GPIO_SetBits
  41:../src/sst25vf_spi.c **** 
  42:../src/sst25vf_spi.c ****     /* Select the FLASH: Chip Select low */
  43:../src/sst25vf_spi.c ****     sFLASH_CS_LOW();
  78              		.loc 1 43 0
  79 005e 4FF44060 		mov	r0, #3072
  80 0062 C4F20100 		movt	r0, 16385
  81 0066 4FF40071 		mov	r1, #512
  82 006a FFF7FEFF 		bl	GPIO_ResetBits
  44:../src/sst25vf_spi.c ****     /* Send "Write Enable Status" instruction */
  45:../src/sst25vf_spi.c ****     sFLASH_SendByte(sFLASH_CMD_EWSR);
  83              		.loc 1 45 0
  84 006e 4FF05000 		mov	r0, #80
  85 0072 FFF7FEFF 		bl	sFLASH_SendByte
  46:../src/sst25vf_spi.c ****     /* Deselect the FLASH: Chip Select high */
  47:../src/sst25vf_spi.c ****     sFLASH_CS_HIGH();
  86              		.loc 1 47 0
  87 0076 4FF44060 		mov	r0, #3072
  88 007a C4F20100 		movt	r0, 16385
  89 007e 4FF40071 		mov	r1, #512
  90 0082 FFF7FEFF 		bl	GPIO_SetBits
  48:../src/sst25vf_spi.c **** 
  49:../src/sst25vf_spi.c ****     /* Select the FLASH: Chip Select low */
  50:../src/sst25vf_spi.c ****     sFLASH_CS_LOW();
  91              		.loc 1 50 0
  92 0086 4FF44060 		mov	r0, #3072
  93 008a C4F20100 		movt	r0, 16385
  94 008e 4FF40071 		mov	r1, #512
  95 0092 FFF7FEFF 		bl	GPIO_ResetBits
  51:../src/sst25vf_spi.c ****     /* Send "Write Status Register" instruction */
  52:../src/sst25vf_spi.c ****     sFLASH_SendByte(sFLASH_CMD_WRSR);
  96              		.loc 1 52 0
  97 0096 4FF00100 		mov	r0, #1
  98 009a FFF7FEFF 		bl	sFLASH_SendByte
  53:../src/sst25vf_spi.c ****     sFLASH_SendByte(0);
  99              		.loc 1 53 0
 100 009e 4FF00000 		mov	r0, #0
 101 00a2 FFF7FEFF 		bl	sFLASH_SendByte
  54:../src/sst25vf_spi.c ****     /* Deselect the FLASH: Chip Select high */
  55:../src/sst25vf_spi.c ****     sFLASH_CS_HIGH();
 102              		.loc 1 55 0
 103 00a6 4FF44060 		mov	r0, #3072
 104 00aa C4F20100 		movt	r0, 16385
 105 00ae 4FF40071 		mov	r1, #512
 106 00b2 FFF7FEFF 		bl	GPIO_SetBits
 107              	.L1:
  56:../src/sst25vf_spi.c ****   }
  57:../src/sst25vf_spi.c **** }
 108              		.loc 1 57 0
 109 00b6 07F10807 		add	r7, r7, #8
 110 00ba BD46     		mov	sp, r7
 111 00bc 80BD     		pop	{r7, pc}
 112              		.cfi_endproc
 113              	.LFE56:
 115 00be 00BF     		.section	.text.sFLASH_EraseSector,"ax",%progbits
 116              		.align	2
 117              		.global	sFLASH_EraseSector
 118              		.thumb
 119              		.thumb_func
 121              	sFLASH_EraseSector:
 122              	.LFB57:
  58:../src/sst25vf_spi.c **** 
  59:../src/sst25vf_spi.c **** /**
  60:../src/sst25vf_spi.c ****   * @brief  Erases the specified FLASH sector.
  61:../src/sst25vf_spi.c ****   * @param  SectorAddr: address of the sector to erase.
  62:../src/sst25vf_spi.c ****   * @retval None
  63:../src/sst25vf_spi.c ****   */
  64:../src/sst25vf_spi.c **** void sFLASH_EraseSector(uint32_t SectorAddr)
  65:../src/sst25vf_spi.c **** {
 123              		.loc 1 65 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 8
 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127 0000 80B5     		push	{r7, lr}
 128              	.LCFI3:
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 82B0     		sub	sp, sp, #8
 133              	.LCFI4:
 134              		.cfi_def_cfa_offset 16
 135 0004 00AF     		add	r7, sp, #0
 136              	.LCFI5:
 137              		.cfi_def_cfa_register 7
 138 0006 7860     		str	r0, [r7, #4]
  66:../src/sst25vf_spi.c ****   /* Enable the write access to the FLASH */
  67:../src/sst25vf_spi.c ****   sFLASH_WriteEnable();
 139              		.loc 1 67 0
 140 0008 FFF7FEFF 		bl	sFLASH_WriteEnable
  68:../src/sst25vf_spi.c **** 
  69:../src/sst25vf_spi.c ****   /* Sector Erase */
  70:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
  71:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 141              		.loc 1 71 0
 142 000c 4FF44060 		mov	r0, #3072
 143 0010 C4F20100 		movt	r0, 16385
 144 0014 4FF40071 		mov	r1, #512
 145 0018 FFF7FEFF 		bl	GPIO_ResetBits
  72:../src/sst25vf_spi.c ****   /* Send Sector Erase instruction */
  73:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_SE);
 146              		.loc 1 73 0
 147 001c 4FF02000 		mov	r0, #32
 148 0020 FFF7FEFF 		bl	sFLASH_SendByte
  74:../src/sst25vf_spi.c ****   /* Send SectorAddr high nibble address byte */
  75:../src/sst25vf_spi.c ****   sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 149              		.loc 1 75 0
 150 0024 7B68     		ldr	r3, [r7, #4]
 151 0026 03F47F03 		and	r3, r3, #16711680
 152 002a 4FEA1343 		lsr	r3, r3, #16
 153 002e DBB2     		uxtb	r3, r3
 154 0030 1846     		mov	r0, r3
 155 0032 FFF7FEFF 		bl	sFLASH_SendByte
  76:../src/sst25vf_spi.c ****   /* Send SectorAddr medium nibble address byte */
  77:../src/sst25vf_spi.c ****   sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 156              		.loc 1 77 0
 157 0036 7B68     		ldr	r3, [r7, #4]
 158 0038 03F47F43 		and	r3, r3, #65280
 159 003c 4FEA1323 		lsr	r3, r3, #8
 160 0040 DBB2     		uxtb	r3, r3
 161 0042 1846     		mov	r0, r3
 162 0044 FFF7FEFF 		bl	sFLASH_SendByte
  78:../src/sst25vf_spi.c ****   /* Send SectorAddr low nibble address byte */
  79:../src/sst25vf_spi.c ****   sFLASH_SendByte(SectorAddr & 0xFF);
 163              		.loc 1 79 0
 164 0048 7B68     		ldr	r3, [r7, #4]
 165 004a DBB2     		uxtb	r3, r3
 166 004c 1846     		mov	r0, r3
 167 004e FFF7FEFF 		bl	sFLASH_SendByte
  80:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
  81:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 168              		.loc 1 81 0
 169 0052 4FF44060 		mov	r0, #3072
 170 0056 C4F20100 		movt	r0, 16385
 171 005a 4FF40071 		mov	r1, #512
 172 005e FFF7FEFF 		bl	GPIO_SetBits
  82:../src/sst25vf_spi.c **** 
  83:../src/sst25vf_spi.c ****   /* Wait till the end of Flash writing */
  84:../src/sst25vf_spi.c ****   sFLASH_WaitForWriteEnd();
 173              		.loc 1 84 0
 174 0062 FFF7FEFF 		bl	sFLASH_WaitForWriteEnd
  85:../src/sst25vf_spi.c **** }
 175              		.loc 1 85 0
 176 0066 07F10807 		add	r7, r7, #8
 177 006a BD46     		mov	sp, r7
 178 006c 80BD     		pop	{r7, pc}
 179              		.cfi_endproc
 180              	.LFE57:
 182 006e 00BF     		.section	.text.sFLASH_EraseBulk,"ax",%progbits
 183              		.align	2
 184              		.global	sFLASH_EraseBulk
 185              		.thumb
 186              		.thumb_func
 188              	sFLASH_EraseBulk:
 189              	.LFB58:
  86:../src/sst25vf_spi.c **** 
  87:../src/sst25vf_spi.c **** /**
  88:../src/sst25vf_spi.c ****   * @brief  Erases the entire FLASH.
  89:../src/sst25vf_spi.c ****   * @param  None
  90:../src/sst25vf_spi.c ****   * @retval None
  91:../src/sst25vf_spi.c ****   */
  92:../src/sst25vf_spi.c **** void sFLASH_EraseBulk(void)
  93:../src/sst25vf_spi.c **** {
 190              		.loc 1 93 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              	.LCFI6:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 0002 00AF     		add	r7, sp, #0
 200              	.LCFI7:
 201              		.cfi_def_cfa_register 7
  94:../src/sst25vf_spi.c ****   /* Enable the write access to the FLASH */
  95:../src/sst25vf_spi.c ****   sFLASH_WriteEnable();
 202              		.loc 1 95 0
 203 0004 FFF7FEFF 		bl	sFLASH_WriteEnable
  96:../src/sst25vf_spi.c **** 
  97:../src/sst25vf_spi.c ****   /* Bulk Erase */
  98:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
  99:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 204              		.loc 1 99 0
 205 0008 4FF44060 		mov	r0, #3072
 206 000c C4F20100 		movt	r0, 16385
 207 0010 4FF40071 		mov	r1, #512
 208 0014 FFF7FEFF 		bl	GPIO_ResetBits
 100:../src/sst25vf_spi.c ****   /* Send Bulk Erase instruction  */
 101:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_BE);
 209              		.loc 1 101 0
 210 0018 4FF0C700 		mov	r0, #199
 211 001c FFF7FEFF 		bl	sFLASH_SendByte
 102:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 103:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 212              		.loc 1 103 0
 213 0020 4FF44060 		mov	r0, #3072
 214 0024 C4F20100 		movt	r0, 16385
 215 0028 4FF40071 		mov	r1, #512
 216 002c FFF7FEFF 		bl	GPIO_SetBits
 104:../src/sst25vf_spi.c **** 
 105:../src/sst25vf_spi.c ****   /* Wait till the end of Flash writing */
 106:../src/sst25vf_spi.c ****   sFLASH_WaitForWriteEnd();
 217              		.loc 1 106 0
 218 0030 FFF7FEFF 		bl	sFLASH_WaitForWriteEnd
 107:../src/sst25vf_spi.c **** }
 219              		.loc 1 107 0
 220 0034 80BD     		pop	{r7, pc}
 221              		.cfi_endproc
 222              	.LFE58:
 224 0036 00BF     		.section	.text.sFLASH_WriteByte,"ax",%progbits
 225              		.align	2
 226              		.global	sFLASH_WriteByte
 227              		.thumb
 228              		.thumb_func
 230              	sFLASH_WriteByte:
 231              	.LFB59:
 108:../src/sst25vf_spi.c **** 
 109:../src/sst25vf_spi.c **** /**
 110:../src/sst25vf_spi.c ****   * @brief  Write one byte to the FLASH.
 111:../src/sst25vf_spi.c ****   * @param  WriteAddr: FLASH's internal address to write to.
 112:../src/sst25vf_spi.c ****   * @param  byte: the data to be written.
 113:../src/sst25vf_spi.c ****   * @retval None
 114:../src/sst25vf_spi.c ****   */
 115:../src/sst25vf_spi.c **** void sFLASH_WriteByte(uint32_t WriteAddr, uint8_t byte)
 116:../src/sst25vf_spi.c **** {
 232              		.loc 1 116 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 8
 235              		@ frame_needed = 1, uses_anonymous_args = 0
 236 0000 80B5     		push	{r7, lr}
 237              	.LCFI8:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 7, -8
 240              		.cfi_offset 14, -4
 241 0002 82B0     		sub	sp, sp, #8
 242              	.LCFI9:
 243              		.cfi_def_cfa_offset 16
 244 0004 00AF     		add	r7, sp, #0
 245              	.LCFI10:
 246              		.cfi_def_cfa_register 7
 247 0006 7860     		str	r0, [r7, #4]
 248 0008 0B46     		mov	r3, r1
 249 000a FB70     		strb	r3, [r7, #3]
 117:../src/sst25vf_spi.c ****   /* Enable the write access to the FLASH */
 118:../src/sst25vf_spi.c ****   sFLASH_WriteEnable();
 250              		.loc 1 118 0
 251 000c FFF7FEFF 		bl	sFLASH_WriteEnable
 119:../src/sst25vf_spi.c **** 
 120:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
 121:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 252              		.loc 1 121 0
 253 0010 4FF44060 		mov	r0, #3072
 254 0014 C4F20100 		movt	r0, 16385
 255 0018 4FF40071 		mov	r1, #512
 256 001c FFF7FEFF 		bl	GPIO_ResetBits
 122:../src/sst25vf_spi.c ****   /* Send "Byte Program" instruction */
 123:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_WRITE);
 257              		.loc 1 123 0
 258 0020 4FF00200 		mov	r0, #2
 259 0024 FFF7FEFF 		bl	sFLASH_SendByte
 124:../src/sst25vf_spi.c ****   /* Send WriteAddr high nibble address byte to write to */
 125:../src/sst25vf_spi.c ****   sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 260              		.loc 1 125 0
 261 0028 7B68     		ldr	r3, [r7, #4]
 262 002a 03F47F03 		and	r3, r3, #16711680
 263 002e 4FEA1343 		lsr	r3, r3, #16
 264 0032 DBB2     		uxtb	r3, r3
 265 0034 1846     		mov	r0, r3
 266 0036 FFF7FEFF 		bl	sFLASH_SendByte
 126:../src/sst25vf_spi.c ****   /* Send WriteAddr medium nibble address byte to write to */
 127:../src/sst25vf_spi.c ****   sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 267              		.loc 1 127 0
 268 003a 7B68     		ldr	r3, [r7, #4]
 269 003c 03F47F43 		and	r3, r3, #65280
 270 0040 4FEA1323 		lsr	r3, r3, #8
 271 0044 DBB2     		uxtb	r3, r3
 272 0046 1846     		mov	r0, r3
 273 0048 FFF7FEFF 		bl	sFLASH_SendByte
 128:../src/sst25vf_spi.c ****   /* Send WriteAddr low nibble address byte to write to */
 129:../src/sst25vf_spi.c ****   sFLASH_SendByte(WriteAddr & 0xFF);
 274              		.loc 1 129 0
 275 004c 7B68     		ldr	r3, [r7, #4]
 276 004e DBB2     		uxtb	r3, r3
 277 0050 1846     		mov	r0, r3
 278 0052 FFF7FEFF 		bl	sFLASH_SendByte
 130:../src/sst25vf_spi.c ****   /* Send the byte */
 131:../src/sst25vf_spi.c ****   sFLASH_SendByte(byte);
 279              		.loc 1 131 0
 280 0056 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 281 0058 1846     		mov	r0, r3
 282 005a FFF7FEFF 		bl	sFLASH_SendByte
 132:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 133:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 283              		.loc 1 133 0
 284 005e 4FF44060 		mov	r0, #3072
 285 0062 C4F20100 		movt	r0, 16385
 286 0066 4FF40071 		mov	r1, #512
 287 006a FFF7FEFF 		bl	GPIO_SetBits
 134:../src/sst25vf_spi.c ****   /* Wait till the end of Flash writing */
 135:../src/sst25vf_spi.c ****   sFLASH_WaitForWriteEnd();
 288              		.loc 1 135 0
 289 006e FFF7FEFF 		bl	sFLASH_WaitForWriteEnd
 136:../src/sst25vf_spi.c **** }
 290              		.loc 1 136 0
 291 0072 07F10807 		add	r7, r7, #8
 292 0076 BD46     		mov	sp, r7
 293 0078 80BD     		pop	{r7, pc}
 294              		.cfi_endproc
 295              	.LFE59:
 297 007a 00BF     		.section	.text.sFLASH_WritePage,"ax",%progbits
 298              		.align	2
 299              		.global	sFLASH_WritePage
 300              		.thumb
 301              		.thumb_func
 303              	sFLASH_WritePage:
 304              	.LFB60:
 137:../src/sst25vf_spi.c **** 
 138:../src/sst25vf_spi.c **** /**
 139:../src/sst25vf_spi.c ****   * @brief  Writes more than one byte to the FLASH.
 140:../src/sst25vf_spi.c ****   * @note   The number of bytes can't exceed the FLASH page size.
 141:../src/sst25vf_spi.c ****   * @param  pBuffer: pointer to the buffer containing the data to be written
 142:../src/sst25vf_spi.c ****   *         to the FLASH.
 143:../src/sst25vf_spi.c ****   * @param  WriteAddr: FLASH's internal address to write to.
 144:../src/sst25vf_spi.c ****   * @param  NumByteToWrite: number of bytes to write to the FLASH, must be even,
 145:../src/sst25vf_spi.c ****   *         equal or less than "sFLASH_PAGESIZE" value.
 146:../src/sst25vf_spi.c ****   * @retval None
 147:../src/sst25vf_spi.c ****   */
 148:../src/sst25vf_spi.c **** void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 149:../src/sst25vf_spi.c **** {
 305              		.loc 1 149 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 16
 308              		@ frame_needed = 1, uses_anonymous_args = 0
 309 0000 80B5     		push	{r7, lr}
 310              	.LCFI11:
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 7, -8
 313              		.cfi_offset 14, -4
 314 0002 84B0     		sub	sp, sp, #16
 315              	.LCFI12:
 316              		.cfi_def_cfa_offset 24
 317 0004 00AF     		add	r7, sp, #0
 318              	.LCFI13:
 319              		.cfi_def_cfa_register 7
 320 0006 F860     		str	r0, [r7, #12]
 321 0008 B960     		str	r1, [r7, #8]
 322 000a 1346     		mov	r3, r2
 323 000c FB80     		strh	r3, [r7, #6]	@ movhi
 150:../src/sst25vf_spi.c ****   /* Enable the write access to the FLASH */
 151:../src/sst25vf_spi.c ****   sFLASH_WriteEnable();
 324              		.loc 1 151 0
 325 000e FFF7FEFF 		bl	sFLASH_WriteEnable
 152:../src/sst25vf_spi.c **** 
 153:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
 154:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 326              		.loc 1 154 0
 327 0012 4FF44060 		mov	r0, #3072
 328 0016 C4F20100 		movt	r0, 16385
 329 001a 4FF40071 		mov	r1, #512
 330 001e FFF7FEFF 		bl	GPIO_ResetBits
 155:../src/sst25vf_spi.c ****   /* Send "Auto Address Increment Word-Program" instruction */
 156:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_AAIP);
 331              		.loc 1 156 0
 332 0022 4FF0AD00 		mov	r0, #173
 333 0026 FFF7FEFF 		bl	sFLASH_SendByte
 157:../src/sst25vf_spi.c ****   /* Send WriteAddr high nibble address byte to write to */
 158:../src/sst25vf_spi.c ****   sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 334              		.loc 1 158 0
 335 002a BB68     		ldr	r3, [r7, #8]
 336 002c 03F47F03 		and	r3, r3, #16711680
 337 0030 4FEA1343 		lsr	r3, r3, #16
 338 0034 DBB2     		uxtb	r3, r3
 339 0036 1846     		mov	r0, r3
 340 0038 FFF7FEFF 		bl	sFLASH_SendByte
 159:../src/sst25vf_spi.c ****   /* Send WriteAddr medium nibble address byte to write to */
 160:../src/sst25vf_spi.c ****   sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 341              		.loc 1 160 0
 342 003c BB68     		ldr	r3, [r7, #8]
 343 003e 03F47F43 		and	r3, r3, #65280
 344 0042 4FEA1323 		lsr	r3, r3, #8
 345 0046 DBB2     		uxtb	r3, r3
 346 0048 1846     		mov	r0, r3
 347 004a FFF7FEFF 		bl	sFLASH_SendByte
 161:../src/sst25vf_spi.c ****   /* Send WriteAddr low nibble address byte to write to */
 162:../src/sst25vf_spi.c ****   sFLASH_SendByte(WriteAddr & 0xFF);
 348              		.loc 1 162 0
 349 004e BB68     		ldr	r3, [r7, #8]
 350 0050 DBB2     		uxtb	r3, r3
 351 0052 1846     		mov	r0, r3
 352 0054 FFF7FEFF 		bl	sFLASH_SendByte
 163:../src/sst25vf_spi.c ****   /* Send the first byte */
 164:../src/sst25vf_spi.c ****   sFLASH_SendByte(*pBuffer++);
 353              		.loc 1 164 0
 354 0058 FB68     		ldr	r3, [r7, #12]
 355 005a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 356 005c FA68     		ldr	r2, [r7, #12]
 357 005e 02F10102 		add	r2, r2, #1
 358 0062 FA60     		str	r2, [r7, #12]
 359 0064 1846     		mov	r0, r3
 360 0066 FFF7FEFF 		bl	sFLASH_SendByte
 165:../src/sst25vf_spi.c ****   /* Send the second byte */
 166:../src/sst25vf_spi.c ****   sFLASH_SendByte(*pBuffer++);
 361              		.loc 1 166 0
 362 006a FB68     		ldr	r3, [r7, #12]
 363 006c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 364 006e FA68     		ldr	r2, [r7, #12]
 365 0070 02F10102 		add	r2, r2, #1
 366 0074 FA60     		str	r2, [r7, #12]
 367 0076 1846     		mov	r0, r3
 368 0078 FFF7FEFF 		bl	sFLASH_SendByte
 167:../src/sst25vf_spi.c ****   /* Update NumByteToWrite */
 168:../src/sst25vf_spi.c ****   NumByteToWrite -= 2;
 369              		.loc 1 168 0
 370 007c FB88     		ldrh	r3, [r7, #6]	@ movhi
 371 007e A3F10203 		sub	r3, r3, #2
 372 0082 FB80     		strh	r3, [r7, #6]	@ movhi
 169:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 170:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 373              		.loc 1 170 0
 374 0084 4FF44060 		mov	r0, #3072
 375 0088 C4F20100 		movt	r0, 16385
 376 008c 4FF40071 		mov	r1, #512
 377 0090 FFF7FEFF 		bl	GPIO_SetBits
 171:../src/sst25vf_spi.c ****   /* Wait till the end of Flash writing */
 172:../src/sst25vf_spi.c ****   sFLASH_WaitForWriteEnd();
 378              		.loc 1 172 0
 379 0094 FFF7FEFF 		bl	sFLASH_WaitForWriteEnd
 173:../src/sst25vf_spi.c **** 
 174:../src/sst25vf_spi.c ****   /* while there is data to be written on the FLASH */
 175:../src/sst25vf_spi.c ****   while (NumByteToWrite)
 380              		.loc 1 175 0
 381 0098 2BE0     		b	.L8
 382              	.L9:
 176:../src/sst25vf_spi.c ****   {
 177:../src/sst25vf_spi.c **** 	/* Select the FLASH: Chip Select low */
 178:../src/sst25vf_spi.c **** 	sFLASH_CS_LOW();
 383              		.loc 1 178 0
 384 009a 4FF44060 		mov	r0, #3072
 385 009e C4F20100 		movt	r0, 16385
 386 00a2 4FF40071 		mov	r1, #512
 387 00a6 FFF7FEFF 		bl	GPIO_ResetBits
 179:../src/sst25vf_spi.c **** 	/* Send "Auto Address Increment Word-Program" instruction */
 180:../src/sst25vf_spi.c **** 	sFLASH_SendByte(sFLASH_CMD_AAIP);
 388              		.loc 1 180 0
 389 00aa 4FF0AD00 		mov	r0, #173
 390 00ae FFF7FEFF 		bl	sFLASH_SendByte
 181:../src/sst25vf_spi.c ****     /* Send the next byte and point on the next byte */
 182:../src/sst25vf_spi.c ****     sFLASH_SendByte(*pBuffer++);
 391              		.loc 1 182 0
 392 00b2 FB68     		ldr	r3, [r7, #12]
 393 00b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 394 00b6 FA68     		ldr	r2, [r7, #12]
 395 00b8 02F10102 		add	r2, r2, #1
 396 00bc FA60     		str	r2, [r7, #12]
 397 00be 1846     		mov	r0, r3
 398 00c0 FFF7FEFF 		bl	sFLASH_SendByte
 183:../src/sst25vf_spi.c ****     /* Send the next byte and point on the next byte */
 184:../src/sst25vf_spi.c ****     sFLASH_SendByte(*pBuffer++);
 399              		.loc 1 184 0
 400 00c4 FB68     		ldr	r3, [r7, #12]
 401 00c6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 402 00c8 FA68     		ldr	r2, [r7, #12]
 403 00ca 02F10102 		add	r2, r2, #1
 404 00ce FA60     		str	r2, [r7, #12]
 405 00d0 1846     		mov	r0, r3
 406 00d2 FFF7FEFF 		bl	sFLASH_SendByte
 185:../src/sst25vf_spi.c ****     /* Update NumByteToWrite */
 186:../src/sst25vf_spi.c ****     NumByteToWrite -= 2;
 407              		.loc 1 186 0
 408 00d6 FB88     		ldrh	r3, [r7, #6]	@ movhi
 409 00d8 A3F10203 		sub	r3, r3, #2
 410 00dc FB80     		strh	r3, [r7, #6]	@ movhi
 187:../src/sst25vf_spi.c ****     /* Deselect the FLASH: Chip Select high */
 188:../src/sst25vf_spi.c ****     sFLASH_CS_HIGH();
 411              		.loc 1 188 0
 412 00de 4FF44060 		mov	r0, #3072
 413 00e2 C4F20100 		movt	r0, 16385
 414 00e6 4FF40071 		mov	r1, #512
 415 00ea FFF7FEFF 		bl	GPIO_SetBits
 189:../src/sst25vf_spi.c ****     /* Wait till the end of Flash writing */
 190:../src/sst25vf_spi.c ****     sFLASH_WaitForWriteEnd();
 416              		.loc 1 190 0
 417 00ee FFF7FEFF 		bl	sFLASH_WaitForWriteEnd
 418              	.L8:
 175:../src/sst25vf_spi.c ****   while (NumByteToWrite)
 419              		.loc 1 175 0 discriminator 1
 420 00f2 FB88     		ldrh	r3, [r7, #6]
 421 00f4 002B     		cmp	r3, #0
 422 00f6 D0D1     		bne	.L9
 191:../src/sst25vf_spi.c ****   }
 192:../src/sst25vf_spi.c **** 
 193:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 194:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 423              		.loc 1 194 0
 424 00f8 4FF44060 		mov	r0, #3072
 425 00fc C4F20100 		movt	r0, 16385
 426 0100 4FF40071 		mov	r1, #512
 427 0104 FFF7FEFF 		bl	GPIO_SetBits
 195:../src/sst25vf_spi.c **** 
 196:../src/sst25vf_spi.c ****   /* Disable the write access to the FLASH */
 197:../src/sst25vf_spi.c ****   sFLASH_WriteDisable();
 428              		.loc 1 197 0
 429 0108 FFF7FEFF 		bl	sFLASH_WriteDisable
 198:../src/sst25vf_spi.c **** }
 430              		.loc 1 198 0
 431 010c 07F11007 		add	r7, r7, #16
 432 0110 BD46     		mov	sp, r7
 433 0112 80BD     		pop	{r7, pc}
 434              		.cfi_endproc
 435              	.LFE60:
 437              		.section	.text.sFLASH_WriteBuffer,"ax",%progbits
 438              		.align	2
 439              		.global	sFLASH_WriteBuffer
 440              		.thumb
 441              		.thumb_func
 443              	sFLASH_WriteBuffer:
 444              	.LFB61:
 199:../src/sst25vf_spi.c **** 
 200:../src/sst25vf_spi.c **** /**
 201:../src/sst25vf_spi.c ****   * @brief  Writes block of data to the FLASH.
 202:../src/sst25vf_spi.c ****   * @param  pBuffer: pointer to the buffer  containing the data to be written
 203:../src/sst25vf_spi.c ****   *         to the FLASH.
 204:../src/sst25vf_spi.c ****   * @param  WriteAddr: FLASH's internal address to write to.
 205:../src/sst25vf_spi.c ****   * @param  NumByteToWrite: number of bytes to write to the FLASH.
 206:../src/sst25vf_spi.c ****   * @retval None
 207:../src/sst25vf_spi.c ****   */
 208:../src/sst25vf_spi.c **** void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
 209:../src/sst25vf_spi.c **** {
 445              		.loc 1 209 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 24
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 80B5     		push	{r7, lr}
 450              	.LCFI14:
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 86B0     		sub	sp, sp, #24
 455              	.LCFI15:
 456              		.cfi_def_cfa_offset 32
 457 0004 00AF     		add	r7, sp, #0
 458              	.LCFI16:
 459              		.cfi_def_cfa_register 7
 460 0006 F860     		str	r0, [r7, #12]
 461 0008 B960     		str	r1, [r7, #8]
 462 000a 1346     		mov	r3, r2
 463 000c FB80     		strh	r3, [r7, #6]	@ movhi
 210:../src/sst25vf_spi.c ****   uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 464              		.loc 1 210 0
 465 000e 4FF00003 		mov	r3, #0
 466 0012 FB75     		strb	r3, [r7, #23]
 467 0014 4FF00003 		mov	r3, #0
 468 0018 BB75     		strb	r3, [r7, #22]
 469 001a 4FF00003 		mov	r3, #0
 470 001e 7B75     		strb	r3, [r7, #21]
 471 0020 4FF00003 		mov	r3, #0
 472 0024 3B75     		strb	r3, [r7, #20]
 473 0026 4FF00003 		mov	r3, #0
 474 002a FB74     		strb	r3, [r7, #19]
 211:../src/sst25vf_spi.c **** 
 212:../src/sst25vf_spi.c ****   Addr = WriteAddr % sFLASH_PAGESIZE;
 475              		.loc 1 212 0
 476 002c BB68     		ldr	r3, [r7, #8]
 477 002e 7B75     		strb	r3, [r7, #21]
 213:../src/sst25vf_spi.c ****   count = sFLASH_PAGESIZE - Addr;
 478              		.loc 1 213 0
 479 0030 7B7D     		ldrb	r3, [r7, #21]
 480 0032 C3F10003 		rsb	r3, r3, #0
 481 0036 3B75     		strb	r3, [r7, #20]
 214:../src/sst25vf_spi.c ****   NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
 482              		.loc 1 214 0
 483 0038 FB88     		ldrh	r3, [r7, #6]
 484 003a 4FEA1333 		lsr	r3, r3, #12
 485 003e 9BB2     		uxth	r3, r3
 486 0040 FB75     		strb	r3, [r7, #23]
 215:../src/sst25vf_spi.c ****   NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;
 487              		.loc 1 215 0
 488 0042 FB88     		ldrh	r3, [r7, #6]	@ movhi
 489 0044 BB75     		strb	r3, [r7, #22]
 216:../src/sst25vf_spi.c **** 
 217:../src/sst25vf_spi.c ****   if (Addr == 0) /* WriteAddr is sFLASH_PAGESIZE aligned  */
 490              		.loc 1 217 0
 491 0046 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 492 0048 002B     		cmp	r3, #0
 493 004a 2DD1     		bne	.L11
 218:../src/sst25vf_spi.c ****   {
 219:../src/sst25vf_spi.c ****     if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
 494              		.loc 1 219 0
 495 004c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 496 004e 002B     		cmp	r3, #0
 497 0050 15D1     		bne	.L20
 220:../src/sst25vf_spi.c ****     {
 221:../src/sst25vf_spi.c ****       sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 498              		.loc 1 221 0
 499 0052 FB88     		ldrh	r3, [r7, #6]
 500 0054 F868     		ldr	r0, [r7, #12]
 501 0056 B968     		ldr	r1, [r7, #8]
 502 0058 1A46     		mov	r2, r3
 503 005a FFF7FEFF 		bl	sFLASH_WritePage
 504 005e 8CE0     		b	.L10
 505              	.L15:
 222:../src/sst25vf_spi.c ****     }
 223:../src/sst25vf_spi.c ****     else /* NumByteToWrite > sFLASH_PAGESIZE */
 224:../src/sst25vf_spi.c ****     {
 225:../src/sst25vf_spi.c ****       while (NumOfPage--)
 226:../src/sst25vf_spi.c ****       {
 227:../src/sst25vf_spi.c ****         sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_PAGESIZE);
 506              		.loc 1 227 0
 507 0060 F868     		ldr	r0, [r7, #12]
 508 0062 B968     		ldr	r1, [r7, #8]
 509 0064 4FF48052 		mov	r2, #4096
 510 0068 FFF7FEFF 		bl	sFLASH_WritePage
 228:../src/sst25vf_spi.c ****         WriteAddr +=  sFLASH_PAGESIZE;
 511              		.loc 1 228 0
 512 006c BB68     		ldr	r3, [r7, #8]
 513 006e 03F58053 		add	r3, r3, #4096
 514 0072 BB60     		str	r3, [r7, #8]
 229:../src/sst25vf_spi.c ****         pBuffer += sFLASH_PAGESIZE;
 515              		.loc 1 229 0
 516 0074 FB68     		ldr	r3, [r7, #12]
 517 0076 03F58053 		add	r3, r3, #4096
 518 007a FB60     		str	r3, [r7, #12]
 519 007c 00E0     		b	.L14
 520              	.L20:
 225:../src/sst25vf_spi.c ****       while (NumOfPage--)
 521              		.loc 1 225 0
 522 007e 00BF     		nop
 523              	.L14:
 225:../src/sst25vf_spi.c ****       while (NumOfPage--)
 524              		.loc 1 225 0 is_stmt 0 discriminator 1
 525 0080 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 526 0082 002B     		cmp	r3, #0
 527 0084 0CBF     		ite	eq
 528 0086 0023     		moveq	r3, #0
 529 0088 0123     		movne	r3, #1
 530 008a DBB2     		uxtb	r3, r3
 531 008c FA7D     		ldrb	r2, [r7, #23]
 532 008e 02F1FF32 		add	r2, r2, #-1
 533 0092 FA75     		strb	r2, [r7, #23]
 534 0094 002B     		cmp	r3, #0
 535 0096 E3D1     		bne	.L15
 230:../src/sst25vf_spi.c ****       }
 231:../src/sst25vf_spi.c **** 
 232:../src/sst25vf_spi.c ****       sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 536              		.loc 1 232 0 is_stmt 1
 537 0098 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 538 009a 9BB2     		uxth	r3, r3
 539 009c F868     		ldr	r0, [r7, #12]
 540 009e B968     		ldr	r1, [r7, #8]
 541 00a0 1A46     		mov	r2, r3
 542 00a2 FFF7FEFF 		bl	sFLASH_WritePage
 543 00a6 68E0     		b	.L10
 544              	.L11:
 233:../src/sst25vf_spi.c ****     }
 234:../src/sst25vf_spi.c ****   }
 235:../src/sst25vf_spi.c ****   else /* WriteAddr is not sFLASH_PAGESIZE aligned  */
 236:../src/sst25vf_spi.c ****   {
 237:../src/sst25vf_spi.c ****     if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
 545              		.loc 1 237 0
 546 00a8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 547 00aa 002B     		cmp	r3, #0
 548 00ac 25D1     		bne	.L16
 238:../src/sst25vf_spi.c ****     {
 239:../src/sst25vf_spi.c ****       if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 549              		.loc 1 239 0
 550 00ae BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 551 00b0 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 552 00b2 9A42     		cmp	r2, r3
 553 00b4 1AD9     		bls	.L17
 240:../src/sst25vf_spi.c ****       {
 241:../src/sst25vf_spi.c ****         temp = NumOfSingle - count;
 554              		.loc 1 241 0
 555 00b6 BA7D     		ldrb	r2, [r7, #22]
 556 00b8 3B7D     		ldrb	r3, [r7, #20]
 557 00ba D31A     		subs	r3, r2, r3
 558 00bc FB74     		strb	r3, [r7, #19]
 242:../src/sst25vf_spi.c **** 
 243:../src/sst25vf_spi.c ****         sFLASH_WritePage(pBuffer, WriteAddr, count);
 559              		.loc 1 243 0
 560 00be 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 561 00c0 9BB2     		uxth	r3, r3
 562 00c2 F868     		ldr	r0, [r7, #12]
 563 00c4 B968     		ldr	r1, [r7, #8]
 564 00c6 1A46     		mov	r2, r3
 565 00c8 FFF7FEFF 		bl	sFLASH_WritePage
 244:../src/sst25vf_spi.c ****         WriteAddr +=  count;
 566              		.loc 1 244 0
 567 00cc 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 568 00ce BA68     		ldr	r2, [r7, #8]
 569 00d0 D318     		adds	r3, r2, r3
 570 00d2 BB60     		str	r3, [r7, #8]
 245:../src/sst25vf_spi.c ****         pBuffer += count;
 571              		.loc 1 245 0
 572 00d4 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 573 00d6 FA68     		ldr	r2, [r7, #12]
 574 00d8 D318     		adds	r3, r2, r3
 575 00da FB60     		str	r3, [r7, #12]
 246:../src/sst25vf_spi.c **** 
 247:../src/sst25vf_spi.c ****         sFLASH_WritePage(pBuffer, WriteAddr, temp);
 576              		.loc 1 247 0
 577 00dc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 578 00de 9BB2     		uxth	r3, r3
 579 00e0 F868     		ldr	r0, [r7, #12]
 580 00e2 B968     		ldr	r1, [r7, #8]
 581 00e4 1A46     		mov	r2, r3
 582 00e6 FFF7FEFF 		bl	sFLASH_WritePage
 583 00ea 46E0     		b	.L10
 584              	.L17:
 248:../src/sst25vf_spi.c ****       }
 249:../src/sst25vf_spi.c ****       else
 250:../src/sst25vf_spi.c ****       {
 251:../src/sst25vf_spi.c ****         sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 585              		.loc 1 251 0
 586 00ec FB88     		ldrh	r3, [r7, #6]
 587 00ee F868     		ldr	r0, [r7, #12]
 588 00f0 B968     		ldr	r1, [r7, #8]
 589 00f2 1A46     		mov	r2, r3
 590 00f4 FFF7FEFF 		bl	sFLASH_WritePage
 591 00f8 3FE0     		b	.L10
 592              	.L16:
 252:../src/sst25vf_spi.c ****       }
 253:../src/sst25vf_spi.c ****     }
 254:../src/sst25vf_spi.c ****     else /* NumByteToWrite > sFLASH_PAGESIZE */
 255:../src/sst25vf_spi.c ****     {
 256:../src/sst25vf_spi.c ****       NumByteToWrite -= count;
 593              		.loc 1 256 0
 594 00fa 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 595 00fc 9BB2     		uxth	r3, r3
 596 00fe FA88     		ldrh	r2, [r7, #6]	@ movhi
 597 0100 D31A     		subs	r3, r2, r3
 598 0102 FB80     		strh	r3, [r7, #6]	@ movhi
 257:../src/sst25vf_spi.c ****       NumOfPage =  NumByteToWrite / sFLASH_PAGESIZE;
 599              		.loc 1 257 0
 600 0104 FB88     		ldrh	r3, [r7, #6]
 601 0106 4FEA1333 		lsr	r3, r3, #12
 602 010a 9BB2     		uxth	r3, r3
 603 010c FB75     		strb	r3, [r7, #23]
 258:../src/sst25vf_spi.c ****       NumOfSingle = NumByteToWrite % sFLASH_PAGESIZE;
 604              		.loc 1 258 0
 605 010e FB88     		ldrh	r3, [r7, #6]	@ movhi
 606 0110 BB75     		strb	r3, [r7, #22]
 259:../src/sst25vf_spi.c **** 
 260:../src/sst25vf_spi.c ****       sFLASH_WritePage(pBuffer, WriteAddr, count);
 607              		.loc 1 260 0
 608 0112 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 609 0114 9BB2     		uxth	r3, r3
 610 0116 F868     		ldr	r0, [r7, #12]
 611 0118 B968     		ldr	r1, [r7, #8]
 612 011a 1A46     		mov	r2, r3
 613 011c FFF7FEFF 		bl	sFLASH_WritePage
 261:../src/sst25vf_spi.c ****       WriteAddr +=  count;
 614              		.loc 1 261 0
 615 0120 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 616 0122 BA68     		ldr	r2, [r7, #8]
 617 0124 D318     		adds	r3, r2, r3
 618 0126 BB60     		str	r3, [r7, #8]
 262:../src/sst25vf_spi.c ****       pBuffer += count;
 619              		.loc 1 262 0
 620 0128 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 621 012a FA68     		ldr	r2, [r7, #12]
 622 012c D318     		adds	r3, r2, r3
 623 012e FB60     		str	r3, [r7, #12]
 263:../src/sst25vf_spi.c **** 
 264:../src/sst25vf_spi.c ****       while (NumOfPage--)
 624              		.loc 1 264 0
 625 0130 0DE0     		b	.L18
 626              	.L19:
 265:../src/sst25vf_spi.c ****       {
 266:../src/sst25vf_spi.c ****         sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_PAGESIZE);
 627              		.loc 1 266 0
 628 0132 F868     		ldr	r0, [r7, #12]
 629 0134 B968     		ldr	r1, [r7, #8]
 630 0136 4FF48052 		mov	r2, #4096
 631 013a FFF7FEFF 		bl	sFLASH_WritePage
 267:../src/sst25vf_spi.c ****         WriteAddr +=  sFLASH_PAGESIZE;
 632              		.loc 1 267 0
 633 013e BB68     		ldr	r3, [r7, #8]
 634 0140 03F58053 		add	r3, r3, #4096
 635 0144 BB60     		str	r3, [r7, #8]
 268:../src/sst25vf_spi.c ****         pBuffer += sFLASH_PAGESIZE;
 636              		.loc 1 268 0
 637 0146 FB68     		ldr	r3, [r7, #12]
 638 0148 03F58053 		add	r3, r3, #4096
 639 014c FB60     		str	r3, [r7, #12]
 640              	.L18:
 264:../src/sst25vf_spi.c ****       while (NumOfPage--)
 641              		.loc 1 264 0 discriminator 1
 642 014e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 643 0150 002B     		cmp	r3, #0
 644 0152 0CBF     		ite	eq
 645 0154 0023     		moveq	r3, #0
 646 0156 0123     		movne	r3, #1
 647 0158 DBB2     		uxtb	r3, r3
 648 015a FA7D     		ldrb	r2, [r7, #23]
 649 015c 02F1FF32 		add	r2, r2, #-1
 650 0160 FA75     		strb	r2, [r7, #23]
 651 0162 002B     		cmp	r3, #0
 652 0164 E5D1     		bne	.L19
 269:../src/sst25vf_spi.c ****       }
 270:../src/sst25vf_spi.c **** 
 271:../src/sst25vf_spi.c ****       if (NumOfSingle != 0)
 653              		.loc 1 271 0
 654 0166 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 655 0168 002B     		cmp	r3, #0
 656 016a 06D0     		beq	.L10
 272:../src/sst25vf_spi.c ****       {
 273:../src/sst25vf_spi.c ****         sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 657              		.loc 1 273 0
 658 016c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 659 016e 9BB2     		uxth	r3, r3
 660 0170 F868     		ldr	r0, [r7, #12]
 661 0172 B968     		ldr	r1, [r7, #8]
 662 0174 1A46     		mov	r2, r3
 663 0176 FFF7FEFF 		bl	sFLASH_WritePage
 664              	.L10:
 274:../src/sst25vf_spi.c ****       }
 275:../src/sst25vf_spi.c ****     }
 276:../src/sst25vf_spi.c ****   }
 277:../src/sst25vf_spi.c **** }
 665              		.loc 1 277 0
 666 017a 07F11807 		add	r7, r7, #24
 667 017e BD46     		mov	sp, r7
 668 0180 80BD     		pop	{r7, pc}
 669              		.cfi_endproc
 670              	.LFE61:
 672 0182 00BF     		.section	.text.sFLASH_ReadBuffer,"ax",%progbits
 673              		.align	2
 674              		.global	sFLASH_ReadBuffer
 675              		.thumb
 676              		.thumb_func
 678              	sFLASH_ReadBuffer:
 679              	.LFB62:
 278:../src/sst25vf_spi.c **** 
 279:../src/sst25vf_spi.c **** /**
 280:../src/sst25vf_spi.c ****   * @brief  Reads a block of data from the FLASH.
 281:../src/sst25vf_spi.c ****   * @param  pBuffer: pointer to the buffer that receives the data read from the FLASH.
 282:../src/sst25vf_spi.c ****   * @param  ReadAddr: FLASH's internal address to read from.
 283:../src/sst25vf_spi.c ****   * @param  NumByteToRead: number of bytes to read from the FLASH.
 284:../src/sst25vf_spi.c ****   * @retval None
 285:../src/sst25vf_spi.c ****   */
 286:../src/sst25vf_spi.c **** void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
 287:../src/sst25vf_spi.c **** {
 680              		.loc 1 287 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 16
 683              		@ frame_needed = 1, uses_anonymous_args = 0
 684 0000 80B5     		push	{r7, lr}
 685              	.LCFI17:
 686              		.cfi_def_cfa_offset 8
 687              		.cfi_offset 7, -8
 688              		.cfi_offset 14, -4
 689 0002 84B0     		sub	sp, sp, #16
 690              	.LCFI18:
 691              		.cfi_def_cfa_offset 24
 692 0004 00AF     		add	r7, sp, #0
 693              	.LCFI19:
 694              		.cfi_def_cfa_register 7
 695 0006 F860     		str	r0, [r7, #12]
 696 0008 B960     		str	r1, [r7, #8]
 697 000a 1346     		mov	r3, r2
 698 000c FB80     		strh	r3, [r7, #6]	@ movhi
 288:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
 289:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 699              		.loc 1 289 0
 700 000e 4FF44060 		mov	r0, #3072
 701 0012 C4F20100 		movt	r0, 16385
 702 0016 4FF40071 		mov	r1, #512
 703 001a FFF7FEFF 		bl	GPIO_ResetBits
 290:../src/sst25vf_spi.c **** 
 291:../src/sst25vf_spi.c ****   /* Send "Read from Memory " instruction */
 292:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_READ);
 704              		.loc 1 292 0
 705 001e 4FF00300 		mov	r0, #3
 706 0022 FFF7FEFF 		bl	sFLASH_SendByte
 293:../src/sst25vf_spi.c **** 
 294:../src/sst25vf_spi.c ****   /* Send ReadAddr high nibble address byte to read from */
 295:../src/sst25vf_spi.c ****   sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 707              		.loc 1 295 0
 708 0026 BB68     		ldr	r3, [r7, #8]
 709 0028 03F47F03 		and	r3, r3, #16711680
 710 002c 4FEA1343 		lsr	r3, r3, #16
 711 0030 DBB2     		uxtb	r3, r3
 712 0032 1846     		mov	r0, r3
 713 0034 FFF7FEFF 		bl	sFLASH_SendByte
 296:../src/sst25vf_spi.c ****   /* Send ReadAddr medium nibble address byte to read from */
 297:../src/sst25vf_spi.c ****   sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 714              		.loc 1 297 0
 715 0038 BB68     		ldr	r3, [r7, #8]
 716 003a 03F47F43 		and	r3, r3, #65280
 717 003e 4FEA1323 		lsr	r3, r3, #8
 718 0042 DBB2     		uxtb	r3, r3
 719 0044 1846     		mov	r0, r3
 720 0046 FFF7FEFF 		bl	sFLASH_SendByte
 298:../src/sst25vf_spi.c ****   /* Send ReadAddr low nibble address byte to read from */
 299:../src/sst25vf_spi.c ****   sFLASH_SendByte(ReadAddr & 0xFF);
 721              		.loc 1 299 0
 722 004a BB68     		ldr	r3, [r7, #8]
 723 004c DBB2     		uxtb	r3, r3
 724 004e 1846     		mov	r0, r3
 725 0050 FFF7FEFF 		bl	sFLASH_SendByte
 300:../src/sst25vf_spi.c **** 
 301:../src/sst25vf_spi.c ****   while (NumByteToRead) /* while there is data to be read */
 726              		.loc 1 301 0
 727 0054 0FE0     		b	.L22
 728              	.L23:
 302:../src/sst25vf_spi.c ****   {
 303:../src/sst25vf_spi.c ****     /* Read a byte from the FLASH and point to the next location */
 304:../src/sst25vf_spi.c ****     *pBuffer++ = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 729              		.loc 1 304 0
 730 0056 4FF0FF00 		mov	r0, #255
 731 005a FFF7FEFF 		bl	sFLASH_SendByte
 732 005e 0346     		mov	r3, r0
 733 0060 1A46     		mov	r2, r3
 734 0062 FB68     		ldr	r3, [r7, #12]
 735 0064 1A70     		strb	r2, [r3, #0]
 736 0066 FB68     		ldr	r3, [r7, #12]
 737 0068 03F10103 		add	r3, r3, #1
 738 006c FB60     		str	r3, [r7, #12]
 305:../src/sst25vf_spi.c ****     /* Decrement NumByteToRead */
 306:../src/sst25vf_spi.c ****     NumByteToRead--;
 739              		.loc 1 306 0
 740 006e FB88     		ldrh	r3, [r7, #6]	@ movhi
 741 0070 03F1FF33 		add	r3, r3, #-1
 742 0074 FB80     		strh	r3, [r7, #6]	@ movhi
 743              	.L22:
 301:../src/sst25vf_spi.c ****   while (NumByteToRead) /* while there is data to be read */
 744              		.loc 1 301 0 discriminator 1
 745 0076 FB88     		ldrh	r3, [r7, #6]
 746 0078 002B     		cmp	r3, #0
 747 007a ECD1     		bne	.L23
 307:../src/sst25vf_spi.c ****   }
 308:../src/sst25vf_spi.c **** 
 309:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 310:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 748              		.loc 1 310 0
 749 007c 4FF44060 		mov	r0, #3072
 750 0080 C4F20100 		movt	r0, 16385
 751 0084 4FF40071 		mov	r1, #512
 752 0088 FFF7FEFF 		bl	GPIO_SetBits
 311:../src/sst25vf_spi.c **** }
 753              		.loc 1 311 0
 754 008c 07F11007 		add	r7, r7, #16
 755 0090 BD46     		mov	sp, r7
 756 0092 80BD     		pop	{r7, pc}
 757              		.cfi_endproc
 758              	.LFE62:
 760              		.section	.text.sFLASH_ReadID,"ax",%progbits
 761              		.align	2
 762              		.global	sFLASH_ReadID
 763              		.thumb
 764              		.thumb_func
 766              	sFLASH_ReadID:
 767              	.LFB63:
 312:../src/sst25vf_spi.c **** 
 313:../src/sst25vf_spi.c **** /**
 314:../src/sst25vf_spi.c ****   * @brief  Reads FLASH identification.
 315:../src/sst25vf_spi.c ****   * @param  None
 316:../src/sst25vf_spi.c ****   * @retval FLASH identification
 317:../src/sst25vf_spi.c ****   */
 318:../src/sst25vf_spi.c **** uint32_t sFLASH_ReadID(void)
 319:../src/sst25vf_spi.c **** {
 768              		.loc 1 319 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 16
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772 0000 80B5     		push	{r7, lr}
 773              	.LCFI20:
 774              		.cfi_def_cfa_offset 8
 775              		.cfi_offset 7, -8
 776              		.cfi_offset 14, -4
 777 0002 84B0     		sub	sp, sp, #16
 778              	.LCFI21:
 779              		.cfi_def_cfa_offset 24
 780 0004 00AF     		add	r7, sp, #0
 781              	.LCFI22:
 782              		.cfi_def_cfa_register 7
 320:../src/sst25vf_spi.c ****   uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 783              		.loc 1 320 0
 784 0006 4FF00003 		mov	r3, #0
 785 000a FB60     		str	r3, [r7, #12]
 786 000c 4FF00003 		mov	r3, #0
 787 0010 BB60     		str	r3, [r7, #8]
 788 0012 4FF00003 		mov	r3, #0
 789 0016 7B60     		str	r3, [r7, #4]
 790 0018 4FF00003 		mov	r3, #0
 791 001c 3B60     		str	r3, [r7, #0]
 321:../src/sst25vf_spi.c **** 
 322:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
 323:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 792              		.loc 1 323 0
 793 001e 4FF44060 		mov	r0, #3072
 794 0022 C4F20100 		movt	r0, 16385
 795 0026 4FF40071 		mov	r1, #512
 796 002a FFF7FEFF 		bl	GPIO_ResetBits
 324:../src/sst25vf_spi.c **** 
 325:../src/sst25vf_spi.c ****   /* Send "JEDEC ID Read" instruction */
 326:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_RDID);
 797              		.loc 1 326 0
 798 002e 4FF09F00 		mov	r0, #159
 799 0032 FFF7FEFF 		bl	sFLASH_SendByte
 327:../src/sst25vf_spi.c **** 
 328:../src/sst25vf_spi.c ****   /* Read a byte from the FLASH */
 329:../src/sst25vf_spi.c ****   Temp0 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 800              		.loc 1 329 0
 801 0036 4FF0FF00 		mov	r0, #255
 802 003a FFF7FEFF 		bl	sFLASH_SendByte
 803 003e 0346     		mov	r3, r0
 804 0040 BB60     		str	r3, [r7, #8]
 330:../src/sst25vf_spi.c **** 
 331:../src/sst25vf_spi.c ****   /* Read a byte from the FLASH */
 332:../src/sst25vf_spi.c ****   Temp1 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 805              		.loc 1 332 0
 806 0042 4FF0FF00 		mov	r0, #255
 807 0046 FFF7FEFF 		bl	sFLASH_SendByte
 808 004a 0346     		mov	r3, r0
 809 004c 7B60     		str	r3, [r7, #4]
 333:../src/sst25vf_spi.c **** 
 334:../src/sst25vf_spi.c ****   /* Read a byte from the FLASH */
 335:../src/sst25vf_spi.c ****   Temp2 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 810              		.loc 1 335 0
 811 004e 4FF0FF00 		mov	r0, #255
 812 0052 FFF7FEFF 		bl	sFLASH_SendByte
 813 0056 0346     		mov	r3, r0
 814 0058 3B60     		str	r3, [r7, #0]
 336:../src/sst25vf_spi.c **** 
 337:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 338:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 815              		.loc 1 338 0
 816 005a 4FF44060 		mov	r0, #3072
 817 005e C4F20100 		movt	r0, 16385
 818 0062 4FF40071 		mov	r1, #512
 819 0066 FFF7FEFF 		bl	GPIO_SetBits
 339:../src/sst25vf_spi.c **** 
 340:../src/sst25vf_spi.c ****   Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 820              		.loc 1 340 0
 821 006a BB68     		ldr	r3, [r7, #8]
 822 006c 4FEA0342 		lsl	r2, r3, #16
 823 0070 7B68     		ldr	r3, [r7, #4]
 824 0072 4FEA0323 		lsl	r3, r3, #8
 825 0076 1A43     		orrs	r2, r2, r3
 826 0078 3B68     		ldr	r3, [r7, #0]
 827 007a 1343     		orrs	r3, r3, r2
 828 007c FB60     		str	r3, [r7, #12]
 341:../src/sst25vf_spi.c **** 
 342:../src/sst25vf_spi.c ****   return Temp;
 829              		.loc 1 342 0
 830 007e FB68     		ldr	r3, [r7, #12]
 343:../src/sst25vf_spi.c **** }
 831              		.loc 1 343 0
 832 0080 1846     		mov	r0, r3
 833 0082 07F11007 		add	r7, r7, #16
 834 0086 BD46     		mov	sp, r7
 835 0088 80BD     		pop	{r7, pc}
 836              		.cfi_endproc
 837              	.LFE63:
 839 008a 00BF     		.section	.text.sFLASH_SendByte,"ax",%progbits
 840              		.align	2
 841              		.global	sFLASH_SendByte
 842              		.thumb
 843              		.thumb_func
 845              	sFLASH_SendByte:
 846              	.LFB64:
 344:../src/sst25vf_spi.c **** 
 345:../src/sst25vf_spi.c **** 
 346:../src/sst25vf_spi.c **** /**
 347:../src/sst25vf_spi.c ****   * @brief  Sends a byte through the SPI interface and return the byte received
 348:../src/sst25vf_spi.c ****   *         from the SPI bus.
 349:../src/sst25vf_spi.c ****   * @param  byte: byte to send.
 350:../src/sst25vf_spi.c ****   * @retval The value of the received byte.
 351:../src/sst25vf_spi.c ****   */
 352:../src/sst25vf_spi.c **** uint8_t sFLASH_SendByte(uint8_t byte)
 353:../src/sst25vf_spi.c **** {
 847              		.loc 1 353 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 8
 850              		@ frame_needed = 1, uses_anonymous_args = 0
 851 0000 80B5     		push	{r7, lr}
 852              	.LCFI23:
 853              		.cfi_def_cfa_offset 8
 854              		.cfi_offset 7, -8
 855              		.cfi_offset 14, -4
 856 0002 82B0     		sub	sp, sp, #8
 857              	.LCFI24:
 858              		.cfi_def_cfa_offset 16
 859 0004 00AF     		add	r7, sp, #0
 860              	.LCFI25:
 861              		.cfi_def_cfa_register 7
 862 0006 0346     		mov	r3, r0
 863 0008 FB71     		strb	r3, [r7, #7]
 354:../src/sst25vf_spi.c ****   /* Loop while DR register in not empty */
 355:../src/sst25vf_spi.c ****   while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
 864              		.loc 1 355 0
 865 000a 00BF     		nop
 866              	.L27:
 867              		.loc 1 355 0 is_stmt 0 discriminator 1
 868 000c 4FF46050 		mov	r0, #14336
 869 0010 C4F20000 		movt	r0, 16384
 870 0014 4FF00201 		mov	r1, #2
 871 0018 FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 872 001c 0346     		mov	r3, r0
 873 001e 002B     		cmp	r3, #0
 874 0020 F4D0     		beq	.L27
 356:../src/sst25vf_spi.c **** 
 357:../src/sst25vf_spi.c ****   /* Send byte through the SPI peripheral */
 358:../src/sst25vf_spi.c ****   SPI_I2S_SendData(sFLASH_SPI, byte);
 875              		.loc 1 358 0 is_stmt 1
 876 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 877 0024 9BB2     		uxth	r3, r3
 878 0026 4FF46050 		mov	r0, #14336
 879 002a C4F20000 		movt	r0, 16384
 880 002e 1946     		mov	r1, r3
 881 0030 FFF7FEFF 		bl	SPI_I2S_SendData
 359:../src/sst25vf_spi.c **** 
 360:../src/sst25vf_spi.c ****   /* Wait to receive a byte */
 361:../src/sst25vf_spi.c ****   while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
 882              		.loc 1 361 0
 883 0034 00BF     		nop
 884              	.L28:
 885              		.loc 1 361 0 is_stmt 0 discriminator 1
 886 0036 4FF46050 		mov	r0, #14336
 887 003a C4F20000 		movt	r0, 16384
 888 003e 4FF00101 		mov	r1, #1
 889 0042 FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
 890 0046 0346     		mov	r3, r0
 891 0048 002B     		cmp	r3, #0
 892 004a F4D0     		beq	.L28
 362:../src/sst25vf_spi.c **** 
 363:../src/sst25vf_spi.c ****   /* Return the byte read from the SPI bus */
 364:../src/sst25vf_spi.c ****   return SPI_I2S_ReceiveData(sFLASH_SPI);
 893              		.loc 1 364 0 is_stmt 1
 894 004c 4FF46050 		mov	r0, #14336
 895 0050 C4F20000 		movt	r0, 16384
 896 0054 FFF7FEFF 		bl	SPI_I2S_ReceiveData
 897 0058 0346     		mov	r3, r0
 898 005a DBB2     		uxtb	r3, r3
 365:../src/sst25vf_spi.c **** }
 899              		.loc 1 365 0
 900 005c 1846     		mov	r0, r3
 901 005e 07F10807 		add	r7, r7, #8
 902 0062 BD46     		mov	sp, r7
 903 0064 80BD     		pop	{r7, pc}
 904              		.cfi_endproc
 905              	.LFE64:
 907 0066 00BF     		.section	.text.sFLASH_WriteEnable,"ax",%progbits
 908              		.align	2
 909              		.global	sFLASH_WriteEnable
 910              		.thumb
 911              		.thumb_func
 913              	sFLASH_WriteEnable:
 914              	.LFB65:
 366:../src/sst25vf_spi.c **** 
 367:../src/sst25vf_spi.c **** /**
 368:../src/sst25vf_spi.c ****   * @brief  Enables the write access to the FLASH.
 369:../src/sst25vf_spi.c ****   * @param  None
 370:../src/sst25vf_spi.c ****   * @retval None
 371:../src/sst25vf_spi.c ****   */
 372:../src/sst25vf_spi.c **** void sFLASH_WriteEnable(void)
 373:../src/sst25vf_spi.c **** {
 915              		.loc 1 373 0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 1, uses_anonymous_args = 0
 919 0000 80B5     		push	{r7, lr}
 920              	.LCFI26:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 00AF     		add	r7, sp, #0
 925              	.LCFI27:
 926              		.cfi_def_cfa_register 7
 374:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
 375:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 927              		.loc 1 375 0
 928 0004 4FF44060 		mov	r0, #3072
 929 0008 C4F20100 		movt	r0, 16385
 930 000c 4FF40071 		mov	r1, #512
 931 0010 FFF7FEFF 		bl	GPIO_ResetBits
 376:../src/sst25vf_spi.c **** 
 377:../src/sst25vf_spi.c ****   /* Send "Write Enable" instruction */
 378:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_WREN);
 932              		.loc 1 378 0
 933 0014 4FF00600 		mov	r0, #6
 934 0018 FFF7FEFF 		bl	sFLASH_SendByte
 379:../src/sst25vf_spi.c **** 
 380:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 381:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 935              		.loc 1 381 0
 936 001c 4FF44060 		mov	r0, #3072
 937 0020 C4F20100 		movt	r0, 16385
 938 0024 4FF40071 		mov	r1, #512
 939 0028 FFF7FEFF 		bl	GPIO_SetBits
 382:../src/sst25vf_spi.c **** }
 940              		.loc 1 382 0
 941 002c 80BD     		pop	{r7, pc}
 942              		.cfi_endproc
 943              	.LFE65:
 945 002e 00BF     		.section	.text.sFLASH_WriteDisable,"ax",%progbits
 946              		.align	2
 947              		.global	sFLASH_WriteDisable
 948              		.thumb
 949              		.thumb_func
 951              	sFLASH_WriteDisable:
 952              	.LFB66:
 383:../src/sst25vf_spi.c **** 
 384:../src/sst25vf_spi.c **** /**
 385:../src/sst25vf_spi.c ****   * @brief  Disables the write access to the FLASH.
 386:../src/sst25vf_spi.c ****   * @param  None
 387:../src/sst25vf_spi.c ****   * @retval None
 388:../src/sst25vf_spi.c ****   */
 389:../src/sst25vf_spi.c **** void sFLASH_WriteDisable(void)
 390:../src/sst25vf_spi.c **** {
 953              		.loc 1 390 0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 1, uses_anonymous_args = 0
 957 0000 80B5     		push	{r7, lr}
 958              	.LCFI28:
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 7, -8
 961              		.cfi_offset 14, -4
 962 0002 00AF     		add	r7, sp, #0
 963              	.LCFI29:
 964              		.cfi_def_cfa_register 7
 391:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
 392:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 965              		.loc 1 392 0
 966 0004 4FF44060 		mov	r0, #3072
 967 0008 C4F20100 		movt	r0, 16385
 968 000c 4FF40071 		mov	r1, #512
 969 0010 FFF7FEFF 		bl	GPIO_ResetBits
 393:../src/sst25vf_spi.c **** 
 394:../src/sst25vf_spi.c ****   /* Send "Write Disable" instruction */
 395:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_WRDI);
 970              		.loc 1 395 0
 971 0014 4FF00400 		mov	r0, #4
 972 0018 FFF7FEFF 		bl	sFLASH_SendByte
 396:../src/sst25vf_spi.c **** 
 397:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 398:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 973              		.loc 1 398 0
 974 001c 4FF44060 		mov	r0, #3072
 975 0020 C4F20100 		movt	r0, 16385
 976 0024 4FF40071 		mov	r1, #512
 977 0028 FFF7FEFF 		bl	GPIO_SetBits
 399:../src/sst25vf_spi.c **** }
 978              		.loc 1 399 0
 979 002c 80BD     		pop	{r7, pc}
 980              		.cfi_endproc
 981              	.LFE66:
 983 002e 00BF     		.section	.text.sFLASH_WaitForWriteEnd,"ax",%progbits
 984              		.align	2
 985              		.global	sFLASH_WaitForWriteEnd
 986              		.thumb
 987              		.thumb_func
 989              	sFLASH_WaitForWriteEnd:
 990              	.LFB67:
 400:../src/sst25vf_spi.c **** 
 401:../src/sst25vf_spi.c **** /**
 402:../src/sst25vf_spi.c ****   * @brief  Polls the status of the Write In Progress (WIP) flag in the FLASH's
 403:../src/sst25vf_spi.c ****   *         status register and loop until write operation has completed.
 404:../src/sst25vf_spi.c ****   * @param  None
 405:../src/sst25vf_spi.c ****   * @retval None
 406:../src/sst25vf_spi.c ****   */
 407:../src/sst25vf_spi.c **** void sFLASH_WaitForWriteEnd(void)
 408:../src/sst25vf_spi.c **** {
 991              		.loc 1 408 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 8
 994              		@ frame_needed = 1, uses_anonymous_args = 0
 995 0000 80B5     		push	{r7, lr}
 996              	.LCFI30:
 997              		.cfi_def_cfa_offset 8
 998              		.cfi_offset 7, -8
 999              		.cfi_offset 14, -4
 1000 0002 82B0     		sub	sp, sp, #8
 1001              	.LCFI31:
 1002              		.cfi_def_cfa_offset 16
 1003 0004 00AF     		add	r7, sp, #0
 1004              	.LCFI32:
 1005              		.cfi_def_cfa_register 7
 409:../src/sst25vf_spi.c ****   uint8_t flashstatus = 0;
 1006              		.loc 1 409 0
 1007 0006 4FF00003 		mov	r3, #0
 1008 000a FB71     		strb	r3, [r7, #7]
 410:../src/sst25vf_spi.c **** 
 411:../src/sst25vf_spi.c ****   /* Select the FLASH: Chip Select low */
 412:../src/sst25vf_spi.c ****   sFLASH_CS_LOW();
 1009              		.loc 1 412 0
 1010 000c 4FF44060 		mov	r0, #3072
 1011 0010 C4F20100 		movt	r0, 16385
 1012 0014 4FF40071 		mov	r1, #512
 1013 0018 FFF7FEFF 		bl	GPIO_ResetBits
 413:../src/sst25vf_spi.c **** 
 414:../src/sst25vf_spi.c ****   /* Send "Read Status Register" instruction */
 415:../src/sst25vf_spi.c ****   sFLASH_SendByte(sFLASH_CMD_RDSR);
 1014              		.loc 1 415 0
 1015 001c 4FF00500 		mov	r0, #5
 1016 0020 FFF7FEFF 		bl	sFLASH_SendByte
 1017              	.L33:
 416:../src/sst25vf_spi.c **** 
 417:../src/sst25vf_spi.c ****   /* Loop as long as the memory is busy with a write cycle */
 418:../src/sst25vf_spi.c ****   do
 419:../src/sst25vf_spi.c ****   {
 420:../src/sst25vf_spi.c ****     /* Send a dummy byte to generate the clock needed by the FLASH
 421:../src/sst25vf_spi.c ****     and put the value of the status register in FLASH_Status variable */
 422:../src/sst25vf_spi.c ****     flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 1018              		.loc 1 422 0 discriminator 1
 1019 0024 4FF0FF00 		mov	r0, #255
 1020 0028 FFF7FEFF 		bl	sFLASH_SendByte
 1021 002c 0346     		mov	r3, r0
 1022 002e FB71     		strb	r3, [r7, #7]
 423:../src/sst25vf_spi.c ****   }
 424:../src/sst25vf_spi.c ****   while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 1023              		.loc 1 424 0 discriminator 1
 1024 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1025 0032 03F00103 		and	r3, r3, #1
 1026 0036 002B     		cmp	r3, #0
 1027 0038 F4D1     		bne	.L33
 425:../src/sst25vf_spi.c **** 
 426:../src/sst25vf_spi.c ****   /* Deselect the FLASH: Chip Select high */
 427:../src/sst25vf_spi.c ****   sFLASH_CS_HIGH();
 1028              		.loc 1 427 0
 1029 003a 4FF44060 		mov	r0, #3072
 1030 003e C4F20100 		movt	r0, 16385
 1031 0042 4FF40071 		mov	r1, #512
 1032 0046 FFF7FEFF 		bl	GPIO_SetBits
 428:../src/sst25vf_spi.c **** }
 1033              		.loc 1 428 0
 1034 004a 07F10807 		add	r7, r7, #8
 1035 004e BD46     		mov	sp, r7
 1036 0050 80BD     		pop	{r7, pc}
 1037              		.cfi_endproc
 1038              	.LFE67:
 1040 0052 00BF     		.section	.rodata
 1041              		.align	2
 1042              	.LC0:
 1043 0000 54657374 		.ascii	"Test communication with SPI FLASH!\000"
 1043      20636F6D 
 1043      6D756E69 
 1043      63617469 
 1043      6F6E2077 
 1044 0023 00       		.section	.text.sFLASH_SelfTest,"ax",%progbits
 1045              		.align	2
 1046              		.global	sFLASH_SelfTest
 1047              		.thumb
 1048              		.thumb_func
 1050              	sFLASH_SelfTest:
 1051              	.LFB68:
 429:../src/sst25vf_spi.c **** 
 430:../src/sst25vf_spi.c **** void sFLASH_SelfTest(void)
 431:../src/sst25vf_spi.c **** {
 1052              		.loc 1 431 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 64
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1057              	.LCFI33:
 1058              		.cfi_def_cfa_offset 36
 1059              		.cfi_offset 4, -36
 1060              		.cfi_offset 5, -32
 1061              		.cfi_offset 6, -28
 1062              		.cfi_offset 7, -24
 1063              		.cfi_offset 8, -20
 1064              		.cfi_offset 9, -16
 1065              		.cfi_offset 10, -12
 1066              		.cfi_offset 11, -8
 1067              		.cfi_offset 14, -4
 1068 0004 91B0     		sub	sp, sp, #68
 1069              	.LCFI34:
 1070              		.cfi_def_cfa_offset 104
 1071 0006 00AF     		add	r7, sp, #0
 1072              	.LCFI35:
 1073              		.cfi_def_cfa_register 7
 1074 0008 6B46     		mov	r3, sp
 1075 000a 1E46     		mov	r6, r3
 432:../src/sst25vf_spi.c ****   uint32_t FLASH_TestAddress = 0x000000;
 1076              		.loc 1 432 0
 1077 000c 4FF00003 		mov	r3, #0
 1078 0010 BB63     		str	r3, [r7, #56]
 433:../src/sst25vf_spi.c ****   //Note: Make sure BufferSize should be Even and not Zero
 434:../src/sst25vf_spi.c ****   uint8_t Tx_Buffer[] = "Test communication with SPI FLASH!";//BufferSize = 34
 1079              		.loc 1 434 0
 1080 0012 40F20003 		movw	r3, #:lower16:.LC0
 1081 0016 C0F20003 		movt	r3, #:upper16:.LC0
 1082 001a 07F10404 		add	r4, r7, #4
 1083 001e 1D46     		mov	r5, r3
 1084 0020 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1085 0022 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1086 0024 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1087 0026 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1088 0028 2B68     		ldr	r3, [r5, #0]
 1089 002a 1A46     		mov	r2, r3	@ movhi
 1090 002c 2280     		strh	r2, [r4, #0]	@ movhi
 1091 002e 04F10204 		add	r4, r4, #2
 1092 0032 4FEA1343 		lsr	r3, r3, #16
 1093 0036 2370     		strb	r3, [r4, #0]
 435:../src/sst25vf_spi.c ****   uint32_t BufferSize = (sizeof(Tx_Buffer) / sizeof(*(Tx_Buffer))) - 1;
 1094              		.loc 1 435 0
 1095 0038 4FF02203 		mov	r3, #34
 1096 003c 7B63     		str	r3, [r7, #52]
 436:../src/sst25vf_spi.c ****   uint8_t Rx_Buffer[BufferSize];
 1097              		.loc 1 436 0
 1098 003e 796B     		ldr	r1, [r7, #52]
 1099 0040 0B46     		mov	r3, r1
 1100 0042 03F1FF33 		add	r3, r3, #-1
 1101 0046 3B63     		str	r3, [r7, #48]
 1102 0048 0A46     		mov	r2, r1
 1103 004a 4FF00003 		mov	r3, #0
 1104 004e 4FEA5270 		lsr	r0, r2, #29
 1105 0052 4FEAC30B 		lsl	fp, r3, #3
 1106 0056 40EA0B0B 		orr	fp, r0, fp
 1107 005a 4FEAC20A 		lsl	sl, r2, #3
 1108 005e 0A46     		mov	r2, r1
 1109 0060 4FF00003 		mov	r3, #0
 1110 0064 4FEA5270 		lsr	r0, r2, #29
 1111 0068 4FEAC309 		lsl	r9, r3, #3
 1112 006c 40EA0909 		orr	r9, r0, r9
 1113 0070 4FEAC208 		lsl	r8, r2, #3
 1114 0074 0B46     		mov	r3, r1
 1115 0076 03F10703 		add	r3, r3, #7
 1116 007a 4FEAD303 		lsr	r3, r3, #3
 1117 007e 4FEAC303 		lsl	r3, r3, #3
 1118 0082 ADEB030D 		sub	sp, sp, r3
 1119 0086 6B46     		mov	r3, sp
 1120 0088 03F10003 		add	r3, r3, #0
 1121 008c FB62     		str	r3, [r7, #44]
 437:../src/sst25vf_spi.c ****   uint8_t Index = 0;
 1122              		.loc 1 437 0
 1123 008e 4FF00003 		mov	r3, #0
 1124 0092 87F83F30 		strb	r3, [r7, #63]
 438:../src/sst25vf_spi.c ****   uint32_t FlashID = 0;
 1125              		.loc 1 438 0
 1126 0096 4FF00003 		mov	r3, #0
 1127 009a BB62     		str	r3, [r7, #40]
 439:../src/sst25vf_spi.c ****   uint8_t TestStatus = 0;
 1128              		.loc 1 439 0
 1129 009c 4FF00003 		mov	r3, #0
 1130 00a0 87F83E30 		strb	r3, [r7, #62]
 440:../src/sst25vf_spi.c ****   uint8_t LEDToggle = 0;
 1131              		.loc 1 440 0
 1132 00a4 4FF00003 		mov	r3, #0
 1133 00a8 87F83D30 		strb	r3, [r7, #61]
 441:../src/sst25vf_spi.c **** 
 442:../src/sst25vf_spi.c ****   /* Get SPI Flash ID */
 443:../src/sst25vf_spi.c ****   FlashID = sFLASH_ReadID();
 1134              		.loc 1 443 0
 1135 00ac FFF7FEFF 		bl	sFLASH_ReadID
 1136 00b0 B862     		str	r0, [r7, #40]
 444:../src/sst25vf_spi.c **** 
 445:../src/sst25vf_spi.c ****   /* Check the SPI Flash ID */
 446:../src/sst25vf_spi.c ****   if(FlashID == sFLASH_SST25VF040_ID || FlashID == sFLASH_SST25VF016_ID)
 1137              		.loc 1 446 0
 1138 00b2 BA6A     		ldr	r2, [r7, #40]
 1139 00b4 42F28D53 		movw	r3, #9613
 1140 00b8 C0F2BF03 		movt	r3, 191
 1141 00bc 9A42     		cmp	r2, r3
 1142 00be 07D0     		beq	.L35
 1143              		.loc 1 446 0 is_stmt 0 discriminator 1
 1144 00c0 BA6A     		ldr	r2, [r7, #40]
 1145 00c2 42F24153 		movw	r3, #9537
 1146 00c6 C0F2BF03 		movt	r3, 191
 1147 00ca 9A42     		cmp	r2, r3
 1148 00cc 40F0B680 		bne	.L36
 1149              	.L35:
 447:../src/sst25vf_spi.c ****   {
 448:../src/sst25vf_spi.c ****     /* Perform a write in the Flash followed by a read of the written data */
 449:../src/sst25vf_spi.c ****     /* Erase SPI FLASH Sector to write on */
 450:../src/sst25vf_spi.c ****     sFLASH_EraseSector(FLASH_TestAddress);
 1150              		.loc 1 450 0 is_stmt 1
 1151 00d0 B86B     		ldr	r0, [r7, #56]
 1152 00d2 FFF7FEFF 		bl	sFLASH_EraseSector
 451:../src/sst25vf_spi.c **** 
 452:../src/sst25vf_spi.c ****     /* Write Tx_Buffer data to SPI FLASH memory */
 453:../src/sst25vf_spi.c ****     sFLASH_WriteBuffer(Tx_Buffer, FLASH_TestAddress, BufferSize);
 1153              		.loc 1 453 0
 1154 00d6 7B6B     		ldr	r3, [r7, #52]
 1155 00d8 9BB2     		uxth	r3, r3
 1156 00da 07F10402 		add	r2, r7, #4
 1157 00de 1046     		mov	r0, r2
 1158 00e0 B96B     		ldr	r1, [r7, #56]
 1159 00e2 1A46     		mov	r2, r3
 1160 00e4 FFF7FEFF 		bl	sFLASH_WriteBuffer
 454:../src/sst25vf_spi.c **** 
 455:../src/sst25vf_spi.c ****     /* Read data from SPI FLASH memory */
 456:../src/sst25vf_spi.c ****     sFLASH_ReadBuffer(Rx_Buffer, FLASH_TestAddress, BufferSize);
 1161              		.loc 1 456 0
 1162 00e8 FA6A     		ldr	r2, [r7, #44]
 1163 00ea 7B6B     		ldr	r3, [r7, #52]
 1164 00ec 9BB2     		uxth	r3, r3
 1165 00ee 1046     		mov	r0, r2
 1166 00f0 B96B     		ldr	r1, [r7, #56]
 1167 00f2 1A46     		mov	r2, r3
 1168 00f4 FFF7FEFF 		bl	sFLASH_ReadBuffer
 457:../src/sst25vf_spi.c **** 
 458:../src/sst25vf_spi.c ****     /* Check the correctness of written data */
 459:../src/sst25vf_spi.c ****     for (Index = 0; Index < BufferSize; Index++)
 1169              		.loc 1 459 0
 1170 00f8 4FF00003 		mov	r3, #0
 1171 00fc 87F83F30 		strb	r3, [r7, #63]
 1172 0100 1BE0     		b	.L37
 1173              	.L40:
 460:../src/sst25vf_spi.c ****     {
 461:../src/sst25vf_spi.c ****       if (Tx_Buffer[Index] != Rx_Buffer[Index])
 1174              		.loc 1 461 0
 1175 0102 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1176 0106 07F14002 		add	r2, r7, #64
 1177 010a D318     		adds	r3, r2, r3
 1178 010c 13F83C2C 		ldrb	r2, [r3, #-60]	@ zero_extendqisi2
 1179 0110 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1180 0114 F96A     		ldr	r1, [r7, #44]
 1181 0116 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1182 0118 9A42     		cmp	r2, r3
 1183 011a 04D0     		beq	.L38
 462:../src/sst25vf_spi.c ****       {
 463:../src/sst25vf_spi.c ****         //FAILED : Transmitted and Received data by SPI are different
 464:../src/sst25vf_spi.c ****         TestStatus = 0;
 1184              		.loc 1 464 0
 1185 011c 4FF00003 		mov	r3, #0
 1186 0120 87F83E30 		strb	r3, [r7, #62]
 1187 0124 03E0     		b	.L39
 1188              	.L38:
 465:../src/sst25vf_spi.c ****       }
 466:../src/sst25vf_spi.c ****       else
 467:../src/sst25vf_spi.c ****       {
 468:../src/sst25vf_spi.c ****         //PASSED : Transmitted and Received data by SPI are same
 469:../src/sst25vf_spi.c ****         TestStatus = 1;
 1189              		.loc 1 469 0
 1190 0126 4FF00103 		mov	r3, #1
 1191 012a 87F83E30 		strb	r3, [r7, #62]
 1192              	.L39:
 459:../src/sst25vf_spi.c ****     for (Index = 0; Index < BufferSize; Index++)
 1193              		.loc 1 459 0
 1194 012e 97F83F30 		ldrb	r3, [r7, #63]
 1195 0132 03F10103 		add	r3, r3, #1
 1196 0136 87F83F30 		strb	r3, [r7, #63]
 1197              	.L37:
 459:../src/sst25vf_spi.c ****     for (Index = 0; Index < BufferSize; Index++)
 1198              		.loc 1 459 0 is_stmt 0 discriminator 1
 1199 013a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1200 013e 7B6B     		ldr	r3, [r7, #52]
 1201 0140 9A42     		cmp	r2, r3
 1202 0142 DED3     		bcc	.L40
 470:../src/sst25vf_spi.c ****       }
 471:../src/sst25vf_spi.c ****     }
 472:../src/sst25vf_spi.c **** 
 473:../src/sst25vf_spi.c ****     /* Display Test Status */
 474:../src/sst25vf_spi.c ****     if (TestStatus != 0)
 1203              		.loc 1 474 0 is_stmt 1
 1204 0144 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1205 0148 002B     		cmp	r3, #0
 1206 014a 04D0     		beq	.L41
 475:../src/sst25vf_spi.c ****     {
 476:../src/sst25vf_spi.c ****       LED_On(LED2);
 1207              		.loc 1 476 0
 1208 014c 4FF00100 		mov	r0, #1
 1209 0150 FFF7FEFF 		bl	LED_On
 1210 0154 1FE0     		b	.L42
 1211              	.L41:
 477:../src/sst25vf_spi.c ****     }
 478:../src/sst25vf_spi.c ****     else
 479:../src/sst25vf_spi.c ****     {
 480:../src/sst25vf_spi.c ****       LEDToggle = 10;
 1212              		.loc 1 480 0
 1213 0156 4FF00A03 		mov	r3, #10
 1214 015a 87F83D30 		strb	r3, [r7, #61]
 481:../src/sst25vf_spi.c ****       while (LEDToggle--)
 1215              		.loc 1 481 0
 1216 015e 07E0     		b	.L43
 1217              	.L44:
 482:../src/sst25vf_spi.c ****       {
 483:../src/sst25vf_spi.c ****         /* Toggle the LED2 every 250ms */
 484:../src/sst25vf_spi.c ****         LED_Toggle(LED2);
 1218              		.loc 1 484 0
 1219 0160 4FF00100 		mov	r0, #1
 1220 0164 FFF7FEFF 		bl	LED_Toggle
 485:../src/sst25vf_spi.c ****         Delay(250);
 1221              		.loc 1 485 0
 1222 0168 4FF0FA00 		mov	r0, #250
 1223 016c FFF7FEFF 		bl	Delay
 1224              	.L43:
 481:../src/sst25vf_spi.c ****       while (LEDToggle--)
 1225              		.loc 1 481 0 discriminator 1
 1226 0170 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1227 0174 002B     		cmp	r3, #0
 1228 0176 0CBF     		ite	eq
 1229 0178 0023     		moveq	r3, #0
 1230 017a 0123     		movne	r3, #1
 1231 017c DBB2     		uxtb	r3, r3
 1232 017e 97F83D20 		ldrb	r2, [r7, #61]
 1233 0182 02F1FF32 		add	r2, r2, #-1
 1234 0186 87F83D20 		strb	r2, [r7, #61]
 1235 018a 002B     		cmp	r3, #0
 1236 018c E8D1     		bne	.L44
 486:../src/sst25vf_spi.c ****       }
 487:../src/sst25vf_spi.c ****       LED_Off(LED2);
 1237              		.loc 1 487 0
 1238 018e 4FF00100 		mov	r0, #1
 1239 0192 FFF7FEFF 		bl	LED_Off
 1240              	.L42:
 488:../src/sst25vf_spi.c ****     }
 489:../src/sst25vf_spi.c **** 
 490:../src/sst25vf_spi.c ****     /* Perform an erase in the Flash followed by a read of the written data */
 491:../src/sst25vf_spi.c ****     /* Erase SPI FLASH Sector to write on */
 492:../src/sst25vf_spi.c ****     sFLASH_EraseSector(FLASH_TestAddress);
 1241              		.loc 1 492 0
 1242 0196 B86B     		ldr	r0, [r7, #56]
 1243 0198 FFF7FEFF 		bl	sFLASH_EraseSector
 493:../src/sst25vf_spi.c **** 
 494:../src/sst25vf_spi.c ****     /* Read data from SPI FLASH memory */
 495:../src/sst25vf_spi.c ****     sFLASH_ReadBuffer(Rx_Buffer, FLASH_TestAddress, BufferSize);
 1244              		.loc 1 495 0
 1245 019c FA6A     		ldr	r2, [r7, #44]
 1246 019e 7B6B     		ldr	r3, [r7, #52]
 1247 01a0 9BB2     		uxth	r3, r3
 1248 01a2 1046     		mov	r0, r2
 1249 01a4 B96B     		ldr	r1, [r7, #56]
 1250 01a6 1A46     		mov	r2, r3
 1251 01a8 FFF7FEFF 		bl	sFLASH_ReadBuffer
 496:../src/sst25vf_spi.c **** 
 497:../src/sst25vf_spi.c ****     /* Check the correctness of erasing operation data */
 498:../src/sst25vf_spi.c ****     for (Index = 0; Index < BufferSize; Index++)
 1252              		.loc 1 498 0
 1253 01ac 4FF00003 		mov	r3, #0
 1254 01b0 87F83F30 		strb	r3, [r7, #63]
 1255 01b4 3DE0     		b	.L45
 1256              	.L52:
 499:../src/sst25vf_spi.c ****     {
 500:../src/sst25vf_spi.c ****       if (Rx_Buffer[Index] != 0xFF)
 1257              		.loc 1 500 0
 1258 01b6 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1259 01ba FA6A     		ldr	r2, [r7, #44]
 1260 01bc D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1261 01be FF2B     		cmp	r3, #255
 1262 01c0 04D0     		beq	.L46
 501:../src/sst25vf_spi.c ****       {
 502:../src/sst25vf_spi.c ****         //FAILED : Specified sector part is not well erased
 503:../src/sst25vf_spi.c ****         TestStatus = 0;
 1263              		.loc 1 503 0
 1264 01c2 4FF00003 		mov	r3, #0
 1265 01c6 87F83E30 		strb	r3, [r7, #62]
 1266 01ca 03E0     		b	.L47
 1267              	.L46:
 504:../src/sst25vf_spi.c ****       }
 505:../src/sst25vf_spi.c ****       else
 506:../src/sst25vf_spi.c ****       {
 507:../src/sst25vf_spi.c ****         //PASSED : Specified sector part is erased
 508:../src/sst25vf_spi.c ****     	TestStatus = 1;
 1268              		.loc 1 508 0
 1269 01cc 4FF00103 		mov	r3, #1
 1270 01d0 87F83E30 		strb	r3, [r7, #62]
 1271              	.L47:
 509:../src/sst25vf_spi.c ****       }
 510:../src/sst25vf_spi.c **** 
 511:../src/sst25vf_spi.c ****       /* Display Test Status */
 512:../src/sst25vf_spi.c ****       if (TestStatus != 0)
 1272              		.loc 1 512 0
 1273 01d4 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1274 01d8 002B     		cmp	r3, #0
 1275 01da 04D0     		beq	.L48
 513:../src/sst25vf_spi.c ****       {
 514:../src/sst25vf_spi.c ****         LED_On(LED2);
 1276              		.loc 1 514 0
 1277 01dc 4FF00100 		mov	r0, #1
 1278 01e0 FFF7FEFF 		bl	LED_On
 1279 01e4 1FE0     		b	.L49
 1280              	.L48:
 515:../src/sst25vf_spi.c ****       }
 516:../src/sst25vf_spi.c ****       else
 517:../src/sst25vf_spi.c ****       {
 518:../src/sst25vf_spi.c ****         LEDToggle = 10;
 1281              		.loc 1 518 0
 1282 01e6 4FF00A03 		mov	r3, #10
 1283 01ea 87F83D30 		strb	r3, [r7, #61]
 519:../src/sst25vf_spi.c ****         while (LEDToggle--)
 1284              		.loc 1 519 0
 1285 01ee 07E0     		b	.L50
 1286              	.L51:
 520:../src/sst25vf_spi.c ****         {
 521:../src/sst25vf_spi.c ****           /* Toggle the LED2 every 250ms */
 522:../src/sst25vf_spi.c ****           LED_Toggle(LED2);
 1287              		.loc 1 522 0
 1288 01f0 4FF00100 		mov	r0, #1
 1289 01f4 FFF7FEFF 		bl	LED_Toggle
 523:../src/sst25vf_spi.c ****           Delay(250);
 1290              		.loc 1 523 0
 1291 01f8 4FF0FA00 		mov	r0, #250
 1292 01fc FFF7FEFF 		bl	Delay
 1293              	.L50:
 519:../src/sst25vf_spi.c ****         while (LEDToggle--)
 1294              		.loc 1 519 0 discriminator 1
 1295 0200 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1296 0204 002B     		cmp	r3, #0
 1297 0206 0CBF     		ite	eq
 1298 0208 0023     		moveq	r3, #0
 1299 020a 0123     		movne	r3, #1
 1300 020c DBB2     		uxtb	r3, r3
 1301 020e 97F83D20 		ldrb	r2, [r7, #61]
 1302 0212 02F1FF32 		add	r2, r2, #-1
 1303 0216 87F83D20 		strb	r2, [r7, #61]
 1304 021a 002B     		cmp	r3, #0
 1305 021c E8D1     		bne	.L51
 524:../src/sst25vf_spi.c ****         }
 525:../src/sst25vf_spi.c ****         LED_Off(LED2);
 1306              		.loc 1 525 0
 1307 021e 4FF00100 		mov	r0, #1
 1308 0222 FFF7FEFF 		bl	LED_Off
 1309              	.L49:
 498:../src/sst25vf_spi.c ****     for (Index = 0; Index < BufferSize; Index++)
 1310              		.loc 1 498 0
 1311 0226 97F83F30 		ldrb	r3, [r7, #63]
 1312 022a 03F10103 		add	r3, r3, #1
 1313 022e 87F83F30 		strb	r3, [r7, #63]
 1314              	.L45:
 498:../src/sst25vf_spi.c ****     for (Index = 0; Index < BufferSize; Index++)
 1315              		.loc 1 498 0 is_stmt 0 discriminator 1
 1316 0232 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1317 0236 7B6B     		ldr	r3, [r7, #52]
 1318 0238 9A42     		cmp	r2, r3
 1319 023a BCD3     		bcc	.L52
 1320              	.L36:
 1321 023c B546     		mov	sp, r6
 526:../src/sst25vf_spi.c ****       }
 527:../src/sst25vf_spi.c ****     }
 528:../src/sst25vf_spi.c ****   }
 529:../src/sst25vf_spi.c **** }
 1322              		.loc 1 529 0 is_stmt 1
 1323 023e 07F14407 		add	r7, r7, #68
 1324 0242 BD46     		mov	sp, r7
 1325 0244 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1326              		.cfi_endproc
 1327              	.LFE68:
 1329              		.text
 1330              	.Letext0:
 1331              		.file 2 "/usr/local/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../ar
 1332              		.file 3 "/Users/zac/code/spark/marvin/libraries/CMSIS/Device/ST/STM32F10x/Include/stm32f10x.h"
 1333              		.file 4 "/Users/zac/code/spark/marvin/inc/hw_config.h"
 1334              		.file 5 "/Users/zac/code/spark/marvin/libraries/CMSIS/Include/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sst25vf_spi.c
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:19     .text.sFLASH_Init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:24     .text.sFLASH_Init:0000000000000000 sFLASH_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:951    .text.sFLASH_WriteDisable:0000000000000000 sFLASH_WriteDisable
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:766    .text.sFLASH_ReadID:0000000000000000 sFLASH_ReadID
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:845    .text.sFLASH_SendByte:0000000000000000 sFLASH_SendByte
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:116    .text.sFLASH_EraseSector:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:121    .text.sFLASH_EraseSector:0000000000000000 sFLASH_EraseSector
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:913    .text.sFLASH_WriteEnable:0000000000000000 sFLASH_WriteEnable
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:989    .text.sFLASH_WaitForWriteEnd:0000000000000000 sFLASH_WaitForWriteEnd
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:183    .text.sFLASH_EraseBulk:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:188    .text.sFLASH_EraseBulk:0000000000000000 sFLASH_EraseBulk
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:225    .text.sFLASH_WriteByte:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:230    .text.sFLASH_WriteByte:0000000000000000 sFLASH_WriteByte
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:298    .text.sFLASH_WritePage:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:303    .text.sFLASH_WritePage:0000000000000000 sFLASH_WritePage
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:438    .text.sFLASH_WriteBuffer:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:443    .text.sFLASH_WriteBuffer:0000000000000000 sFLASH_WriteBuffer
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:673    .text.sFLASH_ReadBuffer:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:678    .text.sFLASH_ReadBuffer:0000000000000000 sFLASH_ReadBuffer
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:761    .text.sFLASH_ReadID:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:840    .text.sFLASH_SendByte:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:908    .text.sFLASH_WriteEnable:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:946    .text.sFLASH_WriteDisable:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:984    .text.sFLASH_WaitForWriteEnd:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:1041   .rodata:0000000000000000 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:1042   .rodata:0000000000000000 .LC0
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:1045   .text.sFLASH_SelfTest:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cce9UOfD.s:1050   .text.sFLASH_SelfTest:0000000000000000 sFLASH_SelfTest
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.8991b0b359e9e91a82acb66692cb6642
                           .group:0000000000000000 wm4.platform_config.h.13.40eb885bb536156af5c03b48263b5da1
                           .group:0000000000000000 wm4.stm32f10x.h.57.69ab29c83f735418a543aa508b559235
                           .group:0000000000000000 wm4.core_cm3.h.32.8e21fbd14bb96c2b40e026c4d2c8fe1f
                           .group:0000000000000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:0000000000000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:0000000000000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:0000000000000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:0000000000000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:0000000000000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:0000000000000000 wm4.core_cm3.h.129.e08b7204181ea22e6a9fa84cb9ad0924
                           .group:0000000000000000 wm4.stm32f10x.h.532.91bd57525f6c583f00129a351847d405
                           .group:0000000000000000 wm4.stm32f10x_adc.h.89.9f2b285fa0070185d48a05b61a05798c
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.31.74a586c036c8ee5d9205c6728cc8d6ab
                           .group:0000000000000000 wm4.stm32f10x_dma.h.31.ef16218235edc52b414c0353f44b4bf0
                           .group:0000000000000000 wm4.stm32f10x_exti.h.31.b25bcb4f1a2daad39d2d7dfa4e901646
                           .group:0000000000000000 wm4.stm32f10x_flash.h.31.0203bc95b65c5396b67991e07a675efb
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.31.0a32659dbac1fc1055c7cbdc248963be
                           .group:0000000000000000 wm4.stm32f10x_i2c.h.31.93d7dc2d477856f119d957730d4c6f1c
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.31.9168b6921e0cf03b467c7ed90861c701
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.31.2ee3219a25ef4ced658f2fe9d8cd94aa
                           .group:0000000000000000 wm4.stm32f10x_rtc.h.31.00ba78fc0dbb06b6e6783a1e7fccf5a0
                           .group:0000000000000000 wm4.stm32f10x_spi.h.31.d2f6e4626887cabe8c98f3a185590a36
                           .group:0000000000000000 wm4.stm32f10x_tim.h.31.6c06f7f26e0864f9cd59597f46ca2c7c
                           .group:0000000000000000 wm4.stm32f10x_usart.h.31.28d75d6af05cefbbfa00cf30a7c8a335
                           .group:0000000000000000 wm4.misc.h.31.a89fba2040036f6f8c835a78a213e0cd
                           .group:0000000000000000 wm4.stm32f10x.h.8356.9fd2fa84655112ac7dfc5c88beeb383d
                           .group:0000000000000000 wm4.platform_config.h.55.c9956ee2c5ec010802c11a3a06087af4
                           .group:0000000000000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:0000000000000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:0000000000000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:0000000000000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.50.f5923f1950ced340a337f4676566f65a
                           .group:0000000000000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:0000000000000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:0000000000000000 wm4.cc3000_common.h.58.2af7f8f8921b8cb4b89883c25878e207
                           .group:0000000000000000 wm4.usb_conf.h.13.ae0ffce2e8d0e4c6b2724f8ae0ada8cf
                           .group:0000000000000000 wm4.hw_config.h.61.9aaf7ecb821816183829c116d76d82b5
                           .group:0000000000000000 wm4.sst25vf_spi.h.20.51b3171b29f6f7af7f6cc75ed7f465bf

UNDEFINED SYMBOLS
sFLASH_SPI_Init
GPIO_ResetBits
GPIO_SetBits
SPI_I2S_GetFlagStatus
SPI_I2S_SendData
SPI_I2S_ReceiveData
LED_On
LED_Toggle
Delay
LED_Off
